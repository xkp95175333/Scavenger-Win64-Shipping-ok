// Class Scavenger.BPFL_HUD
// Size: 0x28 (Inherited: 0x28)
struct UBPFL_HUD : UBlueprintFunctionLibrary {

	bool BetterProjectWorldToScreen(struct APlayerController* Player, struct FVector WorldPosition, struct FVector2D ScreenPosition, bool bTargetBehindCamera, bool bPlayerViewportRelative); // Function Scavenger.BPFL_HUD.BetterProjectWorldToScreen // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.CaptureMask
// Size: 0x2b0 (Inherited: 0x288)
struct ACaptureMask : AActor {
	struct TArray<struct FName> RenderTags; // 0x288(0x10)
	struct FString RenderDirectory; // 0x298(0x10)
	struct UTextureRenderTarget2D* RenderTarget; // 0x2a8(0x08)

	void CaptureRenderMasks(); // Function Scavenger.CaptureMask.CaptureRenderMasks // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityDebugHUD
// Size: 0x438 (Inherited: 0x378)
struct AS_AbilityDebugHUD : AHUD {
	char pad_378[0xc0]; // 0x378(0xc0)
};

// Class Scavenger.S_AbilitySystemBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_AbilitySystemBlueprintLibrary : UBlueprintFunctionLibrary {

	float GetMaxArmorLevelFromActor(struct AActor* Actor); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetMaxArmorLevelFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetDamageResistanceFromActor(struct AActor* Actor); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetDamageResistanceFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetDamageMultiplierFromActor(struct AActor* Actor, struct AS_WeaponTriggerableAttachment* weaponAttachment); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetDamageMultiplierFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_AttributeSetBase* GetAttributeSet(struct UAbilitySystemComponent* AbilitySystemComponent); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetAttributeSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetArmorLevelFromActorWithNewStat(struct AActor* Actor, float newArmorStat); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetArmorLevelFromActorWithNewStat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetArmorLevelFromActor(struct AActor* Actor); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetArmorLevelFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetArmorDamageResistanceFromActor(struct AActor* Actor); // Function Scavenger.S_AbilitySystemBlueprintLibrary.GetArmorDamageResistanceFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilitySystemComponent
// Size: 0x1418 (Inherited: 0x1348)
struct US_AbilitySystemComponent : UAbilitySystemComponent {
	char pad_1348[0x70]; // 0x1348(0x70)
	struct FMulticastInlineDelegate OnAbilityCooldownExpired; // 0x13b8(0x10)
	struct FMulticastInlineDelegate OnAbilityDurationExpired; // 0x13c8(0x10)
	struct FMulticastInlineDelegate OnAbilityActivated; // 0x13d8(0x10)
	struct TArray<struct FS_AbilityHandleNamePair> m_namedAbilities; // 0x13e8(0x10)
	struct TArray<struct FS_AbilityTimer> m_abilityTimers; // 0x13f8(0x10)
	char pad_1408[0x8]; // 0x1408(0x08)
	struct UGameplayEffect* AbilityCooldownEffect; // 0x1410(0x08)

	bool TryActivateAbilityByName(struct FName AbilityName, bool bAllowRemoteActivation); // Function Scavenger.S_AbilitySystemComponent.TryActivateAbilityByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsAbilityActiveByName(struct FName AbilityName); // Function Scavenger.S_AbilitySystemComponent.IsAbilityActiveByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetMaxAbilityTimerTime(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.GetMaxAbilityTimerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool DoesAbilityTimerAllowActivation(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.DoesAbilityTimerAllowActivation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void CrossServer_ApplyGameplayEffectSpecToSelfRemote(struct FGameplayEffectSpecForCrossServer GameplayEffect, struct FPredictionKey PredictionKey); // Function Scavenger.S_AbilitySystemComponent.CrossServer_ApplyGameplayEffectSpecToSelfRemote // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	bool CanActivateAbilityByName(struct FName AbilityName); // Function Scavenger.S_AbilitySystemComponent.CanActivateAbilityByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BP_ApplyGameplayEffectToSelfRemote(struct UGameplayEffect* GameplayEffectClass, float Level, struct FGameplayEffectContextHandle EffectContext); // Function Scavenger.S_AbilitySystemComponent.BP_ApplyGameplayEffectToSelfRemote // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AbilityTimerSetActive(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.AbilityTimerSetActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AbilityTimerGetState(enum class ES_AbilityTimerIndex TimerIndex, enum class ES_AbilityTimerState TimerState, float RemainingTime); // Function Scavenger.S_AbilitySystemComponent.AbilityTimerGetState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void AbilityTimerClear(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.AbilityTimerClear // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityDurationStart(enum class ES_AbilityTimerIndex TimerIndex, float Duration); // Function Scavenger.S_AbilitySystemComponent.AbilityDurationStart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityDurationForceEnd(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.AbilityDurationForceEnd // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityDurationAddTime(enum class ES_AbilityTimerIndex TimerIndex, float Duration); // Function Scavenger.S_AbilitySystemComponent.AbilityDurationAddTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityCooldownStart(enum class ES_AbilityTimerIndex TimerIndex, float Duration); // Function Scavenger.S_AbilitySystemComponent.AbilityCooldownStart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityCooldownForceEnd(enum class ES_AbilityTimerIndex TimerIndex); // Function Scavenger.S_AbilitySystemComponent.AbilityCooldownForceEnd // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AbilityCooldownAddTime(enum class ES_AbilityTimerIndex TimerIndex, float Duration); // Function Scavenger.S_AbilitySystemComponent.AbilityCooldownAddTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_AssassinationPositioningTask
// Size: 0x80 (Inherited: 0x80)
struct US_AbilityTask_AssassinationPositioningTask : UAbilityTask {
};

// Class Scavenger.S_AbilityTask_AssassinationSyncMontage
// Size: 0x90 (Inherited: 0x80)
struct US_AbilityTask_AssassinationSyncMontage : UAbilityTask {
	struct UAnimMontage* AttackerMontage; // 0x80(0x08)
	struct UAnimMontage* VictimMontage; // 0x88(0x08)
};

// Class Scavenger.S_AbilityTask_KeeperTaskBase
// Size: 0xa8 (Inherited: 0x80)
struct US_AbilityTask_KeeperTaskBase : UAbilityTask {
	struct AS_PlayerCharacter* OwningPlayer; // 0x80(0x08)
	struct AS_Keeper* OwningKeeper; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct FString InstanceNameAsString; // 0x98(0x10)
};

// Class Scavenger.S_AbilityTask_FaceKeeperAtLocation
// Size: 0xd0 (Inherited: 0xa8)
struct US_AbilityTask_FaceKeeperAtLocation : US_AbilityTask_KeeperTaskBase {
	struct FMulticastInlineDelegate OnFaced; // 0xa8(0x10)
	struct FVector TargetLocation; // 0xb8(0x0c)
	float InterpolationSpeed; // 0xc4(0x04)
	bool ShouldEndTaskOnFaced; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	struct US_AbilityTask_FaceKeeperAtLocation* KeeperFaceLocation(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, struct FVector locationToFace, float facingInterpolationSpeed, bool endTaskWhenFaced); // Function Scavenger.S_AbilityTask_FaceKeeperAtLocation.KeeperFaceLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_FaceKeeperAtActor
// Size: 0xe8 (Inherited: 0xd0)
struct US_AbilityTask_FaceKeeperAtActor : US_AbilityTask_FaceKeeperAtLocation {
	struct AActor* TargetActor; // 0xd0(0x08)
	struct FVector OffsetFromActor; // 0xd8(0x0c)
	char pad_E4[0x4]; // 0xe4(0x04)

	struct US_AbilityTask_FaceKeeperAtActor* KeeperFaceActor(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, struct AActor* actorToFace, struct FVector optionalOffsetFromActor, float facingInterpolationSpeed, bool endTaskWhenFaced); // Function Scavenger.S_AbilityTask_FaceKeeperAtActor.KeeperFaceActor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_HoldKeeperLocationAndRotation
// Size: 0xc0 (Inherited: 0xa8)
struct US_AbilityTask_HoldKeeperLocationAndRotation : US_AbilityTask_KeeperTaskBase {
	struct FVector keeperLocation; // 0xa8(0x0c)
	struct FVector keeperFaceTowardsLocation; // 0xb4(0x0c)

	struct US_AbilityTask_HoldKeeperLocationAndRotation* HoldKeeperLocationAndRotation(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, struct FVector keeperLocation, struct FVector keeperFaceTowardsLocation); // Function Scavenger.S_AbilityTask_HoldKeeperLocationAndRotation.HoldKeeperLocationAndRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_MoveKeeperToLocation
// Size: 0xe0 (Inherited: 0xa8)
struct US_AbilityTask_MoveKeeperToLocation : US_AbilityTask_KeeperTaskBase {
	struct FMulticastInlineDelegate OnLocationReached; // 0xa8(0x10)
	struct FVector StartLocation; // 0xb8(0x0c)
	struct FVector TargetLocation; // 0xc4(0x0c)
	float expectedDuration; // 0xd0(0x04)
	char pad_D4[0xc]; // 0xd4(0x0c)

	struct US_AbilityTask_MoveKeeperToLocation* KeeperMoveToLocation(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, struct FVector TargetLocation, float expectedDuration); // Function Scavenger.S_AbilityTask_MoveKeeperToLocation.KeeperMoveToLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_PlayMontageAndWait
// Size: 0xe0 (Inherited: 0x80)
struct US_AbilityTask_PlayMontageAndWait : UAbilityTask {
	struct FMulticastInlineDelegate OnCompleted; // 0x80(0x10)
	struct FMulticastInlineDelegate OnBlendOut; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct UAnimMontage* Montage; // 0xc0(0x08)
	char pad_C8[0x18]; // 0xc8(0x18)

	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AbilityTask_PlayMontageAndWait.OnMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnMontageBlendingOut(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AbilityTask_PlayMontageAndWait.OnMontageBlendingOut // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_AbilityTask_PlayMontageAndWait* CreatePlayMontageAndWaitTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct UAnimMontage* Montage, float Rate, struct FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale); // Function Scavenger.S_AbilityTask_PlayMontageAndWait.CreatePlayMontageAndWaitTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_PlayMontageOnKeeper
// Size: 0x100 (Inherited: 0xa8)
struct US_AbilityTask_PlayMontageOnKeeper : US_AbilityTask_KeeperTaskBase {
	struct FMulticastInlineDelegate OnCompleted; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnBlendOut; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xd8(0x10)
	struct UAnimMontage* Montage; // 0xe8(0x08)
	struct FName StartSection; // 0xf0(0x08)
	float Rate; // 0xf8(0x04)
	float AnimRootMotionTranslationScale; // 0xfc(0x04)

	struct US_AbilityTask_PlayMontageOnKeeper* PlayMontageOnKeeper(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, struct UAnimMontage* MontageToPlay, float Rate, struct FName StartSection, float AnimRootMotionTranslationScale); // Function Scavenger.S_AbilityTask_PlayMontageOnKeeper.PlayMontageOnKeeper // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMontageInterrupted(); // Function Scavenger.S_AbilityTask_PlayMontageOnKeeper.OnMontageInterrupted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AbilityTask_PlayMontageOnKeeper.OnMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnMontageCancelled(); // Function Scavenger.S_AbilityTask_PlayMontageOnKeeper.OnMontageCancelled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnMontageBlendingOut(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AbilityTask_PlayMontageOnKeeper.OnMontageBlendingOut // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_ReturnKeeperToDefaultFacing
// Size: 0xc0 (Inherited: 0xa8)
struct US_AbilityTask_ReturnKeeperToDefaultFacing : US_AbilityTask_KeeperTaskBase {
	struct FMulticastInlineDelegate OnFaced; // 0xa8(0x10)
	float InterpolationSpeed; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)

	struct US_AbilityTask_ReturnKeeperToDefaultFacing* KeeperReturnToDefaultFacing(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct AS_PlayerCharacter* Player, float facingInterpolationSpeed); // Function Scavenger.S_AbilityTask_ReturnKeeperToDefaultFacing.KeeperReturnToDefaultFacing // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AbilityTask_WaitToLand
// Size: 0x90 (Inherited: 0x80)
struct US_AbilityTask_WaitToLand : UAbilityTask {
	struct FMulticastInlineDelegate OnLanded; // 0x80(0x10)

	struct US_AbilityTask_WaitToLand* CreateWaitToLandTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName); // Function Scavenger.S_AbilityTask_WaitToLand.CreateWaitToLandTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AccountCheatsUtility
// Size: 0x28 (Inherited: 0x28)
struct US_AccountCheatsUtility : UBlueprintFunctionLibrary {

	void CheatResetAccountState(struct UWorld* World, struct APlayerController* PlayerController); // Function Scavenger.S_AccountCheatsUtility.CheatResetAccountState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantOnlineCurrency(struct UWorld* World, struct APlayerController* PlayerController, int32_t Count); // Function Scavenger.S_AccountCheatsUtility.CheatGrantOnlineCurrency // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantOneClassLevel(struct UWorld* World, struct APlayerController* PlayerController, struct FName ClassId); // Function Scavenger.S_AccountCheatsUtility.CheatGrantOneClassLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantMaxClassLevel(struct UWorld* World, struct APlayerController* PlayerController, struct FName ClassId); // Function Scavenger.S_AccountCheatsUtility.CheatGrantMaxClassLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantCharacter(struct UWorld* World, struct APlayerController* PlayerController, struct FName ClassId); // Function Scavenger.S_AccountCheatsUtility.CheatGrantCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllSalvageItems(struct UWorld* World, struct APlayerController* PlayerController, int32_t Count); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllSalvageItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllResearchTiers(struct UWorld* World, struct APlayerController* PlayerController); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllResearchTiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllResearchResources(struct UWorld* World, struct APlayerController* PlayerController, int32_t Count); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllResearchResources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllRecipesForLoadoutSlotType(struct UWorld* World, struct APlayerController* PlayerController, enum class ES_LoadoutSlotType loadoutSlotType); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllRecipesForLoadoutSlotType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllCosmeticItemsThatBeginWith(struct UWorld* World, struct APlayerController* PlayerController, struct FString Prefix); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllCosmeticItemsThatBeginWith // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllCosmeticItems(struct UWorld* World, struct APlayerController* PlayerController); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllCosmeticItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllClassSpecificWeapons(struct UWorld* World, struct APlayerController* PlayerController, struct FName ClassId); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllClassSpecificWeapons // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllClassSpecificTalents(struct UWorld* World, struct APlayerController* PlayerController, struct FName ClassId); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllClassSpecificTalents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantAllCharacters(struct UWorld* World, struct APlayerController* PlayerController); // Function Scavenger.S_AccountCheatsUtility.CheatGrantAllCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PostMatchPhase
// Size: 0x58 (Inherited: 0x28)
struct US_PostMatchPhase : UObject {
	struct FMulticastInlineDelegate OnPhaseStarted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnPhaseEnded; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
	enum class ES_ResummonedPhaseState ResummonedState; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	void RunSessionPhase(struct FS_MatchRecord matchRecord); // Function Scavenger.S_PostMatchPhase.RunSessionPhase // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RunMainMenuPhase(struct FS_GameReportCardForPlayer playerReportCard, struct FS_RewardPresentation playerRewards); // Function Scavenger.S_PostMatchPhase.RunMainMenuPhase // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MoveToNextStep(); // Function Scavenger.S_PostMatchPhase.MoveToNextStep // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsPhaseRunning(); // Function Scavenger.S_PostMatchPhase.IsPhaseRunning // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EndPhase(); // Function Scavenger.S_PostMatchPhase.EndPhase // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AccountProgressionPhase
// Size: 0x250 (Inherited: 0x58)
struct US_AccountProgressionPhase : US_PostMatchPhase {
	SoftClassProperty AccountProgressionSubscreen; // 0x58(0x28)
	SoftClassProperty AccountRewardsSubscreen; // 0x80(0x28)
	float StepDelay; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct US_WidgetAccountProgressionSubscreen* m_accountProgressionSubscreen; // 0xb0(0x08)
	struct FS_GameReportCardForPlayer m_reportCard; // 0xb8(0x118)
	struct FS_RewardPresentation m_playerRewards; // 0x1d0(0x78)
	struct US_WidgetOnlineRewardGrants* m_accountRewardsSubscreen; // 0x248(0x08)

	void NotifyPlayerLevelUp(); // Function Scavenger.S_AccountProgressionPhase.NotifyPlayerLevelUp // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnRewardSubscreenStepEnded(); // Function Scavenger.S_AccountProgressionPhase.HandleOnRewardSubscreenStepEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnProgressionSubscreenStepEnded(); // Function Scavenger.S_AccountProgressionPhase.HandleOnProgressionSubscreenStepEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAccountRewardsSubscreenCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_AccountProgressionPhase.HandleAccountRewardsSubscreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAccountProgressionSubscreenCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_AccountProgressionPhase.HandleAccountProgressionSubscreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameplayAbility
// Size: 0x3b8 (Inherited: 0x3b8)
struct US_GameplayAbility : UGameplayAbility {

	void NotifyGiveAbility_BP(struct FGameplayAbilityActorInfo GameplayAbilityActorInfo, struct FGameplayAbilitySpec GameplayAbilitySpec); // Function Scavenger.S_GameplayAbility.NotifyGiveAbility_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ActionAbility
// Size: 0x3c0 (Inherited: 0x3b8)
struct US_ActionAbility : US_GameplayAbility {
	char pad_3B8[0x8]; // 0x3b8(0x08)
};

// Class Scavenger.S_ActionConfiguration
// Size: 0x2d8 (Inherited: 0x30)
struct US_ActionConfiguration : UDataAsset {
	struct UDataTable* m_actionDataTable; // 0x30(0x08)
	enum class ES_ActionQueueLength m_maxQueueLength[0x10]; // 0x38(0x10)
	float m_maxRemoteQueueLength[0x10]; // 0x48(0x40)
	enum class ES_MultiActionCondition m_multiActionCondition[0x10]; // 0x88(0x10)
	float m_actionCooldownTimes[0x10]; // 0x98(0x40)
	struct FS_ActionConfig m_actionList[0x10]; // 0xd8(0x200)
};

// Class Scavenger.S_ActionHandler
// Size: 0x138 (Inherited: 0xb0)
struct US_ActionHandler : UActorComponent {
	bool bDoMatrixChecksOnNonLocal; // 0xb0(0x01)
	char pad_B1[0x47]; // 0xb1(0x47)
	struct TArray<struct FS_QueuedAction> m_queuedActions; // 0xf8(0x10)
	char pad_108[0x30]; // 0x108(0x30)
};

// Class Scavenger.S_ActionManager
// Size: 0x28 (Inherited: 0x28)
struct US_ActionManager : UInterface {

	void UnlockAction(enum class ES_ActionID ActionType); // Function Scavenger.S_ActionManager.UnlockAction // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_TryActionResult TryAction(struct FS_ActionPayload ActionPayload); // Function Scavenger.S_ActionManager.TryAction // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopAction(struct FS_ActionHandle ActionHandle); // Function Scavenger.S_ActionManager.StopAction // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetActions(); // Function Scavenger.S_ActionManager.ResetActions // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LockAction(enum class ES_ActionID ActionType); // Function Scavenger.S_ActionManager.LockAction // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetActionPayload_BP(struct FS_ActionHandle ActionHandle, struct FS_ActionPayload OutActionPayload); // Function Scavenger.S_ActionManager.GetActionPayload_BP // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanDoAction(struct FS_ActionPayload ActionPayload); // Function Scavenger.S_ActionManager.CanDoAction // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddOnRemovedFromQueueListener(struct FS_ActionHandle ActionHandle, struct FDelegate RemovedFromQueueDelegate); // Function Scavenger.S_ActionManager.AddOnRemovedFromQueueListener // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddOnInterruptListener(struct FS_ActionHandle ActionHandle, struct FDelegate InterruptDelegate); // Function Scavenger.S_ActionManager.AddOnInterruptListener // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddOnCompleteListener(struct FS_ActionHandle ActionHandle, struct FDelegate CompleteDelegate); // Function Scavenger.S_ActionManager.AddOnCompleteListener // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddOnActiveListener(struct FS_ActionHandle ActionHandle, struct FDelegate ActiveDelegate); // Function Scavenger.S_ActionManager.AddOnActiveListener // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddOnActionQueuedListener(struct FDelegate ActionQueuedDelegate); // Function Scavenger.S_ActionManager.AddOnActionQueuedListener // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddOnActionActivatedListener(struct FDelegate ActionActivatedDelegate); // Function Scavenger.S_ActionManager.AddOnActionActivatedListener // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ActionHelpers
// Size: 0x28 (Inherited: 0x28)
struct US_ActionHelpers : UBlueprintFunctionLibrary {

	struct FS_ActionPayload MakeUseItemPayload(int32_t Identifier, struct US_ItemData* ItemData, enum class ES_UseItemActionOrigin Origin); // Function Scavenger.S_ActionHelpers.MakeUseItemPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeSwapWeaponPayload(enum class ES_WeaponSlot desiredWeaponSlot); // Function Scavenger.S_ActionHelpers.MakeSwapWeaponPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeSlidePayload(bool bJumpSlide, bool bFellOutOfLastSlide, bool bPerfectSlide); // Function Scavenger.S_ActionHelpers.MakeSlidePayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeReloadPayload(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, bool bIsExplicit); // Function Scavenger.S_ActionHelpers.MakeReloadPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeMeleeAttackPayload(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_ActionHelpers.MakeMeleeAttackPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeInteractPayload(enum class ES_Interaction interactType); // Function Scavenger.S_ActionHelpers.MakeInteractPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeFireGunPayload(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_ActionHelpers.MakeFireGunPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeEmotePayload(struct FName emoteDataNameId); // Function Scavenger.S_ActionHelpers.MakeEmotePayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ActionPayload MakeADSPayload(); // Function Scavenger.S_ActionHelpers.MakeADSPayload // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AIAudioEventType
// Size: 0x28 (Inherited: 0x28)
struct US_AIAudioEventType : UObject {
};

// Class Scavenger.S_AIAudioManagedGroup
// Size: 0x58 (Inherited: 0x28)
struct US_AIAudioManagedGroup : UObject {
	int32_t MaxConcurrent; // 0x28(0x04)
	int32_t RateLimitNum; // 0x2c(0x04)
	float RateLimitTimeWindowS; // 0x30(0x04)
	float MaxDistance; // 0x34(0x04)
	struct TArray<struct FS_GroupPlayingSound> PlayingSounds; // 0x38(0x10)
	struct TArray<struct FS_GroupPlayingSound> PreviousSounds; // 0x48(0x10)
};

// Class Scavenger.S_AIAudioComponent
// Size: 0x1b8 (Inherited: 0xb0)
struct US_AIAudioComponent : UActorComponent {
	struct UAkAudioEvent* DeathEvent; // 0xb0(0x08)
	struct TArray<struct FS_AITransitionStateSound> TransitionSounds; // 0xb8(0x10)
	struct TArray<struct FS_EventSoundGroup> EventSounds; // 0xc8(0x10)
	struct TArray<struct FS_AIStateSound> StateSounds; // 0xd8(0x10)
	int32_t PriorityBoost; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<enum class ES_AIAudioState> StateStack; // 0xf0(0x10)
	enum class ES_AIAudioState CurrentState; // 0x100(0x01)
	char pad_101[0x1f]; // 0x101(0x1f)
	struct TArray<struct FS_ServerQueuedAISound> ServerQueuedSounds; // 0x120(0x10)
	struct FS_ClientQueuedAISound ClientQueuedSound; // 0x130(0x38)
	struct FS_PlayingAISound ClientPlayingSound; // 0x168(0x38)
	char pad_1A0[0x10]; // 0x1a0(0x10)
	char m_sonicVariant; // 0x1b0(0x01)
	char pad_1B1[0x7]; // 0x1b1(0x07)

	void TriggerAiEvent(struct US_AIAudioEventType* AiEvent); // Function Scavenger.S_AIAudioComponent.TriggerAiEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuthorityTriggerAiEvent(struct US_AIAudioEventType* AiEvent); // Function Scavenger.S_AIAudioComponent.AuthorityTriggerAiEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AIAudioComponent_OnRollbackPredictivelyKilledCallback(struct AController* PredictiveInstigator); // Function Scavenger.S_AIAudioComponent.AIAudioComponent_OnRollbackPredictivelyKilledCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void AIAudioComponent_OnPredictivelyKilledCallback(struct AController* PredictiveInstigator, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool Critical); // Function Scavenger.S_AIAudioComponent.AIAudioComponent_OnPredictivelyKilledCallback // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void AIAudioComponent_OnDiedCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_AIAudioComponent.AIAudioComponent_OnDiedCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CharacterBase
// Size: 0x2220 (Inherited: 0x530)
struct AS_CharacterBase : ACharacter {
	char pad_530[0xa0]; // 0x530(0xa0)
	struct USC_CommandHandler* m_commandHandler; // 0x5d0(0x08)
	char pad_5D8[0x10]; // 0x5d8(0x10)
	struct US_WeaponSystem* m_weaponSystemComponent; // 0x5e8(0x08)
	char pad_5F0[0x18]; // 0x5f0(0x18)
	struct FS_EquipmentStateComponent EquipmentStateComponent; // 0x608(0x228)
	char pad_830[0x4]; // 0x830(0x04)
	int32_t m_selfDestructMontageIndex; // 0x834(0x04)
	char pad_838[0x10]; // 0x838(0x10)
	struct FMulticastInlineDelegate OnADSUpdated; // 0x848(0x10)
	struct FMulticastInlineDelegate OnCrouchUpdated; // 0x858(0x10)
	struct FS_MeleeAttackState m_meleeAttackState; // 0x868(0x50)
	struct TArray<struct FS_MeleeAttackerInfo> m_meleeAttackingMeInfo; // 0x8b8(0x10)
	struct FString CharacterMeshPath; // 0x8c8(0x10)
	struct TSoftObjectPtr<struct USkeletalMesh> CharacterMesh; // 0x8d8(0x28)
	struct FS_CosmeticLoadoutForReplication m_characterCosmeticLoadoutForReplication; // 0x900(0x10)
	struct FS_CosmeticLoadoutForReplication m_accountCosmeticLoadoutForReplication; // 0x910(0x10)
	struct FMulticastInlineDelegate OnCosmeticLoadoutChanged; // 0x920(0x10)
	struct FS_CosmeticLoadout m_characterCosmeticLoadout; // 0x930(0x50)
	struct FS_CosmeticLoadout m_accountCosmeticLoadout; // 0x980(0x50)
	char pad_9D0[0x41]; // 0x9d0(0x41)
	bool HasDynamicSnowAccumulation; // 0xa11(0x01)
	char pad_A12[0x6]; // 0xa12(0x06)
	struct US_SkinningManagerComponent* CachedSkinningManagerComponent; // 0xa18(0x08)
	char pad_A20[0x8]; // 0xa20(0x08)
	struct US_CosmeticSkinningComponent* m_cosmeticSkinningComponent; // 0xa28(0x08)
	char pad_A30[0x20]; // 0xa30(0x20)
	struct US_VFXManagerComponent* CachedVFXManagerComponent; // 0xa50(0x08)
	enum class ES_ShelterType ShelterState; // 0xa58(0x01)
	char pad_A59[0x17]; // 0xa59(0x17)
	bool m_bIsJumping; // 0xa70(0x01)
	char pad_A71[0x7]; // 0xa71(0x07)
	struct FS_ShelterInterfaceData ShelterData; // 0xa78(0x98)
	struct FMulticastInlineDelegate OnShelterStateChanged; // 0xb10(0x10)
	struct FMulticastInlineDelegate OnDamagedBy; // 0xb20(0x10)
	struct FMulticastInlineDelegate OnDownedBy; // 0xb30(0x10)
	struct FMulticastInlineDelegate OnTerminalBy; // 0xb40(0x10)
	struct FMulticastInlineDelegate OnKilledBy; // 0xb50(0x10)
	struct FMulticastInlineDelegate OnResurrectedBy; // 0xb60(0x10)
	struct FMulticastInlineDelegate OnRevivedBy; // 0xb70(0x10)
	struct FMulticastInlineDelegate OnStatsStateChangedBy; // 0xb80(0x10)
	struct FMulticastInlineDelegate OnItemAcquired; // 0xb90(0x10)
	struct FMulticastInlineDelegate OnItemDestroyed; // 0xba0(0x10)
	struct FMulticastInlineDelegate OnItemDropped; // 0xbb0(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xbc0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xbd0(0x10)
	struct FMulticastInlineDelegate OnItemUsed; // 0xbe0(0x10)
	struct FMulticastInlineDelegate OnCocooned; // 0xbf0(0x10)
	struct FMulticastInlineDelegate OnFreedFromCocoon; // 0xc00(0x10)
	struct FMulticastInlineDelegate OnKilledInCocoon; // 0xc10(0x10)
	struct FMulticastInlineDelegate OnExtracting; // 0xc20(0x10)
	struct FMulticastInlineDelegate OnExtracted; // 0xc30(0x10)
	struct FMulticastInlineDelegate OnSelfDestructCompleted; // 0xc40(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0xc50(0x10)
	struct FMulticastInlineDelegate OnPreTakeDamage; // 0xc60(0x10)
	struct FMulticastInlineDelegate OnPreTakePointDamage; // 0xc70(0x10)
	struct FMulticastInlineDelegate OnPostDealDamage; // 0xc80(0x10)
	struct FMulticastInlineDelegate OnPostTakeDamage; // 0xc90(0x10)
	struct FMulticastInlineDelegate OnPostTakePointDamage; // 0xca0(0x10)
	struct FMulticastInlineDelegate OnDealCriticalDamage; // 0xcb0(0x10)
	struct FMulticastInlineDelegate OnPoiseZero; // 0xcc0(0x10)
	struct FMulticastInlineDelegate OnFootDown; // 0xcd0(0x10)
	struct FMulticastInlineDelegate OnStormCategoryChanged; // 0xce0(0x10)
	struct FMulticastInlineDelegate OnSkeletalMeshChanged; // 0xcf0(0x10)
	char pad_D00[0x14]; // 0xd00(0x14)
	bool m_ragdollPostExecution; // 0xd14(0x01)
	char pad_D15[0x3]; // 0xd15(0x03)
	float RagdollOnDeathOrTerminalDelay; // 0xd18(0x04)
	float RagdollOnDeathOrTerminalDelayDuringExecution; // 0xd1c(0x04)
	float RagdollOnDeathSpectatorWaitInSeconds; // 0xd20(0x04)
	bool bDisableRagdollEntirely; // 0xd24(0x01)
	char pad_D25[0x3]; // 0xd25(0x03)
	float BaseThreatLevel; // 0xd28(0x04)
	struct FS_Visibility Visibility; // 0xd2c(0x14)
	struct FS_ThreatLevelMidnight ThreatLevelMidnight; // 0xd40(0x1c)
	struct FRotator GrenadeSpawnRotation; // 0xd5c(0x0c)
	struct FS_ProjectileSpawnPointInfo ProjectileSpawnPoint[0x4]; // 0xd68(0xc0)
	float ProjectileSpawnPointHeightOffset[0x4]; // 0xe28(0x10)
	struct FName SelfDestructMontageKey; // 0xe38(0x08)
	float MaximumPoise; // 0xe40(0x04)
	char pad_E44[0x4]; // 0xe44(0x04)
	float PoiseRefreshRate; // 0xe48(0x04)
	float PoiseCooldownTime; // 0xe4c(0x04)
	char pad_E50[0x8]; // 0xe50(0x08)
	struct FS_TimeBasedDamageTracker DamageDoneToCharacters; // 0xe58(0x28)
	struct FS_TimeBasedDamageTracker DamageRecievedFromCharacters; // 0xe80(0x28)
	struct FName RootBoneName; // 0xea8(0x08)
	struct FName PelvisBoneName; // 0xeb0(0x08)
	struct FName Spine1BoneName; // 0xeb8(0x08)
	struct FName Spine2BoneName; // 0xec0(0x08)
	struct AS_CharacterBase* AbilityOwnerToLastHitThisCharacter; // 0xec8(0x08)
	bool bHideDamageNumbersIfZero; // 0xed0(0x01)
	char pad_ED1[0x7]; // 0xed1(0x07)
	struct UDataTable* Impacts; // 0xed8(0x08)
	struct FS_FeedbackAudio Override1pTo3pHitFeedback; // 0xee0(0x100)
	struct FS_3PFeedbackAudio Override3pTo1pHitFeedback; // 0xfe0(0x140)
	struct FS_3PFeedbackAudio Override3pTo3pHitFeedback; // 0x1120(0x140)
	struct FS_LookAtInfo LookAtInfo; // 0x1260(0x10)
	struct FMulticastInlineDelegate OnSeatEntered; // 0x1270(0x10)
	struct FMulticastInlineDelegate OnSeatExited; // 0x1280(0x10)
	struct FText m_displayName; // 0x1290(0x18)
	bool bEnableDecalsOnCharacter; // 0x12a8(0x01)
	enum class ES_StormCategory m_IsInStormCategory; // 0x12a9(0x01)
	bool m_isInSmoke; // 0x12aa(0x01)
	char pad_12AB[0x5]; // 0x12ab(0x05)
	struct US_LandscapeDeformerAgent* m_landscapeDeformerAgent; // 0x12b0(0x08)
	struct FScavengerTeamID TeamInfo; // 0x12b8(0x01)
	char pad_12B9[0x7]; // 0x12b9(0x07)
	struct UPhysicalMaterial* CharacterPhysicsMaterial; // 0x12c0(0x08)
	struct US_AbilitySystemComponent* AbilitySystemComponent; // 0x12c8(0x08)
	struct US_FoleyComponent* FoleyComponent; // 0x12d0(0x08)
	struct US_FootstepComponent* FootstepComponent; // 0x12d8(0x08)
	struct UAkComponent* AkComponent; // 0x12e0(0x08)
	struct US_AttributeSetCharacter* AttributeSetCharacter; // 0x12e8(0x08)
	struct UDataTable* AttributeInitializationDataTable; // 0x12f0(0x08)
	struct FS_AbilitySet InitialAbilities; // 0x12f8(0x10)
	struct TArray<struct UGameplayEffect*> InitialGameplayEffects; // 0x1308(0x10)
	struct TArray<struct FName> BonesAllowingAttachingProjectiles; // 0x1318(0x10)
	struct FS_MontageCatalogue CharacterAnimationMontages; // 0x1328(0x50)
	struct UDataTable* CharacterMontageOverrideTable; // 0x1378(0x08)
	struct US_CharacterMontagePackage* AttackMontages; // 0x1380(0x08)
	float RagdollValidImpactTime; // 0x1388(0x04)
	float RagdollBaseImpactScalar; // 0x138c(0x04)
	struct UDataTable* PhysicalSurfaceOverrideDataTable; // 0x1390(0x08)
	struct US_StatsComponent* m_statsComponent; // 0x1398(0x08)
	bool DisableClientPhysics; // 0x13a0(0x01)
	bool DisableServerPhysics; // 0x13a1(0x01)
	char pad_13A2[0x2]; // 0x13a2(0x02)
	struct FName InitialCollisionProfile; // 0x13a4(0x08)
	char pad_13AC[0x4]; // 0x13ac(0x04)
	bool m_replicatedADSIsActive; // 0x13b0(0x01)
	char pad_13B1[0x7]; // 0x13b1(0x07)
	struct TArray<struct US_KungFuAttacker*> m_activeMeleeAttackers; // 0x13b8(0x10)
	struct TArray<struct US_KungFuAttacker*> m_activeMediumAttackers; // 0x13c8(0x10)
	struct TArray<struct US_KungFuAttacker*> m_activeExtendedAttackers; // 0x13d8(0x10)
	struct TArray<struct US_KungFuAttacker*> m_attackersToBecomeInactive; // 0x13e8(0x10)
	char pad_13F8[0x230]; // 0x13f8(0x230)
	int8_t m_notAITargetableCounter; // 0x1628(0x01)
	char pad_1629[0x7]; // 0x1629(0x07)
	struct AController* m_cachedController; // 0x1630(0x08)
	char pad_1638[0x8]; // 0x1638(0x08)
	struct FS_RepMontageState m_RepMontageState; // 0x1640(0x18)
	struct FS_RepMontageState m_lastRepMontageState; // 0x1658(0x18)
	char pad_1670[0x8]; // 0x1670(0x08)
	struct TArray<struct UAnimMontage*> m_currentPlayingAttackMontages; // 0x1678(0x10)
	struct UAnimMontage* WeaponRecoilMontage; // 0x1688(0x08)
	char pad_1690[0x8]; // 0x1690(0x08)
	bool bSnapPassengerTo90DegreeAim; // 0x1698(0x01)
	bool bLockPassengerRotationWhenSeated; // 0x1699(0x01)
	char pad_169A[0x46]; // 0x169a(0x46)
	struct FS_CachedLastDamageInfo m_cachedLastDamageInfo; // 0x16e0(0xa8)
	struct FRotator m_repClientAimRotation; // 0x1788(0x0c)
	char pad_1794[0xc]; // 0x1794(0x0c)
	struct UMaterialInterface* BloodSplatMaterial; // 0x17a0(0x08)
	float MaxCapsuleHitWidthPercent; // 0x17a8(0x04)
	char pad_17AC[0x4]; // 0x17ac(0x04)
	struct UMaterialInstanceDynamic* m_bloodSplatMaterialInstanceDynamic; // 0x17b0(0x08)
	char pad_17B8[0x698]; // 0x17b8(0x698)
	struct FMulticastInlineDelegate OnExecutionBegin; // 0x1e50(0x10)
	struct FMulticastInlineDelegate OnExecutionMontageEnded; // 0x1e60(0x10)
	struct FMulticastInlineDelegate OnEmoteBegin; // 0x1e70(0x10)
	struct FMulticastInlineDelegate OnEmoteEnd; // 0x1e80(0x10)
	char pad_1E90[0x18]; // 0x1e90(0x18)
	struct FVector m_executionStartLocation; // 0x1ea8(0x0c)
	struct FVector m_executionGoalLocation; // 0x1eb4(0x0c)
	struct FRotator m_executionStartRotation; // 0x1ec0(0x0c)
	struct FRotator m_executionGoalRotation; // 0x1ecc(0x0c)
	struct AS_CharacterBase* m_executor; // 0x1ed8(0x08)
	char pad_1EE0[0x8]; // 0x1ee0(0x08)
	struct TArray<enum class ES_ExecutionOverride> ExecutionOverridePriorityOrder; // 0x1ee8(0x10)
	char pad_1EF8[0x1c0]; // 0x1ef8(0x1c0)
	struct AS_CharacterBase* m_executionTarget; // 0x20b8(0x08)
	char pad_20C0[0x8]; // 0x20c0(0x08)
	struct UDataTable* ExecutionMontageDataTable; // 0x20c8(0x08)
	struct UDataTable* EmoteMontageDataTable; // 0x20d0(0x08)
	struct UDataTable* WeaponScaleDataTable; // 0x20d8(0x08)
	char pad_20E0[0x40]; // 0x20e0(0x40)
	struct US_SpottingComponent* m_spottingComponent; // 0x2120(0x08)
	char pad_2128[0x68]; // 0x2128(0x68)
	float VFXMaxSnowAccumulationNoShelter; // 0x2190(0x04)
	float VFXMaxSnowAccumulationCraterShelter; // 0x2194(0x04)
	float VFXMaxSnowAccumulationPartialShelter; // 0x2198(0x04)
	float VFXMaxSnowAccumulationFullShelter; // 0x219c(0x04)
	float VFXMaxSnowAccumulationLegacy; // 0x21a0(0x04)
	bool VFXSnowUseStorminess; // 0x21a4(0x01)
	char pad_21A5[0x3]; // 0x21a5(0x03)
	float VFXInStormSnowAccumulationPerSecond; // 0x21a8(0x04)
	float VFXLowerSnowAccumulationPerSecond; // 0x21ac(0x04)
	float VFXMediumSnowAccumulationPerSecond; // 0x21b0(0x04)
	float VFXCraterShelterSnowDissipationPerSecond; // 0x21b4(0x04)
	float VFXPartialShelterSnowDissipationPerSecond; // 0x21b8(0x04)
	float VFXFullShelterSnowDissipationPerSecond; // 0x21bc(0x04)
	float VFXHeatSourceSnowDissipationPerSecond; // 0x21c0(0x04)
	bool VFXGooEnabled; // 0x21c4(0x01)
	char pad_21C5[0x3]; // 0x21c5(0x03)
	float VFXMaxGooAccumulation; // 0x21c8(0x04)
	float VFXGooAccumulationPerSecond; // 0x21cc(0x04)
	float VFXGooDissipationPerSecond; // 0x21d0(0x04)
	struct FFloatInterval VFXDamageInflictedMinMax; // 0x21d4(0x08)
	bool VFXWoundsEnabled; // 0x21dc(0x01)
	char pad_21DD[0x3]; // 0x21dd(0x03)
	struct FFloatInterval VFXWoundInitialSizeMinMax; // 0x21e0(0x08)
	struct FFloatInterval VFXWoundFinalSizeMinMax; // 0x21e8(0x08)
	struct FFloatInterval VFXWoundTimeToMaxSizeMinMax; // 0x21f0(0x08)
	float VFXWoundTimeBeforeFadingOut; // 0x21f8(0x04)
	float VFXWoundFadeOutDuration; // 0x21fc(0x04)
	float VFXWoundOpacityMin; // 0x2200(0x04)
	char pad_2204[0x4]; // 0x2204(0x04)
	struct US_ShieldComponent* ShieldComponent; // 0x2208(0x08)
	char pad_2210[0x8]; // 0x2210(0x08)
	struct US_ManagedSoundBankComponent* m_managedSoundBankComponent; // 0x2218(0x08)

	void WeaponSlotStateChanged(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* weapon, enum class ES_WeaponSlotState weaponSlotState); // Function Scavenger.S_CharacterBase.WeaponSlotStateChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void WeaponSlotChanged(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* OldValue, struct AS_WeaponBase* NewValue); // Function Scavenger.S_CharacterBase.WeaponSlotChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void VFXInflictDamageWithLocation(float DamageAmount, struct FVector HitLocation); // Function Scavenger.S_CharacterBase.VFXInflictDamageWithLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void VFXInflictDamageWithHitResult(float DamageAmount, struct FHitResult HitResult); // Function Scavenger.S_CharacterBase.VFXInflictDamageWithHitResult // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void VFXEnableWounds(bool bEnable); // Function Scavenger.S_CharacterBase.VFXEnableWounds // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnCrouchOnRevivingStopped(); // Function Scavenger.S_CharacterBase.UnCrouchOnRevivingStopped // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleHolsterWeapon(); // Function Scavenger.S_CharacterBase.ToggleHolsterWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ThrewGrenade(); // Function Scavenger.S_CharacterBase.ThrewGrenade // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopReplicatedMontage(float BlendOutTime); // Function Scavenger.S_CharacterBase.StopReplicatedMontage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithMeshFilters(struct FName ShellName, struct UMaterialInterface* Material, struct TArray<struct FString> MeshFilters); // Function Scavenger.S_CharacterBase.ShellSpawnWithMeshFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithMaterialFilters(struct FName ShellName, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters); // Function Scavenger.S_CharacterBase.ShellSpawnWithMaterialFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithFilters(struct FName ShellName, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters, struct TArray<struct FString> MeshFilters); // Function Scavenger.S_CharacterBase.ShellSpawnWithFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawn(struct FName ShellName, struct UMaterialInterface* Material); // Function Scavenger.S_CharacterBase.ShellSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellGetIdByName(struct FName ShellName); // Function Scavenger.S_CharacterBase.ShellGetIdByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellDestroyById(int32_t ShellId); // Function Scavenger.S_CharacterBase.ShellDestroyById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellDestroy(struct FName ShellName); // Function Scavenger.S_CharacterBase.ShellDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetScavengerTeam(enum class ES_ScavAITeams TeamId); // Function Scavenger.S_CharacterBase.SetScavengerTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRagdoll(bool bEnabled); // Function Scavenger.S_CharacterBase.SetRagdoll // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOverridePriorityOrderForExecutions(struct TArray<enum class ES_ExecutionOverride> overridePriorityOrder); // Function Scavenger.S_CharacterBase.SetOverridePriorityOrderForExecutions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLookAtTargetActor(bool Value); // Function Scavenger.S_CharacterBase.SetLookAtTargetActor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLookAtPosition(struct FVector newFocalPoint); // Function Scavenger.S_CharacterBase.SetLookAtPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsLaunched(bool bIsLaunched); // Function Scavenger.S_CharacterBase.SetIsLaunched // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsInStormCategory(enum class ES_StormCategory NewInStormCategory); // Function Scavenger.S_CharacterBase.SetIsInStormCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsInSmoke(bool inSmoke); // Function Scavenger.S_CharacterBase.SetIsInSmoke // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDisplayName(struct FText DisplayName); // Function Scavenger.S_CharacterBase.SetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetControlRotationLocked(bool bLocked); // Function Scavenger.S_CharacterBase.SetControlRotationLocked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterCosmeticLoadout(struct FS_CosmeticLoadout newLoadout); // Function Scavenger.S_CharacterBase.SetCharacterCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAccountCosmeticLoadout(struct FS_CosmeticLoadout newLoadout); // Function Scavenger.S_CharacterBase.SetAccountCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetABPIsFiringState(bool toggle); // Function Scavenger.S_CharacterBase.SetABPIsFiringState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerRequestStopReplicatedMontage(float BlendOutTime); // Function Scavenger.S_CharacterBase.ServerRequestStopReplicatedMontage // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestPlayReplicatedMontage(struct UAnimMontage* Montage, float PlayRate); // Function Scavenger.S_CharacterBase.ServerRequestPlayReplicatedMontage // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestInterruptEmote(); // Function Scavenger.S_CharacterBase.ServerRequestInterruptEmote // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestExitSeat(); // Function Scavenger.S_CharacterBase.ServerRequestExitSeat // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDoEmote(struct FName emoteNameId); // Function Scavenger.S_CharacterBase.ServerRequestDoEmote // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyJumpBegin(bool bExhaustedJump); // Function Scavenger.S_CharacterBase.ServerNotifyJumpBegin // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyClientAimRotation(uint16_t Yaw, uint16_t Pitch); // Function Scavenger.S_CharacterBase.ServerNotifyClientAimRotation // (Final|Net|Native|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerDeactivateADS(); // Function Scavenger.S_CharacterBase.ServerDeactivateADS // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerActivateADS(); // Function Scavenger.S_CharacterBase.ServerActivateADS // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	bool SelectCurrentWeaponAndHolster(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_CharacterBase.SelectCurrentWeaponAndHolster // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SelectCurrentWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_CharacterBase.SelectCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UAnimMontage* SelectAttackMontageVariant(struct TArray<struct UAnimMontage*> MontageVariations, enum class ES_WeaponMontageEvent attackEvent, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.SelectAttackMontageVariant // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ScavengerCrossServerTakeDamage(float DamageAmount, struct FS_PointDamageEvent DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.ScavengerCrossServerTakeDamage // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void ScavengerCrossServerAddImpulseAtLocation(struct FVector Impulse, struct FVector Location); // Function Scavenger.S_CharacterBase.ScavengerCrossServerAddImpulseAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void RollbackPredictivelyKilled(struct AController* PredictiveInstigator); // Function Scavenger.S_CharacterBase.RollbackPredictivelyKilled // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void ResetControlRotationLock(); // Function Scavenger.S_CharacterBase.ResetControlRotationLock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterEquippedWeapon(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* weapon); // Function Scavenger.S_CharacterBase.RegisterEquippedWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ProcessAttackRelease(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.ProcessAttackRelease // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ProcessAttackPress(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.ProcessAttackPress // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectSpawn(struct FName EffectName, struct UMaterialInterface* Material); // Function Scavenger.S_CharacterBase.PostProcessEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectDestroy(struct FName EffectName); // Function Scavenger.S_CharacterBase.PostProcessEffectDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayReplicatedMontageByTableIndex(struct FS_MontageCatalogueIndex Index); // Function Scavenger.S_CharacterBase.PlayReplicatedMontageByTableIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayReplicatedMontage(struct UAnimMontage* Montage, float PlayRate); // Function Scavenger.S_CharacterBase.PlayReplicatedMontage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayRandomReplicatedMontageByTableKey(struct FName MontageKey); // Function Scavenger.S_CharacterBase.PlayRandomReplicatedMontageByTableKey // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayRandomNonReplicatedMontageByTableKey(struct FName MontageKey); // Function Scavenger.S_CharacterBase.PlayRandomNonReplicatedMontageByTableKey // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayNonReplicatedMontageByTableIndex(struct FS_MontageCatalogueIndex Index); // Function Scavenger.S_CharacterBase.PlayNonReplicatedMontageByTableIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnTakePointDamageCallback(struct AActor* DamagedActor, float DamageAmount, struct AController* InstigatorController, struct FVector HitLocation, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct UDamageType* DamageType, struct AActor* DamageCauser); // Function Scavenger.S_CharacterBase.OnTakePointDamageCallback // (Final|Native|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void OnSlideUpdated(enum class ES_Slide NewSlide, int32_t NewCustomIdx, enum class ES_Slide OldSlide, int32_t OldCustomIdx); // Function Scavenger.S_CharacterBase.OnSlideUpdated // (Native|Public) // @ game+0xffff8008e4a10000
	void OnRevivedCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CharacterBase.OnRevivedCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_ShelterState(); // Function Scavenger.S_CharacterBase.OnRep_ShelterState // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_CharacterMeshPath(); // Function Scavenger.S_CharacterBase.OnRep_CharacterMeshPath // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_CharacterBase.OnMontageEnded // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnEnterRagDoll_BP(struct FHitResult HitResult, float timeSinceHit); // Function Scavenger.S_CharacterBase.OnEnterRagDoll_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnDownedCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CharacterBase.OnDownedCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnDodgeUpdated(bool IsDodgeOn, int32_t customIdx); // Function Scavenger.S_CharacterBase.OnDodgeUpdated // (Native|Public) // @ game+0xffff8008e4a10000
	void OnAttackEvent(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_CharacterBase.OnAttackEvent // (Native|Protected) // @ game+0xffff8008e4a10000
	void OnAttack_BP(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_CharacterBase.OnAttack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTerminalBy_BP(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_CharacterBase.NotifyTerminalBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatsStateChangedBy_BP(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_CharacterBase.NotifyStatsStateChangedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySeatExited_BP(struct USC_Seat* Seat); // Function Scavenger.S_CharacterBase.NotifySeatExited_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySeatEntered_BP(struct USC_Seat* Seat); // Function Scavenger.S_CharacterBase.NotifySeatEntered_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevivedBy_BP(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_CharacterBase.NotifyRevivedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectedBy_BP(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_CharacterBase.NotifyResurrectedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSelfDestructMontage(); // Function Scavenger.S_CharacterBase.NotifyReplicatedSelfDestructMontage // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMontageState(); // Function Scavenger.S_CharacterBase.NotifyReplicatedMontageState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExecutor_BP(); // Function Scavenger.S_CharacterBase.NotifyReplicatedExecutor_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExecutor(); // Function Scavenger.S_CharacterBase.NotifyReplicatedExecutor // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExecutionTarget_BP(); // Function Scavenger.S_CharacterBase.NotifyReplicatedExecutionTarget_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExecutionTarget(); // Function Scavenger.S_CharacterBase.NotifyReplicatedExecutionTarget // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedEquipmentState(); // Function Scavenger.S_CharacterBase.NotifyReplicatedEquipmentState // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCharacterCosmeticLoadout(); // Function Scavenger.S_CharacterBase.NotifyReplicatedCharacterCosmeticLoadout // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedADSIsActive(); // Function Scavenger.S_CharacterBase.NotifyReplicatedADSIsActive // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedAccountCosmeticLoadout(); // Function Scavenger.S_CharacterBase.NotifyReplicatedAccountCosmeticLoadout // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyPredictivelyKilled(struct AController* PredictiveInstigator, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_CharacterBase.NotifyPredictivelyKilled // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPostExecutionRagdoll(); // Function Scavenger.S_CharacterBase.NotifyPostExecutionRagdoll // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyKilledInCocoon_BP(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_CharacterBase.NotifyKilledInCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledBy_BP(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_CharacterBase.NotifyKilledBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUsed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.NotifyItemUsed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUnequipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.NotifyItemUnequipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemEquipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.NotifyItemEquipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDropped_BP(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_CharacterBase.NotifyItemDropped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDestroyed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.NotifyItemDestroyed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemAcquired_BP(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.NotifyItemAcquired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyIsInStormCategory(); // Function Scavenger.S_CharacterBase.NotifyIsInStormCategory // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyFreedFromCocoon_BP(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_CharacterBase.NotifyFreedFromCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracting_BP(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_CharacterBase.NotifyExtracting_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracted_BP(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_CharacterBase.NotifyExtracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDownedBy_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_CharacterBase.NotifyDownedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamagedBy_BP(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_CharacterBase.NotifyDamagedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCosmeticLoadoutChanged_BP(); // Function Scavenger.S_CharacterBase.NotifyCosmeticLoadoutChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyControllerChanged_BP(struct AController* OldController, struct AController* NewController); // Function Scavenger.S_CharacterBase.NotifyControllerChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCocooned_BP(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_CharacterBase.NotifyCocooned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBoneLeftSnow_BP(struct FName BoneName, struct FVector GroundPosition, float SnowHeight, struct UPhysicalMaterial* PhysicalMaterial); // Function Scavenger.S_CharacterBase.NotifyBoneLeftSnow_BP // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBoneEnteredSnow_BP(struct FName BoneName, struct FVector GroundPosition, float SnowHeight, struct UPhysicalMaterial* PhysicalMaterial); // Function Scavenger.S_CharacterBase.NotifyBoneEnteredSnow_BP // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamageBatch(struct TArray<struct FS_PointDamageMulticast> multiCastEvents); // Function Scavenger.S_CharacterBase.MulticastTakePointDamageBatch // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamage(float DamageAmount, struct FS_PointDamageEvent PointDamageEvent, struct APawn* instigatorPawn, struct AActor* CauseActor, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.MulticastTakePointDamage // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastInterruptEmote(); // Function Scavenger.S_CharacterBase.MulticastInterruptEmote // (Net|Native|Event|NetMulticast|Protected|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastDoEmote(struct FName emoteNameId); // Function Scavenger.S_CharacterBase.MulticastDoEmote // (Net|Native|Event|NetMulticast|Protected|NetValidate) // @ game+0xffff8008e4a10000
	bool IsWeaponAttacking(); // Function Scavenger.S_CharacterBase.IsWeaponAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsTriggerHeld(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType Trigger); // Function Scavenger.S_CharacterBase.IsTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsThrowingGrenade(); // Function Scavenger.S_CharacterBase.IsThrowingGrenade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsTargetableByAI(); // Function Scavenger.S_CharacterBase.IsTargetableByAI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsStunned(); // Function Scavenger.S_CharacterBase.IsStunned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsSprinting(); // Function Scavenger.S_CharacterBase.IsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsReloading(); // Function Scavenger.S_CharacterBase.IsReloading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsNextToHeatSource(); // Function Scavenger.S_CharacterBase.IsNextToHeatSource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsMantling(); // Function Scavenger.S_CharacterBase.IsMantling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsJumping(); // Function Scavenger.S_CharacterBase.IsJumping // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsExhausted(); // Function Scavenger.S_CharacterBase.IsExhausted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsExecuting(); // Function Scavenger.S_CharacterBase.IsExecuting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDowned(); // Function Scavenger.S_CharacterBase.IsDowned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDoingEmote(); // Function Scavenger.S_CharacterBase.IsDoingEmote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDodging(); // Function Scavenger.S_CharacterBase.IsDodging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDead(); // Function Scavenger.S_CharacterBase.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCrouching(); // Function Scavenger.S_CharacterBase.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCloaked(); // Function Scavenger.S_CharacterBase.IsCloaked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBeingExecuted(); // Function Scavenger.S_CharacterBase.IsBeingExecuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAttacking(); // Function Scavenger.S_CharacterBase.IsAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAnyMontagePlaying(); // Function Scavenger.S_CharacterBase.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAlive(); // Function Scavenger.S_CharacterBase.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActuallyDead(); // Function Scavenger.S_CharacterBase.IsActuallyDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActuallyAlive(); // Function Scavenger.S_CharacterBase.IsActuallyAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void IncrementNotAITargetableCounter(); // Function Scavenger.S_CharacterBase.IncrementNotAITargetableCounter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool HasStaminaForAttack(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterBase.HasStaminaForAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasAnyWeaponEquipped(); // Function Scavenger.S_CharacterBase.HasAnyWeaponEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleCharacterCosmeticLoadoutChanged(); // Function Scavenger.S_CharacterBase.HandleCharacterCosmeticLoadoutChanged // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleAccountCosmeticLoadoutChanged(); // Function Scavenger.S_CharacterBase.HandleAccountCosmeticLoadoutChanged // (Native|Protected) // @ game+0xffff8008e4a10000
	struct FTransform GetWSBoneTransformFromBoneName(struct FName Name); // Function Scavenger.S_CharacterBase.GetWSBoneTransformFromBoneName // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlotState GetWeaponSlotState(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_CharacterBase.GetWeaponSlotState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetWeaponBySlot(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_CharacterBase.GetWeaponBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_VehiclePawn* GetVehicle(); // Function Scavenger.S_CharacterBase.GetVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FScavengerTeamID GetTeamInfo(); // Function Scavenger.S_CharacterBase.GetTeamInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetTeamAttitudeTowards_BP(struct AActor* Other, bool IsFriendly, bool IsNeutral, bool IsHostile); // Function Scavenger.S_CharacterBase.GetTeamAttitudeTowards_BP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_SpottingComponent* GetSpottingComponent(); // Function Scavenger.S_CharacterBase.GetSpottingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlot GetSlotByWeapon(struct AS_WeaponBase* weapon); // Function Scavenger.S_CharacterBase.GetSlotByWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ShieldComponent* GetShieldComponent(); // Function Scavenger.S_CharacterBase.GetShieldComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SeatType GetSeatType(); // Function Scavenger.S_CharacterBase.GetSeatType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct USC_Seat* GetSeat(); // Function Scavenger.S_CharacterBase.GetSeat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_ScavAITeams GetScavengerTeam(); // Function Scavenger.S_CharacterBase.GetScavengerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPawnRemoteViewPitch(); // Function Scavenger.S_CharacterBase.GetPawnRemoteViewPitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOwnedGameplayTags(struct FGameplayTagContainer TagContainer); // Function Scavenger.S_CharacterBase.GetOwnedGameplayTags // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetMontageCollectionByTableKey_BP(struct FName MontageKey, struct TArray<struct UAnimMontage*> OutMontageCollection); // Function Scavenger.S_CharacterBase.GetMontageCollectionByTableKey_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UAnimMontage* GetMontageByTableIndex(struct FS_MontageCatalogueIndex Index); // Function Scavenger.S_CharacterBase.GetMontageByTableIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ManagedSoundBankComponent* GetManagedSoundBankComponent(); // Function Scavenger.S_CharacterBase.GetManagedSoundBankComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetLastRawMovementInputVector(); // Function Scavenger.S_CharacterBase.GetLastRawMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsPassenger(); // Function Scavenger.S_CharacterBase.GetIsPassenger // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsLaunched(); // Function Scavenger.S_CharacterBase.GetIsLaunched // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StormCategory GetIsInStormCategory(); // Function Scavenger.S_CharacterBase.GetIsInStormCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetIsInStorm(); // Function Scavenger.S_CharacterBase.GetIsInStorm // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsInSmoke(); // Function Scavenger.S_CharacterBase.GetIsInSmoke // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsDriver(); // Function Scavenger.S_CharacterBase.GetIsDriver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetEquipmentBySlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_CharacterBase.GetEquipmentBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetDisplayName(); // Function Scavenger.S_CharacterBase.GetDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FRotator GetDesiredSeatedRotation(struct FRotator AimRotation, int32_t outSnapIndex); // Function Scavenger.S_CharacterBase.GetDesiredSeatedRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_DerivedCharacterBaseState GetDerivedBaseState(); // Function Scavenger.S_CharacterBase.GetDerivedBaseState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDamageRecievedFromCharacters(); // Function Scavenger.S_CharacterBase.GetDamageRecievedFromCharacters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDamageDoneToCharacters(); // Function Scavenger.S_CharacterBase.GetDamageDoneToCharacters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlot GetCurrentWeaponSlot(); // Function Scavenger.S_CharacterBase.GetCurrentWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetCurrentWeapon(); // Function Scavenger.S_CharacterBase.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_CosmeticSkinningComponent* GetCosmeticSkinningComponent(); // Function Scavenger.S_CharacterBase.GetCosmeticSkinningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetControlRotationLocked(); // Function Scavenger.S_CharacterBase.GetControlRotationLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetControllerToActorRotation_BP(float outYaw, float outPitch, float outRoll); // Function Scavenger.S_CharacterBase.GetControllerToActorRotation_BP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetCharacterCosmeticLoadout(); // Function Scavenger.S_CharacterBase.GetCharacterCosmeticLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UMeshComponent* GetBackpackMesh(); // Function Scavenger.S_CharacterBase.GetBackpackMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAmmoCount(enum class ES_AmmoType AmmoType); // Function Scavenger.S_CharacterBase.GetAmmoCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetAimScreenPitchYaw_BP(float outPitch, float outYaw, bool clampTo90); // Function Scavenger.S_CharacterBase.GetAimScreenPitchYaw_BP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_CharacterBodyStance GetActiveBodyStance(); // Function Scavenger.S_CharacterBase.GetActiveBodyStance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetAccountCosmeticLoadout(); // Function Scavenger.S_CharacterBase.GetAccountCosmeticLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_AbilitySystemComponent* GetAbilitySystemComponent_BP(); // Function Scavenger.S_CharacterBase.GetAbilitySystemComponent_BP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool ExecuteCharacter(struct AS_CharacterBase* Target); // Function Scavenger.S_CharacterBase.ExecuteCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventTerminalBy(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_CharacterBase.EventTerminalBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventStatsStateChangedBy(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_CharacterBase.EventStatsStateChangedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevivedBy(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_CharacterBase.EventRevivedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrectedBy(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_CharacterBase.EventResurrectedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledInCocoon(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_CharacterBase.EventKilledInCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledBy(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_CharacterBase.EventKilledBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUsed(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.EventItemUsed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.EventItemUnequipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.EventItemEquipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDropped(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_CharacterBase.EventItemDropped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDestroyed(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.EventItemDestroyed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemAcquired(struct FS_ItemState ItemState); // Function Scavenger.S_CharacterBase.EventItemAcquired // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventFreedFromCocoon(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_CharacterBase.EventFreedFromCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracting(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_CharacterBase.EventExtracting // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracted(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_CharacterBase.EventExtracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDownedBy(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_CharacterBase.EventDownedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamagedBy(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_CharacterBase.EventDamagedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventCocooned(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_CharacterBase.EventCocooned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EnterRagdoll(); // Function Scavenger.S_CharacterBase.EnterRagdoll // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EndExecution(struct UAnimMontage* Montage, bool Interrupted, int32_t montageInstanceID); // Function Scavenger.S_CharacterBase.EndExecution // (Native|Protected) // @ game+0xffff8008e4a10000
	void DropEquippedWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_CharacterBase.DropEquippedWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DropAllEquippedWeapons(); // Function Scavenger.S_CharacterBase.DropAllEquippedWeapons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DirtyCharacterSkin(); // Function Scavenger.S_CharacterBase.DirtyCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DirtyBackpackSkin(); // Function Scavenger.S_CharacterBase.DirtyBackpackSkin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DirtyAllSkins(); // Function Scavenger.S_CharacterBase.DirtyAllSkins // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DestroyAllEquippedWeapons(); // Function Scavenger.S_CharacterBase.DestroyAllEquippedWeapons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DecrementNotAITargetableCounter(); // Function Scavenger.S_CharacterBase.DecrementNotAITargetableCounter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DeactivateADS(); // Function Scavenger.S_CharacterBase.DeactivateADS // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CycleCurrentWeapon(enum class ES_CycleDirection cycleDirection); // Function Scavenger.S_CharacterBase.CycleCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CustomizationSetBackpackMeshLazy(struct TSoftObjectPtr<struct USkeletalMesh> newBackpackMesh); // Function Scavenger.S_CharacterBase.CustomizationSetBackpackMeshLazy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CustomizationSetActiveMeshLazy(struct TSoftObjectPtr<struct USkeletalMesh> NewActiveMesh); // Function Scavenger.S_CharacterBase.CustomizationSetActiveMeshLazy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CustomizationIsMeshLoadPending(); // Function Scavenger.S_CharacterBase.CustomizationIsMeshLoadPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CrouchOnRevivingStarted(); // Function Scavenger.S_CharacterBase.CrouchOnRevivingStarted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CrossServerTakePoiseDamage(float PoiseDamageAmount, struct FHitResult HitResult, struct US_DamageTypeBase* DamageType); // Function Scavenger.S_CharacterBase.CrossServerTakePoiseDamage // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void CrossServerLaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Scavenger.S_CharacterBase.CrossServerLaunchCharacter // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	int32_t ConsumeAmmo(enum class ES_AmmoType AmmoType, int32_t amountToConsume); // Function Scavenger.S_CharacterBase.ConsumeAmmo // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearLookAtPosition(); // Function Scavenger.S_CharacterBase.ClearLookAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CharacterMeshLoadFinished(); // Function Scavenger.S_CharacterBase.CharacterMeshLoadFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CharacterBase_OnTerminalCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CharacterBase.CharacterBase_OnTerminalCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void CharacterBase_OnSimpleStatChange(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_CharacterBase.CharacterBase_OnSimpleStatChange // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void CharacterBase_OnDiedCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CharacterBase.CharacterBase_OnDiedCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void CharacterBase_OnBoneHitCallback(struct FBoneHitInfo BoneHitInfo, struct FS_PointDamageEvent PointDamageEvent, float DamageAmount); // Function Scavenger.S_CharacterBase.CharacterBase_OnBoneHitCallback // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void Character_OnRepMontageStartedCallback(); // Function Scavenger.S_CharacterBase.Character_OnRepMontageStartedCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void Character_OnRepMontageInterruptedCallback(); // Function Scavenger.S_CharacterBase.Character_OnRepMontageInterruptedCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void Character_OnRepMontageCompletedCallback(); // Function Scavenger.S_CharacterBase.Character_OnRepMontageCompletedCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void CancelReloading(); // Function Scavenger.S_CharacterBase.CancelReloading // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CancelExecution(); // Function Scavenger.S_CharacterBase.CancelExecution // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanBeExecuted(); // Function Scavenger.S_CharacterBase.CanBeExecuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void BackpackMeshLoadFinished(); // Function Scavenger.S_CharacterBase.BackpackMeshLoadFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool AnyMontageExistsForKey(struct FName MontageKey); // Function Scavenger.S_CharacterBase.AnyMontageExistsForKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool ADSIsActive(); // Function Scavenger.S_CharacterBase.ADSIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ActivateADS(); // Function Scavenger.S_CharacterBase.ActivateADS // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AICharacter
// Size: 0x2650 (Inherited: 0x2220)
struct AS_AICharacter : AS_CharacterBase {
	char pad_2220[0x8]; // 0x2220(0x08)
	struct FColor sphereColor; // 0x2228(0x04)
	float MeleeAttackForwardScalar; // 0x222c(0x04)
	struct FMulticastInlineDelegate OnCurrentTargetChanged; // 0x2230(0x10)
	struct FMulticastInlineDelegate OnNearbyGrenadeDetected; // 0x2240(0x10)
	struct US_ItemData* InitialEquippedItemDataOverride[0x11]; // 0x2250(0x88)
	bool CanDynamicallyChangeRankTuning; // 0x22d8(0x01)
	char pad_22D9[0x3]; // 0x22d9(0x03)
	int32_t RankTuningAdjustment; // 0x22dc(0x04)
	char pad_22E0[0x4]; // 0x22e0(0x04)
	int32_t RankTuning; // 0x22e4(0x04)
	int32_t RankId; // 0x22e8(0x04)
	enum class ES_KillExperienceTier KillExperienceTier; // 0x22ec(0x01)
	bool IsElite; // 0x22ed(0x01)
	bool IsCheap; // 0x22ee(0x01)
	bool IsMeleeOnlyCharacter; // 0x22ef(0x01)
	float HelmetVitality; // 0x22f0(0x04)
	bool bHelmetShattered; // 0x22f4(0x01)
	char pad_22F5[0x3]; // 0x22f5(0x03)
	struct UParticleSystem* HelmetShatterFX; // 0x22f8(0x08)
	struct FVector HeadHitLocation; // 0x2300(0x0c)
	float ForwardOriginOffset; // 0x230c(0x04)
	struct US_AIAudioComponent* AudioComponentAI; // 0x2310(0x08)
	bool ShouldOverrideTargetThreatWeights; // 0x2318(0x01)
	char pad_2319[0x3]; // 0x2319(0x03)
	struct FS_AITargetingWeights AITargetThreatWeightOverrides; // 0x231c(0x20)
	float MinimumTargetSwitchCooldown; // 0x233c(0x04)
	enum class ES_AIAlertState AIAlertState; // 0x2340(0x01)
	char pad_2341[0x3]; // 0x2341(0x03)
	float AIAlertStatePercentage; // 0x2344(0x04)
	char m_replicatedAlertStatePercent; // 0x2348(0x01)
	char pad_2349[0x7]; // 0x2349(0x07)
	struct UGameplayEffect* HardPingEffect; // 0x2350(0x08)
	float HardPingOverrideDuration; // 0x2358(0x04)
	bool DisableHardPings; // 0x235c(0x01)
	char pad_235D[0x3]; // 0x235d(0x03)
	struct FName DefaultShotRightKey; // 0x2360(0x08)
	struct FName DefaultShotLeftKey; // 0x2368(0x08)
	struct FName DefaultShotForwardsKey; // 0x2370(0x08)
	struct FName DefaultShotBackwardsKey; // 0x2378(0x08)
	struct FName DefaultMeleeRightKey; // 0x2380(0x08)
	struct FName DefaultMeleeLeftKey; // 0x2388(0x08)
	struct FName DefaultMeleeForwardsKey; // 0x2390(0x08)
	struct FName DefaultMeleeBackwardsKey; // 0x2398(0x08)
	struct FName DefaultExplosionForwardsKey; // 0x23a0(0x08)
	struct FName DefaultExplosionBackwardsKey; // 0x23a8(0x08)
	struct FName DefaultExplosionAirForwardsKey; // 0x23b0(0x08)
	struct FName DefaultExplosionAirBackwardsKey; // 0x23b8(0x08)
	struct UDataTable* DirectionlessHardpingResponseTable; // 0x23c0(0x08)
	bool CalculatePathFindingSpineBend; // 0x23c8(0x01)
	bool CalculateVelocitySpineBend; // 0x23c9(0x01)
	char pad_23CA[0x2]; // 0x23ca(0x02)
	float SpineBendInDegrees; // 0x23cc(0x04)
	float m_replicatedSpineBend; // 0x23d0(0x04)
	float SpineBendRate; // 0x23d4(0x04)
	float SpineBendMaxAngleInDegrees; // 0x23d8(0x04)
	float SpineBendDistanceThreshold; // 0x23dc(0x04)
	float SpineBendPathAngleFactor; // 0x23e0(0x04)
	bool CalculateHeadLookWhilePathFinding; // 0x23e4(0x01)
	char pad_23E5[0x3]; // 0x23e5(0x03)
	float PathfindingHeadLookPitchInDegrees; // 0x23e8(0x04)
	float m_replicatedHeadLookPitch; // 0x23ec(0x04)
	float PathfindingHeadLookYawInDegrees; // 0x23f0(0x04)
	float m_replicatedHeadLookYaw; // 0x23f4(0x04)
	float MaxHeadLookWhilePathFindingDistance; // 0x23f8(0x04)
	float MinHeadLookWhilePathFindingDistance; // 0x23fc(0x04)
	float MaxPathfindingHeadLookYawInDegrees; // 0x2400(0x04)
	float MaxPathfindingHeadLookPitchInDegrees; // 0x2404(0x04)
	float PathFindingHeadLookRate; // 0x2408(0x04)
	float CheckForValidNavmeshFrequencyInSeconds; // 0x240c(0x04)
	char pad_2410[0x18]; // 0x2410(0x18)
	struct UAnimMontage* m_currentPingMontage; // 0x2428(0x08)
	struct AS_AISpawner* m_spawner; // 0x2430(0x08)
	char pad_2438[0x8]; // 0x2438(0x08)
	struct AActor* m_spawnOnDeathActorClass; // 0x2440(0x08)
	float TileGenerationRadius; // 0x2448(0x04)
	float TileRemovalRadius; // 0x244c(0x04)
	struct FVector m_spawnOnDeathActorOffset; // 0x2450(0x0c)
	char pad_245C[0x4]; // 0x245c(0x04)
	struct FS_LootDescriptor LootDescriptor; // 0x2460(0x28)
	struct US_LootComponent* LootComponent; // 0x2488(0x08)
	struct FS_LootSpawnSettings LootSpawnSettings; // 0x2490(0x30)
	enum class ES_AILocomotionState m_currentAILocomotionState; // 0x24c0(0x01)
	char pad_24C1[0x7]; // 0x24c1(0x07)
	struct USC_CollisionDamageReciver* CollisionDamageReciver; // 0x24c8(0x08)
	struct TArray<struct FS_DebugAIData> m_debugAIData; // 0x24d0(0x10)
	char pad_24E0[0x8]; // 0x24e0(0x08)
	struct TArray<struct FS_DebugAIHitData> m_debugHitTargetData; // 0x24e8(0x10)
	char m_remotePerceptionYaw; // 0x24f8(0x01)
	char pad_24F9[0xf]; // 0x24f9(0x0f)
	float SpreadModifierResetTimer; // 0x2508(0x04)
	char pad_250C[0x4]; // 0x250c(0x04)
	float SpreadModifierResetAmountOnDamage; // 0x2510(0x04)
	float SpreadModifierResetOnOldTargetAge; // 0x2514(0x04)
	float TargetFireAtOffsetScale; // 0x2518(0x04)
	char pad_251C[0x1]; // 0x251c(0x01)
	bool bEnableClientSideNavWalkingPhysics; // 0x251d(0x01)
	char pad_251E[0xa]; // 0x251e(0x0a)
	struct AS_CharacterBase* CurrentTarget; // 0x2528(0x08)
	struct TWeakObjectPtr<struct AS_AICharacter> m_MostRecentAIToDamageMe; // 0x2530(0x08)
	char pad_2538[0x8]; // 0x2538(0x08)
	struct AS_CharacterBase* AIMaster; // 0x2540(0x08)
	float DistanceToCurrentTargetLKP; // 0x2548(0x04)
	struct FName AssociatedChallengeIdentifier; // 0x254c(0x08)
	char pad_2554[0x9c]; // 0x2554(0x9c)
	int32_t m_AIIndex; // 0x25f0(0x04)
	char pad_25F4[0xc]; // 0x25f4(0x0c)
	struct AS_WeaponTriggerableAttachment* GrenadeWeaponAttachment; // 0x2600(0x08)
	char pad_2608[0x20]; // 0x2608(0x20)
	struct US_LerpToAction* m_lerpToLocationAction; // 0x2628(0x08)
	char pad_2630[0x10]; // 0x2630(0x10)
	struct AS_AIController* m_playerBotController; // 0x2640(0x08)
	bool m_isHumanControlled; // 0x2648(0x01)
	bool m_isServerPlayerBot; // 0x2649(0x01)
	char pad_264A[0x1]; // 0x264a(0x01)
	bool IsInvisibleToAI; // 0x264b(0x01)
	bool bDrawOutline; // 0x264c(0x01)
	char pad_264D[0x3]; // 0x264d(0x03)

	void UnReserveReservedAIPoint(); // Function Scavenger.S_AICharacter.UnReserveReservedAIPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TriggerPing(struct FS_MontageCatalogueIndex airMontageIndex); // Function Scavenger.S_AICharacter.TriggerPing // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void TriggerHardPingByTableKey(struct FName MontageKey); // Function Scavenger.S_AICharacter.TriggerHardPingByTableKey // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TriggerHardPingByIndex(struct FS_MontageCatalogueIndex Index); // Function Scavenger.S_AICharacter.TriggerHardPingByIndex // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TriggerHardPing(struct UAnimMontage* Montage); // Function Scavenger.S_AICharacter.TriggerHardPing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TickFallingPing(struct FS_MontageCatalogueIndex airMontageIndex); // Function Scavenger.S_AICharacter.TickFallingPing // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void TargetChanged_BP(struct AS_CharacterBase* oldTarget, struct AS_CharacterBase* newTarget); // Function Scavenger.S_AICharacter.TargetChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void StopJumpWithMantle(); // Function Scavenger.S_AICharacter.StopJumpWithMantle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartJumpWithMantle(); // Function Scavenger.S_AICharacter.StartJumpWithMantle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartCrouching(); // Function Scavenger.S_AICharacter.StartCrouching // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLocomotionState(enum class ES_AILocomotionState newLocomotionState); // Function Scavenger.S_AICharacter.SetLocomotionState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAIMaster(struct AS_CharacterBase* Master); // Function Scavenger.S_AICharacter.SetAIMaster // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAIIndex(int32_t newAIIndex); // Function Scavenger.S_AICharacter.SetAIIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerPlayerBotTestsToggleBoolBB(struct FName KeyName); // Function Scavenger.S_AICharacter.ServerPlayerBotTestsToggleBoolBB // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotTestsStop(); // Function Scavenger.S_AICharacter.ServerPlayerBotTestsStop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotStopGathering(); // Function Scavenger.S_AICharacter.ServerPlayerBotStopGathering // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotGatherAtLocation(struct FVector gatherLocation, bool AndDisperse); // Function Scavenger.S_AICharacter.ServerPlayerBotGatherAtLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0xffff8008e4a10000
	void ServerNotifyDebugTeleported(); // Function Scavenger.S_AICharacter.ServerNotifyDebugTeleported // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ScoringProducedValidAIPoint(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.ScoringProducedValidAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReserveBestScoredAIPoint(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.ReserveBestScoredAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReserveActiveAIPoint(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.ReserveActiveAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestTemporaryPhysWalking(bool needsPhysWalking, float timeOutDuration); // Function Scavenger.S_AICharacter.RequestTemporaryPhysWalking // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PoiseZeroHardPing(struct FHitResult HitResult, enum class ES_PoiseDamageType dmgType); // Function Scavenger.S_AICharacter.PoiseZeroHardPing // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnRep_HelmetShattered(); // Function Scavenger.S_AICharacter.OnRep_HelmetShattered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_CurrentTarget(); // Function Scavenger.S_AICharacter.OnRep_CurrentTarget // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void MoveReservedAIPointToActiveAIPoint(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.MoveReservedAIPointToActiveAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LockOutActiveAIPoint(enum class ES_ScavengerResult resultOut, float lockOutDurationInSeconds); // Function Scavenger.S_AICharacter.LockOutActiveAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsTargetInVehicle(); // Function Scavenger.S_AICharacter.IsTargetInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsOutlineOverridden(); // Function Scavenger.S_AICharacter.IsOutlineOverridden // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsHumanControlled(); // Function Scavenger.S_AICharacter.IsHumanControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCurrentTargetSensedBySight(float ageOut); // Function Scavenger.S_AICharacter.IsCurrentTargetSensedBySight // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsCurrentTargetSensedByHearing(float ageOut); // Function Scavenger.S_AICharacter.IsCurrentTargetSensedByHearing // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsCurrentTargetSensedByHail(float ageOut); // Function Scavenger.S_AICharacter.IsCurrentTargetSensedByHail // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsCurrentTargetSensedByDamage(float ageOut); // Function Scavenger.S_AICharacter.IsCurrentTargetSensedByDamage // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasGrenadeAttachment(); // Function Scavenger.S_AICharacter.HasGrenadeAttachment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTargetStateByFlag(enum class ES_AITargetStateFlags flag); // Function Scavenger.S_AICharacter.GetTargetStateByFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_AISpawner* GetSpawner(); // Function Scavenger.S_AICharacter.GetSpawner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_AIPoint GetReservedAIPoint(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.GetReservedAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UAnimMontage* GetRandomAttackMontageVariant(struct TArray<struct UAnimMontage*> Montages); // Function Scavenger.S_AICharacter.GetRandomAttackMontageVariant // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetPlayerVsAiDamageMultipler(float defaultMultiplier, struct AS_CharacterBase* causeCharacter); // Function Scavenger.S_AICharacter.GetPlayerVsAiDamageMultipler // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMeleeIdealDistance(enum class ES_TriggerType triggerType); // Function Scavenger.S_AICharacter.GetMeleeIdealDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_AILocomotionState GetLocomotionState(); // Function Scavenger.S_AICharacter.GetLocomotionState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetDistanceToTargetLKP(); // Function Scavenger.S_AICharacter.GetDistanceToTargetLKP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetCurrentTargetVisibility(); // Function Scavenger.S_AICharacter.GetCurrentTargetVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetCurrentTargetThreat(); // Function Scavenger.S_AICharacter.GetCurrentTargetThreat // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetCurrentTargetLastKnownPosition(); // Function Scavenger.S_AICharacter.GetCurrentTargetLastKnownPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetCurrentTargetIsVisible(); // Function Scavenger.S_AICharacter.GetCurrentTargetIsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetCurrentTargetIsInsideSightRadius(); // Function Scavenger.S_AICharacter.GetCurrentTargetIsInsideSightRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetCurrentTargetFireAtPosition(); // Function Scavenger.S_AICharacter.GetCurrentTargetFireAtPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetCurrentTargetAgeAndExpirationAge(float Age, float ExpirationAge); // Function Scavenger.S_AICharacter.GetCurrentTargetAgeAndExpirationAge // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetCurrentTargetAge(); // Function Scavenger.S_AICharacter.GetCurrentTargetAge // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetCurrentTargetActualPosition(); // Function Scavenger.S_AICharacter.GetCurrentTargetActualPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_CharacterBase* GetCurrentTarget(); // Function Scavenger.S_AICharacter.GetCurrentTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlot GetBestWeaponSlot(bool allowUnarmed); // Function Scavenger.S_AICharacter.GetBestWeaponSlot // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetAssociatedChallengeIdentifier(); // Function Scavenger.S_AICharacter.GetAssociatedChallengeIdentifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_CharacterBase* GetAIMaster(); // Function Scavenger.S_AICharacter.GetAIMaster // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAIIndex(); // Function Scavenger.S_AICharacter.GetAIIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_AIAudioComponent* GetAIAudioComponent(); // Function Scavenger.S_AICharacter.GetAIAudioComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetActiveAIPoint(struct FS_AIPoint aiPointOut, enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AICharacter.GetActiveAIPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ForceNextTargetAcquisition(); // Function Scavenger.S_AICharacter.ForceNextTargetAcquisition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool FireWillLikelyHitTarget_BP(enum class ES_TriggerType triggerType, struct AActor* outHitActor, bool forceLikelyToHit, bool checkWithAds); // Function Scavenger.S_AICharacter.FireWillLikelyHitTarget_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void EndHardPing(struct UAnimMontage* Montage, bool Interrupted, int32_t montageInstanceID); // Function Scavenger.S_AICharacter.EndHardPing // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void EndCrouching(); // Function Scavenger.S_AICharacter.EndCrouching // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EnableOutlineOverride(); // Function Scavenger.S_AICharacter.EnableOutlineOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DisableTemporaryPhysWalking(); // Function Scavenger.S_AICharacter.DisableTemporaryPhysWalking // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void DisableOutlineOverride(); // Function Scavenger.S_AICharacter.DisableOutlineOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CrossServerLaunchAICharacter(struct FVector LaunchVelocity, struct US_DamageTypeExplosive* DamageType, struct AActor* CauseActor); // Function Scavenger.S_AICharacter.CrossServerLaunchAICharacter // (Net|NetReliableNative|Event|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientPlayerBotTestsToggleBoolBB(struct FName KeyName); // Function Scavenger.S_AICharacter.ClientPlayerBotTestsToggleBoolBB // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientPlayerBotTestsStop(); // Function Scavenger.S_AICharacter.ClientPlayerBotTestsStop // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientPlayerBotStopGathering(); // Function Scavenger.S_AICharacter.ClientPlayerBotStopGathering // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientPlayerBotGatherAtLocation(struct FVector gatherLocation, bool AndDisperse); // Function Scavenger.S_AICharacter.ClientPlayerBotGatherAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyDebugTeleported(); // Function Scavenger.S_AICharacter.ClientNotifyDebugTeleported // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void CleanupReservedAIPoint(); // Function Scavenger.S_AICharacter.CleanupReservedAIPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CleanupBestScoredAIPoint(); // Function Scavenger.S_AICharacter.CleanupBestScoredAIPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CleanupActiveAIPoint(); // Function Scavenger.S_AICharacter.CleanupActiveAIPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AICharacter_HandleDeath_Client(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_AICharacter.AICharacter_HandleDeath_Client // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void AICharacter_HandleDeath(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_AICharacter.AICharacter_HandleDeath // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AICharacterDebugHUD
// Size: 0x390 (Inherited: 0x378)
struct AS_AICharacterDebugHUD : AHUD {
	char pad_378[0x18]; // 0x378(0x18)
};

// Class Scavenger.S_AICharacterNoWeapon
// Size: 0x2650 (Inherited: 0x2650)
struct AS_AICharacterNoWeapon : AS_AICharacter {
};

// Class Scavenger.S_AICharacterScourge
// Size: 0x2670 (Inherited: 0x2650)
struct AS_AICharacterScourge : AS_AICharacter {
	enum class ES_AIShriekerState m_currentAIShriekerState; // 0x2650(0x01)
	char pad_2651[0x7]; // 0x2651(0x07)
	struct FMulticastInlineDelegate OnStateChanged; // 0x2658(0x10)
	char pad_2668[0x8]; // 0x2668(0x08)

	void SetShriekerState(enum class ES_AIShriekerState newShriekerState); // Function Scavenger.S_AICharacterScourge.SetShriekerState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStateChanged_BP(enum class ES_AIShriekerState stateChanged); // Function Scavenger.S_AICharacterScourge.NotifyReplicatedStateChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStateChanged(); // Function Scavenger.S_AICharacterScourge.NotifyReplicatedStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	enum class ES_AIShriekerState GetShriekerState(); // Function Scavenger.S_AICharacterScourge.GetShriekerState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AIAndWeaponInteractionContainer
// Size: 0x38 (Inherited: 0x28)
struct US_AIAndWeaponInteractionContainer : UObject {
	struct TArray<struct FS_AIAndWeaponInteraction> WeaponInteractions; // 0x28(0x10)
};

// Class Scavenger.S_FireIfPossibleAsyncAction
// Size: 0x88 (Inherited: 0x30)
struct US_FireIfPossibleAsyncAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate CountReached; // 0x30(0x10)
	char pad_40[0x48]; // 0x40(0x48)

	struct US_FireIfPossibleAsyncAction* StartFireWithCountNotify(struct AS_AIController* Controller, float angleToTargetToAllowFire, bool autoFocusOnFocusPoint, bool autoADSForTarget, struct FVector2D alternateFireAtAgeRange, struct FVector2D holdFireAtAgeRange, float stopFireAge, float stopFireTimer, int32_t notifyAfterCount, enum class ES_TriggerType triggerType, bool delayNotifyUntilAnimCompletes, int32_t montageVariationOverride, bool ignoreVisibilityCheck, bool avoidShootingFriendlies, bool shouldFireAtLocation, struct FVector fireAtLocation); // Function Scavenger.S_FireIfPossibleAsyncAction.StartFireWithCountNotify // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AIController
// Size: 0x868 (Inherited: 0x398)
struct AS_AIController : AAIController {
	char pad_398[0x10]; // 0x398(0x10)
	struct FMulticastInlineDelegate OnDamagedBy; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnDownedBy; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnDowned; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnTerminalBy; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnTerminal; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnKilledBy; // 0x408(0x10)
	struct FMulticastInlineDelegate OnKilled; // 0x418(0x10)
	struct FMulticastInlineDelegate OnResurrectedBy; // 0x428(0x10)
	struct FMulticastInlineDelegate OnRevivedBy; // 0x438(0x10)
	struct FMulticastInlineDelegate OnResurrected; // 0x448(0x10)
	struct FMulticastInlineDelegate OnRevived; // 0x458(0x10)
	struct FMulticastInlineDelegate OnStatsStateChangedBy; // 0x468(0x10)
	struct FMulticastInlineDelegate OnCausedStatsStateChange; // 0x478(0x10)
	char pad_488[0x110]; // 0x488(0x110)
	struct US_BTScavengerRequiredService* m_lastVisitedService; // 0x598(0x08)
	struct FMulticastInlineDelegate OnFriendlyHailDelegate; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnPreTakeDamage; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnPreTakePointDamage; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnPostDealDamage; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnPostTakeDamage; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnPostTakePointDamage; // 0x600(0x10)
	char pad_610[0xc]; // 0x610(0x0c)
	float m_brainDeadTimeout; // 0x61c(0x04)
	char pad_620[0x3a]; // 0x620(0x3a)
	bool m_bActiveKungFuAttacker; // 0x65a(0x01)
	bool m_bEligibleToBecomeActive; // 0x65b(0x01)
	bool m_bEligibleToBecomeInactive; // 0x65c(0x01)
	bool AutoAttemptToCureIsolation; // 0x65d(0x01)
	char pad_65E[0x4a]; // 0x65e(0x4a)
	struct US_AIAndWeaponInteractionContainer* WeaponInteractionContainer; // 0x6a8(0x08)
	struct US_AIAndWeaponInteractionContainer* m_WeaponInteractionContainerInstance; // 0x6b0(0x08)
	struct US_AIAndWeaponInteractionContainer* AlternateWeaponInteractionContainer; // 0x6b8(0x08)
	struct US_AIAndWeaponInteractionContainer* m_AlternateWeaponInteractionContainerInstance; // 0x6c0(0x08)
	struct US_FireIfPossibleAsyncAction* m_FireAction; // 0x6c8(0x08)
	struct TArray<struct US_FireIfPossibleAsyncAction*> m_DelayedFireActions; // 0x6d0(0x10)
	char pad_6E0[0x18]; // 0x6e0(0x18)
	struct US_ControllerComponent* ControllerComponent; // 0x6f8(0x08)
	char pad_700[0x70]; // 0x700(0x70)
	struct US_AITask_MoveTo* m_registeredMoveTo; // 0x770(0x08)
	float PawnRotationSpeed; // 0x778(0x04)
	float MaxRangeToIdentifyTarget; // 0x77c(0x04)
	float AIMaxResolve; // 0x780(0x04)
	float AICurrentResolve; // 0x784(0x04)
	float AIResolveBreakingPoint; // 0x788(0x04)
	enum class ES_AIIntensity Intensity; // 0x78c(0x01)
	enum class ES_AIHail hailType; // 0x78d(0x01)
	char pad_78E[0x2]; // 0x78e(0x02)
	float FriendlyHailedCooldownTimer; // 0x790(0x04)
	float HailingFriendliesCooldownTimer; // 0x794(0x04)
	float HailingScaleFactorInStorm; // 0x798(0x04)
	bool WasHailed; // 0x79c(0x01)
	bool IsHailing; // 0x79d(0x01)
	char pad_79E[0x2]; // 0x79e(0x02)
	struct FVector FiringPointLocOne; // 0x7a0(0x0c)
	bool FiringPointLocOneUsed; // 0x7ac(0x01)
	char pad_7AD[0x3]; // 0x7ad(0x03)
	struct FName Squad; // 0x7b0(0x08)
	char pad_7B8[0x10]; // 0x7b8(0x10)
	bool RestrictToFiringPointAreas; // 0x7c8(0x01)
	char pad_7C9[0x3]; // 0x7c9(0x03)
	float ICanSeeEverythingInThisRadius; // 0x7cc(0x04)
	float SightSenseScaleWhenEscalatedCombatStates; // 0x7d0(0x04)
	float SightSenseScaleWhenInStorm; // 0x7d4(0x04)
	char pad_7D8[0x8]; // 0x7d8(0x08)
	enum class ES_CombatState CombatState; // 0x7e0(0x01)
	char pad_7E1[0x3]; // 0x7e1(0x03)
	float TargetSpottedHailDelay; // 0x7e4(0x04)
	float GunFiredHailDelay; // 0x7e8(0x04)
	float TargetLostAge; // 0x7ec(0x04)
	float AlwaysSeenDistanceOnDamage; // 0x7f0(0x04)
	float AlwaysSee360Distance; // 0x7f4(0x04)
	float SearchPeripheralVisionHalfAngle; // 0x7f8(0x04)
	float InvestigatePeripheralVisionHalfAngle; // 0x7fc(0x04)
	float CombatPeripheralVisionHalfAngle; // 0x800(0x04)
	float FleePeripheralVisionHalfAngle; // 0x804(0x04)
	struct FS_AIAndHeadInteraction m_aiAndHeadInteraction; // 0x808(0x18)
	char pad_820[0x8]; // 0x820(0x08)
	enum class ES_OpportunityState OpportunityState; // 0x828(0x01)
	bool Combat_I_LoveCover; // 0x829(0x01)
	char pad_82A[0x2]; // 0x82a(0x02)
	float Combat_WalkSpeed; // 0x82c(0x04)
	float Combat_SlowStalkSpeed; // 0x830(0x04)
	float Combat_StalkSpeed; // 0x834(0x04)
	bool Combat_I_Am_Meleeing; // 0x838(0x01)
	bool Combat_InCombat; // 0x839(0x01)
	char pad_83A[0x2]; // 0x83a(0x02)
	float Search_TargetConsideredLostTime; // 0x83c(0x04)
	float Search_GiveUpTime; // 0x840(0x04)
	float Search_StartTime; // 0x844(0x04)
	float Search_CurrentTime; // 0x848(0x04)
	bool IsSearching; // 0x84c(0x01)
	bool IsInvestigating; // 0x84d(0x01)
	char pad_84E[0x2]; // 0x84e(0x02)
	float Flee_MinimumHealthScaleValue; // 0x850(0x04)
	bool Flee_I_LoveCover; // 0x854(0x01)
	char pad_855[0x3]; // 0x855(0x03)
	float FleeCharge_MinimumHealthScaleValue; // 0x858(0x04)
	float Patrol_WaitTimeAtAIPoint; // 0x85c(0x04)
	float Patrol_WalkSpeed; // 0x860(0x04)
	bool CanPatrol; // 0x864(0x01)
	char pad_865[0x3]; // 0x865(0x03)

	bool VerySlowSearchForPointOnNavMesh(struct FVector startPoint, struct FVector endPoint, struct FVector PointOnNavMesh); // Function Scavenger.S_AIController.VerySlowSearchForPointOnNavMesh // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnForceFacing(); // Function Scavenger.S_AIController.UnForceFacing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ThrowGrenade_BP(float angleToTargetToAllowFire, float randomizedRadius); // Function Scavenger.S_AIController.ThrowGrenade_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopTimedBBUpdateBool(struct FName BBName); // Function Scavenger.S_AIController.StopTimedBBUpdateBool // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopFiring(bool ClearFocus); // Function Scavenger.S_AIController.StopFiring // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopAttack(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_AIController.StopAttack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool StartFire_BP(float angleToTargetToAllowFire, bool autoFocusOnFocusPoint, bool autoADSForTarget, struct FVector2D alternateFireAtAgeRange, struct FVector2D holdFireAtAgeRange, float stopFireAge, float stopFireTimer, enum class ES_TriggerType triggerType, bool delayNotifyUntilAnimCompletes); // Function Scavenger.S_AIController.StartFire_BP // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartAttack(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, float triggerReleaseRate); // Function Scavenger.S_AIController.StartAttack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetWeaponInteractionContainer(struct US_AIAndWeaponInteractionContainer* containerTemplate); // Function Scavenger.S_AIController.SetWeaponInteractionContainer // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTimedBBUpdateBool(bool startVal, float timeToUpdate, struct FName BBName, bool loopingAlternating); // Function Scavenger.S_AIController.SetTimedBBUpdateBool // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNewAssignedOpportunityPoint(); // Function Scavenger.S_AIController.SetNewAssignedOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetMyOpportunityPointEnabled(bool Enabled); // Function Scavenger.S_AIController.SetMyOpportunityPointEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHeadPatternEnabled(bool Enabled, bool randomStartIndex); // Function Scavenger.S_AIController.SetHeadPatternEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEligibleToBecomeInactive_KungFu(bool canBecomeInactive); // Function Scavenger.S_AIController.SetEligibleToBecomeInactive_KungFu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEligibleToBecomeActive_KungFu(bool canBecomeActive); // Function Scavenger.S_AIController.SetEligibleToBecomeActive_KungFu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCustomScoringPoint(struct FVector vectorIn); // Function Scavenger.S_AIController.SetCustomScoringPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetControlRotationTowardsActorLocation(struct AActor* Actor); // Function Scavenger.S_AIController.SetControlRotationTowardsActorLocation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBrainDead(bool toggle, enum class ES_BrainDeadSource brainDeadSource); // Function Scavenger.S_AIController.SetBrainDead // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsVector(struct FName KeyName, struct FVector VectorValue); // Function Scavenger.S_AIController.SetBBValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsString(struct FName KeyName, struct FString StringValue); // Function Scavenger.S_AIController.SetBBValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsRotator(struct FName KeyName, struct FRotator VectorValue); // Function Scavenger.S_AIController.SetBBValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsObject(struct FName KeyName, struct UObject* ObjectValue); // Function Scavenger.S_AIController.SetBBValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsName(struct FName KeyName, struct FName NameValue); // Function Scavenger.S_AIController.SetBBValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsInt(struct FName KeyName, int32_t IntValue); // Function Scavenger.S_AIController.SetBBValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsFloat(struct FName KeyName, float FloatValue); // Function Scavenger.S_AIController.SetBBValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsEnum(struct FName KeyName, char EnumValue); // Function Scavenger.S_AIController.SetBBValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsClass(struct FName KeyName, struct UObject* ClassValue); // Function Scavenger.S_AIController.SetBBValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsBool(struct FName KeyName, bool BoolValue); // Function Scavenger.S_AIController.SetBBValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAIPeripheralVisionAngleDegAndDigest(float PeripheralVisionAngleDegrees); // Function Scavenger.S_AIController.SetAIPeripheralVisionAngleDegAndDigest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActiveKungFuAttacker(bool isActiveAttacker, struct FColor debugSphereColor); // Function Scavenger.S_AIController.SetActiveKungFuAttacker // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetExecutionBBState(); // Function Scavenger.S_AIController.ResetExecutionBBState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ReserveBestOpportunityPoint(bool overlordAssigning, struct FString matchingTextOpportunityType); // Function Scavenger.S_AIController.ReserveBestOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Reload(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_AIController.Reload // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterDebugCommandToBBKey(struct FString debugCommandKey, struct FName BBKey); // Function Scavenger.S_AIController.RegisterDebugCommandToBBKey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerBotTestsToggleBoolBB(struct FName KeyName); // Function Scavenger.S_AIController.PlayerBotTestsToggleBoolBB // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerBotTestsStop(); // Function Scavenger.S_AIController.PlayerBotTestsStop // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerBotStopGathering(); // Function Scavenger.S_AIController.PlayerBotStopGathering // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerBotSetPriorityLocation(struct FVector NewLocation, bool AndDisperse); // Function Scavenger.S_AIController.PlayerBotSetPriorityLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnWeaponAttackCallback(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_AIController.OnWeaponAttackCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnNotifyDebugTeleported(); // Function Scavenger.S_AIController.OnNotifyDebugTeleported // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnHailingFriendlies_BP(enum class ES_AIHail hailType, struct FString Message); // Function Scavenger.S_AIController.OnHailingFriendlies_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnFriendlyHail_BP(struct AS_AIController* ScavengerFriend, enum class ES_AIHail hailType, struct FString Message, float hailDistance); // Function Scavenger.S_AIController.OnFriendlyHail_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnFriendlyHail(struct AS_AIController* ScavengerFriend, enum class ES_AIHail hailType, struct FString Message); // Function Scavenger.S_AIController.OnFriendlyHail // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyTerminalBy_BP(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_AIController.NotifyTerminalBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTerminal_BP(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_AIController.NotifyTerminal_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatsStateChangedBy_BP(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_AIController.NotifyStatsStateChangedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevivedBy_BP(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_AIController.NotifyRevivedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevived_BP(struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_AIController.NotifyRevived_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectedBy_BP(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_AIController.NotifyResurrectedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrected_BP(struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_AIController.NotifyResurrected_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOverlordEligibleExecutionTargetReleased(struct AS_PlayerCharacter* Target); // Function Scavenger.S_AIController.NotifyOverlordEligibleExecutionTargetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyOverlordEligibleExecutionTargetAcquired(struct AS_PlayerCharacter* Target); // Function Scavenger.S_AIController.NotifyOverlordEligibleExecutionTargetAcquired // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyKilledBy_BP(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_AIController.NotifyKilledBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilled_BP(struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_AIController.NotifyKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDownedBy_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_AIController.NotifyDownedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDowned_BP(struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_AIController.NotifyDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamagedBy_BP(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_AIController.NotifyDamagedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamaged_BP(struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_AIController.NotifyDamaged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCausedStatsStateChange_BP(struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_AIController.NotifyCausedStatsStateChange_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsTargetReachableByMelee(struct AActor* actorToAttack, struct FVector meleeAttackPosition, float meleeRange, float verticalTolerance); // Function Scavenger.S_AIController.IsTargetReachableByMelee // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsOpportunityPointValid(bool clearInvalidPoint); // Function Scavenger.S_AIController.IsOpportunityPointValid // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsFiringWithTrigger(enum class ES_TriggerType triggerType); // Function Scavenger.S_AIController.IsFiringWithTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsFiring(); // Function Scavenger.S_AIController.IsFiring // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsEligibleToBecomeInactive_KungFu(); // Function Scavenger.S_AIController.IsEligibleToBecomeInactive_KungFu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEligibleToBecomeActive_KungFu(); // Function Scavenger.S_AIController.IsEligibleToBecomeActive_KungFu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBrainDead(); // Function Scavenger.S_AIController.IsBrainDead // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsActiveKungFuAttacker(); // Function Scavenger.S_AIController.IsActiveKungFuAttacker // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsAbilityActiveByName(struct FName AbilityName); // Function Scavenger.S_AIController.IsAbilityActiveByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasReservedOpportunityPoint(); // Function Scavenger.S_AIController.HasReservedOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Hail(struct FName hailTag, float MaxRange, float Loudness, float delayInSeconds); // Function Scavenger.S_AIController.Hail // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GiveItemToPlayer(struct AS_PlayerCharacter* sendingPlayerCharacter, struct AActor* receivingPlayerCharacter, struct FS_ItemState ItemState); // Function Scavenger.S_AIController.GiveItemToPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetSearchPeripheralVisionHalfAngle(); // Function Scavenger.S_AIController.GetSearchPeripheralVisionHalfAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UBehaviorTree* GetRootBehaviorTree(); // Function Scavenger.S_AIController.GetRootBehaviorTree // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_BakedOpportunityPoint GetReservedOpportunityPoint(); // Function Scavenger.S_AIController.GetReservedOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetOriginalPeripheralVisionHalfAngle(); // Function Scavenger.S_AIController.GetOriginalPeripheralVisionHalfAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetOpportunityPointUserData(); // Function Scavenger.S_AIController.GetOpportunityPointUserData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetOpportunityPointTextOpportunityType(); // Function Scavenger.S_AIController.GetOpportunityPointTextOpportunityType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetOpportunityPointRequiresRun(); // Function Scavenger.S_AIController.GetOpportunityPointRequiresRun // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetOpportunityPointRequiresNonStateMachine(); // Function Scavenger.S_AIController.GetOpportunityPointRequiresNonStateMachine // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetOpportunityPointOverlordAssigned(); // Function Scavenger.S_AIController.GetOpportunityPointOverlordAssigned // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetOpportunityPointID(); // Function Scavenger.S_AIController.GetOpportunityPointID // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfHostileTargetsInPerception(enum class ES_HostileTarget hostileType); // Function Scavenger.S_AIController.GetNumberOfHostileTargetsInPerception // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetMyOverlordSquadRef(struct FS_OverlordSquad outOverlordSquad); // Function Scavenger.S_AIController.GetMyOverlordSquadRef // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetMyOverlord(struct AS_AIOverlordActor* outOverlord); // Function Scavenger.S_AIController.GetMyOverlord // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetInvestigatePeripheralVisionHalfAngle(); // Function Scavenger.S_AIController.GetInvestigatePeripheralVisionHalfAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetFleePeripheralVisionHalfAngle(); // Function Scavenger.S_AIController.GetFleePeripheralVisionHalfAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetCustomScoringPoint(); // Function Scavenger.S_AIController.GetCustomScoringPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetCurrentTargetAge(); // Function Scavenger.S_AIController.GetCurrentTargetAge // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetCombatPeripheralVisionHalfAngle(); // Function Scavenger.S_AIController.GetCombatPeripheralVisionHalfAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCachedClosestOverlord(struct AS_AIOverlordActor* outOverlord); // Function Scavenger.S_AIController.GetCachedClosestOverlord // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetBBValueAsVector(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetBBValueAsString(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FRotator GetBBValueAsRotator(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetBBValueAsObject(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetBBValueAsName(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetBBValueAsInt(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBBValueAsFloat(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	char GetBBValueAsEnum(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetBBValueAsClass(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetBBValueAsBool(struct FName KeyName); // Function Scavenger.S_AIController.GetBBValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBBUpdateBoolCurrentTime(struct FName BBName); // Function Scavenger.S_AIController.GetBBUpdateBoolCurrentTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ForceScaleAISightRadiusAsIfWithTarget(); // Function Scavenger.S_AIController.ForceScaleAISightRadiusAsIfWithTarget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ForceFacing(struct FRotator facing, float facingTime); // Function Scavenger.S_AIController.ForceFacing // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ForceActiveInTargetKungFu(enum class ES_KungFuAttackerRange rangeToAddTo); // Function Scavenger.S_AIController.ForceActiveInTargetKungFu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventTerminalBy(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_AIController.EventTerminalBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventTerminal(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_AIController.EventTerminal // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventStatsStateChangedBy(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_AIController.EventStatsStateChangedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevivedBy(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_AIController.EventRevivedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevived(struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_AIController.EventRevived // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrectedBy(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_AIController.EventResurrectedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrected(struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_AIController.EventResurrected // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledBy(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_AIController.EventKilledBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilled(struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_AIController.EventKilled // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDownedBy(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_AIController.EventDownedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDowned(struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_AIController.EventDowned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamagedBy(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_AIController.EventDamagedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamaged(struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_AIController.EventDamaged // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventCausedStatsStateChange(struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_AIController.EventCausedStatsStateChange // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	bool CustomScoringPointIsValid(enum class ES_ScavengerResult resultOut); // Function Scavenger.S_AIController.CustomScoringPointIsValid // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearReservedOpportunityPoint(); // Function Scavenger.S_AIController.ClearReservedOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearCustomScoringPoint(); // Function Scavenger.S_AIController.ClearCustomScoringPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearBBValue(struct FName KeyName); // Function Scavenger.S_AIController.ClearBBValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanThrowGrenade_BP(float angleToTargetToAllowFire); // Function Scavenger.S_AIController.CanThrowGrenade_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanLeap(); // Function Scavenger.S_AIController.CanLeap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool BBUpdateBoolHasTimer(struct FName BBName); // Function Scavenger.S_AIController.BBUpdateBoolHasTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerBotDebugInfo(struct FString debugInfo); // Function Scavenger.S_AIController.AddPlayerBotDebugInfo // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ActivateAbilityByName(struct FName AbilityName); // Function Scavenger.S_AIController.ActivateAbilityByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AIKungFuAttacker
// Size: 0x48 (Inherited: 0x28)
struct US_AIKungFuAttacker : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Scavenger.S_AIKungFu
// Size: 0x90 (Inherited: 0x28)
struct US_AIKungFu : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct US_AIKungFuAttacker*> attackersToRemove; // 0x30(0x10)
	struct TArray<struct US_AIKungFuAttacker*> m_currentMeleeAttackers; // 0x40(0x10)
	struct TArray<struct US_AIKungFuAttacker*> m_currentMediumAttackers; // 0x50(0x10)
	struct TArray<struct US_AIKungFuAttacker*> m_currentExtendedAttackers; // 0x60(0x10)
	struct TArray<struct US_AIKungFuAttacker*> m_availableAttackers; // 0x70(0x10)
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Scavenger.S_AIKungFuManager
// Size: 0x90 (Inherited: 0x28)
struct US_AIKungFuManager : UObject {
	struct TMap<struct AS_CharacterBase*, struct US_AIKungFu*> CurrentSquads; // 0x28(0x50)
	int32_t DesiredNumberOfActiveMeleeAttackers; // 0x78(0x04)
	int32_t DesiredNumberOfActiveMediumAttackers; // 0x7c(0x04)
	int32_t DesiredNumberOfActiveExtendedAttackers; // 0x80(0x04)
	float HowLongToAttack; // 0x84(0x04)
	float TimeToWaitForFire; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Scavenger.S_AimAssistComponent
// Size: 0x1e8 (Inherited: 0xb0)
struct US_AimAssistComponent : UActorComponent {
	struct US_GameInstance* m_gameInstance; // 0xb0(0x08)
	struct AS_PlayerController* m_owningPlayerController; // 0xb8(0x08)
	struct FS_AimAssistCameraTransform m_cameraTransform; // 0xc0(0x18)
	struct TArray<struct FS_AimAssistRelevantPawnRecord> m_relevantPawns; // 0xd8(0x10)
	struct TArray<struct AActor*> m_actorsToIgnore; // 0xe8(0x10)
	char pad_F8[0xf0]; // 0xf8(0xf0)
};

// Class Scavenger.S_AimAssistDebugHUD
// Size: 0x3d0 (Inherited: 0x378)
struct AS_AimAssistDebugHUD : AHUD {
	char pad_378[0x58]; // 0x378(0x58)
};

// Class Scavenger.S_AIOverlordActor
// Size: 0x458 (Inherited: 0x288)
struct AS_AIOverlordActor : AActor {
	char pad_288[0x50]; // 0x288(0x50)
	struct UBlackboardData* BlackboardToUse; // 0x2d8(0x08)
	struct UBehaviorTree* BehaviorTreeToUse; // 0x2e0(0x08)
	struct UBlackboardComponent* Blackboard; // 0x2e8(0x08)
	struct UBehaviorTreeComponent* BrainComponent; // 0x2f0(0x08)
	char pad_2F8[0x10]; // 0x2f8(0x10)
	float CaptureRadius; // 0x308(0x04)
	float DownedPlayerCaptureRadius; // 0x30c(0x04)
	struct UBillboardComponent* TransformComponent; // 0x310(0x08)
	struct TArray<struct FS_OverlordSquad> Squads; // 0x318(0x10)
	struct TArray<struct FS_OverlordSquadStage> PredefinedStages; // 0x328(0x10)
	struct FMulticastInlineDelegate OnSquadStageChanged; // 0x338(0x10)
	struct TArray<struct AS_AISpawner*> LooseSpawners; // 0x348(0x10)
	struct TArray<struct FS_BakedOpportunityPoint> BakedOpportunityPoints; // 0x358(0x10)
	struct TArray<struct FS_OverlordSmatterAudioVolume> SmatterAudioVolumes; // 0x368(0x10)
	struct FVector ImportancePoint; // 0x378(0x0c)
	int32_t CurrentRank; // 0x384(0x04)
	bool IsAwareAlarm; // 0x388(0x01)
	char pad_389[0x3]; // 0x389(0x03)
	int32_t CountAlarmPinged; // 0x38c(0x04)
	bool AlarmSignalActivated; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float ExecutionReassignmentCooldown; // 0x394(0x04)
	float ExecutionAssignmentDelay; // 0x398(0x04)
	float ExecutionAssociatedActorRemovedDelay; // 0x39c(0x04)
	bool StingerOnCooldown; // 0x3a0(0x01)
	bool OutlanderRally; // 0x3a1(0x01)
	bool OutlanderBroken; // 0x3a2(0x01)
	bool AlarmRally; // 0x3a3(0x01)
	bool DebugTriggerAlarm; // 0x3a4(0x01)
	char pad_3A5[0x3]; // 0x3a5(0x03)
	struct TArray<struct FS_TriggerReference> AvailableTriggers; // 0x3a8(0x10)
	char pad_3B8[0x58]; // 0x3b8(0x58)
	float AILocationReportingInterval; // 0x410(0x04)
	char pad_414[0x28]; // 0x414(0x28)
	struct FName OriginalActorLabel; // 0x43c(0x08)
	char pad_444[0x14]; // 0x444(0x14)

	bool UseBlackboard(struct UBlackboardData* BlackboardAsset, struct UBlackboardComponent* BlackboardComponent); // Function Scavenger.S_AIOverlordActor.UseBlackboard // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetSquadStage(struct FString SquadName, struct FString StageName, enum class ES_StageChangeUrgency stageChangeUrgency, enum class ES_StageChangeStateHint stageChangeStateHint); // Function Scavenger.S_AIOverlordActor.SetSquadStage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetSquadLastLeapTimeToCurrentTime(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.SetSquadLastLeapTimeToCurrentTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetSquadLastGrenadeTimeToCurrentTime(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.SetSquadLastGrenadeTimeToCurrentTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsVector(struct FName KeyName, struct FVector VectorValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsString(struct FName KeyName, struct FString StringValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsRotator(struct FName KeyName, struct FRotator VectorValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsObject(struct FName KeyName, struct UObject* ObjectValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsName(struct FName KeyName, struct FName NameValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsInt(struct FName KeyName, int32_t IntValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsFloat(struct FName KeyName, float FloatValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsEnum(struct FName KeyName, char EnumValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsClass(struct FName KeyName, struct UObject* ClassValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetBBValueAsBool(struct FName KeyName, bool BoolValue); // Function Scavenger.S_AIOverlordActor.SetBBValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RunBehaviorTree(struct UBehaviorTree* BTAsset); // Function Scavenger.S_AIOverlordActor.RunBehaviorTree // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PingAlarm(); // Function Scavenger.S_AIOverlordActor.PingAlarm // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnSpawnerMaxedOut_BP(struct AS_Spawner* spawner); // Function Scavenger.S_AIOverlordActor.OnSpawnerMaxedOut_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerExitSmatterTrigger(struct AS_AISmatterVolume* TriggerVolume); // Function Scavenger.S_AIOverlordActor.OnPlayerExitSmatterTrigger // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnPlayerEnterSmatterTrigger(struct AS_AISmatterVolume* TriggerVolume); // Function Scavenger.S_AIOverlordActor.OnPlayerEnterSmatterTrigger // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnAISpawned_BP(struct AS_AICharacter* aiChar); // Function Scavenger.S_AIOverlordActor.OnAISpawned_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnAIKilled_BP(struct AS_AICharacter* aiChar); // Function Scavenger.S_AIOverlordActor.OnAIKilled_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsTargetCurrentlyInCombatWithOverlordAI(struct AActor* Target); // Function Scavenger.S_AIOverlordActor.IsTargetCurrentlyInCombatWithOverlordAI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSquadStrength(struct FString SquadName); // Function Scavenger.S_AIOverlordActor.GetSquadStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetSquadSpawnedActors(struct FString SquadName, struct TArray<struct AActor*> OutActors); // Function Scavenger.S_AIOverlordActor.GetSquadSpawnedActors // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetSquadRef(struct FString SquadName, struct FS_OverlordSquad outSquad); // Function Scavenger.S_AIOverlordActor.GetSquadRef // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetSquadLastLeapTime(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.GetSquadLastLeapTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSquadLastGrenadeTime(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.GetSquadLastGrenadeTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSquadHealthStrengthCombined(); // Function Scavenger.S_AIOverlordActor.GetSquadHealthStrengthCombined // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetSquadHealthStrength(struct FString SquadName); // Function Scavenger.S_AIOverlordActor.GetSquadHealthStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCanSquadThrowGrenade(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.GetCanSquadThrowGrenade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCanSquadLeap(struct AS_AIController* AIController); // Function Scavenger.S_AIOverlordActor.GetCanSquadLeap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetBBValueAsVector(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetBBValueAsString(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FRotator GetBBValueAsRotator(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetBBValueAsObject(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetBBValueAsName(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetBBValueAsInt(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBBValueAsFloat(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	char GetBBValueAsEnum(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetBBValueAsClass(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetBBValueAsBool(struct FName KeyName); // Function Scavenger.S_AIOverlordActor.GetBBValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_PlayerCharacter*> GetAllDownedPlayersInRange(bool filterActiveExecutions); // Function Scavenger.S_AIOverlordActor.GetAllDownedPlayersInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetAllAssociatedActors(struct TArray<struct AActor*> OutActors); // Function Scavenger.S_AIOverlordActor.GetAllAssociatedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetActiveAIInStage(struct FString StageName); // Function Scavenger.S_AIOverlordActor.GetActiveAIInStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CleanUpEmptySpawners(); // Function Scavenger.S_AIOverlordActor.CleanUpEmptySpawners // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void AssociatedActorRemoved_BP(struct AActor* Actor); // Function Scavenger.S_AIOverlordActor.AssociatedActorRemoved_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void AssociatedActorAdded_BP(struct AActor* Actor); // Function Scavenger.S_AIOverlordActor.AssociatedActorAdded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool AssignBestOpportunityPointToClosestPlayer(struct AS_AIController* controllerAssigned, struct FString matchingTextOpportunityType); // Function Scavenger.S_AIOverlordActor.AssignBestOpportunityPointToClosestPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_Overlord_BlackboardComponent
// Size: 0x1c0 (Inherited: 0x1b8)
struct US_Overlord_BlackboardComponent : UBlackboardComponent {
	char pad_1B8[0x8]; // 0x1b8(0x08)
};

// Class Scavenger.S_AIPathFollowingComponent
// Size: 0x258 (Inherited: 0x250)
struct US_AIPathFollowingComponent : UPathFollowingComponent {
	bool OverridePathfollowingAcceptanceRadius; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	float PathfollowingAcceptanceRadius; // 0x254(0x04)
};

// Class Scavenger.S_AIPerceptionSystem
// Size: 0x130 (Inherited: 0x130)
struct US_AIPerceptionSystem : UAIPerceptionSystem {
};

// Class Scavenger.S_AISense_Damage
// Size: 0x90 (Inherited: 0x90)
struct US_AISense_Damage : UAISense_Damage {
};

// Class Scavenger.S_AISense_Hail
// Size: 0x90 (Inherited: 0x80)
struct US_AISense_Hail : UAISense {
	struct TArray<struct FS_AIHailEvent> m_registeredEvents; // 0x80(0x10)

	void ReportHailEvent(struct AActor* Instigator, struct FName stimuliTag, float MaxRange, float delayInSeconds); // Function Scavenger.S_AISense_Hail.ReportHailEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AISenseConfig_Hail
// Size: 0x48 (Inherited: 0x48)
struct US_AISenseConfig_Hail : UAISenseConfig {
};

// Class Scavenger.S_AISense_Hearing
// Size: 0xe8 (Inherited: 0xe8)
struct US_AISense_Hearing : UAISense_Hearing {
};

// Class Scavenger.S_AISense_Sight
// Size: 0x150 (Inherited: 0x150)
struct US_AISense_Sight : UAISense_Sight {
};

// Class Scavenger.S_AreaVolumeBase
// Size: 0x2c0 (Inherited: 0x2c0)
struct AS_AreaVolumeBase : AVolume {
};

// Class Scavenger.S_AISmatterVolume
// Size: 0x2f8 (Inherited: 0x2c0)
struct AS_AISmatterVolume : AS_AreaVolumeBase {
	char pad_2C0[0x30]; // 0x2c0(0x30)
	struct FName OriginalActorLabel; // 0x2f0(0x08)
};

// Class Scavenger.S_Spawner
// Size: 0x3e0 (Inherited: 0x288)
struct AS_Spawner : AActor {
	char pad_288[0x4]; // 0x288(0x04)
	bool bAlwaysSpawnInPersistentLevel; // 0x28c(0x01)
	bool Sleeping; // 0x28d(0x01)
	char pad_28E[0x1]; // 0x28e(0x01)
	bool SpawnOneByOne; // 0x28f(0x01)
	bool OnlyUsePointsForSpawning; // 0x290(0x01)
	bool OnlyUsePointsForReplenish; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	int32_t m_maximumNumberOfSpawnedActors; // 0x294(0x04)
	int32_t MaximumNumberInitiallySpawnedActors; // 0x298(0x04)
	struct FVector2D m_minimumTimeBetweenSpawns; // 0x29c(0x08)
	struct FVector2D m_minimumTimeAfterInitalSpawns; // 0x2a4(0x08)
	bool ReplenishmentActive; // 0x2ac(0x01)
	char pad_2AD[0x3]; // 0x2ad(0x03)
	int32_t MaxReplenishmentCount; // 0x2b0(0x04)
	bool SpawnOnNavigationMesh; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float FallbackSpawnRadius; // 0x2b8(0x04)
	float FallbackSpawnHeight; // 0x2bc(0x04)
	float FitPointToGroundRaycastHeight; // 0x2c0(0x04)
	float FitPointToGroundTraceLength; // 0x2c4(0x04)
	float ActiveRadius; // 0x2c8(0x04)
	float InactiveRadius; // 0x2cc(0x04)
	float DefaultPointBlockingRadius; // 0x2d0(0x04)
	bool AllowSpawnWithPlayersInside; // 0x2d4(0x01)
	bool FitSpawnPointsToGround; // 0x2d5(0x01)
	bool ShouldOverrideVerticalOffset; // 0x2d6(0x01)
	char pad_2D7[0x1]; // 0x2d7(0x01)
	float VerticalOffsetOverride; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct FSoftObjectPath DataTableAssetReference; // 0x2e0(0x18)
	struct TSoftObjectPtr<struct UDataTable> SpawnDataTable; // 0x2f8(0x28)
	struct UDataTable* m_spawnDataTable; // 0x320(0x08)
	struct TArray<struct FS_SpawnPoints> SpawnPoints; // 0x328(0x10)
	struct UBillboardComponent* TransformComponent; // 0x338(0x08)
	char pad_340[0xc]; // 0x340(0x0c)
	int32_t TotalSpawnedCount; // 0x34c(0x04)
	int32_t TotalReplenishedCount; // 0x350(0x04)
	char pad_354[0x24]; // 0x354(0x24)
	struct TMap<struct FString, struct FSpawnTable> SpawnDataTables; // 0x378(0x50)
	struct TArray<struct AActor*> m_spawnedActors; // 0x3c8(0x10)
	char pad_3D8[0x8]; // 0x3d8(0x08)

	int32_t SpawnActorsManually(int32_t numberOfActors); // Function Scavenger.S_Spawner.SpawnActorsManually // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSpawnerObjectOpen(bool Open); // Function Scavenger.S_Spawner.SetSpawnerObjectOpen // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetReplenishActive(bool NewValue); // Function Scavenger.S_Spawner.SetReplenishActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestLoadDataTables(); // Function Scavenger.S_Spawner.RequestLoadDataTables // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitializeDataTables(); // Function Scavenger.S_Spawner.InitializeDataTables // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void GetSpawnedActors(struct TArray<struct AActor*> outActorArray); // Function Scavenger.S_Spawner.GetSpawnedActors // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DespawnAllActorsAndReset(); // Function Scavenger.S_Spawner.DespawnAllActorsAndReset // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BuildSpawnPointsFromTransforms(struct TArray<struct FTransform> Transforms); // Function Scavenger.S_Spawner.BuildSpawnPointsFromTransforms // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AISpawner
// Size: 0x4d0 (Inherited: 0x3e0)
struct AS_AISpawner : AS_Spawner {
	float LocationQueryAdditionalRadius; // 0x3e0(0x04)
	bool UseLocationQueryAdditionalRadius; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	struct FName StartingArea; // 0x3e8(0x08)
	bool PatrolOverride; // 0x3f0(0x01)
	bool UseInactiveRadiusForPerceptionCalculation; // 0x3f1(0x01)
	bool ShouldStartIgnoredByAI; // 0x3f2(0x01)
	bool bIsDynamicSpawnPoint; // 0x3f3(0x01)
	char pad_3F4[0xc]; // 0x3f4(0x0c)
	struct FS_SpawnPoints DynamicSpawnPointTemplate; // 0x400(0xb0)
	int32_t DynamicSpawnPointCount; // 0x4b0(0x04)
	int32_t MaxDynamicAICount; // 0x4b4(0x04)
	char pad_4B8[0x4]; // 0x4b8(0x04)
	struct FName OriginalActorLabel; // 0x4bc(0x08)
	char pad_4C4[0xc]; // 0x4c4(0x0c)

	int32_t SpawnAIAtLocation(int32_t numberOfActors, struct FTransform Transform, float SpawnRadius); // Function Scavenger.S_AISpawner.SpawnAIAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetNumLivingAI(); // Function Scavenger.S_AISpawner.GetNumLivingAI // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AITask_MoveTo
// Size: 0x118 (Inherited: 0x70)
struct US_AITask_MoveTo : UAITask {
	struct FMulticastInlineDelegate OnMoveFinished; // 0x70(0x10)
	enum class EPathFollowingResult MoveResult; // 0x80(0x01)
	enum class ENavPathEvent NavPathEvent; // 0x81(0x01)
	enum class EPathFollowingRequestResult PathFollowingRequestResult; // 0x82(0x01)
	char pad_83[0x5]; // 0x83(0x05)
	struct FAIMoveRequest MoveRequest; // 0x88(0x50)
	char pad_D8[0x40]; // 0xd8(0x40)

	float GetPathLength(); // Function Scavenger.S_AITask_MoveTo.GetPathLength // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_AITask_MoveTo* AIMoveTo(struct AAIController* Controller, struct FVector GoalLocation, struct AActor* GoalActor, float AcceptanceRadius, enum class EAIOptionFlag StopOnOverlap, enum class EAIOptionFlag AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, bool bStopMovementOnFinish, bool bProjectGoalOnNavigation, float MaxDistanceFromGoalActor, struct FVector OffsetFromLeader, bool bShouldDecelerateAtEndPoint); // Function Scavenger.S_AITask_MoveTo.AIMoveTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AITask_Wildlife_MoveTo
// Size: 0x128 (Inherited: 0x118)
struct US_AITask_Wildlife_MoveTo : US_AITask_MoveTo {
	char pad_118[0x10]; // 0x118(0x10)

	struct US_AITask_Wildlife_MoveTo* AIWildlifeMoveTo(struct AAIController* Controller, struct FVector GoalLocation, struct AActor* GoalActor, float AcceptanceRadius, enum class EAIOptionFlag StopOnOverlap, enum class EAIOptionFlag AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, bool bStopMovementOnFinish, bool bProjectGoalOnNavigation, float MaxDistanceFromGoalActor, struct FVector OffsetFromLeader, bool bShouldDecelerateAtEndPoint, bool bAttemptWideTurnAround, float MinAngleForTurnAroundInDegrees, float TurnRadius); // Function Scavenger.S_AITask_Wildlife_MoveTo.AIWildlifeMoveTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AITickManager
// Size: 0x728 (Inherited: 0xb0)
struct US_AITickManager : UActorComponent {
	char pad_B0[0x678]; // 0xb0(0x678)
};

// Class Scavenger.S_AITriggerVolume
// Size: 0x2e0 (Inherited: 0x2c0)
struct AS_AITriggerVolume : AS_AreaVolumeBase {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct FName OriginalActorLabel; // 0x2d8(0x08)
};

// Class Scavenger.S_AkCallbackManager
// Size: 0xf0 (Inherited: 0x28)
struct US_AkCallbackManager : UObject {
	char pad_28[0xc8]; // 0x28(0xc8)
};

// Class Scavenger.S_AlphaPostProcessComponent
// Size: 0x240 (Inherited: 0x200)
struct US_AlphaPostProcessComponent : USceneComponent {
	int32_t DefaultAlphaScreenPercentage; // 0x1f8(0x04)
	struct TArray<struct UPrimitiveComponent*> m_screenAlignedPrimitives; // 0x200(0x10)
	char pad_214[0x2c]; // 0x214(0x2c)

	void RemoveStaticMesh(struct UStaticMeshComponent* StaticMeshComponent); // Function Scavenger.S_AlphaPostProcessComponent.RemoveStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveBillboard(struct UMaterialBillboardComponent* BillboardComponent); // Function Scavenger.S_AlphaPostProcessComponent.RemoveBillboard // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UPrimitiveComponent* FindLayer(struct FName LayerName); // Function Scavenger.S_AlphaPostProcessComponent.FindLayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearLayers(); // Function Scavenger.S_AlphaPostProcessComponent.ClearLayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UMaterialBillboardComponent* AddWorldBillboard(struct UMaterialInterface* Material, int32_t SizeX, int32_t SizeY, bool isScreenSize, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddWorldBillboard // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UStaticMeshComponent* AddStaticMesh(struct UMaterialInterface* Material, struct UStaticMesh* StaticMesh, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UStaticMeshComponent* AddSphere(struct UMaterialInterface* Material, struct FVector Origin, float Radius, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddSphere // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UMaterialBillboardComponent* AddScreenBillboard(struct UMaterialInterface* Material, int32_t SizeX, int32_t SizeY, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddScreenBillboard // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UStaticMeshComponent* AddFullscreenQuad(struct UMaterialInterface* Material, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddFullscreenQuad // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UStaticMeshComponent* AddBox(struct UMaterialInterface* Material, struct FVector Origin, struct FVector Extent, struct FName LayerName, int32_t sortIndex); // Function Scavenger.S_AlphaPostProcessComponent.AddBox // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AmbianceComponent
// Size: 0x210 (Inherited: 0x200)
struct US_AmbianceComponent : USceneComponent {
	float m_ActivationRadius; // 0x1f8(0x04)
	struct US_AmbianceSystemComponent* m_AmbianceSystem; // 0x200(0x08)
	bool m_bFailedInit; // 0x208(0x01)
	bool m_bIsEnabled; // 0x209(0x01)
	char pad_20E[0x2]; // 0x20e(0x02)

	void SetIsEnabled(bool IsEnabled); // Function Scavenger.S_AmbianceComponent.SetIsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsEnabled(); // Function Scavenger.S_AmbianceComponent.IsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AmbianceBedComponent
// Size: 0x230 (Inherited: 0x210)
struct US_AmbianceBedComponent : US_AmbianceComponent {
	struct US_AmbianceBedDataAsset* m_AmbianceBedAsset; // 0x210(0x08)
	bool m_bForceUnique; // 0x218(0x01)
	char pad_219[0x3]; // 0x219(0x03)
	struct FName m_GroupName; // 0x21c(0x08)
	char pad_224[0xc]; // 0x224(0x0c)

	struct FS_AmbianceBedData GetAmbianceBedData(); // Function Scavenger.S_AmbianceBedComponent.GetAmbianceBedData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AmbianceEmitterComponent
// Size: 0x230 (Inherited: 0x210)
struct US_AmbianceEmitterComponent : US_AmbianceComponent {
	struct TArray<struct FTransform> m_RandomEmitterTransforms; // 0x210(0x10)
	struct US_AmbianceEmitterDataAsset* m_AmbianceEmitterAsset; // 0x220(0x08)
	char pad_228[0x8]; // 0x228(0x08)

	struct FTransform GetRandomEmitterTransform(); // Function Scavenger.S_AmbianceEmitterComponent.GetRandomEmitterTransform // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_AmbianceEmitterData GetAmbianceEmitterData(); // Function Scavenger.S_AmbianceEmitterComponent.GetAmbianceEmitterData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AmbianceBedDataAsset
// Size: 0x40 (Inherited: 0x30)
struct US_AmbianceBedDataAsset : UDataAsset {
	struct FS_AmbianceBedData m_AmbianceBedData; // 0x30(0x10)
};

// Class Scavenger.S_AmbianceEmitterDataAsset
// Size: 0x40 (Inherited: 0x30)
struct US_AmbianceEmitterDataAsset : UDataAsset {
	struct FS_AmbianceEmitterData m_AmbianceEmitterData; // 0x30(0x10)
};

// Class Scavenger.S_AmbianceSystemComponent
// Size: 0x210 (Inherited: 0xb0)
struct US_AmbianceSystemComponent : UActorComponent {
	char pad_B0[0x20]; // 0xb0(0x20)
	struct TArray<struct US_AmbianceBedComponent*> TrackedAmbianceBedComponents; // 0xd0(0x10)
	struct TArray<struct US_AmbianceEmitterComponent*> TrackedAmbianceEmitterComponents; // 0xe0(0x10)
	char pad_F0[0x120]; // 0xf0(0x120)
};

// Class Scavenger.S_Animatable
// Size: 0x28 (Inherited: 0x28)
struct US_Animatable : UInterface {

	struct UAnimInstance* GetAnimInstance(); // Function Scavenger.S_Animatable.GetAnimInstance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AnimInstance
// Size: 0x370 (Inherited: 0x2c0)
struct US_AnimInstance : UAnimInstance {
	bool bSkipNextCriticalNotifies; // 0x2b8(0x01)
	char pad_2C1[0xaf]; // 0x2c1(0xaf)

	void ScavBlueprintUpdateFastPath(); // Function Scavenger.S_AnimInstance.ScavBlueprintUpdateFastPath // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ScavBlueprintUpdateAnimation(float DeltaSeconds); // Function Scavenger.S_AnimInstance.ScavBlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPreBoneFinalization_BP(); // Function Scavenger.S_AnimInstance.OnPreBoneFinalization_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnAttack_BP(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_AnimInstance.OnAttack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnAnimMontageEnded(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AnimInstance.OnAnimMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnAnimMontageBlendingOut(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AnimInstance.OnAnimMontageBlendingOut // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnAnimMontageBegin(struct UAnimMontage* Montage, int32_t montageInstanceID); // Function Scavenger.S_AnimInstance.OnAnimMontageBegin // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool IsPlayingRootMotionAnimation(); // Function Scavenger.S_AnimInstance.IsPlayingRootMotionAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsMontageQueuedOrActivelyPlaying(struct UAnimMontage* Montage); // Function Scavenger.S_AnimInstance.IsMontageQueuedOrActivelyPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleOnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_AnimInstance.HandleOnMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAllMontageInstancesEnded(); // Function Scavenger.S_AnimInstance.HandleOnAllMontageInstancesEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AnimNotifyBase
// Size: 0x40 (Inherited: 0x38)
struct US_AnimNotifyBase : UAnimNotify {
	bool m_Critical; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_AnimNotify_AttackEventCurrentWeapon
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_AttackEventCurrentWeapon : US_AnimNotifyBase {
	enum class ES_AnimAttackEventType AttackEventType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_AttackEventMelee
// Size: 0x90 (Inherited: 0x40)
struct US_AnimNotify_AttackEventMelee : US_AnimNotifyBase {
	enum class ES_AnimAttackEventType AttackEventType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FFloatInterval PitchInterval; // 0x44(0x08)
	float MinAngle; // 0x4c(0x04)
	float MaxAngle; // 0x50(0x04)
	float ForwardDistance; // 0x54(0x04)
	float AIForwardDistanceScalar; // 0x58(0x04)
	float HalfHeight; // 0x5c(0x04)
	struct FVector StartingOffset; // 0x60(0x0c)
	float DamageMultiplierOnNONCharacter; // 0x6c(0x04)
	float DamageMultiplier; // 0x70(0x04)
	struct FVector MeleeDirectionOverride; // 0x74(0x0c)
	bool IgnorePitch; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct UAnimMontage* RecoilMontage; // 0x88(0x08)
};

// Class Scavenger.S_AnimNotify_AttackEventResetMelee
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_AttackEventResetMelee : US_AnimNotifyBase {
	enum class ES_AnimAttackEventType AttackEventType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_AudioEventTag
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_AudioEventTag : US_AnimNotifyBase {
	struct US_AIAudioEventType* Event; // 0x40(0x08)
};

// Class Scavenger.S_AnimNotify_ChangeKeeperCloakState
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_ChangeKeeperCloakState : US_AnimNotifyBase {
	enum class ES_KeeperCloakState NewKeeperState; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.SAN_WeaponEvent
// Size: 0x40 (Inherited: 0x40)
struct USAN_WeaponEvent : US_AnimNotifyBase {
};

// Class Scavenger.SAN_AttackEvent
// Size: 0x48 (Inherited: 0x40)
struct USAN_AttackEvent : USAN_WeaponEvent {
	enum class ES_AnimAttackEventType AttackEventType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_CreateGrenade
// Size: 0x48 (Inherited: 0x48)
struct US_AnimNotify_CreateGrenade : USAN_AttackEvent {
};

// Class Scavenger.S_AnimNotify_DealAssassinationDamage
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_DealAssassinationDamage : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_DealExecutionDamage
// Size: 0x58 (Inherited: 0x40)
struct US_AnimNotify_DealExecutionDamage : US_AnimNotifyBase {
	bool bIsFatal; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float Damage; // 0x44(0x04)
	float CameraShakeScale; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UMatineeCameraShake* CameraShakeType; // 0x50(0x08)
};

// Class Scavenger.S_AnimNotify_EmotePlantItem
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_EmotePlantItem : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_EmoteSpawnItem
// Size: 0xe0 (Inherited: 0x40)
struct US_AnimNotify_EmoteSpawnItem : US_AnimNotifyBase {
	struct AActor* SpawnedItemClass; // 0x40(0x08)
	float InLifespan; // 0x48(0x04)
	struct FName BannerParameterName; // 0x4c(0x08)
	struct FName EmblemParameterName; // 0x54(0x08)
	int32_t MaterialIndex; // 0x5c(0x04)
	struct FName SocketName; // 0x60(0x08)
	char pad_68[0x78]; // 0x68(0x78)
};

// Class Scavenger.S_AnimNotify_ExecutionCamera
// Size: 0x90 (Inherited: 0x40)
struct US_AnimNotify_ExecutionCamera : US_AnimNotifyBase {
	bool OverrideFovSetting; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FS_CameraArmFOVSettings FovSettings; // 0x44(0x04)
	bool OverrideLengthSettings; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FS_CameraArmLengthSettings LengthSettings; // 0x4c(0x04)
	bool OverrideSocketOffsetSetting; // 0x50(0x01)
	char pad_51[0xf]; // 0x51(0x0f)
	struct FS_CamerArmSocketOffsetSettings SocketOffsetSetting; // 0x60(0x20)
	bool OverrideTargetOffsetSetting; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FS_CamerArmTranslationOffsetSettings TargetOffsetSetting; // 0x84(0x0c)
};

// Class Scavenger.S_AnimNotify_Foley
// Size: 0x50 (Inherited: 0x40)
struct US_AnimNotify_Foley : US_AnimNotifyBase {
	enum class ES_FoleyEvent FoleyType; // 0x40(0x01)
	bool IsVoice; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	struct FName CustomName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Scavenger.S_AnimNotify_Footstep
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_Footstep : US_AnimNotifyBase {
	enum class ES_FootstepWeight FootstepWeight; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_InfectedMontageFinished
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_InfectedMontageFinished : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_KeeperAttachToSocket
// Size: 0x50 (Inherited: 0x40)
struct US_AnimNotify_KeeperAttachToSocket : US_AnimNotifyBase {
	float SocketBlendTime; // 0x40(0x04)
	struct FName SocketName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Scavenger.S_AnimNotify_KeeperAttachToSpringArm
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_KeeperAttachToSpringArm : US_AnimNotifyBase {
	float SocketBlendTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Scavenger.S_AnimNotify_KeeperPerformAction
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_KeeperPerformAction : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_LeapLaunch
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_LeapLaunch : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_MeleeSound
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_MeleeSound : US_AnimNotifyBase {
	enum class ES_MeleeSoundStrength Strength; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_PlayCameraShake
// Size: 0x58 (Inherited: 0x40)
struct US_AnimNotify_PlayCameraShake : US_AnimNotifyBase {
	struct UMatineeCameraShake* ShakeClass; // 0x40(0x08)
	float InnerRadius; // 0x48(0x04)
	float OuterRadius; // 0x4c(0x04)
	float Falloff; // 0x50(0x04)
	bool bOrientShakeTowardsEpicenter; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Scavenger.S_AnimNotify_PlayWeaponMontage
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_PlayWeaponMontage : US_AnimNotifyBase {
	struct UAnimMontage* WeaponMontage; // 0x40(0x08)
};

// Class Scavenger.S_AnimNotify_ReadyEventCurrentWeapon
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_ReadyEventCurrentWeapon : US_AnimNotifyBase {
	enum class ES_AnimReadyEvent EventType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float SocketBlendTime; // 0x44(0x04)
};

// Class Scavenger.S_AnimNotify_ReleaseGrenadeTrigger
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_ReleaseGrenadeTrigger : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_ReloadEventCurrentWeapon
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_ReloadEventCurrentWeapon : US_AnimNotifyBase {
	enum class ES_AnimReloadEventType ReloadEventType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_ReloadSound
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_ReloadSound : US_AnimNotifyBase {
	enum class ES_ReloadSound ReloadSound; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_ResetRunnerGravity
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_ResetRunnerGravity : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_RunnerLeapLaunch
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_RunnerLeapLaunch : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_SetBraindead
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_SetBraindead : US_AnimNotifyBase {
	bool SetBrainDead; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_AnimNotify_SpawnMontageFinished
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_SpawnMontageFinished : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotify_StowEventCurrentWeapon
// Size: 0x48 (Inherited: 0x40)
struct US_AnimNotify_StowEventCurrentWeapon : US_AnimNotifyBase {
	enum class ES_AnimStowEvent EventType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float SocketBlendTime; // 0x44(0x04)
};

// Class Scavenger.S_AnimNotify_TurnOnRagdoll
// Size: 0x40 (Inherited: 0x40)
struct US_AnimNotify_TurnOnRagdoll : US_AnimNotifyBase {
};

// Class Scavenger.S_AnimNotifyStateBase
// Size: 0x30 (Inherited: 0x30)
struct US_AnimNotifyStateBase : UAnimNotifyState {
};

// Class Scavenger.S_AnimNotifyState_AIBrainDead
// Size: 0x30 (Inherited: 0x30)
struct US_AnimNotifyState_AIBrainDead : US_AnimNotifyStateBase {
};

// Class Scavenger.S_AnimNotifyState_AssassinationSucc
// Size: 0x38 (Inherited: 0x30)
struct US_AnimNotifyState_AssassinationSucc : US_AnimNotifyStateBase {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Scavenger.S_AnimNotifyState_AttachMagToHand
// Size: 0x90 (Inherited: 0x30)
struct US_AnimNotifyState_AttachMagToHand : US_AnimNotifyStateBase {
	struct TMap<struct USkeletalMeshComponent*, struct FS_OriginalMagazineAttachInfo> AnimInstanceToAttachInfo; // 0x30(0x50)
	struct FName CharacterAttachSocket; // 0x80(0x08)
	float AttachmentBlendInTime; // 0x88(0x04)
	float AttachmentBlendOutTime; // 0x8c(0x04)
};

// Class Scavenger.S_AnimNotifyState_AttackSyncSucc
// Size: 0x38 (Inherited: 0x30)
struct US_AnimNotifyState_AttackSyncSucc : US_AnimNotifyStateBase {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Scavenger.S_AnimNotifyState_BlockAIControllerRotation
// Size: 0x38 (Inherited: 0x30)
struct US_AnimNotifyState_BlockAIControllerRotation : US_AnimNotifyStateBase {
	bool ResetControlRotationToPawnRotation; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Scavenger.S_AnimNotifyState_CapsuleSucc
// Size: 0xa0 (Inherited: 0x30)
struct US_AnimNotifyState_CapsuleSucc : US_AnimNotifyStateBase {
	bool AIWindow; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FFloatRange AllowedCapsuleSuccDistance; // 0x34(0x10)
	struct FFloatRange AllowedCapsuleSuccDistanceServer; // 0x44(0x10)
	struct FFloatRange CapsuleSuccAngleTolerance; // 0x54(0x10)
	struct FFloatRange CapsuleSuccAngleToleranceServer; // 0x64(0x10)
	struct FFloatRange DesiredEndingDistanceRange; // 0x74(0x10)
	struct FFloatRange AllowedCapsuleSuccSpeed; // 0x84(0x10)
	struct FFloatInterval AITargetMoveWithinAngleRange; // 0x94(0x08)
	float AITargetMoveToMaxSpeed; // 0x9c(0x04)
};

// Class Scavenger.S_AnimNotifyState_ChargeComboWindow
// Size: 0x40 (Inherited: 0x30)
struct US_AnimNotifyState_ChargeComboWindow : US_AnimNotifyStateBase {
	bool ForceMontageAtEnd; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UAnimMontage* Montage; // 0x38(0x08)
};

// Class Scavenger.S_AnimNotifyState_DisableInput
// Size: 0x38 (Inherited: 0x30)
struct US_AnimNotifyState_DisableInput : US_AnimNotifyStateBase {
	bool DisableAllInput; // 0x30(0x01)
	bool DisableMoveInput; // 0x31(0x01)
	bool DisableWeaponInput; // 0x32(0x01)
	bool DisableInteractInput; // 0x33(0x01)
	bool DisableUIInput; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class Scavenger.S_AnimNotifyState_GiveGE
// Size: 0x40 (Inherited: 0x30)
struct US_AnimNotifyState_GiveGE : US_AnimNotifyStateBase {
	struct UGameplayEffect* AppliedEffect; // 0x30(0x08)
	float Level; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Scavenger.S_AnimNotifyState_MeleeRecoil
// Size: 0x68 (Inherited: 0x30)
struct US_AnimNotifyState_MeleeRecoil : US_AnimNotifyStateBase {
	float YawBegin; // 0x30(0x04)
	float PitchBegin; // 0x34(0x04)
	float YawEnd; // 0x38(0x04)
	float PitchEnd; // 0x3c(0x04)
	float RayDistance; // 0x40(0x04)
	struct FVector MeleeOffset; // 0x44(0x0c)
	struct UAnimMontage* RecoilMontage; // 0x50(0x08)
	float TickRate; // 0x58(0x04)
	char pad_5C[0xc]; // 0x5c(0x0c)
};

// Class Scavenger.S_AnimNotifyState_PoiseLock
// Size: 0x30 (Inherited: 0x30)
struct US_AnimNotifyState_PoiseLock : US_AnimNotifyStateBase {
};

// Class Scavenger.S_AnimNotifyState_SelectTarget
// Size: 0x48 (Inherited: 0x30)
struct US_AnimNotifyState_SelectTarget : US_AnimNotifyStateBase {
	struct FFloatInterval AllowedTargetDistanceFromAttacker; // 0x30(0x08)
	struct FFloatInterval AllowedTargetYawFromAttackerFacingDirection; // 0x38(0x08)
	float DistanceToAngleWeightRatio; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Scavenger.S_VolumeComponent
// Size: 0x4e0 (Inherited: 0x4e0)
struct US_VolumeComponent : UStaticMeshComponent {

	void NotifyComponentEndOverlap(struct UPrimitiveComponent* ourComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex); // Function Scavenger.S_VolumeComponent.NotifyComponentEndOverlap // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyComponentBeginOverlap(struct UPrimitiveComponent* ourComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult HitResult); // Function Scavenger.S_VolumeComponent.NotifyComponentBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AreaVolumeComponentBase
// Size: 0x4e0 (Inherited: 0x4e0)
struct US_AreaVolumeComponentBase : US_VolumeComponent {
};

// Class Scavenger.S_AssassinationAbility
// Size: 0x3f0 (Inherited: 0x3b8)
struct US_AssassinationAbility : US_GameplayAbility {
	char pad_3B8[0x4]; // 0x3b8(0x04)
	float MaxAssassinationDistance; // 0x3bc(0x04)
	float MaxAssassinationConeAngle; // 0x3c0(0x04)
	float MaxAssassinationTargetBackConeAngle; // 0x3c4(0x04)
	struct UGameplayEffect* AttackerGameplayEffect; // 0x3c8(0x08)
	struct UGameplayEffect* VictimGameplayEffect; // 0x3d0(0x08)
	struct AS_AICharacter* m_target; // 0x3d8(0x08)
	char pad_3E0[0x10]; // 0x3e0(0x10)

	void OnMontageEnded(); // Function Scavenger.S_AssassinationAbility.OnMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AssassinationMontagePackage
// Size: 0x6b0 (Inherited: 0x30)
struct US_AssassinationMontagePackage : UDataAsset {
	struct FS_WeaponAssassinationMontages WeaponClassDefaults[0x12]; // 0x30(0x630)
	struct TMap<SoftClassProperty, struct FS_WeaponAssassinationMontages> WeaponOverrides; // 0x660(0x50)
};

// Class Scavenger.S_AsyncSpringArmComponent
// Size: 0x290 (Inherited: 0x280)
struct US_AsyncSpringArmComponent : USpringArmComponent {
	char pad_280[0x10]; // 0x280(0x10)
};

// Class Scavenger.S_AttackEventMontagePackage
// Size: 0x130 (Inherited: 0x30)
struct US_AttackEventMontagePackage : UDataAsset {
	struct FS_CharacterStanceContainer CharacterStates[0x4]; // 0x30(0x100)
};

// Class Scavenger.S_CharacterMontagePackage
// Size: 0x620 (Inherited: 0x30)
struct US_CharacterMontagePackage : UDataAsset {
	struct FS_WeaponBaseMontagePackage WeaponClassMontagePackages[0x12]; // 0x30(0x5a0)
	struct TMap<SoftClassProperty, struct FS_WeaponBaseMontagePackage> WeaponOverrideMontagePackages; // 0x5d0(0x50)
};

// Class Scavenger.S_WeaponMontagePackage
// Size: 0xd0 (Inherited: 0x30)
struct US_WeaponMontagePackage : UDataAsset {
	struct FS_CharacterBaseMontagePackage DefaultCharacterMontagePackages; // 0x30(0x50)
	struct TMap<SoftClassProperty, struct FS_CharacterBaseMontagePackage> CharacterOverrideMontagePackages; // 0x80(0x50)
};

// Class Scavenger.S_WeaponAttachmentMontagePackage
// Size: 0x80 (Inherited: 0x30)
struct US_WeaponAttachmentMontagePackage : UDataAsset {
	struct TMap<enum class ES_WeaponMontageEvent, struct FS_WeaponAttachmentOverridePackages> EventMontagePackages; // 0x30(0x50)
};

// Class Scavenger.S_AttributeSetBase
// Size: 0x160 (Inherited: 0x30)
struct US_AttributeSetBase : UAttributeSet {
	struct FMulticastInlineDelegate OnAnyAttributeChanged; // 0x30(0x10)
	char pad_40[0x120]; // 0x40(0x120)

	bool Matches(struct FName AttributeName, struct FGameplayAttribute GameplayAttribute); // Function Scavenger.S_AttributeSetBase.Matches // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetInitialAttributeValue(struct FName AttributeName, float notFoundValue); // Function Scavenger.S_AttributeSetBase.GetInitialAttributeValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValueWithWeaponClassContext(struct FName baseAttributeName, enum class ES_WeaponClass WeaponClass); // Function Scavenger.S_AttributeSetBase.GetAttributeValueWithWeaponClassContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValueWithIsUsingADSContext(struct FName baseAttributeName, bool bIsUsingADS); // Function Scavenger.S_AttributeSetBase.GetAttributeValueWithIsUsingADSContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValueWithChangeCauseContext(struct FName baseAttributeName, enum class ES_StatChangeCauseType changeCause); // Function Scavenger.S_AttributeSetBase.GetAttributeValueWithChangeCauseContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValue(struct FName AttributeName, float notFoundValue); // Function Scavenger.S_AttributeSetBase.GetAttributeValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddAttributeChangedListener(struct FName AttributeName, struct FDelegate onAttributeChanged); // Function Scavenger.S_AttributeSetBase.AddAttributeChangedListener // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AttributeSetActor
// Size: 0xe60 (Inherited: 0x160)
struct US_AttributeSetActor : US_AttributeSetBase {
	struct FS_GameplayAttributeData Armor; // 0x160(0x90)
	struct FS_GameplayAttributeData ArmorMaximum; // 0x1f0(0x90)
	struct FS_GameplayAttributeData ArmorPerLevel; // 0x280(0x90)
	struct FS_GameplayAttributeData Cloaked; // 0x310(0x90)
	struct FS_GameplayAttributeData DamageResistance; // 0x3a0(0x90)
	struct FS_GameplayAttributeData DamageResistanceExplosive; // 0x430(0x90)
	struct FS_GameplayAttributeData DamageResistanceFalling; // 0x4c0(0x90)
	struct FS_GameplayAttributeData DamageResistanceRadiation; // 0x550(0x90)
	struct FS_GameplayAttributeData Health; // 0x5e0(0x90)
	struct FS_GameplayAttributeData HealthMaximum; // 0x670(0x90)
	struct FS_GameplayAttributeData HealthRecoveryLimitMaximum; // 0x700(0x90)
	struct FS_GameplayAttributeData HealthRegenRate; // 0x790(0x90)
	struct FS_GameplayAttributeData HealthStunTime; // 0x820(0x90)
	struct FGameplayAttributeData Parameter_DamageAmount; // 0x8b0(0x10)
	struct FS_GameplayAttributeData Shield; // 0x8c0(0x90)
	struct FS_GameplayAttributeData ShieldMaximum; // 0x950(0x90)
	struct FS_GameplayAttributeData ShieldPercentRegenRate; // 0x9e0(0x90)
	struct FS_GameplayAttributeData ShieldRebootTimer; // 0xa70(0x90)
	struct FS_GameplayAttributeData ShieldStunTimer; // 0xb00(0x90)
	struct FS_GameplayAttributeData ShieldPercentL1; // 0xb90(0x90)
	struct FS_GameplayAttributeData ShieldPercentL2; // 0xc20(0x90)
	struct FS_GameplayAttributeData ShieldPercentL3; // 0xcb0(0x90)
	struct FS_GameplayAttributeData ShieldPercentL4; // 0xd40(0x90)
	struct FS_GameplayAttributeData ShieldPercentL5; // 0xdd0(0x90)

	void NotifyReplicatedShieldStunTimer(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldStunTimer // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldRebootTimer(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldRebootTimer // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentRegenRate(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentRegenRate // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentL5(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentL5 // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentL4(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentL4 // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentL3(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentL3 // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentL2(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentL2 // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldPercentL1(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldPercentL1 // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShieldMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShield(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedShield // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealthStunTime(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedHealthStunTime // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealthRegenRate(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedHealthRegenRate // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealthRecoveryLimitMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedHealthRecoveryLimitMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealthMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedHealthMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealth(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedHealth // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageResistanceRadiation(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedDamageResistanceRadiation // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageResistanceFalling(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedDamageResistanceFalling // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageResistanceExplosive(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedDamageResistanceExplosive // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageResistance(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedDamageResistance // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCloaked(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedCloaked // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedArmorPerLevel(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedArmorPerLevel // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedArmorMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedArmorMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedArmor(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetActor.NotifyReplicatedArmor // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AttributeSetPawn
// Size: 0xe60 (Inherited: 0xe60)
struct US_AttributeSetPawn : US_AttributeSetActor {
};

// Class Scavenger.S_AttributeSetCharacter
// Size: 0x36e0 (Inherited: 0xe60)
struct US_AttributeSetCharacter : US_AttributeSetPawn {
	struct FS_GameplayAttributeData ColdResistance; // 0xe60(0x90)
	struct FS_GameplayAttributeData CollapsingStormFreezingHealthRecoveryLimitMaximumLossPerSecond; // 0xef0(0x90)
	struct FS_GameplayAttributeData DamageFractionToApplyToRecoveryLimit; // 0xf80(0x90)
	struct FS_GameplayAttributeData DamageMultiplier; // 0x1010(0x90)
	struct FS_GameplayAttributeData DamageMultiplierBoundsMax; // 0x10a0(0x90)
	struct FS_GameplayAttributeData DamageMultiplierBow; // 0x1130(0x90)
	struct FS_GameplayAttributeData DamageMultiplierExplosive; // 0x11c0(0x90)
	struct FS_GameplayAttributeData DamageMultiplierMelee; // 0x1250(0x90)
	struct FS_GameplayAttributeData DamageMultiplierPistol; // 0x12e0(0x90)
	struct FS_GameplayAttributeData DamageMultiplierRanged; // 0x1370(0x90)
	struct FS_GameplayAttributeData DamageMultiplierRifle; // 0x1400(0x90)
	struct FS_GameplayAttributeData DamageMultiplierShotgun; // 0x1490(0x90)
	struct FS_GameplayAttributeData DamageOverTimeAcidCount; // 0x1520(0x90)
	struct FS_GameplayAttributeData DamageOverTimeBleedCount; // 0x15b0(0x90)
	struct FS_GameplayAttributeData DamageOverTimeFireCount; // 0x1640(0x90)
	struct FS_GameplayAttributeData DamageOverTimePlasmaCount; // 0x16d0(0x90)
	struct FS_GameplayAttributeData DamageOverTimePoisonCount; // 0x1760(0x90)
	struct FS_GameplayAttributeData DodgeCooldownSpeedMultiplier; // 0x17f0(0x90)
	struct FS_GameplayAttributeData DownedStateBleedOutSpeedMultiplier; // 0x1880(0x90)
	struct FS_GameplayAttributeData ExhaustionDebuffDurationInSeconds; // 0x1910(0x90)
	struct FS_GameplayAttributeData FireSpeedMultiplier; // 0x19a0(0x90)
	struct FS_GameplayAttributeData FireSpeedMultiplierMelee; // 0x1a30(0x90)
	struct FS_GameplayAttributeData FireSpeedMultiplierMeleeMaximum; // 0x1ac0(0x90)
	struct FS_GameplayAttributeData FireSpeedMultiplierPistol; // 0x1b50(0x90)
	struct FS_GameplayAttributeData FlinchMultiplier; // 0x1be0(0x90)
	struct FS_GameplayAttributeData FlinchADSMultiplier; // 0x1c70(0x90)
	struct FS_GameplayAttributeData FoodHealthBonusMultiplier; // 0x1d00(0x90)
	struct FS_GameplayAttributeData FoodHealthBonusMultiplierRaw; // 0x1d90(0x90)
	struct FS_GameplayAttributeData FreezingHealthRecoveryLimitMaximumLossPerSecond; // 0x1e20(0x90)
	struct FS_GameplayAttributeData HealthRecoveryLimit; // 0x1eb0(0x90)
	struct FS_GameplayAttributeData Hunger; // 0x1f40(0x90)
	struct FS_GameplayAttributeData InventoryStackSizeMultiplier; // 0x1fd0(0x90)
	struct FS_GameplayAttributeData LootAmountMultiplierAnimal; // 0x2060(0x90)
	struct FS_GameplayAttributeData MovementAbilitySpeedMultiplier; // 0x20f0(0x90)
	struct FS_GameplayAttributeData MovementSpeedADSMultiplier; // 0x2180(0x90)
	struct FS_GameplayAttributeData MovementSpeedCrouch; // 0x2210(0x90)
	struct FS_GameplayAttributeData MovementSpeedDownedMultiplier; // 0x22a0(0x90)
	struct FS_GameplayAttributeData MovementSpeedMultiplier; // 0x2330(0x90)
	struct FS_GameplayAttributeData MovementSpeedSprintBonus; // 0x23c0(0x90)
	struct FS_GameplayAttributeData MovementSpeedWalk; // 0x2450(0x90)
	struct FS_GameplayAttributeData Radiation; // 0x24e0(0x90)
	struct FS_GameplayAttributeData RadiationMaximum; // 0x2570(0x90)
	struct FS_GameplayAttributeData RecoilADSMultiplier; // 0x2600(0x90)
	struct FS_GameplayAttributeData RecoilHipfireMultiplier; // 0x2690(0x90)
	struct FS_GameplayAttributeData ReloadSpeedMultiplier; // 0x2720(0x90)
	struct FS_GameplayAttributeData ReviveSpeedMultiplier; // 0x27b0(0x90)
	struct FS_GameplayAttributeData SpreadPerShotADSMultiplier; // 0x2840(0x90)
	struct FS_GameplayAttributeData SpreadPerShotHipfireMultiplier; // 0x28d0(0x90)
	struct FS_GameplayAttributeData SpreadRateMovingMultiplier; // 0x2960(0x90)
	struct FS_GameplayAttributeData SpreadRateSteadyMultiplier; // 0x29f0(0x90)
	struct FS_GameplayAttributeData SpreadMaxADSMultiplier; // 0x2a80(0x90)
	struct FS_GameplayAttributeData SpreadMaxHipfireMultiplier; // 0x2b10(0x90)
	struct FS_GameplayAttributeData Stamina; // 0x2ba0(0x90)
	struct FS_GameplayAttributeData StaminaCostFractionAppliedToHunger; // 0x2c30(0x90)
	struct FS_GameplayAttributeData StaminaCostToDodge; // 0x2cc0(0x90)
	struct FS_GameplayAttributeData StaminaCostToSlide; // 0x2d50(0x90)
	struct FS_GameplayAttributeData StaminaCostToJump; // 0x2de0(0x90)
	struct FS_GameplayAttributeData StaminaCostToMantle; // 0x2e70(0x90)
	struct FS_GameplayAttributeData StaminaCostToMeleeHeavy; // 0x2f00(0x90)
	struct FS_GameplayAttributeData StaminaCostToMeleeLight; // 0x2f90(0x90)
	struct FS_GameplayAttributeData StaminaCostToSprintPerSecond; // 0x3020(0x90)
	struct FS_GameplayAttributeData StaminaMaximum; // 0x30b0(0x90)
	struct FS_GameplayAttributeData StaminaRecoveryPerSecond; // 0x3140(0x90)
	struct FS_GameplayAttributeData StaminaStunTimeInSeconds; // 0x31d0(0x90)
	struct FS_GameplayAttributeData Temperature; // 0x3260(0x90)
	struct FS_GameplayAttributeData TemperatureDangerThreshold; // 0x32f0(0x90)
	struct FS_GameplayAttributeData TemperatureMaximum; // 0x3380(0x90)
	struct FS_GameplayAttributeData WarmingHealthRecoveryLimitMaximumGainPerSecond; // 0x3410(0x90)
	struct FS_GameplayAttributeData WeaponReadySpeedMultiplier; // 0x34a0(0x90)
	struct FS_GameplayAttributeData WeaponReadySpeedMultiplierMelee; // 0x3530(0x90)
	struct FS_GameplayAttributeData WeaponStowSpeedMultiplier; // 0x35c0(0x90)
	struct FS_GameplayAttributeData WeaponStowSpeedMultiplierMelee; // 0x3650(0x90)

	void NotifyReplicatedWeaponStowSpeedMultiplierMelee(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedWeaponStowSpeedMultiplierMelee // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedWeaponStowSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedWeaponStowSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedWeaponReadySpeedMultiplierMelee(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedWeaponReadySpeedMultiplierMelee // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedWeaponReadySpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedWeaponReadySpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedWarmingHealthRecoveryLimitMaximumGainPerSecond(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedWarmingHealthRecoveryLimitMaximumGainPerSecond // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTemperatureMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedTemperatureMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTemperatureDangerThreshold(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedTemperatureDangerThreshold // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTemperature(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedTemperature // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaStunTimeInSeconds(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaStunTimeInSeconds // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaRecoveryPerSecond(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaRecoveryPerSecond // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToSprintPerSecond(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToSprintPerSecond // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToSlide(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToSlide // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToMeleeLight(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToMeleeLight // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToMeleeHeavy(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToMeleeHeavy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToMantle(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToMantle // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToJump(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToJump // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostToDodge(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostToDodge // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStaminaCostFractionAppliedToHunger(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStaminaCostFractionAppliedToHunger // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStamina(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedStamina // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadRateSteadyMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadRateSteadyMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadRateMovingMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadRateMovingMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadPerShotHipfireMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadPerShotHipfireMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadPerShotADSMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadPerShotADSMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadMaxHipfireMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadMaxHipfireMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSpreadMaxADSMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedSpreadMaxADSMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedReviveSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedReviveSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedReloadSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedReloadSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRecoilHipfireMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedRecoilHipfireMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRecoilADSMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedRecoilADSMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRadiationMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedRadiationMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRadiation(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedRadiation // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedWalk(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedWalk // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedSprintBonus(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedSprintBonus // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedDownedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedDownedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedCrouch(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedCrouch // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementSpeedADSMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementSpeedADSMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMovementAbilitySpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedMovementAbilitySpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedLootAmountMultiplierAnimal(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedLootAmountMultiplierAnimal // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedInventoryStackSizeMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedInventoryStackSizeMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHunger(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedHunger // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedHealthRecoveryLimit(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedHealthRecoveryLimit // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFreezingHealthRecoveryLimitMaximumLossPerSecond(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFreezingHealthRecoveryLimitMaximumLossPerSecond // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFoodHealthBonusMultiplierRaw(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFoodHealthBonusMultiplierRaw // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFoodHealthBonusMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFoodHealthBonusMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFlinchMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFlinchMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFlinchADSMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFlinchADSMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFireSpeedMultiplierPistol(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFireSpeedMultiplierPistol // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFireSpeedMultiplierMeleeMaximum(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFireSpeedMultiplierMeleeMaximum // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFireSpeedMultiplierMelee(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFireSpeedMultiplierMelee // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFireSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedFireSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExhaustionDebuffDurationInSeconds(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedExhaustionDebuffDurationInSeconds // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDownedStateBleedOutSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDownedStateBleedOutSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDodgeCooldownSpeedMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDodgeCooldownSpeedMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageOverTimePoisonCount(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageOverTimePoisonCount // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageOverTimePlasmaCount(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageOverTimePlasmaCount // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageOverTimeFireCount(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageOverTimeFireCount // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageOverTimeBleedCount(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageOverTimeBleedCount // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageOverTimeAcidCount(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageOverTimeAcidCount // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierShotgun(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierShotgun // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierRifle(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierRifle // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierRanged(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierRanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierPistol(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierPistol // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierMelee(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierMelee // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierExplosive(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierExplosive // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierBow(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierBow // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplierBoundsMax(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplierBoundsMax // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageMultiplier(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageMultiplier // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDamageFractionToApplyToRecoveryLimit(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedDamageFractionToApplyToRecoveryLimit // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCollapsingStormFreezingHealthRecoveryLimitMaximumLossPerSecond(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedCollapsingStormFreezingHealthRecoveryLimitMaximumLossPerSecond // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedColdResistance(struct FS_GameplayAttributeData oldGameplayAttributeData); // Function Scavenger.S_AttributeSetCharacter.NotifyReplicatedColdResistance // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AttributeSetAICharacter
// Size: 0x36e0 (Inherited: 0x36e0)
struct US_AttributeSetAICharacter : US_AttributeSetCharacter {
};

// Class Scavenger.S_AttributeSetPlayerCharacter
// Size: 0x36e0 (Inherited: 0x36e0)
struct US_AttributeSetPlayerCharacter : US_AttributeSetAICharacter {
};

// Class Scavenger.S_AttributeSetVehicle
// Size: 0xe60 (Inherited: 0xe60)
struct US_AttributeSetVehicle : US_AttributeSetPawn {
};

// Class Scavenger.S_AudioImpactHandler
// Size: 0x28 (Inherited: 0x28)
struct US_AudioImpactHandler : UInterface {
};

// Class Scavenger.S_AudioSettings
// Size: 0x70 (Inherited: 0x38)
struct US_AudioSettings : UDeveloperSettings {
	float WhizByDetectionRadius; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FName> DialogueVoice; // 0x40(0x10)
	struct TArray<struct FName> DialogueEvent; // 0x50(0x10)
	struct TArray<struct FName> DialogueContext; // 0x60(0x10)

	struct FName GetDialogueVoice(struct FName Voice); // Function Scavenger.S_AudioSettings.GetDialogueVoice // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FName GetDialogueEvent(struct FName Event); // Function Scavenger.S_AudioSettings.GetDialogueEvent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FName GetDialogueContext(struct FName Context); // Function Scavenger.S_AudioSettings.GetDialogueContext // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AudioUtils
// Size: 0x28 (Inherited: 0x28)
struct US_AudioUtils : UBlueprintFunctionLibrary {

	int32_t PostSubtitledEvent(struct UObject* WorldContextObject, struct UAkAudioEvent* AkEvent, struct FText SpeakerName, struct FDelegate PostEventCallback, struct FString EventName); // Function Scavenger.S_AudioUtils.PostSubtitledEvent // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsLocallyControlledOrSpectated(struct AActor* Actor); // Function Scavenger.S_AudioUtils.IsLocallyControlledOrSpectated // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsActorFriendlyToListener(struct AActor* Actor); // Function Scavenger.S_AudioUtils.IsActorFriendlyToListener // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AutoHarvestedFoliageActor
// Size: 0x2a8 (Inherited: 0x288)
struct AS_AutoHarvestedFoliageActor : AActor {
	struct UStaticMeshComponent* m_staticMeshComponent; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)
	float PhysicsDurationInSeconds; // 0x298(0x04)
	float SinkDurationInSeconds; // 0x29c(0x04)
	float DistanceToSink; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
};

// Class Scavenger.S_ItemBase
// Size: 0x448 (Inherited: 0x288)
struct AS_ItemBase : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	bool bAllowSkinning; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct FS_ItemState ItemState; // 0x298(0x40)
	struct FS_CosmeticLoadoutSlot m_cosmeticLoadoutSlot; // 0x2d8(0x28)
	struct US_CosmeticSkinningComponent* m_cosmeticSkinningComponent; // 0x300(0x08)
	struct USC_SkeletalMeshComponent* m_cosmeticAttachmentComponent; // 0x308(0x08)
	struct TSoftObjectPtr<struct USkeletalMesh> m_loadingCosmeticAttachmentMesh; // 0x310(0x28)
	char pad_338[0x10]; // 0x338(0x10)
	struct TMap<struct FName, struct USC_SkeletalMeshComponent*> m_socketSpecificCosmeticAttachmentComponents; // 0x348(0x50)
	char pad_398[0x50]; // 0x398(0x50)
	struct TMap<struct FName, struct FS_CosmeticItemMetadataItemSocketAttachmentCustomization> m_socketNameToLoadingSocketSpecificCosmeticAttachmentMesh; // 0x3e8(0x50)
	char pad_438[0x10]; // 0x438(0x10)

	void SetItemStatValue(enum class ES_ItemStatType itemStatType, float Value); // Function Scavenger.S_ItemBase.SetItemStatValue // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemStats(struct FS_ItemStats ItemStats); // Function Scavenger.S_ItemBase.SetItemStats // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedItemState(); // Function Scavenger.S_ItemBase.NotifyReplicatedItemState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	float GetItemStatValue(enum class ES_ItemStatType itemStatType); // Function Scavenger.S_ItemBase.GetItemStatValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_ItemState GetItemState(); // Function Scavenger.S_ItemBase.GetItemState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetItemId(); // Function Scavenger.S_ItemBase.GetItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetItemData(); // Function Scavenger.S_ItemBase.GetItemData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AutoPickupItem
// Size: 0x450 (Inherited: 0x448)
struct AS_AutoPickupItem : AS_ItemBase {
	struct UStaticMeshComponent* m_meshComponent; // 0x448(0x08)

	void NotifyValidPlayerOverlap_BP(struct AS_PlayerCharacter* playerCharacter); // Function Scavenger.S_AutoPickupItem.NotifyValidPlayerOverlap_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AutoPingComponent
// Size: 0x200 (Inherited: 0xb0)
struct US_AutoPingComponent : UActorComponent {
	enum class ES_AutoPingNotificationType AutoPingNotificationType; // 0xb0(0x01)
	enum class ES_AutoPingType AutoPingType; // 0xb1(0x01)
	bool bIsOwnedByAllPlayers; // 0xb2(0x01)
	bool bIsOwnedByAllTeams; // 0xb3(0x01)
	bool bDoesOverrideObjectiveLocation; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct FVector LocationOffset; // 0xb8(0x0c)
	float OffscreenTracking; // 0xc4(0x04)
	int32_t Priority; // 0xc8(0x04)
	bool bShouldRePing; // 0xcc(0x01)
	bool bShouldStartEnabled; // 0xcd(0x01)
	char pad_CE[0x2]; // 0xce(0x02)
	float VisibleDistance; // 0xd0(0x04)
	float SwapDistance; // 0xd4(0x04)
	float VisibleDistanceRemovalScalar; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct TMap<struct AS_PlayerController*, struct FS_PingItemHandle> m_mapOfPlayerControllerToPingItemHandle; // 0xe0(0x50)
	char pad_130[0x28]; // 0x130(0x28)
	struct TSet<struct AS_PlayerController*> m_owningPlayers; // 0x158(0x50)
	char pad_1A8[0x58]; // 0x1a8(0x58)

	void SetVisibleDistance(float Distance); // Function Scavenger.S_AutoPingComponent.SetVisibleDistance // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetUniqueOwningTeam(int32_t TeamIndex); // Function Scavenger.S_AutoPingComponent.SetUniqueOwningTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetUniqueOwningPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.SetUniqueOwningPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetShouldRePing(bool shouldRePing); // Function Scavenger.S_AutoPingComponent.SetShouldRePing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetPriority(int32_t Priority); // Function Scavenger.S_AutoPingComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetIsOwnedByAllTeams(bool isOwnedByAllTeams); // Function Scavenger.S_AutoPingComponent.SetIsOwnedByAllTeams // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetIsOwnedByAllPlayers(bool isOwnedByAllPlayers); // Function Scavenger.S_AutoPingComponent.SetIsOwnedByAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEnabled(bool IsEnabled); // Function Scavenger.S_AutoPingComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemovePingItem(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.RemovePingItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveOwningTeam(int32_t TeamIndex); // Function Scavenger.S_AutoPingComponent.RemoveOwningTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveOwningPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.RemoveOwningPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveAllPingItems(); // Function Scavenger.S_AutoPingComponent.RemoveAllPingItems // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool PingItem(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.PingItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InternalHandleTeamCountChanged(int32_t newTeamCount); // Function Scavenger.S_AutoPingComponent.InternalHandleTeamCountChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InternalHandlePlayerLogin(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_AutoPingComponent.InternalHandlePlayerLogin // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEncounterAutoPingsChanged(struct AS_PlayerController* PlayerController, bool bIsEnabled); // Function Scavenger.S_AutoPingComponent.HandleEncounterAutoPingsChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	float GetVisibleDistanceRemovalScalar(); // Function Scavenger.S_AutoPingComponent.GetVisibleDistanceRemovalScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetVisibleDistance(); // Function Scavenger.S_AutoPingComponent.GetVisibleDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSwapDistance(); // Function Scavenger.S_AutoPingComponent.GetSwapDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetShouldRePing(); // Function Scavenger.S_AutoPingComponent.GetShouldRePing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPriority(); // Function Scavenger.S_AutoPingComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetOffscreenTracking(); // Function Scavenger.S_AutoPingComponent.GetOffscreenTracking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetObjectiveLocation(); // Function Scavenger.S_AutoPingComponent.GetObjectiveLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetObjectiveActor(); // Function Scavenger.S_AutoPingComponent.GetObjectiveActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetLocationOffset(); // Function Scavenger.S_AutoPingComponent.GetLocationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwningTeam(int32_t TeamIndex); // Function Scavenger.S_AutoPingComponent.GetIsOwningTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwningPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.GetIsOwningPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwnedByAllTeams(); // Function Scavenger.S_AutoPingComponent.GetIsOwnedByAllTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwnedByAllPlayers(); // Function Scavenger.S_AutoPingComponent.GetIsOwnedByAllPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsEnabled(); // Function Scavenger.S_AutoPingComponent.GetIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsChangeAllowed(); // Function Scavenger.S_AutoPingComponent.GetIsChangeAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetDoesOverrideObjectiveLocation(); // Function Scavenger.S_AutoPingComponent.GetDoesOverrideObjectiveLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_AutoPingType GetAutoPingType(); // Function Scavenger.S_AutoPingComponent.GetAutoPingType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_AutoPingNotificationType GetAutoPingNotificationType(); // Function Scavenger.S_AutoPingComponent.GetAutoPingNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool EvaluatePing_BP(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.EvaluatePing_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool AddOwningTeam(int32_t TeamIndex); // Function Scavenger.S_AutoPingComponent.AddOwningTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddOwningPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingComponent.AddOwningPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AutoPingManagerComponent
// Size: 0x250 (Inherited: 0xb0)
struct US_AutoPingManagerComponent : UActorComponent {
	struct TArray<struct FS_AutoPingChannel> AutoPingChannels; // 0xb0(0x10)
	float PlayerPingProcessDelayTime; // 0xc0(0x04)
	char pad_C4[0xc]; // 0xc4(0x0c)
	struct TMap<int32_t, struct FS_AutoPingPriorityContainer> m_mapOfPriorityToPriorityContainer; // 0xd0(0x50)
	char pad_120[0x20]; // 0x120(0x20)
	struct TMap<struct AS_PlayerController*, struct FS_AutoPingCounts> m_mapOfPlayerControllerToAutoPingCounts; // 0x140(0x50)
	struct TMap<struct AS_PlayerController*, struct FS_AutoPingCounts> m_previousMapOfPlayerControllerToAutoPingCounts; // 0x190(0x50)
	struct TMap<struct AS_PlayerController*, struct FS_AutoPingReprocessData> m_mapOfPlayerControllerToReprocessTime; // 0x1e0(0x50)
	struct TArray<struct US_AutoPingComponent*> m_encounterEntrances; // 0x230(0x10)
	struct TArray<struct US_EncounterAutoPing*> m_encounterAutoPings; // 0x240(0x10)

	bool UpdateAutoPing(struct US_AutoPingComponent* autoPingComponent); // Function Scavenger.S_AutoPingManagerComponent.UpdateAutoPing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveAutoPingForTeam(struct US_AutoPingComponent* autoPingComponent, int32_t TeamIndex); // Function Scavenger.S_AutoPingManagerComponent.RemoveAutoPingForTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveAutoPingForPlayer(struct US_AutoPingComponent* autoPingComponent, struct AS_PlayerController* PlayerController); // Function Scavenger.S_AutoPingManagerComponent.RemoveAutoPingForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveAutoPing(struct US_AutoPingComponent* autoPingComponent); // Function Scavenger.S_AutoPingManagerComponent.RemoveAutoPing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetLocationForTeam(int32_t TeamIndex, struct FS_TeamGameState teamGameState); // Function Scavenger.S_AutoPingManagerComponent.GetLocationForTeam // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool GetIsOkayToAddRemoveOrUpdate(); // Function Scavenger.S_AutoPingManagerComponent.GetIsOkayToAddRemoveOrUpdate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool AddAutoPing(struct US_AutoPingComponent* autoPingComponent); // Function Scavenger.S_AutoPingManagerComponent.AddAutoPing // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FrontEndItemReceiver
// Size: 0x290 (Inherited: 0x288)
struct AS_FrontEndItemReceiver : AActor {
	enum class ES_FrontEndItemReceiverType ItemReceiverType; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
};

// Class Scavenger.S_BannerReceiver
// Size: 0x2a8 (Inherited: 0x290)
struct AS_BannerReceiver : AS_FrontEndItemReceiver {
	struct AS_CosmeticBanner* BannerClass; // 0x290(0x08)
	struct AS_CosmeticBanner* M_Banner; // 0x298(0x08)
	struct USceneComponent* m_bannerAttachmentPoint; // 0x2a0(0x08)
};

// Class Scavenger.S_BaseWidget
// Size: 0x278 (Inherited: 0x270)
struct US_BaseWidget : UUserWidget {
	char pad_270[0x1]; // 0x270(0x01)
	bool bInitiallyVisible; // 0x271(0x01)
	char pad_272[0x6]; // 0x272(0x06)

	void SetWidgetVisible(bool visible); // Function Scavenger.S_BaseWidget.SetWidgetVisible // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnVisibilityChange(bool bIsVisible); // Function Scavenger.S_BaseWidget.OnVisibilityChange // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsWidgetVisible(); // Function Scavenger.S_BaseWidget.IsWidgetVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ESlateVisibility GetSlateVisibility(); // Function Scavenger.S_BaseWidget.GetSlateVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BasicSpectatorPlayerPawn
// Size: 0x458 (Inherited: 0x310)
struct AS_BasicSpectatorPlayerPawn : ASpectatorPawn {
	char pad_310[0x38]; // 0x310(0x38)
	struct US_SpringArmComponent* PlayerSpringArmComp; // 0x348(0x08)
	struct US_SpringArmComponent* VehicleSpringArmComp; // 0x350(0x08)
	struct UCameraComponent* PlayerCameraComp; // 0x358(0x08)
	struct UCameraComponent* VehicleCameraComp; // 0x360(0x08)
	struct APawn* CurrentTargetPawn; // 0x368(0x08)
	struct FRotator TargetPlayerRotator; // 0x370(0x0c)
	struct FRotator TargetVehicleRotator; // 0x37c(0x0c)
	struct FMulticastInlineDelegate OnTargetPawnChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnTargetPawnUpdate; // 0x398(0x10)
	struct FMulticastInlineDelegate OnTargetPawnADSChange; // 0x3a8(0x10)
	struct FS_ShelterInterfaceData ShelterData; // 0x3b8(0x98)
	float SpringArmRotationUpdateHz; // 0x450(0x04)
	float InterpolationSpeed; // 0x454(0x04)

	void UpdateTargetPawnADS(); // Function Scavenger.S_BasicSpectatorPlayerPawn.UpdateTargetPawnADS // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TriggerOnTargetPawnUpdate(); // Function Scavenger.S_BasicSpectatorPlayerPawn.TriggerOnTargetPawnUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSpringArmRelativeRotation(struct USceneComponent* SpringArm, struct FRotator baseAimRotation); // Function Scavenger.S_BasicSpectatorPlayerPawn.SetSpringArmRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentTargetPawn(struct APawn* NewCurrentTargetPawn); // Function Scavenger.S_BasicSpectatorPlayerPawn.SetCurrentTargetPawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRepCurrentTargetPawn(struct APawn* PreviousPawn); // Function Scavenger.S_BasicSpectatorPlayerPawn.OnRepCurrentTargetPawn // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void MimicTargetControlRotation(); // Function Scavenger.S_BasicSpectatorPlayerPawn.MimicTargetControlRotation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetTargetPlayerName(); // Function Scavenger.S_BasicSpectatorPlayerPawn.GetTargetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct APawn* GetNextTargetPawn(bool cycleForward, struct APawn* CurrentTarget); // Function Scavenger.S_BasicSpectatorPlayerPawn.GetNextTargetPawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct APawn* GetCurrentTargetPawn(); // Function Scavenger.S_BasicSpectatorPlayerPawn.GetCurrentTargetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BloodSplatManagerComponent
// Size: 0xd0 (Inherited: 0xb0)
struct US_BloodSplatManagerComponent : UActorComponent {
	uint32_t MaxDecals; // 0xb0(0x04)
	float DecalLifetime; // 0xb4(0x04)
	float FadeTime; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FS_BloodSplat> m_splats; // 0xc0(0x10)
};

// Class Scavenger.S_BoneDataAsset
// Size: 0x40 (Inherited: 0x30)
struct US_BoneDataAsset : UDataAsset {
	struct TArray<struct FBodyPingRegion> BulletBodyPingRegions; // 0x30(0x10)
};

// Class Scavenger.S_BoneDataComponent
// Size: 0x170 (Inherited: 0xb0)
struct US_BoneDataComponent : UActorComponent {
	struct TMap<struct FName, struct FBoneHitInfo> BoneHitInfo; // 0xb0(0x50)
	struct TMap<struct FName, struct FAimAssistInfo> AimAssistInfo; // 0x100(0x50)
	struct US_BoneDataAsset* BulletBodyPingRegionsOverrideAsset; // 0x150(0x08)
	struct TArray<struct FBodyPingRegion> BulletBodyPingRegions; // 0x158(0x10)
	bool DebugRenderOverrideAssetInTool; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)

	struct US_BoneDataComponent* GetBoneDataComponentOfActor(struct AActor* Actor); // Function Scavenger.S_BoneDataComponent.GetBoneDataComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BoxSplineComponent
// Size: 0x5c0 (Inherited: 0x540)
struct US_BoxSplineComponent : USplineComponent {
	struct TArray<struct FS_SplineBoxData> BoxData; // 0x540(0x10)
	float MaxDeviation; // 0x550(0x04)
	float StepTime; // 0x554(0x04)
	float SplineTime; // 0x558(0x04)
	float MaxWidth; // 0x55c(0x04)
	float MinBoxLength; // 0x560(0x04)
	bool bShouldShowBoxDataDebug; // 0x564(0x01)
	char pad_565[0x3]; // 0x565(0x03)
	struct TMap<struct UStaticMeshComponent*, struct FS_DerezVisualGuidesData> VisualGuidesMap; // 0x568(0x50)
	char pad_5B8[0x8]; // 0x5b8(0x08)

	bool IsLocationInsideDerezZone(struct FVector otherLocation); // Function Scavenger.S_BoxSplineComponent.IsLocationInsideDerezZone // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationCloserToSplineIn2D(struct FVector otherLocation, float minDistance); // Function Scavenger.S_BoxSplineComponent.IsLocationCloserToSplineIn2D // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInputKeyAnEnd(float InputKey); // Function Scavenger.S_BoxSplineComponent.IsInputKeyAnEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCloserSplinePointAnEnd(struct FVector otherLocation); // Function Scavenger.S_BoxSplineComponent.IsCloserSplinePointAnEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GenerateBoxData(); // Function Scavenger.S_BoxSplineComponent.GenerateBoxData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BPNode_PlayMontage
// Size: 0x70 (Inherited: 0x30)
struct US_BPNode_PlayMontage : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	struct FMulticastInlineDelegate Interrupted; // 0x40(0x10)
	struct FMulticastInlineDelegate Failed; // 0x50(0x10)
	struct UAnimInstance* m_animInstance; // 0x60(0x08)
	struct UAnimMontage* m_animMontage; // 0x68(0x08)

	struct US_BPNode_PlayMontage* PlayMontage(struct UAnimInstance* AnimInstance, struct UAnimMontage* Montage); // Function Scavenger.S_BPNode_PlayMontage.PlayMontage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BreakableAssetUserData
// Size: 0x40 (Inherited: 0x28)
struct US_BreakableAssetUserData : UAssetUserData {
	bool Breakable; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct UParticleSystem* ParticleSystemTemplate; // 0x30(0x08)
	struct UAkAudioEvent* BreakSoundEvent; // 0x38(0x08)
};

// Class Scavenger.S_BTDecorator_AITriggers
// Size: 0xb0 (Inherited: 0x68)
struct US_BTDecorator_AITriggers : UBTDecorator {
	int32_t IntValue; // 0x68(0x04)
	enum class ES_BlackBoardEntryComparison Operator; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	struct FS_OverlordReference OverlordFilter; // 0x70(0x10)
	struct TArray<struct FS_TriggerReference> TriggersToEvaluate; // 0x80(0x10)
	char pad_90[0x20]; // 0x90(0x20)

	void OnTriggerVolumeDataUpdated(struct AS_AITriggerVolume* TriggerVolume, struct AActor* OtherActor); // Function Scavenger.S_BTDecorator_AITriggers.OnTriggerVolumeDataUpdated // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BTDecorator_AudioEventTag
// Size: 0x70 (Inherited: 0x68)
struct US_BTDecorator_AudioEventTag : UBTDecorator {
	struct US_AIAudioEventType* Event; // 0x68(0x08)
};

// Class Scavenger.S_BTDecorator_SetAudioState
// Size: 0x70 (Inherited: 0x68)
struct US_BTDecorator_SetAudioState : UBTDecorator {
	enum class ES_AIAudioState State; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Scavenger.S_BTServiceRunScavangerEQS
// Size: 0xf0 (Inherited: 0x98)
struct US_BTServiceRunScavangerEQS : UBTService_BlackboardBase {
	struct FEQSParametrizedQueryExecutionRequest EQSRequest; // 0x98(0x48)
	char pad_E0[0x10]; // 0xe0(0x10)
};

// Class Scavenger.S_BTScavengerRequiredService
// Size: 0xa0 (Inherited: 0x98)
struct US_BTScavengerRequiredService : UBTService_BlueprintBase {
	struct AS_AIController* m_AIController; // 0x98(0x08)

	void OnEnterBehavior(struct AS_AIController* ScavengerController, struct AS_AICharacter* ScavengerAICharacter); // Function Scavenger.S_BTScavengerRequiredService.OnEnterBehavior // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void CleanUpBehavior(struct AS_AIController* ScavengerController, struct AS_AICharacter* ScavengerAICharacter); // Function Scavenger.S_BTScavengerRequiredService.CleanUpBehavior // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_EQSScoringBase
// Size: 0x38 (Inherited: 0x28)
struct US_EQSScoringBase : UObject {
	bool DiscardZeroValueItems; // 0x28(0x01)
	bool InvertScoreLogic; // 0x29(0x01)
	bool ScoreFromLastKnownEnemyPos; // 0x2a(0x01)
	bool ScoreFromCustomScoringPoint; // 0x2b(0x01)
	float ScoreWeightMultiplier; // 0x2c(0x04)
	float DiscardBelowThisValue; // 0x30(0x04)
	float DiscardAboveThisValue; // 0x34(0x04)
};

// Class Scavenger.S_EQSScoring_Distance
// Size: 0x48 (Inherited: 0x38)
struct US_EQSScoring_Distance : US_EQSScoringBase {
	float minDistance; // 0x38(0x04)
	float MaxDistance; // 0x3c(0x04)
	bool ScoreFromEnemy; // 0x40(0x01)
	enum class ES_ScoringDistance ScoringMode; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Scavenger.S_EQSScoring_Visibility
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_Visibility : US_EQSScoringBase {
	enum class ETraceTypeQuery TraceChannel; // 0x38(0x01)
	bool ScoreFromEnemy; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float PointZOffset; // 0x3c(0x04)
};

// Class Scavenger.S_EQSScoring_Dot
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_Dot : US_EQSScoringBase {
	bool ScoreFromEnemy; // 0x38(0x01)
	bool UseRightVector; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Scavenger.S_EQSScoring_PositionalRelationDOT_FWD
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_PositionalRelationDOT_FWD : US_EQSScoringBase {
	bool ScoreFromEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_EQSScoring_PositionalRelationDOT_SIDE
// Size: 0x40 (Inherited: 0x40)
struct US_EQSScoring_PositionalRelationDOT_SIDE : US_EQSScoring_PositionalRelationDOT_FWD {
};

// Class Scavenger.S_EQSScoring_LowCover
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_LowCover : US_EQSScoringBase {
	bool ScoreFromEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_EQSScoring_HighCover
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_HighCover : US_EQSScoringBase {
	bool ScoreFromEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_EQSScoring_ContainsTag
// Size: 0x40 (Inherited: 0x38)
struct US_EQSScoring_ContainsTag : US_EQSScoringBase {
	struct FName Tag; // 0x38(0x08)
};

// Class Scavenger.S_BTTaskEQSScoringContainer
// Size: 0xa0 (Inherited: 0x70)
struct US_BTTaskEQSScoringContainer : UBTTaskNode {
	struct TArray<struct US_EQSScoringBase*> ScoringTemplates; // 0x70(0x10)
	enum class EEnvQueryRunMode ScoringRunMode; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct TArray<struct US_EQSScoringBase*> ScoringTemplateInstances; // 0x88(0x10)
	enum class EEnvQueryPointClumpingMode AIClumpingMode; // 0x98(0x01)
	bool IncludeTargetsNearestFPA; // 0x99(0x01)
	bool IncludeMyNearestFPA; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Scavenger.S_BTTaskMeleeAttack
// Size: 0x78 (Inherited: 0x70)
struct US_BTTaskMeleeAttack : UBTTaskNode {
	int32_t m_meleeDamageAmount; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Scavenger.S_BTTaskOverlordStage
// Size: 0xb0 (Inherited: 0x70)
struct US_BTTaskOverlordStage : UBTTaskNode {
	char pad_70[0x18]; // 0x70(0x18)
	struct FS_OverlordReference OverlordFilter; // 0x88(0x10)
	struct FS_SquadReference SquadName; // 0x98(0x08)
	struct FS_StageReference NewStage; // 0xa0(0x08)
	enum class ES_StageChangeUrgency stageChangeUrgency; // 0xa8(0x01)
	enum class ES_StageChangeStateHint stageChangeStateHint; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
};

// Class Scavenger.S_BTTaskSetBlackboardValueBase
// Size: 0xa8 (Inherited: 0x70)
struct US_BTTaskSetBlackboardValueBase : UBTTaskNode {
	struct FBlackboardKeySelector BlackboardKey; // 0x70(0x28)
	struct FString CachedDescription; // 0x98(0x10)
};

// Class Scavenger.S_BTTaskSetIntBlackboardValue
// Size: 0xb0 (Inherited: 0xa8)
struct US_BTTaskSetIntBlackboardValue : US_BTTaskSetBlackboardValueBase {
	int32_t IntValue; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Scavenger.S_BTTaskSetBoolBlackboardValue
// Size: 0xb0 (Inherited: 0xa8)
struct US_BTTaskSetBoolBlackboardValue : US_BTTaskSetBlackboardValueBase {
	bool BoolValue; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Scavenger.S_BTTaskSetObjectBlackboardValue
// Size: 0xb0 (Inherited: 0xa8)
struct US_BTTaskSetObjectBlackboardValue : US_BTTaskSetBlackboardValueBase {
	struct UObject* ObjectValue; // 0xa8(0x08)
};

// Class Scavenger.S_BTTaskSetFloatBlackboardValue
// Size: 0xb0 (Inherited: 0xa8)
struct US_BTTaskSetFloatBlackboardValue : US_BTTaskSetBlackboardValueBase {
	float FloatValue; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Scavenger.S_BTTaskSpawnerControl
// Size: 0x110 (Inherited: 0x70)
struct US_BTTaskSpawnerControl : UBTTaskNode {
	char pad_70[0x18]; // 0x70(0x18)
	struct FS_OverlordReference OverlordFilter; // 0x88(0x10)
	struct FS_SpawnerReference SpawnerName; // 0x98(0x10)
	struct FS_SleepingBool Sleeping; // 0xa8(0x02)
	struct FS_SpawnOneByOneBool SpawnOneByOne; // 0xaa(0x02)
	struct FS_OnlyUsePointsForSpawningBool OnlyUsePointsForSpawning; // 0xac(0x02)
	struct FS_OnlyUsePointsForReplenishBool OnlyUsePointsForReplenish; // 0xae(0x02)
	struct FS_MaximumNumberOfSpawnedActorsInt MaximumNumberOfSpawnedActors; // 0xb0(0x08)
	struct FS_MaximumNumberInitiallySpawnedActorsInt MaximumNumberInitiallySpawnedActors; // 0xb8(0x08)
	struct FS_MinimumTimeBetweenSpawnsFVector2D MinimumTimeBetweenSpawns; // 0xc0(0x0c)
	struct FS_MinimumTimeAfterInitalSpawnsFVector2D MinimumTimeAfterInitalSpawns; // 0xcc(0x0c)
	struct FS_ReplenishmentActiveBool ReplenishmentActive; // 0xd8(0x02)
	char pad_DA[0x2]; // 0xda(0x02)
	struct FS_MaxReplenishmentCountInt MaxReplenishmentCount; // 0xdc(0x08)
	struct FS_AllowSpawnWithPlayersInsideBool AllowSpawnWithPlayersInside; // 0xe4(0x02)
	char pad_E6[0x2]; // 0xe6(0x02)
	struct FS_FallbackSpawnRadiusFloat FallbackSpawnRadius; // 0xe8(0x08)
	struct FS_FallbackSpawnHeightFloat FallbackSpawnHeight; // 0xf0(0x08)
	struct FS_ActiveRadiusFloat ActiveRadius; // 0xf8(0x08)
	struct FS_InactiveRadiusFloat InactiveRadius; // 0x100(0x08)
	struct FS_OpenSpanwerObjectBool OpenSpawnerObject; // 0x108(0x02)
	char pad_10A[0x6]; // 0x10a(0x06)
};

// Class Scavenger.S_BuildSettings
// Size: 0x70 (Inherited: 0x38)
struct US_BuildSettings : UDeveloperSettings {
	bool AllowDebug; // 0x38(0x01)
	bool Retail; // 0x39(0x01)
	bool CaptureBuild; // 0x3a(0x01)
	char pad_3B[0x5]; // 0x3b(0x05)
	struct FString CV1; // 0x40(0x10)
	struct FString CV2; // 0x50(0x10)
	struct FString DeploymentId; // 0x60(0x10)
};

// Class Scavenger.S_BulletMovementComponent
// Size: 0x1e0 (Inherited: 0x1d0)
struct US_BulletMovementComponent : UProjectileMovementComponent {
	bool HitSimpleCollision; // 0x1d0(0x01)
	enum class ECollisionChannel ClientCollisionChannel; // 0x1d1(0x01)
	enum class ECollisionChannel ServerCollisionChannel; // 0x1d2(0x01)
	bool LimitMovementByBoundsAndScaleOnHit; // 0x1d3(0x01)
	float DeltaMoveScaleOnHit; // 0x1d4(0x04)
	char pad_1D8[0x8]; // 0x1d8(0x08)
};

// Class Scavenger.S_ProjectileBase
// Size: 0x3e0 (Inherited: 0x288)
struct AS_ProjectileBase : AActor {
	struct UProjectileMovementComponent* m_projectileMovement; // 0x288(0x08)
	struct FVector m_initialSuggestedVelocity; // 0x290(0x0c)
	struct FVector m_cachedMovementVelocity; // 0x29c(0x0c)
	bool m_bCancelGravityScale; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct FS_WhizBySound m_whizBySound; // 0x2b0(0x28)
	bool m_bExpectedImpact; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	struct FVector m_expectedImpact; // 0x2dc(0x0c)
	enum class ES_ProjectileImpactResponse ImpactResponse; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	float TimeToDestroyAfterAttachment; // 0x2ec(0x04)
	float TimeToDestroyAfterAttachmentPlayer; // 0x2f0(0x04)
	float TimeToDestroyAfterImpact; // 0x2f4(0x04)
	float ExtraAttachDepth; // 0x2f8(0x04)
	float AcceptableDistanceToAttachedBone; // 0x2fc(0x04)
	bool AttachToEverything; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
	struct US_DamageTypeExplosive* ExplosiveDamageType; // 0x308(0x08)
	char pad_310[0x8c]; // 0x310(0x8c)
	enum class EPhysicalSurface CustomImpactSurface; // 0x39c(0x01)
	bool DoubleImpactFX; // 0x39d(0x01)
	char pad_39E[0x2]; // 0x39e(0x02)
	struct FFloatInterval AIProjectileSpeed; // 0x3a0(0x08)
	float CharacterAttachScale; // 0x3a8(0x04)
	char pad_3AC[0x8]; // 0x3ac(0x08)
	float m_bloodSplatConeAngle; // 0x3b4(0x04)
	float m_maxBloodSplatDist; // 0x3b8(0x04)
	char m_numBloodSplats; // 0x3bc(0x01)
	char pad_3BD[0xb]; // 0x3bd(0x0b)
	struct AS_WeaponBase* m_weapon; // 0x3c8(0x08)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void SetImpactSurface(enum class EPhysicalSurface NewImpactSurface); // Function Scavenger.S_ProjectileBase.SetImpactSurface // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDoubleImpactFX(bool bEnabled); // Function Scavenger.S_ProjectileBase.SetDoubleImpactFX // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnStop(struct FHitResult ImpactResult); // Function Scavenger.S_ProjectileBase.OnStop // (Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnSpawnFromPool(); // Function Scavenger.S_ProjectileBase.OnSpawnFromPool // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnReturnToPool(); // Function Scavenger.S_ProjectileBase.OnReturnToPool // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnOwnerDestroyed(struct AActor* DestroyedActor); // Function Scavenger.S_ProjectileBase.OnOwnerDestroyed // (Native|Protected) // @ game+0xffff8008e4a10000
	void OnImpactWithLandscape(struct FHitResult ImpactResult, float SnowDepth); // Function Scavenger.S_ProjectileBase.OnImpactWithLandscape // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnImpact(struct FHitResult ImpactResult); // Function Scavenger.S_ProjectileBase.OnImpact // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnBounce(struct FHitResult ImpactResult, struct FVector ImpactVelocity); // Function Scavenger.S_ProjectileBase.OnBounce // (Native|Protected|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	bool IsDoubleImpactFXEnabled(); // Function Scavenger.S_ProjectileBase.IsDoubleImpactFXEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class EPhysicalSurface GetImpactSurface(); // Function Scavenger.S_ProjectileBase.GetImpactSurface // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_DamageTypeExplosive* GetExplosiveDamageType(); // Function Scavenger.S_ProjectileBase.GetExplosiveDamageType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BulletProjectile
// Size: 0x3f0 (Inherited: 0x3e0)
struct AS_BulletProjectile : AS_ProjectileBase {
	bool NeverDamageOnImpact; // 0x3e0(0x01)
	char pad_3E1[0xf]; // 0x3e1(0x0f)
};

// Class Scavenger.S_CableActor
// Size: 0x2a8 (Inherited: 0x290)
struct AS_CableActor : ACableActor {
	float TimeUntilDeactivate; // 0x290(0x04)
	char pad_294[0x14]; // 0x294(0x14)
};

// Class Scavenger.S_CacheSpatialAuthorityInterface
// Size: 0x28 (Inherited: 0x28)
struct US_CacheSpatialAuthorityInterface : UInterface {
};

// Class Scavenger.S_CameraEffectsSystem
// Size: 0x330 (Inherited: 0x288)
struct AS_CameraEffectsSystem : AActor {
	bool isInShelter; // 0x288(0x01)
	bool isInStorm; // 0x289(0x01)
	char pad_28A[0x2]; // 0x28a(0x02)
	float Storminess; // 0x28c(0x04)
	float WindDirection; // 0x290(0x04)
	float WindForce; // 0x294(0x04)
	float TimeOfDay; // 0x298(0x04)
	float PlayerDistanceFromStorm; // 0x29c(0x04)
	float ClosestStormRadius; // 0x2a0(0x04)
	struct FVector ClosestStormLocation; // 0x2a4(0x0c)
	float WindSpinLerpMinDistance; // 0x2b0(0x04)
	float WindSpinLerpMaxDistance; // 0x2b4(0x04)
	float WindSpinLerpDuration; // 0x2b8(0x04)
	float WindSpinLerpUpdateInterval; // 0x2bc(0x04)
	struct FVector WindDirectionSpinTargetVector; // 0x2c0(0x0c)
	float WindLerpAlpha; // 0x2cc(0x04)
	struct FVector WindDirectionSpinLerpedVector; // 0x2d0(0x0c)
	bool RenderCameraEffects; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	struct APawn* CurrentPawn; // 0x2e0(0x08)
	struct UCameraComponent* CurrentCameraAttachedTo; // 0x2e8(0x08)
	struct FMulticastInlineDelegate InShelterChanged; // 0x2f0(0x10)
	struct FMulticastInlineDelegate InStormChanged; // 0x300(0x10)
	struct UParticleSystemComponent* PS_SnowflakesNative; // 0x310(0x08)
	struct UParticleSystemComponent* PS_SnowStormTransitionNative; // 0x318(0x08)
	struct UParticleSystemComponent* PS_SnowFlakesInStormNative; // 0x320(0x08)
	char pad_328[0x8]; // 0x328(0x08)

	void UpdateWind(float DeltaTime); // Function Scavenger.S_CameraEffectsSystem.UpdateWind // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateSnowflakes(bool DisableSnowflakes); // Function Scavenger.S_CameraEffectsSystem.UpdateSnowflakes // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnStormCategoryChanged(enum class ES_StormCategory StormCategory); // Function Scavenger.S_CameraEffectsSystem.HandleOnStormCategoryChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnShelterStateChanged(enum class ES_ShelterType newShelterState); // Function Scavenger.S_CameraEffectsSystem.HandleOnShelterStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnFocusedCharacterChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_CameraEffectsSystem.HandleOnFocusedCharacterChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void GetPawnWithValidation_BP(int32_t PlayerIndex, struct APawn* OutValidPawn, struct FVector OutPawnLocation, struct FVector OutPawnVelocity); // Function Scavenger.S_CameraEffectsSystem.GetPawnWithValidation_BP // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetPawnFromLocalController0_BP(struct APawn* OutPawn); // Function Scavenger.S_CameraEffectsSystem.GetPawnFromLocalController0_BP // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ViewportFadePhase
// Size: 0x60 (Inherited: 0x58)
struct US_ViewportFadePhase : US_PostMatchPhase {
	enum class ES_ViewportFadeType ViewportFadeType; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float FadeDuration; // 0x5c(0x04)

	void HandleOnFadeFinished(bool IsFadingOut); // Function Scavenger.S_ViewportFadePhase.HandleOnFadeFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CameraManagerComponent
// Size: 0x210 (Inherited: 0x200)
struct US_CameraManagerComponent : USceneComponent {
	struct UCameraComponent* CurrentCamera; // 0x1f8(0x08)
	char pad_208[0x8]; // 0x208(0x08)

	void SetEditorViewAsCurrentCamera(); // Function Scavenger.S_CameraManagerComponent.SetEditorViewAsCurrentCamera // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentCamera(struct UCameraComponent* Camera); // Function Scavenger.S_CameraManagerComponent.SetCurrentCamera // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentCameraTransform(struct FTransform outTransform); // Function Scavenger.S_CameraManagerComponent.GetCurrentCameraTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentCameraRotation(struct FRotator OutRotation); // Function Scavenger.S_CameraManagerComponent.GetCurrentCameraRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentCameraLocation(struct FVector OutLocation); // Function Scavenger.S_CameraManagerComponent.GetCurrentCameraLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentCameraFieldOfView(float outFieldOfView); // Function Scavenger.S_CameraManagerComponent.GetCurrentCameraFieldOfView // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentCamera(struct FVector OutLocation, struct FRotator outRotator, float outFieldOfView); // Function Scavenger.S_CameraManagerComponent.GetCurrentCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearCurrentCamera(struct UCameraComponent* conditionallyClearIfCamera); // Function Scavenger.S_CameraManagerComponent.ClearCurrentCamera // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ChallengeManagerComponent
// Size: 0xb0 (Inherited: 0xb0)
struct US_ChallengeManagerComponent : UActorComponent {

	struct US_ChallengeManagerComponent* GetChallengeManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_ChallengeManagerComponent.GetChallengeManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ChallengeStatisticsProcessor
// Size: 0x98 (Inherited: 0x28)
struct US_ChallengeStatisticsProcessor : UObject {
	struct FMulticastInlineDelegate OnChallengeComplete; // 0x28(0x10)
	struct AS_PlayerState* m_owningPlayerState; // 0x38(0x08)
	char pad_40[0x58]; // 0x40(0x58)

	void TrackStatistic(struct FName StatName, enum class ES_ChallengeTrackingSetting trackingType, int32_t increment); // Function Scavenger.S_ChallengeStatisticsProcessor.TrackStatistic // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetupPlayerCharacterCallbacks(struct AS_PlayerCharacter* NewCharacter); // Function Scavenger.S_ChallengeStatisticsProcessor.SetupPlayerCharacterCallbacks // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SetupCallbacks_BP(struct AS_PlayerController* PlayerController); // Function Scavenger.S_ChallengeStatisticsProcessor.SetupCallbacks_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ProcessItemCrafted(struct FS_RecipeMetadata craftedItemData); // Function Scavenger.S_ChallengeStatisticsProcessor.ProcessItemCrafted // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnTerminatedSomeone(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_ChallengeStatisticsProcessor.OnTerminatedSomeone // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnKilledPawn(struct FS_EventParameterVariant KilledPawn, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_ChallengeStatisticsProcessor.OnKilledPawn // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnInteractionStopped(enum class ES_Interaction interactionType, bool isTimedInteraction, struct AActor* Actor, struct UPrimitiveComponent* Component, int32_t instanceIndex); // Function Scavenger.S_ChallengeStatisticsProcessor.OnInteractionStopped // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnInteractionComplete(struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_ChallengeStatisticsProcessor.OnInteractionComplete // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnDamageDealtByPlayer(struct AActor* DamagedActor, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool Critical); // Function Scavenger.S_ChallengeStatisticsProcessor.OnDamageDealtByPlayer // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnActorStatsStateChanged(struct FS_EventParameterControllerVariant ChangeCausingController, struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_ChallengeStatisticsProcessor.OnActorStatsStateChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnActorDamaged(struct FS_EventParameterControllerVariant DamagingController, struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_ChallengeStatisticsProcessor.OnActorDamaged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CharacterAnimInstance
// Size: 0x510 (Inherited: 0x370)
struct US_CharacterAnimInstance : US_AnimInstance {
	struct ACharacter* Native_CharacterOwner; // 0x370(0x08)
	struct AS_CharacterBase* Native_ScavengerCharacterOwner; // 0x378(0x08)
	struct US_MeleeHitPlaybackSettings* MeleeHitSettings; // 0x380(0x08)
	float Speed; // 0x388(0x04)
	struct FVector RelativeVelocity; // 0x38c(0x0c)
	float MovementDirection; // 0x398(0x04)
	bool IsDead; // 0x39c(0x01)
	bool IsAlive; // 0x39d(0x01)
	bool IsInAir; // 0x39e(0x01)
	char pad_39F[0x1]; // 0x39f(0x01)
	struct FVector LookAtPosition; // 0x3a0(0x0c)
	bool ShouldLookAt; // 0x3ac(0x01)
	bool IsAICharacter; // 0x3ad(0x01)
	bool IsSprinting; // 0x3ae(0x01)
	char pad_3AF[0x1]; // 0x3af(0x01)
	struct TMap<struct FName, struct FS_SoftPingMixInfo> SoftPingMixes; // 0x3b0(0x50)
	float TimeBetweenRecordedShots; // 0x400(0x04)
	enum class ES_AILocomotionState LocomotionType; // 0x404(0x01)
	bool Native_IsJumping; // 0x405(0x01)
	char pad_406[0x2]; // 0x406(0x02)
	float Native_FallingSpeed; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	bool Native_IsCrouching; // 0x410(0x01)
	bool Native_IsDodging; // 0x411(0x01)
	char pad_412[0x2]; // 0x412(0x02)
	struct FName Native_CosmeticSkinId; // 0x414(0x08)
	char pad_41C[0xf4]; // 0x41c(0xf4)

	struct UAnimMontage* SelectAttackEventMontage(struct TArray<struct UAnimMontage*> MontageVariations, enum class ES_WeaponMontageEvent attackEvent, enum class ES_TriggerType triggerType); // Function Scavenger.S_CharacterAnimInstance.SelectAttackEventMontage // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnSprintUpdated(bool IsSprintOn); // Function Scavenger.S_CharacterAnimInstance.OnSprintUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PreviousMovementMode, char PreviousCustomMode); // Function Scavenger.S_CharacterAnimInstance.OnMovementModeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnCrouchUpdated(bool IsCrouchOn); // Function Scavenger.S_CharacterAnimInstance.OnCrouchUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnCharacterStatsStateChanged(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CharacterAnimInstance.OnCharacterStatsStateChanged // (Native|Protected) // @ game+0xffff8008e4a10000
	void OnCharacterPreTakePointDamage(struct AActor* DamagedActor, float UnmodifiedDamageAmount, float ArmorDamageAmount, float HealthDamageAmount, struct FPointDamageEvent DamageEvent, struct FHitResult HitResult, struct AActor* CauseActor, char DamageModifiersApplied, bool bIsCritical); // Function Scavenger.S_CharacterAnimInstance.OnCharacterPreTakePointDamage // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	float GetSpeed(); // Function Scavenger.S_CharacterAnimInstance.GetSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetRelativeVelocity(); // Function Scavenger.S_CharacterAnimInstance.GetRelativeVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMovementDirection(); // Function Scavenger.S_CharacterAnimInstance.GetMovementDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAverageAccelerationOverTime(float Seconds); // Function Scavenger.S_CharacterAnimInstance.GetAverageAccelerationOverTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_KungFuAttacker
// Size: 0x40 (Inherited: 0x28)
struct US_KungFuAttacker : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Scavenger.S_CharacterMovementComponent
// Size: 0x1120 (Inherited: 0xb10)
struct US_CharacterMovementComponent : UCharacterMovementComponent {
	char pad_B10[0x30]; // 0xb10(0x30)
	struct FMulticastInlineDelegate OnSprintUpdated; // 0xb40(0x10)
	struct FMulticastInlineDelegate OnWalkUpdated; // 0xb50(0x10)
	struct FMulticastInlineDelegate OnDodgeUpdated; // 0xb60(0x10)
	struct FMulticastInlineDelegate OnSlideUpdated; // 0xb70(0x10)
	struct FMulticastInlineDelegate OnMantleUpdated; // 0xb80(0x10)
	bool DoesCrouchToggle; // 0xb90(0x01)
	bool EnableFriendlySoftCollision; // 0xb91(0x01)
	char pad_B92[0x2]; // 0xb92(0x02)
	float JumpLaunchDelay; // 0xb94(0x04)
	float ExhaustedJumpLaunchDelay; // 0xb98(0x04)
	char pad_B9C[0x4]; // 0xb9c(0x04)
	struct FMulticastInlineDelegate OnJumpTriggered; // 0xba0(0x10)
	float ExhaustedSprintBonusMultiplier; // 0xbb0(0x04)
	char pad_BB4[0x54]; // 0xbb4(0x54)
	char pad_C08_0 : 2; // 0xc08(0x01)
	char m_bWantsToSprint : 1; // 0xc08(0x01)
	char pad_C08_3 : 5; // 0xc08(0x01)
	char pad_C09[0x3]; // 0xc09(0x03)
	struct FS_MoveSpeed m_replicatedMoveSpeed; // 0xc0c(0x18)
	char pad_C24[0x24]; // 0xc24(0x24)
	struct FS_SlideState m_slideState; // 0xc48(0x40)
	char pad_C88[0xe8]; // 0xc88(0xe8)
	char m_bApplyFriendlySoftCollision : 1; // 0xd70(0x01)
	char pad_D70_1 : 7; // 0xd70(0x01)
	char pad_D71[0x1f]; // 0xd71(0x1f)
	float NoClipMaxSpeed; // 0xd90(0x04)
	float SprintAddToMaxSpeed; // 0xd94(0x04)
	float InitialMaxWalkSpeedBaseValue; // 0xd98(0x04)
	float MinSprintTimeToSlide; // 0xd9c(0x04)
	float MinSpeedToSlide; // 0xda0(0x04)
	char pad_DA4[0x4]; // 0xda4(0x04)
	struct FS_SlideSettings DodgeSlide; // 0xda8(0x98)
	struct FS_SlideSettings FlatSlide; // 0xe40(0x98)
	char pad_ED8[0x18]; // 0xed8(0x18)
	struct TArray<struct FS_SlideSettings> CustomDodge; // 0xef0(0x10)
	float SlideStuckSpeed; // 0xf00(0x04)
	float SlideStuckMaxTime; // 0xf04(0x04)
	float MinSlideTimeAfterLanding; // 0xf08(0x04)
	float InstantSlideFromLandedTime; // 0xf0c(0x04)
	float JumpSlideTimeOutTime; // 0xf10(0x04)
	float FallingSlideTimeOutTime; // 0xf14(0x04)
	float PerfectSlideTimeOutTime; // 0xf18(0x04)
	char pad_F1C[0x4]; // 0xf1c(0x04)
	struct TArray<struct FS_MantleSettings> MantleSettings; // 0xf20(0x10)
	float ExhaustedMantlePlaybackRate; // 0xf30(0x04)
	float MaxMantleFloorSideAngle; // 0xf34(0x04)
	float MaxMantleFloorFwdAngle; // 0xf38(0x04)
	float MaxFenceDepth; // 0xf3c(0x04)
	float MinPlatformDepth; // 0xf40(0x04)
	float MaxExtraLaunchUp; // 0xf44(0x04)
	float LaunchPushMulti; // 0xf48(0x04)
	float FriendlySoftCollisionRadius; // 0xf4c(0x04)
	float FriendlySoftCollisionPushSpeed; // 0xf50(0x04)
	bool m_stationaryCharacter; // 0xf54(0x01)
	bool bBlockClientSimNavWalkingOnServer; // 0xf55(0x01)
	char pad_F56[0x2]; // 0xf56(0x02)
	struct UCurveFloat* ClientMaxAcceleration; // 0xf58(0x08)
	struct UCurveFloat* ClientMaxInAirAcceleration; // 0xf60(0x08)
	float StrafeSpeedStartFadeAngle; // 0xf68(0x04)
	float StrafeSpeedFadeRange; // 0xf6c(0x04)
	float MaxStrafeSpeed; // 0xf70(0x04)
	float MaxBackpedalSpeed; // 0xf74(0x04)
	float MaxStrafeAcceleration; // 0xf78(0x04)
	float MaxBackpedalAcceleration; // 0xf7c(0x04)
	bool ReenablePhysicsOnLaunch; // 0xf80(0x01)
	bool ProjectPositionToPhysics; // 0xf81(0x01)
	bool ProjectPositionToPhysicsOnClientSim; // 0xf82(0x01)
	char pad_F83[0x1]; // 0xf83(0x01)
	float ProjectPositionAboveNavMeshScaleUp; // 0xf84(0x04)
	float ProjectPositionAboveNavMeshScaleDown; // 0xf88(0x04)
	bool OrientMeshToUnderlyingPhysics; // 0xf8c(0x01)
	char pad_F8D[0x3]; // 0xf8d(0x03)
	float OrientationToUnderlyingPhysicsRate; // 0xf90(0x04)
	char pad_F94[0xc]; // 0xf94(0x0c)
	struct FS_CharacterMovementOverrides m_CharacterMovementOverrides; // 0xfa0(0x168)
	char pad_1108[0x18]; // 0x1108(0x18)

	void UnlockMovement(); // Function Scavenger.S_CharacterMovementComponent.UnlockMovement // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SocialHub_SetSlideVelocity(struct FVector NewVelocity); // Function Scavenger.S_CharacterMovementComponent.SocialHub_SetSlideVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector SocialHub_GetSlideVelocity(); // Function Scavenger.S_CharacterMovementComponent.SocialHub_GetSlideVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SetWalkSpeedBaseValue(float Value); // Function Scavenger.S_CharacterMovementComponent.SetWalkSpeedBaseValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerStartSlide(enum class ES_Slide SlideType, struct FVector SlideDir, int32_t customIdx, uint32_t slideID, bool bJumpingSlide, bool bFallingSlide, bool bPerfectSlide); // Function Scavenger.S_CharacterMovementComponent.ServerStartSlide // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSetMantleData(struct FVector StartLocation, struct FVector ledgeNormal, int32_t mantleIdx, bool fenceMantle, bool crouchToFit, int32_t ConditionalMontageIdx); // Function Scavenger.S_CharacterMovementComponent.ServerSetMantleData // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSetFriendlySoftCollisionHeading(int32_t softCollHeading); // Function Scavenger.S_CharacterMovementComponent.ServerSetFriendlySoftCollisionHeading // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestNoClip(bool bDoNoClip); // Function Scavenger.S_CharacterMovementComponent.ServerRequestNoClip // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyClientStoppedSliding(uint32_t slideID); // Function Scavenger.S_CharacterMovementComponent.ServerNotifyClientStoppedSliding // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerAbortSlide(); // Function Scavenger.S_CharacterMovementComponent.ServerAbortSlide // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ResetMovementLock(); // Function Scavenger.S_CharacterMovementComponent.ResetMovementLock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ProbeForMantle(struct FVector outLedgeNormal, struct FVector outLedgeLocation, struct UPrimitiveComponent* outLedgePrimitive, int32_t outMantleIdx, bool outFenceMantle, bool outCrouchToFit); // Function Scavenger.S_CharacterMovementComponent.ProbeForMantle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void OnRep_SetCurrentSlide(); // Function Scavenger.S_CharacterMovementComponent.OnRep_SetCurrentSlide // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_CharacterMovementOverrides(); // Function Scavenger.S_CharacterMovementComponent.OnRep_CharacterMovementOverrides // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifySlideUpdated_BP(enum class ES_Slide Slide, int32_t customIdx); // Function Scavenger.S_CharacterMovementComponent.NotifySlideUpdated_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDodgeUpdated_BP(bool IsDodging, int32_t customIdx); // Function Scavenger.S_CharacterMovementComponent.NotifyDodgeUpdated_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastStartSlide(enum class ES_Slide SlideType, struct FVector SlideDir, int32_t customIdx, uint32_t slideID, bool bJumpingSlide, bool bFallingSlide, bool bPerfectSlide); // Function Scavenger.S_CharacterMovementComponent.MulticastStartSlide // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void MulticastExecuteMantleRemoteClients(struct FVector ledgeNormal, int32_t mantleIdx, bool fenceMantle, bool crouchToFit, struct FVector StartPos, int32_t ConditionalMontageIdx); // Function Scavenger.S_CharacterMovementComponent.MulticastExecuteMantleRemoteClients // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void LockMovement(); // Function Scavenger.S_CharacterMovementComponent.LockMovement // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsSlidingButNotDodging(); // Function Scavenger.S_CharacterMovementComponent.IsSlidingButNotDodging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsSlideButNotDodge(enum class ES_Slide Slide); // Function Scavenger.S_CharacterMovementComponent.IsSlideButNotDodge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsDodging(); // Function Scavenger.S_CharacterMovementComponent.IsDodging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDodge(enum class ES_Slide Slide); // Function Scavenger.S_CharacterMovementComponent.IsDodge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsApplyingFriendlySoftCollision(); // Function Scavenger.S_CharacterMovementComponent.IsApplyingFriendlySoftCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetWalkSpeedValue(); // Function Scavenger.S_CharacterMovementComponent.GetWalkSpeedValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTotalSlideTime(); // Function Scavenger.S_CharacterMovementComponent.GetTotalSlideTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetSlideDirection(); // Function Scavenger.S_CharacterMovementComponent.GetSlideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_CharacterMovementComponent* GetScavengerMovementComponentOfActor(struct AActor* Actor); // Function Scavenger.S_CharacterMovementComponent.GetScavengerMovementComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_Slide GetCurrentSlide(); // Function Scavenger.S_CharacterMovementComponent.GetCurrentSlide // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetCurrentCustomSlideIdx(); // Function Scavenger.S_CharacterMovementComponent.GetCurrentCustomSlideIdx // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EndMantle(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_CharacterMovementComponent.EndMantle // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void ClientNotifyServerStoppedSliding(uint32_t slideID); // Function Scavenger.S_CharacterMovementComponent.ClientNotifyServerStoppedSliding // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientMantleAck(); // Function Scavenger.S_CharacterMovementComponent.ClientMantleAck // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void AbortSlide(); // Function Scavenger.S_CharacterMovementComponent.AbortSlide // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CheatMenuConfig
// Size: 0xa0 (Inherited: 0x28)
struct US_CheatMenuConfig : UObject {
	struct TArray<struct FS_CheatMenuConfigEntry> Lines; // 0x28(0x10)
	struct FS_CheatMenuHUDConfig HUDConfig; // 0x38(0x64)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Scavenger.S_CheatMenuHUDBase
// Size: 0x528 (Inherited: 0x378)
struct AS_CheatMenuHUDBase : AHUD {
	char pad_378[0x10]; // 0x378(0x10)
	struct UInputComponent* m_inputComponent; // 0x388(0x08)
	char pad_390[0x198]; // 0x390(0x198)
};

// Class Scavenger.S_CheatMenuHUD
// Size: 0x5d0 (Inherited: 0x528)
struct AS_CheatMenuHUD : AS_CheatMenuHUDBase {
	char pad_528[0xa8]; // 0x528(0xa8)

	void HandleUnseenRewardsChanged(struct AS_PlayerControllerBase* Controller, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandleUnseenRewardsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleStoreDataRefreshed(); // Function Scavenger.S_CheatMenuHUD.HandleStoreDataRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSeasonStatesRefreshed(struct AS_PlayerControllerBase* Controller, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandleSeasonStatesRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerResearchProjectsRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandlePlayerResearchProjectsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerPowerStateRefreshed(struct FS_OnlinePowerGenerationState PowerGenerationState); // Function Scavenger.S_CheatMenuHUD.HandlePlayerPowerStateRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandlePlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerCurrencyRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandlePlayerCurrencyRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerCosmeticLoadoutChanged(struct AS_PlayerControllerBase* Controller); // Function Scavenger.S_CheatMenuHUD.HandlePlayerCosmeticLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePlayerClassChanged(struct US_PlayerClassData* ClassData); // Function Scavenger.S_CheatMenuHUD.HandlePlayerClassChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLeaderboardsRefreshed(); // Function Scavenger.S_CheatMenuHUD.HandleLeaderboardsRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLeaderboardContentsRefreshed(struct FString leaderboardId); // Function Scavenger.S_CheatMenuHUD.HandleLeaderboardContentsRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCharacterCosmeticLoadoutRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FName characterClassId, struct FS_CosmeticLoadout newLoadout); // Function Scavenger.S_CheatMenuHUD.HandleCharacterCosmeticLoadoutRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleChallengeInstancesRefreshed(struct AS_PlayerControllerBase* Controller, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_CheatMenuHUD.HandleChallengeInstancesRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UserCheatMenuSettingsSave
// Size: 0xa0 (Inherited: 0x28)
struct US_UserCheatMenuSettingsSave : USaveGame {
	struct FS_CheatMenuHUDState StoredSettings; // 0x28(0x78)
};

// Class Scavenger.S_ChildActorComponent
// Size: 0x230 (Inherited: 0x230)
struct US_ChildActorComponent : UChildActorComponent {

	bool ReparentChildActor(struct AActor* newParent); // Function Scavenger.S_ChildActorComponent.ReparentChildActor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BaseCameraSetting
// Size: 0x38 (Inherited: 0x28)
struct US_BaseCameraSetting : UObject {
	struct FString SettingName; // 0x28(0x10)
};

// Class Scavenger.S_ScalarCameraSetting
// Size: 0x48 (Inherited: 0x38)
struct US_ScalarCameraSetting : US_BaseCameraSetting {
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Scavenger.S_ToggleCameraSetting
// Size: 0x40 (Inherited: 0x38)
struct US_ToggleCameraSetting : US_BaseCameraSetting {
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Scavenger.S_CameraSettings
// Size: 0x68 (Inherited: 0x28)
struct US_CameraSettings : UObject {
	struct TArray<struct US_SettingsCategory*> SettingCategories; // 0x28(0x10)
	enum class ES_SettingCategory SelectedSettingCategory; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t SelectedCategoryVerticalIndex; // 0x3c(0x04)
	enum class ES_SettingCategory Setting1Category; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t Setting1Index; // 0x44(0x04)
	enum class ES_SettingCategory Setting2Category; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t Setting2Index; // 0x4c(0x04)
	bool bSettingsPageSelected; // 0x50(0x01)
	bool bSettingChangedByCommmandLine; // 0x51(0x01)
	char pad_52[0x16]; // 0x52(0x16)

	void SaveSettingsToFile(); // Function Scavenger.S_CameraSettings.SaveSettingsToFile // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PreviousCategory(); // Function Scavenger.S_CameraSettings.PreviousCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NextCategory(); // Function Scavenger.S_CameraSettings.NextCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InputUp(); // Function Scavenger.S_CameraSettings.InputUp // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InputDown(); // Function Scavenger.S_CameraSettings.InputDown // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetToggleSetting(enum class ES_SettingCategory SettingCategory, int32_t SettingIndex); // Function Scavenger.S_CameraSettings.GetToggleSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_BaseCameraSetting* GetSetting(enum class ES_SettingCategory SettingCategory, int32_t SettingIndex); // Function Scavenger.S_CameraSettings.GetSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetScalarSetting(enum class ES_SettingCategory SettingCategory, int32_t SettingIndex); // Function Scavenger.S_CameraSettings.GetScalarSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_SettingsCategory* GetCategory(enum class ES_SettingCategory SettingCategory); // Function Scavenger.S_CameraSettings.GetCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SettingsCategory
// Size: 0x48 (Inherited: 0x28)
struct US_SettingsCategory : UObject {
	struct FString CategoryName; // 0x28(0x10)
	struct TArray<struct US_BaseCameraSetting*> Settings; // 0x38(0x10)

	bool GetToggleSettingValueAtIndex(int32_t Index); // Function Scavenger.S_SettingsCategory.GetToggleSettingValueAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetSettingNameAtIndex(int32_t Index); // Function Scavenger.S_SettingsCategory.GetSettingNameAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetScalarSettingValueAtIndex(int32_t Index); // Function Scavenger.S_SettingsCategory.GetScalarSettingValueAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeScalarSettingAtIndex(int32_t Index, float Delta); // Function Scavenger.S_SettingsCategory.ChangeScalarSettingAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeNonScalarSettingAtIndex(int32_t Index, int32_t change); // Function Scavenger.S_SettingsCategory.ChangeNonScalarSettingAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CineCamConfig
// Size: 0x98 (Inherited: 0x28)
struct US_CineCamConfig : UObject {
	struct TArray<struct FS_CineCamConfigScalarSetting> Movement; // 0x28(0x10)
	struct TArray<struct FS_CineCamConfigScalarSetting> Orientation; // 0x38(0x10)
	struct TArray<struct FS_CineCamConfigScalarSetting> Lens; // 0x48(0x10)
	struct TArray<struct FS_CineCamConfigScalarSetting> WorldTime; // 0x58(0x10)
	struct TArray<struct FS_CineCamConfigToggleSetting> AxisLock; // 0x68(0x10)
	struct TArray<struct FS_CineCamConfigToggleSetting> TargetLock; // 0x78(0x10)
	struct TArray<struct FS_CineCamSnapshot> Snapshots; // 0x88(0x10)
};

// Class Scavenger.S_CinematicSpectatorPlayerPawn
// Size: 0x3e8 (Inherited: 0x310)
struct AS_CinematicSpectatorPlayerPawn : ASpectatorPawn {
	char pad_310[0x10]; // 0x310(0x10)
	struct USpringArmComponent* SpringArmComponent; // 0x320(0x08)
	struct UCameraComponent* CameraComponent; // 0x328(0x08)
	struct US_CameraSettings* CameraSettings; // 0x330(0x08)
	char pad_338[0x8]; // 0x338(0x08)
	struct APawn* FollowTarget; // 0x340(0x08)
	bool bLookAtTarget; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct FS_ShelterInterfaceData ShelterData; // 0x350(0x98)

	void TryToggleFollowTarget(); // Function Scavenger.S_CinematicSpectatorPlayerPawn.TryToggleFollowTarget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTimeScale(float newTimeScale); // Function Scavenger.S_CinematicSpectatorPlayerPawn.SetTimeScale // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTimeOfDay(float newTimeOfDay); // Function Scavenger.S_CinematicSpectatorPlayerPawn.SetTimeOfDay // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ClientEffectSpawner
// Size: 0x298 (Inherited: 0x288)
struct AS_ClientEffectSpawner : AActor {
	struct UParticleSystem* EffectEmitter; // 0x288(0x08)
	bool EffectAutoDestroy; // 0x290(0x01)
	enum class EPSCPoolMethod EffectPoolMethod; // 0x291(0x01)
	char pad_292[0x6]; // 0x292(0x06)

	struct AS_ClientEffectSpawner* SpawnClientEffectAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* emitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod); // Function Scavenger.S_ClientEffectSpawner.SpawnClientEffectAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SC_CommandHandler
// Size: 0x270 (Inherited: 0xb0)
struct USC_CommandHandler : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct FS_CommandContainer CommandContainer; // 0xc8(0x1a4)
	char pad_26C[0x4]; // 0x26c(0x04)

	void SendCommandsToServer(struct TArray<struct FS_Command> commands); // Function Scavenger.SC_CommandHandler.SendCommandsToServer // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCommandContainer(); // Function Scavenger.SC_CommandHandler.NotifyReplicatedCommandContainer // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CommandManager
// Size: 0x28 (Inherited: 0x28)
struct US_CommandManager : UInterface {
};

// Class Scavenger.S_ContentGrantPhase
// Size: 0x88 (Inherited: 0x58)
struct US_ContentGrantPhase : US_PostMatchPhase {
	SoftClassProperty ContentGrantWidget; // 0x58(0x28)
	struct US_WidgetOnlineRewardGrants* m_onlineGrantWidget; // 0x80(0x08)

	void HandleOnSubscreenStepEnded(); // Function Scavenger.S_ContentGrantPhase.HandleOnSubscreenStepEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleContentGrantWidgetCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_ContentGrantPhase.HandleContentGrantWidgetCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ControllerComponent
// Size: 0x110 (Inherited: 0xb0)
struct US_ControllerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnChangedPawn; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPossessPawn; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnReplicatedPawn; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnSetPawn; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnChangedFocusedCharacterPawn; // 0xf0(0x10)
	char pad_100[0x10]; // 0x100(0x10)

	void HandleSpectatorTargetPawnChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_ControllerComponent.HandleSpectatorTargetPawnChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleDriverPawnChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_ControllerComponent.HandleDriverPawnChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	struct APawn* GetFocusedCharacter(); // Function Scavenger.S_ControllerComponent.GetFocusedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ControllerComponent* GetControllerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_ControllerComponent.GetControllerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CosmeticBanner
// Size: 0x2c8 (Inherited: 0x288)
struct AS_CosmeticBanner : AActor {
	struct FName BannerTextureParameter; // 0x288(0x08)
	struct FName EmblemTextureParameter; // 0x290(0x08)
	struct USC_SkeletalMeshComponent* M_Banner; // 0x298(0x08)
	struct UMaterialInstanceDynamic* m_bannerMaterial; // 0x2a0(0x08)
	char pad_2A8[0x20]; // 0x2a8(0x20)
};

// Class Scavenger.S_CosmeticCraftingUtility
// Size: 0x28 (Inherited: 0x28)
struct US_CosmeticCraftingUtility : UBlueprintFunctionLibrary {
};

// Class Scavenger.S_CosmeticSkinningComponent
// Size: 0x138 (Inherited: 0xb0)
struct US_CosmeticSkinningComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRecordChanged; // 0xb0(0x10)
	struct TMap<enum class ES_CosmeticLoadoutSlotType, struct FS_CosmeticSkinningComponentRecord> m_records; // 0xc0(0x50)
	struct US_SkinningManagerComponent* m_cachedSkinningManager; // 0x110(0x08)
	struct US_OnlineServiceManager* m_cachedOnlineServiceManager; // 0x118(0x08)
	struct UDataTable* m_cachedSubMaterialMetadataTable; // 0x120(0x08)
	struct UDataTable* m_cachedSubMaterialOptionsMetadataTable; // 0x128(0x08)
	char pad_130[0x8]; // 0x130(0x08)

	void SetSkinDirtyForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType); // Function Scavenger.S_CosmeticSkinningComponent.SetSkinDirtyForCosmeticType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMeshSpecificOverridesForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType, struct TMap<struct TSoftObjectPtr<struct USkeletalMesh>, struct FS_CosmeticSkinningComponentMeshSpecificOverrides> Overrides); // Function Scavenger.S_CosmeticSkinningComponent.SetMeshSpecificOverridesForCosmeticType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMeshComponentsForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType, struct TArray<struct UMeshComponent*> MeshComponents); // Function Scavenger.S_CosmeticSkinningComponent.SetMeshComponentsForCosmeticType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMeshComponentForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType, struct UMeshComponent* MeshComponent); // Function Scavenger.S_CosmeticSkinningComponent.SetMeshComponentForCosmeticType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDispatchChangeNotifications(bool shouldDispatch); // Function Scavenger.S_CosmeticSkinningComponent.SetDispatchChangeNotifications // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCosmeticLoadoutForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType, struct FS_CosmeticLoadoutSlot CosmeticLoadout); // Function Scavenger.S_CosmeticSkinningComponent.SetCosmeticLoadoutForCosmeticType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCosmeticLoadoutForAllTypes(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_CosmeticSkinningComponent.SetCosmeticLoadoutForAllTypes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetSkinningManagerIdForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType, bool outIsCompoundSkinId); // Function Scavenger.S_CosmeticSkinningComponent.GetSkinningManagerIdForCosmeticType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearSettingsForCosmeticType(enum class ES_CosmeticLoadoutSlotType CosmeticType); // Function Scavenger.S_CosmeticSkinningComponent.ClearSettingsForCosmeticType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearSettingsForAllCosmeticTypes(); // Function Scavenger.S_CosmeticSkinningComponent.ClearSettingsForAllCosmeticTypes // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CosmeticsCheatMenuHUD
// Size: 0x558 (Inherited: 0x528)
struct AS_CosmeticsCheatMenuHUD : AS_CheatMenuHUDBase {
	char pad_528[0x30]; // 0x528(0x30)

	void HandleCosmeticSkinningComponentChanged(enum class ES_CosmeticLoadoutSlotType loadoutSlotType); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleCosmeticSkinningComponentChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCosmeticSelectionHistoryChanged(); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleCosmeticSelectionHistoryChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleControllerCosmeticLoadoutChanged(struct AS_PlayerControllerBase* Controller); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleControllerCosmeticLoadoutChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCharacterWeaponSystemSlotChanged(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* oldWeapon, struct AS_WeaponBase* newWeapon); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleCharacterWeaponSystemSlotChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCharacterWeaponCosmeticSkinningComponentChanged(enum class ES_CosmeticLoadoutSlotType loadoutSlotType); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleCharacterWeaponCosmeticSkinningComponentChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCharacterCosmeticLoadoutChanged(struct AS_CharacterBase* Character); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleCharacterCosmeticLoadoutChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleBackendCharacterCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController, struct FName characterClassId, struct FS_CosmeticLoadout newLoadout); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleBackendCharacterCosmeticLoadoutChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleBackendAccountCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController, struct FS_CosmeticLoadout newLoadout); // Function Scavenger.S_CosmeticsCheatMenuHUD.HandleBackendAccountCosmeticLoadoutChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CosmeticLoadoutUtilities
// Size: 0x28 (Inherited: 0x28)
struct US_CosmeticLoadoutUtilities : UBlueprintFunctionLibrary {

	struct FS_CosmeticLoadout SetSubMaterialParametersForSlot(struct FS_CosmeticLoadout Loadout, struct FS_CustomizationStagingObject stagingObject); // Function Scavenger.S_CosmeticLoadoutUtilities.SetSubMaterialParametersForSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout RandomizeCosmeticLoadoutSlotSelections(struct UGameInstance* GameInstance, struct FS_CosmeticLoadout currentLoadout, enum class ES_CosmeticLoadoutSlotType CosmeticType); // Function Scavenger.S_CosmeticLoadoutUtilities.RandomizeCosmeticLoadoutSlotSelections // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetSubMaterialIdsForSubMaterialSlot(struct UGameInstance* GameInstance, struct FS_CosmeticItemSubMaterialSlotMetadata SubmaterialSlotMetadata); // Function Scavenger.S_CosmeticLoadoutUtilities.GetSubMaterialIdsForSubMaterialSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCosmeticSetMetadata(struct UWorld* World, struct FName cosmeticOnlineItemId, struct FS_CosmeticSetMetadata outCosmeticSetMetadata); // Function Scavenger.S_CosmeticLoadoutUtilities.GetCosmeticSetMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_CosmeticLoadoutSlotType GetCosmeticLoadoutSlotTypeOfItemId(struct APlayerController* PlayerController, struct FName ItemId); // Function Scavenger.S_CosmeticLoadoutUtilities.GetCosmeticLoadoutSlotTypeOfItemId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_CosmeticLoadoutSlotType GetCosmeticLoadoutSlotTypeOfCharacterLoadoutSlotType(enum class ES_LoadoutSlotType loadoutSlotType); // Function Scavenger.S_CosmeticLoadoutUtilities.GetCosmeticLoadoutSlotTypeOfCharacterLoadoutSlotType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool CanShowCosmeticsForItem(struct APlayerController* PlayerController, struct FName ItemId); // Function Scavenger.S_CosmeticLoadoutUtilities.CanShowCosmeticsForItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CosmeticTinkeringTestActor
// Size: 0x2e8 (Inherited: 0x288)
struct AS_CosmeticTinkeringTestActor : AActor {
	char pad_288[0x20]; // 0x288(0x20)
	struct US_CosmeticSkinningComponent* m_cosmeticSkinningComponent; // 0x2a8(0x08)
	struct FS_CosmeticLoadoutSlot m_cosmeticLoadoutSlot; // 0x2b0(0x28)
	struct TArray<struct USkeletalMeshComponent*> m_cosmeticMeshComponents; // 0x2d8(0x10)

	void NotifyReplicatedCosmeticLoadoutSlot(); // Function Scavenger.S_CosmeticTinkeringTestActor.NotifyReplicatedCosmeticLoadoutSlot // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CraftingComponent
// Size: 0x160 (Inherited: 0xb0)
struct US_CraftingComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCraftingCompleted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCraftingQueueItemAdded; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnCraftingQueueItemRemoved; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnCraftingStarted; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnCraftingStopped; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnCraftingTimeUpdated; // 0x100(0x10)
	int32_t CraftingQueueSlotCount; // 0x110(0x04)
	char pad_114[0x2c]; // 0x114(0x2c)
	struct TArray<struct FS_CraftingRecipeData> m_recipeData; // 0x140(0x10)
	struct TArray<struct FS_ReplicatedCraftingEvent> m_replicatedCraftingEvents; // 0x150(0x10)

	void ServerRequestAddToCraftingQueue(uint32_t ReplicationKey, struct US_RecipeData* RecipeData); // Function Scavenger.S_CraftingComponent.ServerRequestAddToCraftingQueue // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerAcknowledgeReplicatedCraftingEvents(struct TArray<uint32_t> IDs); // Function Scavenger.S_CraftingComponent.ServerAcknowledgeReplicatedCraftingEvents // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCraftingEvents(); // Function Scavenger.S_CraftingComponent.NotifyReplicatedCraftingEvents // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRecipeListChanged(struct TArray<struct US_RecipeData*> recipeList); // Function Scavenger.S_CraftingComponent.HandleRecipeListChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnChangedPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_CraftingComponent.HandleOnChangedPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandeOnDiedOrTerminal(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_CraftingComponent.HandeOnDiedOrTerminal // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_CraftingComponent* GetCraftingComponentOfActor(struct AActor* Actor); // Function Scavenger.S_CraftingComponent.GetCraftingComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool CanStartAny(); // Function Scavenger.S_CraftingComponent.CanStartAny // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CrashReportingBPFL
// Size: 0x28 (Inherited: 0x28)
struct US_CrashReportingBPFL : UBlueprintFunctionLibrary {

	void SetCrashAttributeString(struct FString Name, struct FString Value); // Function Scavenger.S_CrashReportingBPFL.SetCrashAttributeString // (Final|Native|Static|Private|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCrashAttributeInt(struct FString Name, int32_t Value); // Function Scavenger.S_CrashReportingBPFL.SetCrashAttributeInt // (Final|Native|Static|Private|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCrashAttributeFloat(struct FString Name, float Value); // Function Scavenger.S_CrashReportingBPFL.SetCrashAttributeFloat // (Final|Native|Static|Private|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCrashAttributeBool(struct FString Name, bool Value); // Function Scavenger.S_CrashReportingBPFL.SetCrashAttributeBool // (Final|Native|Static|Private|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DamageableActor
// Size: 0x2a8 (Inherited: 0x288)
struct AS_DamageableActor : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	bool bShowDamageNumbers; // 0x290(0x01)
	bool bAutoDestroyWhenDead; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	float AutoDestoryDelay; // 0x294(0x04)
	bool bCollideWithFriendlyBullets; // 0x298(0x01)
	bool bCollideWithHostileBullets; // 0x299(0x01)
	bool bCollideWithNeutralBullets; // 0x29a(0x01)
	char pad_29B[0x5]; // 0x29b(0x05)
	struct US_StatsComponent* StatsComponent; // 0x2a0(0x08)

	void ScavengerCrossServerTakeDamage(float DamageAmount, struct FS_PointDamageEvent DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser, enum class ES_TriggerType triggerType); // Function Scavenger.S_DamageableActor.ScavengerCrossServerTakeDamage // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void ScavengerCrossServerAddImpulseAtLocation(struct FVector Impulse, struct FVector Location); // Function Scavenger.S_DamageableActor.ScavengerCrossServerAddImpulseAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamageBatch(struct TArray<struct FS_PointDamageMulticast> multiCastEvents); // Function Scavenger.S_DamageableActor.MulticastTakePointDamageBatch // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamage(float DamageAmount, struct FS_PointDamageEvent PointDamageEvent, struct APawn* instigatorPawn, struct AActor* CauseActor, enum class ES_TriggerType triggerType); // Function Scavenger.S_DamageableActor.MulticastTakePointDamage // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	bool IsDead(); // Function Scavenger.S_DamageableActor.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAlive(); // Function Scavenger.S_DamageableActor.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DamageableActor_OnDiedCallback(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_DamageableActor.DamageableActor_OnDiedCallback // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DamageExecution
// Size: 0x48 (Inherited: 0x40)
struct US_DamageExecution : UGameplayEffectExecutionCalculation {
	struct US_DamageTypeBase* DamageTypeClass; // 0x40(0x08)

	void CalculateDamage(float DamageAmount, struct AActor* SourceActor, struct AActor* TargetActor, struct UAbilitySystemComponent* SourceAbilitySystemComponent, struct UAbilitySystemComponent* TargetAbilitySystemComponent, float DealtDamage); // Function Scavenger.S_DamageExecution.CalculateDamage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PointDamageInterface
// Size: 0x28 (Inherited: 0x28)
struct US_PointDamageInterface : UInterface {
};

// Class Scavenger.SFL_DamageHelpers
// Size: 0x28 (Inherited: 0x28)
struct USFL_DamageHelpers : UBlueprintFunctionLibrary {

	struct UDamageType* GetDamageTypeFromDamageEvent(struct FDamageEvent DamageEvent); // Function Scavenger.SFL_DamageHelpers.GetDamageTypeFromDamageEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DamageTypeBase
// Size: 0x68 (Inherited: 0x40)
struct US_DamageTypeBase : UDamageType {
	enum class ES_StatChangeCauseType CauseType; // 0x40(0x01)
	enum class ES_PoiseDamageType PoiseDamageType; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct UGameplayEffect* GameplayEffectToApplyOnPointDamage; // 0x48(0x08)
	struct UGameplayEffect* GameplayEffectToApplyOnPointDamageAbsorbedByArmor; // 0x50(0x08)
	struct UGameplayEffect* GameplayEffectToApplyOnPointDamageAbsorbedByShield; // 0x58(0x08)
	int32_t DamageFlags; // 0x60(0x04)
	enum class ES_DamageOverTimeType DamageOverTimeType; // 0x64(0x01)
	bool bDamageNumbersHidden; // 0x65(0x01)
	bool bHitMarkerHidden; // 0x66(0x01)
	char pad_67[0x1]; // 0x67(0x01)
};

// Class Scavenger.S_DamageTypeBleed
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeBleed : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeDisease
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeDisease : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypePoison
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypePoison : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeRadiation
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeRadiation : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeBlunt
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeBlunt : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypePiercing
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypePiercing : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeSharp
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeSharp : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeBullet
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeBullet : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeExplosive
// Size: 0xd0 (Inherited: 0x68)
struct US_DamageTypeExplosive : US_DamageTypeBase {
	bool IgnoreFriendlies; // 0x68(0x01)
	bool IgnoreInstigator; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	float BaseDamage; // 0x6c(0x04)
	float BaseDamageAIMin; // 0x70(0x04)
	float BaseDamageAIMax; // 0x74(0x04)
	float MinimumDamage; // 0x78(0x04)
	float DamageMultiplierForAITakingDamage; // 0x7c(0x04)
	float PoiseDamage; // 0x80(0x04)
	float VehicleDamageScale; // 0x84(0x04)
	float InnerRadius; // 0x88(0x04)
	float OuterRadius; // 0x8c(0x04)
	float AdjustExplosionImpactDirectionUp; // 0x90(0x04)
	float UpExplosionRandomScale; // 0x94(0x04)
	float CharacterSpecificImpulse; // 0x98(0x04)
	float ExplosiveProjectilesImpulseNotScaled; // 0x9c(0x04)
	float DamageableSpecificImpulse; // 0xa0(0x04)
	float VehicleSpecificImpulse; // 0xa4(0x04)
	float OcclusionStrafeTargetScale; // 0xa8(0x04)
	float PartiallyOccludedDamageScale; // 0xac(0x04)
	struct UParticleSystem* Explosion; // 0xb0(0x08)
	struct UAkAudioEvent* SoundEvent; // 0xb8(0x08)
	struct UMatineeCameraShake* CameraShake; // 0xc0(0x08)
	float CameraShakeInnerRadius; // 0xc8(0x04)
	float CameraShakeOuterRadius; // 0xcc(0x04)

	void ExplodeAtLocation(struct US_DamageTypeExplosive* DamageType, struct AController* InstigatorController, struct AActor* CauseActor, struct FHitResult clientHitResult, struct FVector explosionLocation, float explosionDamageScalarForAI, bool spawnParticleEffects, float deformationRadiusMultiplier); // Function Scavenger.S_DamageTypeExplosive.ExplodeAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void Explode(struct US_DamageTypeExplosive* DamageType, struct AController* InstigatorController, struct AActor* CauseActor, struct FVector closestSurfaceNormal, float explosionDamageScalarForAI, bool spawnParticleEffects, float deformationRadiusMultiplier); // Function Scavenger.S_DamageTypeExplosive.Explode // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DamageTypeFlechette
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeFlechette : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeImpact
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeImpact : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeLaser
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeLaser : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypePlasma
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypePlasma : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeAcid
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeAcid : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeCold
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeCold : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeElectric
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeElectric : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeHeat
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeHeat : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeAsphyxiation
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeAsphyxiation : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeExhaustion
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeExhaustion : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeHunger
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeHunger : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeThirst
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeThirst : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeGameRule
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeGameRule : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeFellOutOfWorld
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeFellOutOfWorld : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeAssassination
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeAssassination : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeFall
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeFall : US_DamageTypeBase {
};

// Class Scavenger.S_DamageTypeVehicleImpact
// Size: 0x68 (Inherited: 0x68)
struct US_DamageTypeVehicleImpact : US_DamageTypeBase {
};

// Class Scavenger.S_InteractableActor
// Size: 0x2d0 (Inherited: 0x288)
struct AS_InteractableActor : AActor {
	float InteractionRadiusOverride; // 0x288(0x04)
	float InteractionHeightOverride; // 0x28c(0x04)
	float FwdDirectionLocationOverride; // 0x290(0x04)
	enum class ES_InteractableActorType InteractableActorType; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct US_InteractableIconComponent* OverrideInteractableIconComponent; // 0x298(0x08)
	struct TArray<struct FComponentReference> ComponentsToHighlight; // 0x2a0(0x10)
	char pad_2B0[0x20]; // 0x2b0(0x20)

	void UnregisterInteractable(); // Function Scavenger.S_InteractableActor.UnregisterInteractable // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterInteractable(struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractableActor.RegisterInteractable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnUnighlighted_BP(); // Function Scavenger.S_InteractableActor.OnUnighlighted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnHighlighted_BP(); // Function Scavenger.S_InteractableActor.OnHighlighted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInteractionStopped(struct AS_PlayerController* PlayerController, struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, int32_t InteractableIndex, struct FS_InteractableData InteractableData, float InteractionPercentage); // Function Scavenger.S_InteractableActor.NotifyInteractionStopped // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInteractionStarted(struct AS_PlayerController* PlayerController, struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, int32_t InteractableIndex, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractableActor.NotifyInteractionStarted // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsRegistered(); // Function Scavenger.S_InteractableActor.IsRegistered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInteractionAllowed(struct AS_PlayerController* PlayerController, struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, int32_t InteractableIndex, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractableActor.IsInteractionAllowed // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	float GetMaximumInteractionTimeAllowed(struct AS_PlayerController* PlayerController, struct AActor* InteractableActor, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractableActor.GetMaximumInteractionTimeAllowed // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	enum class ES_InteractableActorType GetInteractableActorType(); // Function Scavenger.S_InteractableActor.GetInteractableActorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DataUplink
// Size: 0x328 (Inherited: 0x2d0)
struct AS_DataUplink : AS_InteractableActor {
	struct TSet<struct AS_PlayerCharacter*> m_playersBanking; // 0x2d0(0x50)
	char pad_320[0x8]; // 0x320(0x08)

	bool SetPlayerBanking(struct AS_PlayerCharacter* playerCharacter, bool shouldBeBanking); // Function Scavenger.S_DataUplink.SetPlayerBanking // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsBanking(struct AS_PlayerCharacter* playerCharacter); // Function Scavenger.S_DataUplink.IsBanking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemChanged(struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_DataUplink.HandleOnInventoryItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemAddedOrRemoved(struct FS_ItemState ItemState); // Function Scavenger.S_DataUplink.HandleOnInventoryItemAddedOrRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleBankingItemTypeChanged(struct US_ItemData* BankingItemType); // Function Scavenger.S_DataUplink.HandleBankingItemTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DebugCameraController
// Size: 0x700 (Inherited: 0x6f8)
struct AS_DebugCameraController : ADebugCameraController {
	char pad_6F8[0x8]; // 0x6f8(0x08)
};

// Class Scavenger.S_DebugCameraHUD
// Size: 0x378 (Inherited: 0x378)
struct AS_DebugCameraHUD : ADebugCameraHUD {
};

// Class Scavenger.S_WidgetMinimal
// Size: 0x4b8 (Inherited: 0x270)
struct US_WidgetMinimal : UUserWidget {
	bool bUsesUnseenItemBadge; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct FS_UnseenObjectBadgeConfig UnseenObjectBadgeConfig; // 0x278(0xc0)
	struct FMulticastInlineDelegate OnIsFocusableChanged; // 0x338(0x10)
	struct FMulticastInlineDelegate OnWidgetFocusedChanged; // 0x348(0x10)
	struct FMulticastInlineDelegate OnCustomFocusNavigation; // 0x358(0x10)
	bool bIsFocusableByAllUsers; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct FText PageLabel; // 0x370(0x18)
	enum class ES_AnimationTickMode AnimationTickMode; // 0x388(0x01)
	bool bDisableTick; // 0x389(0x01)
	char pad_38A[0x6]; // 0x38a(0x06)
	struct UInvalidationBox* InvalidationBox; // 0x390(0x08)
	struct US_WidgetMinimal* ParentWidgetMinimalOverride; // 0x398(0x08)
	bool bUseHUDLogicTick; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct TArray<struct US_WidgetAnimation*> WidgetLiteAnimations; // 0x3a8(0x10)
	struct US_WidgetMinimal* Badge; // 0x3b8(0x08)
	char pad_3C0[0xb8]; // 0x3c0(0xb8)
	struct US_WidgetMinimal* m_currentFocusTarget; // 0x478(0x08)
	char pad_480[0x38]; // 0x480(0x38)

	void WidgetRemovedFromNavStack(); // Function Scavenger.S_WidgetMinimal.WidgetRemovedFromNavStack // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WidgetFormerlyTopOfNavStack(); // Function Scavenger.S_WidgetMinimal.WidgetFormerlyTopOfNavStack // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WidgetBecameTopOfNavStack(); // Function Scavenger.S_WidgetMinimal.WidgetBecameTopOfNavStack // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WidgetAddedToNavStack(); // Function Scavenger.S_WidgetMinimal.WidgetAddedToNavStack // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString TruncateStringToRenderWidth(struct FSlateFontInfo fontInfo, struct FString Text, int32_t Width, struct FString suffix); // Function Scavenger.S_WidgetMinimal.TruncateStringToRenderWidth // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void SuppressInvalidate(); // Function Scavenger.S_WidgetMinimal.SuppressInvalidate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPageLabel(struct FText newPageLabel); // Function Scavenger.S_WidgetMinimal.SetPageLabel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetExplicitFocusTarget_WithDelay(struct US_WidgetMinimal* WidgetToFocus, float InitialDelay); // Function Scavenger.S_WidgetMinimal.SetExplicitFocusTarget_WithDelay // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetExplicitFocusTarget(struct US_WidgetMinimal* WidgetToFocus); // Function Scavenger.S_WidgetMinimal.SetExplicitFocusTarget // (Native|Public) // @ game+0xffff8008e4a10000
	void SetDefaultFocusTarget(); // Function Scavenger.S_WidgetMinimal.SetDefaultFocusTarget // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RestoreFocusToTarget(); // Function Scavenger.S_WidgetMinimal.RestoreFocusToTarget // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveFocusTarget(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetMinimal.RemoveFocusTarget // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyWidgetRemovedFromNavStack_BP(); // Function Scavenger.S_WidgetMinimal.NotifyWidgetRemovedFromNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetFormerlyTopOfNavStack_BP(); // Function Scavenger.S_WidgetMinimal.NotifyWidgetFormerlyTopOfNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetBecameTopOfNavStack_BP(); // Function Scavenger.S_WidgetMinimal.NotifyWidgetBecameTopOfNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetAddedToNavStack_BP(); // Function Scavenger.S_WidgetMinimal.NotifyWidgetAddedToNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyVisibilityChanged_BP(enum class ESlateVisibility newVisibility); // Function Scavenger.S_WidgetMinimal.NotifyVisibilityChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyViewTargetBlendCompleteForWidget(); // Function Scavenger.S_WidgetMinimal.NotifyViewTargetBlendCompleteForWidget // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyUnseenObjectBadgeStateChanged(bool shouldShowBadge); // Function Scavenger.S_WidgetMinimal.NotifyUnseenObjectBadgeStateChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOwningPlayerStatePointerChanged_BP(struct AS_PlayerState* PlayerState); // Function Scavenger.S_WidgetMinimal.NotifyOwningPlayerStatePointerChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOwningPlayerPawnSet_BP(struct APawn* NewPawn); // Function Scavenger.S_WidgetMinimal.NotifyOwningPlayerPawnSet_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOwningPlayerPawnChanged_BP(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_WidgetMinimal.NotifyOwningPlayerPawnChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNewFocusWidget_BP(struct US_WidgetMinimal* NewlyFocusedWidget); // Function Scavenger.S_WidgetMinimal.NotifyNewFocusWidget_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNativeTick_BP(float deltaTimeInSeconds); // Function Scavenger.S_WidgetMinimal.NotifyNativeTick_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyMenuInputReleased_BP(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_WidgetMinimal.NotifyMenuInputReleased_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyMenuInputPressed_BP(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_WidgetMinimal.NotifyMenuInputPressed_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInvalidated_BP(); // Function Scavenger.S_WidgetMinimal.NotifyInvalidated_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInterfaceColorModeChanged_BP(enum class ES_InterfaceColorMode interfaceColorMode); // Function Scavenger.S_WidgetMinimal.NotifyInterfaceColorModeChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInputTypeChanged_BP(bool bUsingGamepad); // Function Scavenger.S_WidgetMinimal.NotifyInputTypeChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInputDeviceChanged_BP(enum class ES_Platform newInputPlatformType); // Function Scavenger.S_WidgetMinimal.NotifyInputDeviceChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGameStatePointerChanged_BP(struct AS_GameState* GameState); // Function Scavenger.S_WidgetMinimal.NotifyGameStatePointerChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyConstructed_BP(); // Function Scavenger.S_WidgetMinimal.NotifyConstructed_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAnyKeyActionPressed_BP(); // Function Scavenger.S_WidgetMinimal.NotifyAnyKeyActionPressed_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsWidgetTopOfNavStack(); // Function Scavenger.S_WidgetMinimal.IsWidgetTopOfNavStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsWidgetCurrentFocusTarget(struct UWidget* potentialFocusTargetToCompare); // Function Scavenger.S_WidgetMinimal.IsWidgetCurrentFocusTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsInputTypeSupported(enum class ES_GameInputActionType InputType, enum class ES_InputActionFlag InputActionFlag); // Function Scavenger.S_WidgetMinimal.IsInputTypeSupported // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void InvalidateBox(struct UInvalidationBox* InvalidationBox); // Function Scavenger.S_WidgetMinimal.InvalidateBox // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Invalidate(); // Function Scavenger.S_WidgetMinimal.Invalidate // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleWindowMoved(); // Function Scavenger.S_WidgetMinimal.HandleWindowMoved // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleWidgetGainedFocus(struct US_WidgetMinimal* ChildWidget, bool bHasFocus); // Function Scavenger.S_WidgetMinimal.HandleWidgetGainedFocus // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOwningPlayerChangedPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_WidgetMinimal.HandleOwningPlayerChangedPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnNewObjectBadgeIdsChanged(struct TArray<struct FName> unseenIds); // Function Scavenger.S_WidgetMinimal.HandleOnNewObjectBadgeIdsChanged // (Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleLogicHUDTick(float DeltaTime); // Function Scavenger.S_WidgetMinimal.HandleLogicHUDTick // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInterfaceColorModeChanged(enum class ES_InterfaceColorMode interfaceColorMode); // Function Scavenger.S_WidgetMinimal.HandleInterfaceColorModeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInputTypeChanged(bool usingGamepad); // Function Scavenger.S_WidgetMinimal.HandleInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInputDeviceChanged(enum class ES_Platform newInputPlatformType); // Function Scavenger.S_WidgetMinimal.HandleInputDeviceChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleFocusStateChanged(struct US_WidgetMinimal* ChildWidget); // Function Scavenger.S_WidgetMinimal.HandleFocusStateChanged // (Native|Protected) // @ game+0xffff8008e4a10000
	void GiveFocusToWidget(); // Function Scavenger.S_WidgetMinimal.GiveFocusToWidget // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetSupportsFocusNavigation(); // Function Scavenger.S_WidgetMinimal.GetSupportsFocusNavigation // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetStringRenderSizeFromFontInfo(struct FSlateFontInfo fontInfo, struct FString Text, int32_t startIndex, int32_t endIndex); // Function Scavenger.S_WidgetMinimal.GetStringRenderSizeFromFontInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FSlateFontInfo GetSlateFontInfoFromRichTextLabel(struct UDataTable* DataTable, struct FName richTextLabel); // Function Scavenger.S_WidgetMinimal.GetSlateFontInfoFromRichTextLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FSlateFontInfo GetSlateFontInfoFromRichTextBlock(struct US_RichTextBlock* RichTextBlock, struct FName richTextLabel); // Function Scavenger.S_WidgetMinimal.GetSlateFontInfoFromRichTextBlock // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* GetOwningScavengerPlayerCharacter(); // Function Scavenger.S_WidgetMinimal.GetOwningScavengerPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerControllerBase* GetOwningScavengerPlayerBase(); // Function Scavenger.S_WidgetMinimal.GetOwningScavengerPlayerBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerController* GetOwningScavengerPlayer(); // Function Scavenger.S_WidgetMinimal.GetOwningScavengerPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColorInEditor(struct UDataTable* interfaceColorTable, enum class ES_InterfaceColorMode interfaceColorMode, struct FName colorId); // Function Scavenger.S_WidgetMinimal.GetInterfaceColorInEditor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColorFromHandleInEditor(struct UDataTable* interfaceColorTable, enum class ES_InterfaceColorMode interfaceColorMode, struct FDataTableRowHandle interfaceColorHandle); // Function Scavenger.S_WidgetMinimal.GetInterfaceColorFromHandleInEditor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColorFromHandle(struct FDataTableRowHandle interfaceColorHandle); // Function Scavenger.S_WidgetMinimal.GetInterfaceColorFromHandle // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColor(struct FName colorId); // Function Scavenger.S_WidgetMinimal.GetInterfaceColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetDefaultFocusForWidget(struct TArray<struct US_WidgetMinimal*> focusableWidgets); // Function Scavenger.S_WidgetMinimal.GetDefaultFocusForWidget // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetCurrentFocusTarget(); // Function Scavenger.S_WidgetMinimal.GetCurrentFocusTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct UWidget* GetChildOfTypeAt(struct UPanelWidget* panelTarget, int32_t Index, struct UWidget* childClass); // Function Scavenger.S_WidgetMinimal.GetChildOfTypeAt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_HUD* GetBaseHUD(); // Function Scavenger.S_WidgetMinimal.GetBaseHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAllWidgetsInTree_Extended_FilteredByClass(struct UWidget* childClassToFilter, struct TArray<struct UWidget*> outChildWidgets); // Function Scavenger.S_WidgetMinimal.GetAllWidgetsInTree_Extended_FilteredByClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetAllChildrenOfType(struct UPanelWidget* panelTarget, struct UUserWidget* childClass, struct TArray<struct UWidget*> outChildWidgets); // Function Scavenger.S_WidgetMinimal.GetAllChildrenOfType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearFocusFromWidget(bool tryFocusReset); // Function Scavenger.S_WidgetMinimal.ClearFocusFromWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AllowInvalidate(); // Function Scavenger.S_WidgetMinimal.AllowInvalidate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddFocusTarget(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetMinimal.AddFocusTarget // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DebugInfoWidget
// Size: 0x538 (Inherited: 0x4b8)
struct US_DebugInfoWidget : US_WidgetMinimal {
	struct US_RichTextBlock* SystemClockText; // 0x4b8(0x08)
	struct US_RichTextBlock* ChangeListNumberText; // 0x4c0(0x08)
	struct US_RichTextBlock* PositionText; // 0x4c8(0x08)
	struct US_RichTextBlock* TimeOfDayText; // 0x4d0(0x08)
	struct US_RichTextBlock* StorminessText; // 0x4d8(0x08)
	struct US_RichTextBlock* ShelterStateText; // 0x4e0(0x08)
	struct US_RichTextBlock* AICountText; // 0x4e8(0x08)
	struct US_RichTextBlock* PlayerCountText; // 0x4f0(0x08)
	struct US_RichTextBlock* FPSText; // 0x4f8(0x08)
	struct FText RichTextStyle; // 0x500(0x18)
	struct US_TimeOfDayAndWeatherComponent* m_cachedToDaWComponent; // 0x518(0x08)
	char pad_520[0x18]; // 0x520(0x18)

	void UpdateTimeOfDayText(); // Function Scavenger.S_DebugInfoWidget.UpdateTimeOfDayText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateSystemClockText(); // Function Scavenger.S_DebugInfoWidget.UpdateSystemClockText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateStorminessText(); // Function Scavenger.S_DebugInfoWidget.UpdateStorminessText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateShelterStateText(); // Function Scavenger.S_DebugInfoWidget.UpdateShelterStateText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdatePlayerLocationText(); // Function Scavenger.S_DebugInfoWidget.UpdatePlayerLocationText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateFPSText(); // Function Scavenger.S_DebugInfoWidget.UpdateFPSText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateAIAndPlayerCountText(); // Function Scavenger.S_DebugInfoWidget.UpdateAIAndPlayerCountText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DebugOverlayEntry
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_DebugOverlayEntry : US_WidgetMinimal {
	struct UTextBlock* TextBlock; // 0x4b8(0x08)
};

// Class Scavenger.S_DebugOverlayWidget
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_DebugOverlayWidget : US_WidgetMinimal {
	struct UCanvasPanel* OnlineServicesCanvas; // 0x4b8(0x08)
	struct UVerticalBox* ContainerLobby; // 0x4c0(0x08)
	struct UVerticalBox* ContainerChat; // 0x4c8(0x08)
	struct US_DebugOverlayEntry* EntryWidgetClass; // 0x4d0(0x08)
};

// Class Scavenger.S_DebugSaveGame
// Size: 0x78 (Inherited: 0x28)
struct US_DebugSaveGame : USaveGame {
	struct TMap<struct FString, struct FVector> SavedTeleportLocations; // 0x28(0x50)
};

// Class Scavenger.S_DebugScreen
// Size: 0x2d0 (Inherited: 0x270)
struct US_DebugScreen : UUserWidget {
	char pad_270[0x60]; // 0x270(0x60)

	void ToggleKey2Released(); // Function Scavenger.S_DebugScreen.ToggleKey2Released // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ToggleKey2Down(); // Function Scavenger.S_DebugScreen.ToggleKey2Down // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ToggleKey1Released(); // Function Scavenger.S_DebugScreen.ToggleKey1Released // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ToggleKey1Down(); // Function Scavenger.S_DebugScreen.ToggleKey1Down // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DecalManagerComponent
// Size: 0xd0 (Inherited: 0xb0)
struct US_DecalManagerComponent : UActorComponent {
	char pad_B0[0x14]; // 0xb0(0x14)
	int32_t MaximumNumberOfTrackedDecals; // 0xc4(0x04)
	float ReclaimedDecalFadeTime; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	struct US_DecalManagerComponent* GetDecalManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_DecalManagerComponent.GetDecalManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DeviceUtilityBPFL
// Size: 0x28 (Inherited: 0x28)
struct US_DeviceUtilityBPFL : UBlueprintFunctionLibrary {

	bool VFXEnabled(struct UObject* Context); // Function Scavenger.S_DeviceUtilityBPFL.VFXEnabled // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasViewport(struct UObject* Context); // Function Scavenger.S_DeviceUtilityBPFL.HasViewport // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AutoJoinHelpers
// Size: 0x28 (Inherited: 0x28)
struct US_AutoJoinHelpers : UBlueprintFunctionLibrary {

	void LogAutomation(struct FString Message, bool printToScreen); // Function Scavenger.S_AutoJoinHelpers.LogAutomation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LogAutoJoinState(enum class ES_AutoJoinState State, struct TArray<struct FString> autoJoinArgs); // Function Scavenger.S_AutoJoinHelpers.LogAutoJoinState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetTestAccountSubtypeFlag(struct FString outTestAccountSubtype); // Function Scavenger.S_AutoJoinHelpers.GetTestAccountSubtypeFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetTestAccountIdFlag(struct FString outTestAccountId); // Function Scavenger.S_AutoJoinHelpers.GetTestAccountIdFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetTestAccountAuthTokenFlag(struct FString outTestAccountAuthToken); // Function Scavenger.S_AutoJoinHelpers.GetTestAccountAuthTokenFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetLobbyServiceHostOverrideFlag(struct FString outName); // Function Scavenger.S_AutoJoinHelpers.GetLobbyServiceHostOverrideFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetAutoStartSessionFlag(); // Function Scavenger.S_AutoJoinHelpers.GetAutoStartSessionFlag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetAutoShutdownClientFlag(); // Function Scavenger.S_AutoJoinHelpers.GetAutoShutdownClientFlag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetAutoJoinFlag(struct FString outName); // Function Scavenger.S_AutoJoinHelpers.GetAutoJoinFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DialogueFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_DialogueFunctionLibrary : UBlueprintFunctionLibrary {

	bool QueueCharacterDialogueEventForTeam(struct UObject* WorldContext, struct AS_CharacterBase* Speaker, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings, int32_t TeamIndex); // Function Scavenger.S_DialogueFunctionLibrary.QueueCharacterDialogueEventForTeam // (Final|BlueprintAuthorityOnly|Native|Static|Private|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool QueueCharacterDialogueEventForClient(struct UObject* WorldContext, struct AS_PlayerController* Controller, struct AS_CharacterBase* Speaker, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_DialogueFunctionLibrary.QueueCharacterDialogueEventForClient // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool QueueCharacterDialogueEventForAll(struct UObject* WorldContext, struct AS_CharacterBase* Speaker, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings, int32_t ExcludeTeamIndex); // Function Scavenger.S_DialogueFunctionLibrary.QueueCharacterDialogueEventForAll // (Final|BlueprintAuthorityOnly|Native|Static|Private|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DialogueSpeakerInterface
// Size: 0x28 (Inherited: 0x28)
struct US_DialogueSpeakerInterface : UInterface {

	struct FS_DialogueVoiceValue GetDialogueSpeakerVoice(); // Function Scavenger.S_DialogueSpeakerInterface.GetDialogueSpeakerVoice // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DialogueSystem
// Size: 0x98 (Inherited: 0x28)
struct US_DialogueSystem : UObject {
	struct FSoftObjectPath DialogueDataTablePath; // 0x28(0x18)
	struct UDataTable* DialogueDataTable; // 0x40(0x08)
	char pad_48[0x50]; // 0x48(0x50)

	void LoadDialogueDataTable(); // Function Scavenger.S_DialogueSystem.LoadDialogueDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_DialogueSystem* GetDialogueSystem(struct UObject* WorldContext); // Function Scavenger.S_DialogueSystem.GetDialogueSystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString FindDialogueEventNameAndContext(struct FS_DialogueVoiceValue Voice, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context, struct FS_DialogueContext FoundContext); // Function Scavenger.S_DialogueSystem.FindDialogueEventNameAndContext // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString FindDialogueEventName(struct FS_DialogueVoiceValue Voice, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context); // Function Scavenger.S_DialogueSystem.FindDialogueEventName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UAkAudioEvent* FindDialogueEvent(struct FS_DialogueVoiceValue Voice, struct FS_DialogueEventValue Event, struct FS_DialogueContext Context); // Function Scavenger.S_DialogueSystem.FindDialogueEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddDialogueContextValue(struct FS_DialogueContext ContextRef, struct FS_DialogueContextValue Value); // Function Scavenger.S_DialogueSystem.AddDialogueContextValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddDialogueContext(struct FS_DialogueContext ContextRef, struct FS_DialogueContext ToAdd); // Function Scavenger.S_DialogueSystem.AddDialogueContext // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DrunkGapModel
// Size: 0x40 (Inherited: 0x28)
struct US_DrunkGapModel : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Scavenger.S_DynamicDamageVolume
// Size: 0x368 (Inherited: 0x288)
struct AS_DynamicDamageVolume : AActor {
	struct TMap<struct AActor*, struct FS_ComponentOverlapData> m_mapOfOverlappedActorsToComponentOverlapData; // 0x288(0x50)
	char pad_2D8[0x78]; // 0x2d8(0x78)
	bool UsesSweepTests; // 0x350(0x01)
	bool UsesRayCastTests; // 0x351(0x01)
	char pad_352[0x2]; // 0x352(0x02)
	int32_t RayCastAxisSubDivisions; // 0x354(0x04)
	bool PerformsInternalRayCasts; // 0x358(0x01)
	enum class ES_RayCast CastType; // 0x359(0x01)
	bool OnlyDamageActorsOnce; // 0x35a(0x01)
	bool EarlyOutOnFirstHit; // 0x35b(0x01)
	enum class ES_AttachmentParentType HitPointSocketParent; // 0x35c(0x04)
	struct FName HitPointSocket; // 0x360(0x08)

	void OnHit(struct UPrimitiveComponent* myComponent, struct AActor* theirActor, struct UPrimitiveComponent* theirComponent, struct FVector NormalImpulse, struct FHitResult HitResult); // Function Scavenger.S_DynamicDamageVolume.OnHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void OnEndOverlap(struct UPrimitiveComponent* myComponent, struct AActor* theirActor, struct UPrimitiveComponent* theirComponent, int32_t theirBodyIndex); // Function Scavenger.S_DynamicDamageVolume.OnEndOverlap // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnBeginOverlap(struct UPrimitiveComponent* myComponent, struct AActor* theirActor, struct UPrimitiveComponent* theirComponent, int32_t theirBodyIndex, bool isFromSweep, struct FHitResult HitResult); // Function Scavenger.S_DynamicDamageVolume.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DynamicSpawnerComponent
// Size: 0xc8 (Inherited: 0xb0)
struct US_DynamicSpawnerComponent : UActorComponent {
	bool bSpawnOnHit; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct FS_DynamicallySpawnedClass> AICharactersToSpawn; // 0xb8(0x10)

	void ServerDynamicallySpawnAIAtLocation(struct FVector Location); // Function Scavenger.S_DynamicSpawnerComponent.ServerDynamicallySpawnAIAtLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostAISpawned(struct AS_AICharacter* spawnedAICharacter); // Function Scavenger.S_DynamicSpawnerComponent.PostAISpawned // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0xffff8008e4a10000
	void OnOwnerActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function Scavenger.S_DynamicSpawnerComponent.OnOwnerActorHit // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0xffff8008e4a10000
	void DynamicallySpawnAI(); // Function Scavenger.S_DynamicSpawnerComponent.DynamicallySpawnAI // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_EncounterAutoPing
// Size: 0x298 (Inherited: 0x200)
struct US_EncounterAutoPing : US_AutoPingComponent {
	struct FMulticastInlineDelegate OnShowEncounterAutoPingsChanged; // 0x200(0x10)
	float EntranceDistance; // 0x210(0x04)
	float ExitDistancePercentage; // 0x214(0x04)
	float InnerVisibilityDistancePercentage; // 0x218(0x04)
	float EntranceRemovalPrecentage; // 0x21c(0x04)
	bool bUseSpherePosition; // 0x220(0x01)
	char pad_221[0x17]; // 0x221(0x17)
	struct TMap<struct AS_PlayerController*, bool> m_playersToIsEntrancesActive; // 0x238(0x50)
	char pad_288[0x10]; // 0x288(0x10)
};

// Class Scavenger.S_Engine
// Size: 0xe30 (Inherited: 0xe30)
struct US_Engine : UGameEngine {
};

// Class Scavenger.S_EnvQueryContextVolume
// Size: 0x28 (Inherited: 0x28)
struct US_EnvQueryContextVolume : UEnvQueryContext {
};

// Class Scavenger.S_EquipmentComponent
// Size: 0x238 (Inherited: 0xb0)
struct US_EquipmentComponent : UActorComponent {
	struct FMulticastInlineDelegate OnChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xe0(0x10)
	struct US_ItemData* InitialEquippedItemData[0x11]; // 0xf0(0x88)
	char pad_178[0x40]; // 0x178(0x40)
	struct TArray<struct FS_ItemState> m_items; // 0x1b8(0x10)
	char pad_1C8[0x10]; // 0x1c8(0x10)
	struct TArray<struct FS_ItemState> m_predictedItems; // 0x1d8(0x10)
	char pad_1E8[0x50]; // 0x1e8(0x50)

	void Reset(); // Function Scavenger.S_EquipmentComponent.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnControllerPawnPossessed(struct APawn* possessedPawn); // Function Scavenger.S_EquipmentComponent.OnControllerPawnPossessed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedItems(); // Function Scavenger.S_EquipmentComponent.NotifyReplicatedItems // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetItemStatValue(enum class ES_EquipmentSlot EquipmentSlot, enum class ES_ItemStatType itemStatType); // Function Scavenger.S_EquipmentComponent.GetItemStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_ItemState GetItemState(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_EquipmentComponent.GetItemState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_EquipmentComponent* GetEquipmentComponentOfActor(struct AActor* Actor); // Function Scavenger.S_EquipmentComponent.GetEquipmentComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ExperienceData
// Size: 0x110 (Inherited: 0x30)
struct US_ExperienceData : UDataAsset {
	struct FS_AITeamExperienceData AIExperience[0x8]; // 0x30(0xc0)
	float ExperienceOnRevive; // 0xf0(0x04)
	float ExperienceOnCraft[0x3]; // 0xf4(0x0c)
	float ExperienceOnHarvest[0x3]; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)

	float GetReviveExperience(); // Function Scavenger.S_ExperienceData.GetReviveExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetKillExperience(enum class ES_ScavAITeams TeamId, enum class ES_KillExperienceTier experienceTier, bool applyEliteMultiplier); // Function Scavenger.S_ExperienceData.GetKillExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetHarvestExperience(enum class ES_ExperienceTier HarvestExperienceTier); // Function Scavenger.S_ExperienceData.GetHarvestExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCraftExperience(enum class ES_ExperienceTier CraftExperienceTier); // Function Scavenger.S_ExperienceData.GetCraftExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HumanAnimInstance
// Size: 0x6d0 (Inherited: 0x510)
struct US_HumanAnimInstance : US_CharacterAnimInstance {
	float GunBlendSpeed; // 0x508(0x04)
	struct FTransform AppliedGunDelta; // 0x510(0x30)
	float TurnInitiateAngleThresholdDegrees; // 0x540(0x04)
	float AnimationAngleTurnDegrees; // 0x544(0x04)
	float ClampFeetFromActorAngleDegrees; // 0x548(0x04)
	float AnimationTurnRotationSpeedDegreesPerSecond; // 0x54c(0x04)
	struct FRotator ActorRotation; // 0x550(0x0c)
	struct FRotator TargetFeetDirection; // 0x55c(0x0c)
	struct FRotator CachedFeetDirection; // 0x568(0x0c)
	bool LowerBodyRotating; // 0x574(0x01)
	float AimYaw; // 0x578(0x04)
	float AimPitch; // 0x57c(0x04)
	float TimeToInactive; // 0x580(0x04)
	bool IsInactive; // 0x584(0x01)
	char pad_586[0x2]; // 0x586(0x02)
	float VehicleRelativePitch; // 0x588(0x04)
	float VehicleRelativeYaw; // 0x58c(0x04)
	float MinDistanceToCampfire; // 0x590(0x04)
	bool bIsFacingCampfire; // 0x594(0x01)
	bool IsPredictedDowned; // 0x595(0x01)
	enum class ES_StatChangeCauseType PredictedDamageCause; // 0x596(0x01)
	bool IsDowned; // 0x597(0x01)
	bool IsADSActive; // 0x598(0x01)
	enum class ES_WeaponClass CurrentWeaponClass; // 0x599(0x01)
	enum class ES_WeaponGripType WeaponLeftGripType; // 0x59a(0x01)
	enum class ES_WeaponGripType WeaponRightGripType; // 0x59b(0x01)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct AS_WeaponBase* CurrentWeapon; // 0x5a0(0x08)
	bool IsCurrentWeaponGrenade; // 0x5a8(0x01)
	bool LeftHandIKToMag; // 0x5a9(0x01)
	bool IsStowing; // 0x5aa(0x01)
	char pad_5AB[0x5]; // 0x5ab(0x05)
	struct FTransform LeftHandIKOffset; // 0x5b0(0x30)
	struct FRotator RightHandStartRotation; // 0x5e0(0x0c)
	struct FVector RightHandIKOffsetLocation; // 0x5ec(0x0c)
	float CharacterPlayrateMultiplier; // 0x5f8(0x04)
	bool Native_IsFiring; // 0x5fc(0x01)
	bool Native_IsWindingUp; // 0x5fd(0x01)
	char pad_5FE[0x2]; // 0x5fe(0x02)
	float Native_HipFireTime; // 0x600(0x04)
	bool Native_IsHeavyMelee; // 0x604(0x01)
	char pad_605[0x3]; // 0x605(0x03)
	struct US_WeaponSystem* Native_WeaponSystem; // 0x608(0x08)
	float Native_AlphaLowerBodySoftPings; // 0x610(0x04)
	float Native_AlphaHeadSoftPings; // 0x614(0x04)
	bool Native_ExcludeBowPistolFromSoftPings; // 0x618(0x01)
	char pad_619[0x3]; // 0x619(0x03)
	float Native_CharacterPlayrate300; // 0x61c(0x04)
	float Native_CharacterPlayrate200; // 0x620(0x04)
	float Native_CharacterPlayrate120; // 0x624(0x04)
	float Native_LHandPoseCurveValue; // 0x628(0x04)
	float Native_BoneHandLAlpha; // 0x62c(0x04)
	bool Native_IsEmotingOrIsHailing; // 0x630(0x01)
	bool Native_SkipRHandIK; // 0x631(0x01)
	bool Native_TurnOnLHandIK; // 0x632(0x01)
	char pad_633[0x1]; // 0x633(0x01)
	int32_t Native_ActiveChildIndexByWeaponGripType; // 0x634(0x04)
	bool Native_DisableCachedUpperGripCorrectiveAnim; // 0x638(0x01)
	bool Native_UseCachedUpperLHandPoseMag; // 0x639(0x01)
	bool Native_DefaultBlendPoseForAllExceptPistolBowRifle; // 0x63a(0x01)
	char pad_63B[0x1]; // 0x63b(0x01)
	float Native_OneMinusRootMotionWeight; // 0x63c(0x04)
	bool Native_ADSIsActiveOrIsFiring; // 0x640(0x01)
	char pad_641[0x3]; // 0x641(0x03)
	float Native_RightHandIKAlpha; // 0x644(0x04)
	float Native_IsNotDead; // 0x648(0x04)
	float Native_SpeedDivided160; // 0x64c(0x04)
	bool Native_IsSpeedGreaterThanZero; // 0x650(0x01)
	bool Native_IsSpeedLessThanEqualZero; // 0x651(0x01)
	bool Native_CanEnterJumpLandingToJumpStart; // 0x652(0x01)
	bool Native_CanEnterJumpLoopToJumpLanding; // 0x653(0x01)
	bool Native_CanEnterIsWalkingJumpMachine; // 0x654(0x01)
	bool Native_CanEnterLocoStateToJumpStart; // 0x655(0x01)
	bool Native_CanEnterCrouch; // 0x656(0x01)
	bool Native_CanEnterGroundedLocomotionToCrouchMovingForAI; // 0x657(0x01)
	bool Native_CanEnterStationaryToTurnRight; // 0x658(0x01)
	bool Native_CanEnterStationaryToTurnLeft; // 0x659(0x01)
	char pad_65A[0x76]; // 0x65a(0x76)

	void UpdateIsFacingCampfire(); // Function Scavenger.S_HumanAnimInstance.UpdateIsFacingCampfire // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterPlayrateMultiplier(float InCharacterPlayrateMultiplier); // Function Scavenger.S_HumanAnimInstance.SetCharacterPlayrateMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRollbackPredictedDowned(struct AController* PredictiveInstigator); // Function Scavenger.S_HumanAnimInstance.OnRollbackPredictedDowned // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnPredictivelyDowned(struct AController* PredictiveInstigator, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool Critical); // Function Scavenger.S_HumanAnimInstance.OnPredictivelyDowned // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnADSUpdated(bool IsADSOn); // Function Scavenger.S_HumanAnimInstance.OnADSUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetCharacterPlayrateMultiplier(); // Function Scavenger.S_HumanAnimInstance.GetCharacterPlayrateMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ExplorerAnimInstance
// Size: 0xa00 (Inherited: 0x6d0)
struct US_ExplorerAnimInstance : US_HumanAnimInstance {
	struct AS_PlayerCharacter* Native_ScavengerPlayerCharacterOwner; // 0x6c8(0x08)
	bool IsLeftFootForward; // 0x6d0(0x01)
	bool IsRightFootForward; // 0x6d1(0x01)
	int32_t MeleeComboKey; // 0x6d4(0x04)
	struct FVector LeftFootVectorLocation; // 0x6d8(0x0c)
	struct FVector RightFootVectorLocation; // 0x6e4(0x0c)
	float IKFootScale; // 0x6f0(0x04)
	float WeaponStockOffset; // 0x6f4(0x04)
	int32_t HeavyMeleeComboKey; // 0x6f8(0x04)
	float AnimStartFrame; // 0x6fc(0x04)
	bool ResetScatterBow; // 0x700(0x01)
	enum class ES_CharacterSize PlayerSize; // 0x701(0x01)
	bool HasBackpack; // 0x702(0x01)
	struct USkeletalMeshComponent* SK_Backpack; // 0x708(0x08)
	struct FName B_StowPrimary_N; // 0x710(0x08)
	struct FName B_StowSecondary_N; // 0x718(0x08)
	struct AS_WeaponBase* HiddenWeapon; // 0x720(0x08)
	bool CanEnterGroundedLocomotionToCrouchStandingForAI; // 0x728(0x01)
	bool CanEnterDodgeConduitToDodgeF1; // 0x729(0x01)
	bool Native_CanEnterDodgeConduitToDodgeF1; // 0x72a(0x01)
	int32_t DeathAnimationSelector; // 0x72c(0x04)
	float DeltaSpeed; // 0x730(0x04)
	float DeltaSpeed2; // 0x734(0x04)
	bool IsReloading; // 0x738(0x01)
	bool IsEmoting; // 0x739(0x01)
	bool IsHailing; // 0x73a(0x01)
	bool IsBulwark; // 0x73b(0x01)
	bool GripAdditiveOff; // 0x73c(0x01)
	bool GrenadeThrown; // 0x73d(0x01)
	bool InteractObject; // 0x73e(0x01)
	bool LHandIKOff; // 0x73f(0x01)
	bool InteractRevive; // 0x740(0x01)
	char pad_741[0x3]; // 0x741(0x03)
	float ProgressPercentage; // 0x744(0x04)
	int32_t InteractableEnum; // 0x748(0x04)
	bool IsUnarmed; // 0x74c(0x01)
	char pad_74D[0x3]; // 0x74d(0x03)
	int32_t HideCounter; // 0x750(0x04)
	bool GameStart; // 0x754(0x01)
	bool KeeperRHand; // 0x755(0x01)
	char pad_756[0x2]; // 0x756(0x02)
	float SnowTest; // 0x758(0x04)
	bool IsInfected; // 0x75c(0x01)
	char pad_75D[0x3]; // 0x75d(0x03)
	float FallingSpeedStored; // 0x760(0x04)
	bool DeathByProjectile; // 0x764(0x01)
	bool DeathByExplosion; // 0x765(0x01)
	bool DeathByBlunt; // 0x766(0x01)
	bool DeathByCold; // 0x767(0x01)
	bool DeathByRadiation; // 0x768(0x01)
	bool LockedInTrans; // 0x769(0x01)
	bool IsWarlord; // 0x76a(0x01)
	bool IkHandsDisabled; // 0x76b(0x01)
	enum class ES_StatChangeCauseType LastDamageCauseType; // 0x76c(0x01)
	bool DiedOnPlanet; // 0x76d(0x01)
	char pad_76E[0x2]; // 0x76e(0x02)
	int32_t DodgeDirectionIndex; // 0x770(0x04)
	int32_t DodgeCounter; // 0x774(0x04)
	bool IsHeadshot; // 0x778(0x01)
	bool IsHitLeft; // 0x779(0x01)
	bool IsHitRight; // 0x77a(0x01)
	bool IsHitFront; // 0x77b(0x01)
	bool IsHitBack; // 0x77c(0x01)
	bool IsExhausted; // 0x77d(0x01)
	bool IsDoingExhaustedDodge; // 0x77e(0x01)
	bool HasStaminaForAttack; // 0x77f(0x01)
	bool IsCommonBS; // 0x780(0x01)
	bool IsSwapping; // 0x781(0x01)
	bool ChainsawCounter; // 0x782(0x01)
	char pad_783[0x1]; // 0x783(0x01)
	float MinFallSpeedForLandingAnim; // 0x784(0x04)
	bool IsJaeTribal; // 0x788(0x01)
	char pad_789[0x3]; // 0x789(0x03)
	float IsJaeTribalAlpha; // 0x78c(0x04)
	bool IsAODisabled; // 0x790(0x01)
	bool IsIKRHandOff; // 0x791(0x01)
	char pad_792[0x2]; // 0x792(0x02)
	struct FVector WeaponClassPoleVectorValueArmR[0x12]; // 0x794(0xd8)
	float Native_DesiredHeading; // 0x86c(0x04)
	float Native_ForwardThrust; // 0x870(0x04)
	bool Native_ADSPressed; // 0x874(0x01)
	bool Native_ADSReleased; // 0x875(0x01)
	char pad_876[0x2]; // 0x876(0x02)
	struct FVector Native_PoleVectorValueArmR; // 0x878(0x0c)
	bool Native_IsSeated; // 0x884(0x01)
	char pad_885[0x3]; // 0x885(0x03)
	int32_t Native_SeatIndex; // 0x888(0x04)
	bool Native_IsDriver; // 0x88c(0x01)
	char pad_88D[0x3]; // 0x88d(0x03)
	float Native_TimeInAir; // 0x890(0x04)
	float Native_DodgeYawDir; // 0x894(0x04)
	bool Native_IsAccelerating; // 0x898(0x01)
	bool Native_IsInStorm; // 0x899(0x01)
	char pad_89A[0x2]; // 0x89a(0x02)
	float Native_TimeInStorm; // 0x89c(0x04)
	float Native_StormBlend; // 0x8a0(0x04)
	float Native_ColdBlend; // 0x8a4(0x04)
	bool Native_IsCold; // 0x8a8(0x01)
	bool Native_IsHeatingUp; // 0x8a9(0x01)
	bool Native_IsMantling; // 0x8aa(0x01)
	bool Native_ShotgunDrumMag; // 0x8ab(0x01)
	float Native_SnowDepthMod; // 0x8ac(0x04)
	bool Native_CanEnterExhaustedStateMachine; // 0x8b0(0x01)
	char pad_8B1[0x3]; // 0x8b1(0x03)
	float Native_ExhaustedBlend; // 0x8b4(0x04)
	bool Native_IsMenuCamera; // 0x8b8(0x01)
	char pad_8B9[0x3]; // 0x8b9(0x03)
	struct FVector Native_MenuCameraOffset; // 0x8bc(0x0c)
	bool Native_IsSliding; // 0x8c8(0x01)
	char pad_8C9[0x3]; // 0x8c9(0x03)
	float Native_TimeInDodge; // 0x8cc(0x04)
	float Native_TimeInSlide; // 0x8d0(0x04)
	float Native_TimeSinceSliding; // 0x8d4(0x04)
	bool Native_DeathByProjectile; // 0x8d8(0x01)
	bool Native_DeathByExplosion; // 0x8d9(0x01)
	bool Native_DeathByBlunt; // 0x8da(0x01)
	bool Native_DeathByCold; // 0x8db(0x01)
	bool Native_DeathByRadiation; // 0x8dc(0x01)
	char pad_8DD[0x3]; // 0x8dd(0x03)
	float Native_CharacterPlayrate180; // 0x8e0(0x04)
	float Native_CharacterPlayrateCold; // 0x8e4(0x04)
	float Native_BlendWeightOfHasBackpack; // 0x8e8(0x04)
	float Native_BlendWeightForHandCacheDuringColdStorm; // 0x8ec(0x04)
	float Native_BlendWeightForExhaustedMovement; // 0x8f0(0x04)
	float Native_BlendWeightForSnowDepthMovementAnimations; // 0x8f4(0x04)
	bool Native_IsAICharacterOrGameStart; // 0x8f8(0x01)
	bool Native_IsRifle; // 0x8f9(0x01)
	bool Native_AddStormAndColdUpperBodyBlendPose; // 0x8fa(0x01)
	bool Native_IsNotBulwarkAndIsNotCold; // 0x8fb(0x01)
	bool Native_DisableAOWhenDriverOrAODisable; // 0x8fc(0x01)
	bool Native_FullBodyAndUpperBodyBlendPose; // 0x8fd(0x01)
	char pad_8FE[0x2]; // 0x8fe(0x02)
	struct FRotator Native_DodgeYawDirPlus90Rotator; // 0x900(0x0c)
	struct FRotator Native_DodgeYawDirRotator; // 0x90c(0x0c)
	struct FRotator Native_DodgeYawDirMinus180Rotator; // 0x918(0x0c)
	struct FRotator Native_DodgeYawDirMinus90Rotator; // 0x924(0x0c)
	struct FRotator Native_CachedFeetDirectionCombineRotator; // 0x930(0x0c)
	float Native_SpeedClamped60; // 0x93c(0x04)
	float Native_SpeedDivided60Clamped; // 0x940(0x04)
	float Native_AimOffsetRifleADSFixSeatedBStateFinalYaw; // 0x944(0x04)
	float Native_AimOffsetRifleADSFixSeatedRStateFinalYaw; // 0x948(0x04)
	float Native_AimOffsetRifleADSFixSeatedLStateFinalYaw; // 0x94c(0x04)
	bool Native_JaeDodgeCounterBlendPose; // 0x950(0x01)
	bool Native_CanEnterLocoStateToWarming; // 0x951(0x01)
	bool Native_CanEnterLocoStateToInteract; // 0x952(0x01)
	bool Native_CanEnterInteractToCompleteState; // 0x953(0x01)
	bool Native_CanEnterInteractToLocoState; // 0x954(0x01)
	bool Native_CanEnterWarmingToLocoState; // 0x955(0x01)
	bool Native_CanEnterWarmingToLocoStateWithColdBlendCheck; // 0x956(0x01)
	bool Native_CanEnterGroundLocoToOutOfADS; // 0x957(0x01)
	bool Native_CanEnterGroundLocoToIntoADS; // 0x958(0x01)
	bool Native_CanEnterIntoADSToOutOfADS; // 0x959(0x01)
	bool Native_CanEnterToCold; // 0x95a(0x01)
	bool Native_CanEnterToExhausted; // 0x95b(0x01)
	bool Native_CanExitExhausted; // 0x95c(0x01)
	bool Native_CanEnterColdToDefaultState; // 0x95d(0x01)
	bool Native_CanEnterToExhaustedMovement; // 0x95e(0x01)
	bool Native_IsSpeedLessThanOne; // 0x95f(0x01)
	bool Native_CanEnterDefaultStateToStormMovement; // 0x960(0x01)
	bool Native_CanEnterIntroPose; // 0x961(0x01)
	bool Native_CanEnterIsInStorm; // 0x962(0x01)
	bool Native_CanEnterExitStorm; // 0x963(0x01)
	bool Native_CanEnterStormMovementToStormStationary; // 0x964(0x01)
	bool Native_CanEnterLocoToJumpSlidingStart; // 0x965(0x01)
	bool Native_CanEnterLocoStateToJumpLoop; // 0x966(0x01)
	bool Native_CanEnterDodgeLoopToJumpLoop; // 0x967(0x01)
	bool Native_CanEnterJumpLoopToLocoState; // 0x968(0x01)
	bool Native_CanEnterDodgeConduitToDodgeL; // 0x969(0x01)
	bool Native_CanEnterDodgeConduitToDodgeL1; // 0x96a(0x01)
	bool Native_CanEnterDodgeConduitToDodgeB; // 0x96b(0x01)
	bool Native_CanEnterDodgeConduitToDodgeB1; // 0x96c(0x01)
	bool Native_CanEnterDodgeConduitToDodgeR; // 0x96d(0x01)
	bool Native_CanEnterDodgeConduitToDodgeR1; // 0x96e(0x01)
	bool Native_CanEnterDodgeConduitToDodgeF; // 0x96f(0x01)
	bool Native_CanEnterDodgeToLoco; // 0x970(0x01)
	bool Native_CanEnterLocoStateToFlyLoop; // 0x971(0x01)
	char pad_972[0x2]; // 0x972(0x02)
	float Native_ExhaustedClamp06; // 0x974(0x04)
	float Native_ExhaustedClamp08; // 0x978(0x04)
	bool Native_CanEnterDodgeFToLocoState; // 0x97c(0x01)
	bool Native_CanEnterDodgeF1ToLocoState; // 0x97d(0x01)
	bool Native_CanEnterDodgeLToLocoState; // 0x97e(0x01)
	bool Native_CanEnterDodgeLToLocoState1; // 0x97f(0x01)
	bool Native_CanEnterDodgeBToLocoState; // 0x980(0x01)
	bool Native_CanEnterDodgeBToLocoState1; // 0x981(0x01)
	bool Native_CanEnterDodgeRToLocoState; // 0x982(0x01)
	bool Native_CanEnterDodgeRToLocoState1; // 0x983(0x01)
	bool Native_CanEnterGroundedLocomotionToSeatedDriver; // 0x984(0x01)
	bool Native_CanEnterCrouchStandingToGroundLocomotionForAI; // 0x985(0x01)
	bool Native_CanEnterGroundedLocomotionToSeatedF; // 0x986(0x01)
	bool Native_CanEnterGroundedLocomotionToCrouchMoving; // 0x987(0x01)
	bool Native_CanEnterUnCrouch; // 0x988(0x01)
	bool Native_CanEnterCrouchMovingToGroundLocomotionForAI; // 0x989(0x01)
	bool Native_CanEnterSeatedFLBToR; // 0x98a(0x01)
	bool Native_CanEnterSeatedLFRToB; // 0x98b(0x01)
	bool Native_CanEnterSeatedFRBToL; // 0x98c(0x01)
	bool Native_CanEnterSeatedLBRToF; // 0x98d(0x01)
	bool Native_CanEnterBreakOutToCrouchMoving; // 0x98e(0x01)
	bool Native_CanEnterSlideIntoToLocomotion; // 0x98f(0x01)
	bool Native_CanEnterBreakOutIntoMoving; // 0x990(0x01)
	bool Native_CanEnterBreakOutToStanding; // 0x991(0x01)
	bool IsBeingLaunched; // 0x992(0x01)
	char pad_993[0x1]; // 0x993(0x01)
	float FlyingSpeedThreshold; // 0x994(0x04)
	float SlopeAngle; // 0x998(0x04)
	bool CanEnterSlideFall; // 0x99c(0x01)
	char pad_99D[0x3]; // 0x99d(0x03)
	struct UAnimMontage* MaleRadiationTransitionMontage; // 0x9a0(0x08)
	struct UAnimMontage* FemaleRadiationTransitionMontage; // 0x9a8(0x08)
	struct UAnimMontage* HungerTransitionMontage; // 0x9b0(0x08)
	char pad_9B8[0x48]; // 0x9b8(0x48)
};

// Class Scavenger.S_FeatureFlagConfig
// Size: 0x48 (Inherited: 0x28)
struct US_FeatureFlagConfig : UObject {
	struct TArray<struct FS_FeatureFlagConfigEntry> DefaultValues; // 0x28(0x10)
	struct TArray<struct FS_FeatureFlagConfigEntry> Overrides; // 0x38(0x10)
};

// Class Scavenger.S_FeatureFlagManager
// Size: 0x120 (Inherited: 0x28)
struct US_FeatureFlagManager : UObject {
	struct US_FeatureFlagConfig* m_config; // 0x28(0x08)
	char pad_30[0xf0]; // 0x30(0xf0)

	void SetFlagOverride(struct FName Name, int32_t Value); // Function Scavenger.S_FeatureFlagManager.SetFlagOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFlagFromServer(struct FName Name, int32_t Value); // Function Scavenger.S_FeatureFlagManager.SetFlagFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsFeatureFlagSet(struct UGameInstance* GameInstance, struct FName FlagName); // Function Scavenger.S_FeatureFlagManager.IsFeatureFlagSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetFlag(struct FName Name, int32_t OutValue); // Function Scavenger.S_FeatureFlagManager.GetFlag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_FeatureFlagManager* GetFeatureFlagManagerFromGameInstance(struct UGameInstance* GameInstance); // Function Scavenger.S_FeatureFlagManager.GetFeatureFlagManagerFromGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void ClearFlagsFromServer(); // Function Scavenger.S_FeatureFlagManager.ClearFlagsFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearFlagOverride(struct FName Name); // Function Scavenger.S_FeatureFlagManager.ClearFlagOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FireBaseActor
// Size: 0x2d0 (Inherited: 0x2d0)
struct AS_FireBaseActor : AS_InteractableActor {
};

// Class Scavenger.S_FiringPointAreaVolume
// Size: 0x2d8 (Inherited: 0x2c0)
struct AS_FiringPointAreaVolume : AS_AreaVolumeBase {
	struct FName Tag; // 0x2c0(0x08)
	float Density; // 0x2c8(0x04)
	struct FName OriginalActorLabel; // 0x2cc(0x08)
	char pad_2D4[0x4]; // 0x2d4(0x04)
};

// Class Scavenger.S_FiringPointArea
// Size: 0x78 (Inherited: 0x28)
struct US_FiringPointArea : UObject {
	struct AS_FiringPointAreaVolume* m_firingPointAreaVolume; // 0x28(0x08)
	struct UPrimitiveComponent* m_primitiveComponent; // 0x30(0x08)
	struct TArray<struct FS_AIPoint> m_AIPoints; // 0x38(0x10)
	char pad_48[0x30]; // 0x48(0x30)
};

// Class Scavenger.S_FiringPointContainer
// Size: 0x68 (Inherited: 0x28)
struct US_FiringPointContainer : UObject {
	struct FBox m_bounds; // 0x28(0x1c)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct US_FiringPointArea*> m_assignedAreas; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Scavenger.S_FiringPointManagerComponent
// Size: 0xf8 (Inherited: 0xb0)
struct US_FiringPointManagerComponent : UActorComponent {
	struct TArray<struct US_FiringPointArea*> m_firingPointAreas; // 0xb0(0x10)
	struct TArray<struct US_FiringPointContainer*> m_areaContainers; // 0xc0(0x10)
	struct TArray<struct US_FiringPointContainer*> m_containerGraveYard; // 0xd0(0x10)
	char pad_E0[0x18]; // 0xe0(0x18)

	struct US_FiringPointManagerComponent* GetFiringPointManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_FiringPointManagerComponent.GetFiringPointManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FlashlightSpringArmComponent
// Size: 0x290 (Inherited: 0x290)
struct US_FlashlightSpringArmComponent : US_AsyncSpringArmComponent {
};

// Class Scavenger.S_FlinchSettings
// Size: 0xf8 (Inherited: 0x30)
struct US_FlinchSettings : UDataAsset {
	struct FS_FlinchInterpolator FlinchSettings; // 0x30(0xc8)
};

// Class Scavenger.S_FlyCameraPerformanceTestPawn
// Size: 0x378 (Inherited: 0x310)
struct AS_FlyCameraPerformanceTestPawn : ASpectatorPawn {
	struct UCameraComponent* CameraComponent; // 0x310(0x08)
	struct TArray<struct FVector2D> LookAtRotatorsInDegrees; // 0x318(0x10)
	struct FVector2D CornerStart; // 0x328(0x08)
	struct FVector2D CornerEnd; // 0x330(0x08)
	float StepDistance; // 0x338(0x04)
	float TimeBeforeTestStartSeconds; // 0x33c(0x04)
	float TimeAfterTeleportInSeconds; // 0x340(0x04)
	float TimeAfterRotationInSeconds; // 0x344(0x04)
	float TimeCapturingTelemetrySamplesSeconds; // 0x348(0x04)
	float CameraHeight; // 0x34c(0x04)
	float RaycastTopZ; // 0x350(0x04)
	float RaycastBottomZ; // 0x354(0x04)
	bool WaitForShaderCompilation; // 0x358(0x01)
	bool WaitForLevelLoaded; // 0x359(0x01)
	char pad_35A[0x2]; // 0x35a(0x02)
	float BadFrameScreenshotThresholdMs; // 0x35c(0x04)
	char pad_360[0x18]; // 0x360(0x18)

	void TriggerTestStart(); // Function Scavenger.S_FlyCameraPerformanceTestPawn.TriggerTestStart // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void TriggerNextTeleport(); // Function Scavenger.S_FlyCameraPerformanceTestPawn.TriggerNextTeleport // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void TriggerNextRotation(); // Function Scavenger.S_FlyCameraPerformanceTestPawn.TriggerNextRotation // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void StartTelemetrySampling(); // Function Scavenger.S_FlyCameraPerformanceTestPawn.StartTelemetrySampling // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void FinishTelemetrySampling(); // Function Scavenger.S_FlyCameraPerformanceTestPawn.FinishTelemetrySampling // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FlyCameraPSOWarmingPawn
// Size: 0xb0 (Inherited: 0x28)
struct US_FlyCameraPSOWarmingPawn : UObject {
	char pad_28[0x88]; // 0x28(0x88)
};

// Class Scavenger.S_FoleyComponent
// Size: 0xd8 (Inherited: 0xb0)
struct US_FoleyComponent : UActorComponent {
	char pad_B0[0x4]; // 0xb0(0x04)
	enum class ES_FoleyEvent PainFoleyType; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct FName PainCustomName; // 0xb8(0x08)
	struct TArray<struct FS_FoleyTaggedAudioEvent> FoleyEvents; // 0xc0(0x10)
	float MaxAudibleDistance; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void PostPainFoleyEvent(float HealthDamageAmount); // Function Scavenger.S_FoleyComponent.PostPainFoleyEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostFoleyEvent(struct UAkAudioEvent* FoleyEvent, bool IsVoice); // Function Scavenger.S_FoleyComponent.PostFoleyEvent // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	struct UAkAudioEvent* GetAudioEventForFoleyType(enum class ES_FoleyEvent FoleyType, struct FName CustomName); // Function Scavenger.S_FoleyComponent.GetAudioEventForFoleyType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FoliageISMComponent
// Size: 0x6d0 (Inherited: 0x6b0)
struct US_FoliageISMComponent : UFoliageInstancedStaticMeshComponent {
	float MaxHeightToGiveCover; // 0x6b0(0x04)
	float CollisionRadius; // 0x6b4(0x04)
	int32_t RequiredOverlapsForFullVisibility; // 0x6b8(0x04)
	float FullyOccludedVisibility; // 0x6bc(0x04)
	bool CreateAmbianceBed; // 0x6c0(0x01)
	char pad_6C1[0x3]; // 0x6c1(0x03)
	float AmbianceActivationRadius; // 0x6c4(0x04)
	struct US_AmbianceBedDataAsset* AmbianceBedAsset; // 0x6c8(0x08)
};

// Class Scavenger.S_FootstepComponent
// Size: 0x178 (Inherited: 0xb0)
struct US_FootstepComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TArray<struct FS_MaterialTaggedAudioEvent> FootstepEvents; // 0xb8(0x10)
	float DebounceTime; // 0xc8(0x04)
	float RaycastSize; // 0xcc(0x04)
	float MaxAudibleDistance; // 0xd0(0x04)
	char pad_D4[0x60]; // 0xd4(0x60)
	float OffscreenFootstepCrouchInterval; // 0x134(0x04)
	float OffscreenFootstepWalkInterval; // 0x138(0x04)
	float OffscreenFootstepRunInterval; // 0x13c(0x04)
	float OffscreenFootstepSprintInterval; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct UAkAudioEvent* BYTEEvent; // 0x148(0x08)
	float BYTEInterval; // 0x150(0x04)
	float BYTEIntervalMax; // 0x154(0x04)
	char pad_158[0x20]; // 0x158(0x20)

	void SetOffscreenFootstepType(enum class ES_FootstepWeight FootstepType); // Function Scavenger.S_FootstepComponent.SetOffscreenFootstepType // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void SetOffscreenFootstepEnabled(bool bEnabled); // Function Scavenger.S_FootstepComponent.SetOffscreenFootstepEnabled // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void PostFootstepEvent(struct UAkAudioEvent* FootstepEvent, enum class ES_FootstepWeight Weight, enum class EPhysicalSurface SurfaceType); // Function Scavenger.S_FootstepComponent.PostFootstepEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetWwiseSurfaceSwitchNameForSurfaceType(enum class EPhysicalSurface SurfaceType); // Function Scavenger.S_FootstepComponent.GetWwiseSurfaceSwitchNameForSurfaceType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetHitResultForFloor(struct FHitResult OutHitResult); // Function Scavenger.S_FootstepComponent.GetHitResultForFloor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UAkAudioEvent* GetAudioEventForSurfaceType(enum class EPhysicalSurface SurfaceType); // Function Scavenger.S_FootstepComponent.GetAudioEventForSurfaceType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UAkAudioEvent* GetAudioEventForHitResult(struct FHitResult HitResult, enum class EPhysicalSurface OutSurfaceType); // Function Scavenger.S_FootstepComponent.GetAudioEventForHitResult // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FriendsManager
// Size: 0x1c8 (Inherited: 0x28)
struct US_FriendsManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMulticastInlineDelegate OnRosterUpdated; // 0x38(0x10)
	struct FMulticastInlineDelegate OnListFriendsResultReceived; // 0x48(0x10)
	struct FMulticastInlineDelegate OnListOutgoingFriendRequestsResultReceived; // 0x58(0x10)
	struct FMulticastInlineDelegate OnIncomingFriendRequestReceived; // 0x68(0x10)
	struct FMulticastInlineDelegate OnOutgoingFriendRequestSent; // 0x78(0x10)
	struct FMulticastInlineDelegate OnFriendRequestAccepted; // 0x88(0x10)
	char pad_98[0x130]; // 0x98(0x130)

	void SendFriendRequest(struct FString PlayerId); // Function Scavenger.S_FriendsManager.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveFriend(struct FString PlayerId); // Function Scavenger.S_FriendsManager.RemoveFriend // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RejectIncomingFriendRequest(struct FString PlayerId); // Function Scavenger.S_FriendsManager.RejectIncomingFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnPlayerBlocked(struct FString PlayerId); // Function Scavenger.S_FriendsManager.OnPlayerBlocked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnGameSettingsChanged(struct FS_UserGameSettings OldSettings, struct FS_UserGameSettings NewSettings); // Function Scavenger.S_FriendsManager.OnGameSettingsChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnFriendPresenceUpdate(struct FS_PlayerPresenceStatus PresenceStatus); // Function Scavenger.S_FriendsManager.OnFriendPresenceUpdate // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnFriendDisconnected(struct FString PlayerId); // Function Scavenger.S_FriendsManager.OnFriendDisconnected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnDisplayNameCached(struct FString PlayerId, struct FString DisplayName); // Function Scavenger.S_FriendsManager.OnDisplayNameCached // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnConnected(); // Function Scavenger.S_FriendsManager.OnConnected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ListOutgoingFriendRequests(); // Function Scavenger.S_FriendsManager.ListOutgoingFriendRequests // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ListFriends(); // Function Scavenger.S_FriendsManager.ListFriends // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_FriendEntry> GetRosterInState(enum class ES_FriendState State); // Function Scavenger.S_FriendsManager.GetRosterInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetOnlineFriendsCount(); // Function Scavenger.S_FriendsManager.GetOnlineFriendsCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_FriendState GetFriendState(struct FString PlayerId); // Function Scavenger.S_FriendsManager.GetFriendState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_FriendEntry GetFriendEntry(struct FString PlayerId); // Function Scavenger.S_FriendsManager.GetFriendEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CancelOutgoingFriendRequest(struct FString PlayerId); // Function Scavenger.S_FriendsManager.CancelOutgoingFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcceptFriendRequest(struct FString PlayerId); // Function Scavenger.S_FriendsManager.AcceptFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FrontEndCameraManager
// Size: 0x128 (Inherited: 0xb0)
struct US_FrontEndCameraManager : UActorComponent {
	struct TMap<SoftClassProperty, struct FS_FrontEndCameraTarget> ScreenTargets; // 0xb0(0x50)
	struct FMulticastInlineDelegate OnViewTargetChanged; // 0x100(0x10)
	float DistanceThreshold; // 0x110(0x04)
	char pad_114[0xc]; // 0x114(0x0c)
	struct US_WidgetMinimal* m_addedWidget; // 0x120(0x08)

	void SkipToTarget(); // Function Scavenger.S_FrontEndCameraManager.SkipToTarget // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void OnBlendComplete(); // Function Scavenger.S_FrontEndCameraManager.OnBlendComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyBlendComplete(); // Function Scavenger.S_FrontEndCameraManager.NotifyBlendComplete // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnWidgetRemovedFromNavStack(struct US_WidgetMinimal* RemovedWidget, struct US_WidgetMinimal* NewTopWidget); // Function Scavenger.S_FrontEndCameraManager.HandleOnWidgetRemovedFromNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnWidgetAddedToNavStack(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_FrontEndCameraManager.HandleOnWidgetAddedToNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FrontEndCharacter
// Size: 0x27f0 (Inherited: 0x2650)
struct AS_FrontEndCharacter : AS_AICharacter {
	struct USceneComponent* KeeperAttachmentPoint; // 0x2650(0x08)
	struct AS_FrontEndKeeper* KeeperBlueprint; // 0x2658(0x08)
	struct AS_CosmeticBanner* CosmeticBannerClass; // 0x2660(0x08)
	struct FName CurrentClass; // 0x2668(0x08)
	struct US_PlayerClassData* ClassData; // 0x2670(0x08)
	struct UDataTable* ClassMetadataTable; // 0x2678(0x08)
	struct FS_LobbyPlayer m_currentLobbyPlayer; // 0x2680(0x108)
	char pad_2788[0x38]; // 0x2788(0x38)
	struct AS_FrontEndKeeper* m_keeper; // 0x27c0(0x08)
	char pad_27C8[0x18]; // 0x27c8(0x18)
	struct AS_CosmeticBanner* M_CosmeticBanner; // 0x27e0(0x08)
	struct USceneComponent* m_bannerAttachmentPoint; // 0x27e8(0x08)

	void VisualStateChanged_BP(); // Function Scavenger.S_FrontEndCharacter.VisualStateChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void UpdateWeaponFromCosmeticLoadout(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacter.UpdateWeaponFromCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateKeeperFromCosmeticLoadout(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacter.UpdateKeeperFromCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateCosmeticBannerFromCosmeticLoadout(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacter.UpdateCosmeticBannerFromCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetVisualStateForLocalPlayer(struct FName ClassId); // Function Scavenger.S_FrontEndCharacter.SetVisualStateForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetVisualStateForLobbyPlayer(struct FS_LobbyPlayer lobbyPlayer); // Function Scavenger.S_FrontEndCharacter.SetVisualStateForLobbyPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPreferredClassForLocalPlayer(struct FName ClassId); // Function Scavenger.S_FrontEndCharacter.SetPreferredClassForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFrontEndCharacterRotation(struct FRotator Rotation); // Function Scavenger.S_FrontEndCharacter.SetFrontEndCharacterRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFrontEndCharacterHiddenInGame(bool bIsHidden); // Function Scavenger.S_FrontEndCharacter.SetFrontEndCharacterHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFrontEndCharacterFocusLightsEnabled(bool bLightIsEnabled); // Function Scavenger.S_FrontEndCharacter.SetFrontEndCharacterFocusLightsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterCosmeticLoadoutForLocalPlayer(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacter.SetCharacterCosmeticLoadoutForLocalPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAccountCosmeticLoadoutForLocalPlayer(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacter.SetAccountCosmeticLoadoutForLocalPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetFrontEndCharacterRotation(); // Function Scavenger.S_FrontEndCharacter.ResetFrontEndCharacterRotation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetFrontEndCharacter(); // Function Scavenger.S_FrontEndCharacter.ResetFrontEndCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetCosmeticLoadoutForLocalPlayer(); // Function Scavenger.S_FrontEndCharacter.ResetCosmeticLoadoutForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyFocusLightsEnabled(); // Function Scavenger.S_FrontEndCharacter.NotifyFocusLightsEnabled // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyFocusLightsDisabled(); // Function Scavenger.S_FrontEndCharacter.NotifyFocusLightsDisabled // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDraftStarted(); // Function Scavenger.S_FrontEndCharacter.NotifyDraftStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyClassDataLoadingStarted(); // Function Scavenger.S_FrontEndCharacter.NotifyClassDataLoadingStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyClassDataLoadingCompleted(); // Function Scavenger.S_FrontEndCharacter.NotifyClassDataLoadingCompleted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InternalHandleCharacterMeshChanged(struct USkeletalMeshComponent* SkeletalMeshComponent, struct USkeletalMesh* OldSkeletalMesh, struct USkeletalMesh* NewSkeletalMesh); // Function Scavenger.S_FrontEndCharacter.InternalHandleCharacterMeshChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnClassWeaponLoaded(); // Function Scavenger.S_FrontEndCharacter.HandleOnClassWeaponLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct FS_LobbyPlayer GetLobbyPlayer(); // Function Scavenger.S_FrontEndCharacter.GetLobbyPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TSoftObjectPtr<struct USkeletalMesh> GetDefaultCharacterMeshOverride_BP(struct FName CharacterId); // Function Scavenger.S_FrontEndCharacter.GetDefaultCharacterMeshOverride_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FName GetCurrentClassOfFrontEndCharacter(); // Function Scavenger.S_FrontEndCharacter.GetCurrentClassOfFrontEndCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DraftHasStarted(); // Function Scavenger.S_FrontEndCharacter.DraftHasStarted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearVisualState(); // Function Scavenger.S_FrontEndCharacter.ClearVisualState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClassDataLoadingStarted(); // Function Scavenger.S_FrontEndCharacter.ClassDataLoadingStarted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClassDataLoadingCompleted(); // Function Scavenger.S_FrontEndCharacter.ClassDataLoadingCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FrontEndCharacterManager
// Size: 0x170 (Inherited: 0xb0)
struct US_FrontEndCharacterManager : UActorComponent {
	struct TArray<struct AS_FrontEndCharacter*> FrontEndCharacters; // 0xb0(0x10)
	struct AActor* DefaultCameraActor; // 0xc0(0x08)
	float DraftCameraBlendTime; // 0xc8(0x04)
	char pad_CC[0xa4]; // 0xcc(0xa4)

	void SetVisualStateForLocalPlayer(struct FName ClassId); // Function Scavenger.S_FrontEndCharacterManager.SetVisualStateForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetVisualStateForLobbyPlayer(struct FS_LobbyPlayer lobbyPlayer); // Function Scavenger.S_FrontEndCharacterManager.SetVisualStateForLobbyPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPreferredClassForLocalPlayer(struct FName ClassId); // Function Scavenger.S_FrontEndCharacterManager.SetPreferredClassForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLocalPlayerFrontEndCharacterHiddenInGame(bool bIsHidden); // Function Scavenger.S_FrontEndCharacterManager.SetLocalPlayerFrontEndCharacterHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsTravellingToDraft(); // Function Scavenger.S_FrontEndCharacterManager.SetIsTravellingToDraft // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFrontEndCharactersHiddenInGame(bool IsHidden, bool ignoreLocalPlayerCharacter); // Function Scavenger.S_FrontEndCharacterManager.SetFrontEndCharactersHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFrontEndCharacterLightsEnabled(bool bLightIsEnabled, bool ignoreLocalPlayerCharacter); // Function Scavenger.S_FrontEndCharacterManager.SetFrontEndCharacterLightsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDraftHasStarted(); // Function Scavenger.S_FrontEndCharacterManager.SetDraftHasStarted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentlyDraftingPlayerId(struct FString PlayerId); // Function Scavenger.S_FrontEndCharacterManager.SetCurrentlyDraftingPlayerId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterCosmeticLoadoutForLocalPlayer(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacterManager.SetCharacterCosmeticLoadoutForLocalPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAccountCosmeticLoadoutForLocalPlayer(struct FS_CosmeticLoadout CosmeticLoadout); // Function Scavenger.S_FrontEndCharacterManager.SetAccountCosmeticLoadoutForLocalPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetCosmeticLoadoutForLocalPlayer(); // Function Scavenger.S_FrontEndCharacterManager.ResetCosmeticLoadoutForLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PreviewClassId(struct FName ClassId); // Function Scavenger.S_FrontEndCharacterManager.PreviewClassId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PrepFrontEndCharactersForDraft(struct TArray<struct FString> teamTurnOrder); // Function Scavenger.S_FrontEndCharacterManager.PrepFrontEndCharactersForDraft // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyMoveDraftingCameraToFrontEndCharacter(struct AS_FrontEndCharacter* frontEndCharacter); // Function Scavenger.S_FrontEndCharacterManager.NotifyMoveDraftingCameraToFrontEndCharacter // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyMoveDraftingCameraToDefaultCamera(); // Function Scavenger.S_FrontEndCharacterManager.NotifyMoveDraftingCameraToDefaultCamera // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDraftStarted(); // Function Scavenger.S_FrontEndCharacterManager.NotifyDraftStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCurrentlyDraftingPlayerChanged(struct FString PlayerId); // Function Scavenger.S_FrontEndCharacterManager.NotifyCurrentlyDraftingPlayerChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void LoadAndSetPlayerClassFromClassIdWithPostLoad_BP(struct FName ClassId, struct FDelegate PostLoadDelegate); // Function Scavenger.S_FrontEndCharacterManager.LoadAndSetPlayerClassFromClassIdWithPostLoad_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LoadAndSetPlayerClassFromClassId_BP(struct FName ClassId); // Function Scavenger.S_FrontEndCharacterManager.LoadAndSetPlayerClassFromClassId_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPartyPlayerStateChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_FrontEndCharacterManager.HandleOnPartyPlayerStateChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerLeftMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_FrontEndCharacterManager.HandleOnOtherPlayerLeftMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerJoinedMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_FrontEndCharacterManager.HandleOnOtherPlayerJoinedMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnLoginSucceed(); // Function Scavenger.S_FrontEndCharacterManager.HandleOnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnDraftingTeamStateUpdated(struct FS_LobbyTeamState TeamState); // Function Scavenger.S_FrontEndCharacterManager.HandleOnDraftingTeamStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnDraftingPeriodStarted(struct FS_LobbyStartDraft startDraftMessage); // Function Scavenger.S_FrontEndCharacterManager.HandleOnDraftingPeriodStarted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnConnectionStateChanged(); // Function Scavenger.S_FrontEndCharacterManager.HandleOnConnectionStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GetIsTravellingToDraft(); // Function Scavenger.S_FrontEndCharacterManager.GetIsTravellingToDraft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_FrontEndCharacter*> GetFrontEndCharacters(); // Function Scavenger.S_FrontEndCharacterManager.GetFrontEndCharacters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_FrontEndCharacter* GetFrontEndCharacterFromPlayerId(struct FString PlayerId); // Function Scavenger.S_FrontEndCharacterManager.GetFrontEndCharacterFromPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_FrontEndCharacter* GetFrontEndCharacterForLocalPlayer(); // Function Scavenger.S_FrontEndCharacterManager.GetFrontEndCharacterForLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_FrontEndCharacter* GetFrontEndCharacterAtIndex(int32_t Index); // Function Scavenger.S_FrontEndCharacterManager.GetFrontEndCharacterAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetDraftHasStarted(); // Function Scavenger.S_FrontEndCharacterManager.GetDraftHasStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SalvageReceiver
// Size: 0x2b0 (Inherited: 0x290)
struct AS_SalvageReceiver : AS_FrontEndItemReceiver {
	struct FMulticastInlineDelegate OnSalvageStateChanged; // 0x290(0x10)
	char pad_2A0[0x10]; // 0x2a0(0x10)

	void RequestSkipToSalvageState(enum class ES_SalvageState salvageState); // Function Scavenger.S_SalvageReceiver.RequestSkipToSalvageState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestAdvanceToNextSalvageState(); // Function Scavenger.S_SalvageReceiver.RequestAdvanceToNextSalvageState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySalvageStateChanged(enum class ES_SalvageState newSalvageState); // Function Scavenger.S_SalvageReceiver.NotifySalvageStateChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySalvageItemChanged(struct FS_SalvageItemMetadata salvageMetadata, struct UStaticMesh* salvageMesh); // Function Scavenger.S_SalvageReceiver.NotifySalvageItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleSalvageItemMeshLoaded(); // Function Scavenger.S_SalvageReceiver.HandleSalvageItemMeshLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineItemReceiver
// Size: 0x2a8 (Inherited: 0x290)
struct AS_OnlineItemReceiver : AS_FrontEndItemReceiver {
	bool bAllowItemViewerInput; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct US_ItemViewerInputComponent* ItemViewerInputComponent; // 0x298(0x08)
	struct AS_ItemPickup* m_currentPickup; // 0x2a0(0x08)
};

// Class Scavenger.S_ResearchReceiver
// Size: 0x2f8 (Inherited: 0x2a8)
struct AS_ResearchReceiver : AS_OnlineItemReceiver {
	struct TMap<struct FName, struct FS_ItemViewerObject> m_outputIdToObject; // 0x2a8(0x50)
};

// Class Scavenger.S_LoadoutReceiver
// Size: 0x2a8 (Inherited: 0x2a8)
struct AS_LoadoutReceiver : AS_OnlineItemReceiver {
};

// Class Scavenger.S_FrontEndKeeper
// Size: 0x2e8 (Inherited: 0x288)
struct AS_FrontEndKeeper : AActor {
	struct USkeletalMeshComponent* KeeperFrame; // 0x288(0x08)
	struct USkeletalMeshComponent* KeeperCore; // 0x290(0x08)
	struct US_CosmeticSkinningComponent* m_cosmeticSkinningComponent; // 0x298(0x08)
	struct FS_CosmeticLoadoutSlot m_cosmeticLoadoutSlot; // 0x2a0(0x28)
	char pad_2C8[0x20]; // 0x2c8(0x20)

	void SetCosmeticLoadout(struct FS_CosmeticLoadoutSlot cosmeticLoadoutSlot); // Function Scavenger.S_FrontEndKeeper.SetCosmeticLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FTUEEvent
// Size: 0x140 (Inherited: 0x28)
struct US_FTUEEvent : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct FName EventId; // 0x48(0x08)
	bool bEnableFTUEOverlay; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FText FTUEObjectiveText; // 0x58(0x18)
	struct TSet<enum class ES_GameInputActionType> BlacklistedInputActions; // 0x70(0x50)
	bool ShouldBlockFocusNavigation; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct TArray<struct UWidget*> m_activeScavengerButtons; // 0xc8(0x10)
	struct TMap<struct US_WidgetCommonScavengerButton*, enum class ES_ButtonInteractionState> m_cachedButtonStates; // 0xd8(0x50)
	char pad_128[0x8]; // 0x128(0x08)
	struct US_WidgetMinimal* m_topOfStack; // 0x130(0x08)
	char pad_138[0x8]; // 0x138(0x08)

	void OnTargetButtonSelected(bool bIsSelected, struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_FTUEEvent.OnTargetButtonSelected // (Native|Protected) // @ game+0xffff8008e4a10000
	void OnTargetButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_FTUEEvent.OnTargetButtonClicked // (Native|Protected) // @ game+0xffff8008e4a10000
	void CompleteEventInternal(); // Function Scavenger.S_FTUEEvent.CompleteEventInternal // (Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FTUEEventGuidedInteract
// Size: 0x1c8 (Inherited: 0x140)
struct US_FTUEEventGuidedInteract : US_FTUEEvent {
	SoftClassProperty TargetScreenClass; // 0x140(0x28)
	struct FName EventCompletionButtonName; // 0x168(0x08)
	struct TSet<struct FName> ButtonBlockingWhiteList; // 0x170(0x50)
	bool CompleteWhenTargetScreenIsAddedToNavStack; // 0x1c0(0x01)
	char pad_1C1[0x7]; // 0x1c1(0x07)

	void OnWidgetRemovedFromNavStack(struct US_WidgetMinimal* RemovedWidget, struct US_WidgetMinimal* NewTopWidget); // Function Scavenger.S_FTUEEventGuidedInteract.OnWidgetRemovedFromNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnWidgetAddedToNavStack(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_FTUEEventGuidedInteract.OnWidgetAddedToNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FTUEEventGuidedResearch
// Size: 0x1c8 (Inherited: 0x1c8)
struct US_FTUEEventGuidedResearch : US_FTUEEventGuidedInteract {
};

// Class Scavenger.S_FTUEEventPlayAudio
// Size: 0x158 (Inherited: 0x140)
struct US_FTUEEventPlayAudio : US_FTUEEvent {
	struct UAkAudioEvent* AudioEvent; // 0x140(0x08)
	bool ShouldCompleteEventAtAudioClipStart; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float PreClipDelay; // 0x14c(0x04)
	float PostClipDelay; // 0x150(0x04)
	bool ShouldBlockUI; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
};

// Class Scavenger.S_FTUEEventSalvage
// Size: 0x1c8 (Inherited: 0x1c8)
struct US_FTUEEventSalvage : US_FTUEEventGuidedInteract {
};

// Class Scavenger.S_FTUEEventShowPopup
// Size: 0x150 (Inherited: 0x140)
struct US_FTUEEventShowPopup : US_FTUEEvent {
	struct US_WidgetMessagePrompt* FTUEEventPromptClass; // 0x140(0x08)
	struct FName PromptDataTableName; // 0x148(0x08)
};

// Class Scavenger.S_FTUEManager
// Size: 0xb0 (Inherited: 0x28)
struct US_FTUEManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct UDataTable* FTUEStageDataTableAsset; // 0x38(0x08)
	SoftClassProperty FTUEOverlayClass; // 0x40(0x28)
	struct TArray<struct US_FTUEStage*> m_instantiatedFTUEStages; // 0x68(0x10)
	struct US_FTUEStage* m_activeFTUEStage; // 0x78(0x08)
	struct US_FTUEOverlay* m_FTUEOverlay; // 0x80(0x08)
	struct UWorld* m_world; // 0x88(0x08)
	char pad_90[0x20]; // 0x90(0x20)

	void OnFTUEStageError(struct FName StageID, int32_t EventIndex); // Function Scavenger.S_FTUEManager.OnFTUEStageError // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnFTUEStageCompleteFlagSet(enum class ES_OnlineResult requestResult); // Function Scavenger.S_FTUEManager.OnFTUEStageCompleteFlagSet // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnFTUEStageComplete(struct FName StageID, bool ShouldAttemptToStartNextStage); // Function Scavenger.S_FTUEManager.OnFTUEStageComplete // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void InstantiateFTUEStages(); // Function Scavenger.S_FTUEManager.InstantiateFTUEStages // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FTUEOverlay
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_FTUEOverlay : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct UImage* ScreenOverlay; // 0x4c8(0x08)
	struct US_WidgetCommonScavengerButton* OverlayProxyButton; // 0x4d0(0x08)
	struct FDataTableRowHandle TextFormating; // 0x4d8(0x10)
	struct US_RichTextBlock* ObjectiveTextField; // 0x4e8(0x08)
	char pad_4F0[0x8]; // 0x4f0(0x08)

	void UpdateOverlayMask(struct FS_FTUEOverlayData overlayMaskData); // Function Scavenger.S_FTUEOverlay.UpdateOverlayMask // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnScreenOverlayClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_FTUEOverlay.OnScreenOverlayClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_FTUEPrerequisite
// Size: 0x30 (Inherited: 0x28)
struct US_FTUEPrerequisite : UObject {
	struct FName PrerequisiteID; // 0x28(0x08)
};

// Class Scavenger.S_FTUEPrerequisiteChallenge
// Size: 0x40 (Inherited: 0x30)
struct US_FTUEPrerequisiteChallenge : US_FTUEPrerequisite {
	struct FName ChallengeDefinitionId; // 0x30(0x08)
	enum class ES_ChallengePrerequisiteComparison ExpectedChallengeStatus; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_FTUEPrerequisiteCurrency
// Size: 0x38 (Inherited: 0x30)
struct US_FTUEPrerequisiteCurrency : US_FTUEPrerequisite {
	int32_t NanitesRequired; // 0x30(0x04)
	int32_t HardCurrencyRequired; // 0x34(0x04)
};

// Class Scavenger.S_FTUEPrerequisiteFeatureFlag
// Size: 0x38 (Inherited: 0x30)
struct US_FTUEPrerequisiteFeatureFlag : US_FTUEPrerequisite {
	struct FName FeatureFlagRequired; // 0x30(0x08)
};

// Class Scavenger.S_FTUEPrerequisiteFTUEStage
// Size: 0x40 (Inherited: 0x30)
struct US_FTUEPrerequisiteFTUEStage : US_FTUEPrerequisite {
	struct FName RequiredFTUEStageID; // 0x30(0x08)
	enum class ES_FTUEStageCompletionState RequiredCompletionState; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Scavenger.S_FTUEPrerequisiteProfileLevel
// Size: 0x38 (Inherited: 0x30)
struct US_FTUEPrerequisiteProfileLevel : US_FTUEPrerequisite {
	int32_t TargetProfileLevel; // 0x30(0x04)
	bool ShouldExactlyMatchTarget; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class Scavenger.S_FTUEPrerequisiteResearch
// Size: 0x30 (Inherited: 0x30)
struct US_FTUEPrerequisiteResearch : US_FTUEPrerequisite {
};

// Class Scavenger.S_FTUEPrerequisiteResearchItem
// Size: 0x38 (Inherited: 0x30)
struct US_FTUEPrerequisiteResearchItem : US_FTUEPrerequisite {
	struct FName ResearchProjectId; // 0x30(0x08)
};

// Class Scavenger.S_FTUEPrerequisiteSalvage
// Size: 0x30 (Inherited: 0x30)
struct US_FTUEPrerequisiteSalvage : US_FTUEPrerequisite {
};

// Class Scavenger.S_FTUEStage
// Size: 0x80 (Inherited: 0x28)
struct US_FTUEStage : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct FName StageID; // 0x48(0x08)
	struct TArray<struct US_FTUEPrerequisite*> Prerequisites; // 0x50(0x10)
	struct TArray<struct US_FTUEEvent*> Events; // 0x60(0x10)
	bool ShouldTriggerNextStageOnComplete; // 0x70(0x01)
	char pad_71[0xf]; // 0x71(0x0f)

	void OnFTUEOverlayProxyButtonClicked(); // Function Scavenger.S_FTUEStage.OnFTUEOverlayProxyButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnEventError(); // Function Scavenger.S_FTUEStage.OnEventError // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnEventComplete(); // Function Scavenger.S_FTUEStage.OnEventComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameInputStaticData
// Size: 0x210 (Inherited: 0x30)
struct US_GameInputStaticData : UDataAsset {
	struct UDataTable* GameInputTable; // 0x30(0x08)
	struct TMap<struct FName, struct FS_ResponseCurveInfo> ResponseCurves; // 0x38(0x50)
	struct TMap<struct FName, struct US_GamepadLayout*> GamepadLayouts; // 0x88(0x50)
	struct US_GamepadLayout* BaseGamepadLayout; // 0xd8(0x08)
	struct US_GamepadLayout* InGameMenuGamepadLayout; // 0xe0(0x08)
	struct US_GamepadLayout* MainMenuGamepadLayout; // 0xe8(0x08)
	struct US_GamepadLayout* DebugOnlyGamepadLayout; // 0xf0(0x08)
	struct US_GamepadLayout* SpectatorGamepadLayout; // 0xf8(0x08)
	struct US_GamepadLayout* ResearchGamepadLayout; // 0x100(0x08)
	struct US_GamepadLayout* LoadoutGamepadLayout; // 0x108(0x08)
	struct US_GamepadLayout* SeasonsGamepadLayout; // 0x110(0x08)
	struct FS_JoystickProcessingParams DefaultMovementStickProcessing; // 0x118(0x58)
	struct FS_JoystickProcessingParams DefaultAimStickProcessing; // 0x170(0x58)
	struct FS_TurnAccelerationParams DefaultTurnAccelerationParams; // 0x1c8(0x18)
	float MouseSensitivityMin; // 0x1e0(0x04)
	float MouseSensitivityMax; // 0x1e4(0x04)
	struct TArray<float> GamepadSensitivitySettings; // 0x1e8(0x10)
	float MinAimPitchScale; // 0x1f8(0x04)
	float MaxAimPitchScale; // 0x1fc(0x04)
	float MinAimYawScale; // 0x200(0x04)
	float MaxAimYawScale; // 0x204(0x04)
	float ButtonHoldTime; // 0x208(0x04)
	float ButtonDoublePressWindow; // 0x20c(0x04)

	float GetSizeForDeadzone(enum class ES_DeadzoneSize deadzoneSize); // Function Scavenger.S_GameInputStaticData.GetSizeForDeadzone // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct UCurveFloat* GetResponseCurveForName(struct FName layoutName); // Function Scavenger.S_GameInputStaticData.GetResponseCurveForName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_GamepadLayout* GetGamepadLayoutForName(struct FName layoutName); // Function Scavenger.S_GameInputStaticData.GetGamepadLayoutForName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayInEditorPlayerSetup
// Size: 0x40 (Inherited: 0x30)
struct US_PlayInEditorPlayerSetup : UDataAsset {
	struct TArray<struct FS_PlayerInstanceState> Players; // 0x30(0x10)
};

// Class Scavenger.S_SoftPingSetups
// Size: 0xd0 (Inherited: 0x30)
struct US_SoftPingSetups : UDataAsset {
	struct TMap<struct TSoftObjectPtr<struct USkeleton>, struct FS_SoftPingSkeletonSetup> Setups; // 0x30(0x50)
	struct TMap<SoftClassProperty, struct FS_SoftPingSkeletonSetup> CharacterSetupOverride; // 0x80(0x50)
};

// Class Scavenger.S_GameTips
// Size: 0x40 (Inherited: 0x30)
struct US_GameTips : UDataAsset {
	struct TArray<struct FText> TipList; // 0x30(0x10)
};

// Class Scavenger.S_GameInstance
// Size: 0x62b0 (Inherited: 0x298)
struct US_GameInstance : USpatialGameInstance {
	char pad_298[0x2c]; // 0x298(0x2c)
	float SpawnDelay; // 0x2c4(0x04)
	float SpawnDelayTutorial; // 0x2c8(0x04)
	char pad_2CC[0x14]; // 0x2cc(0x14)
	struct US_VoiceChatManager* VoiceChatManager; // 0x2e0(0x08)
	struct US_SocialManager* SocialManager; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct UPackage* m_clientPreloadedMapPackage; // 0x300(0x08)
	struct UWorld* m_clientPreloadedMapWorld; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)
	struct UDataTable* DropShipSpawnLocations; // 0x318(0x08)
	struct UDataTable* TeamStartLocations; // 0x320(0x08)
	int32_t StartLocationExtras; // 0x328(0x04)
	char pad_32C[0x1c]; // 0x32c(0x1c)
	struct FMulticastInlineDelegate OnPlayerCharacterChanged; // 0x348(0x10)
	struct FMulticastInlineDelegate OnPlayerTeamChanged; // 0x358(0x10)
	struct FMulticastInlineDelegate OnPlayersChanged; // 0x368(0x10)
	struct FMulticastInlineDelegate OnTravelFailureEvent; // 0x378(0x10)
	char pad_388[0x10]; // 0x388(0x10)
	struct FMulticastInlineDelegate OnNetworkFailureEvent; // 0x398(0x10)
	char pad_3A8[0x10]; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnPreLoginDataRetrieved; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnPlayerNameChanged; // 0x3c8(0x10)
	struct TArray<struct AS_PlayerCharacter*> AllScavPlayerCharacters; // 0x3d8(0x10)
	struct TArray<struct AS_GrenadeProjectile*> GrenadesInPlay; // 0x3e8(0x10)
	struct TArray<struct FS_StreamingLevelDebugInfo> StreamingDebugInfo; // 0x3f8(0x10)
	struct TSoftObjectPtr<struct US_PlayInEditorPlayerSetup> PlayInEditorPlayerSetup; // 0x408(0x28)
	struct FMulticastInlineDelegate OnUserGameSettingsChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnUserAudioSettingsChanged; // 0x440(0x10)
	struct FMulticastInlineDelegate OnUserAccessibilitySettingsChanged; // 0x450(0x10)
	struct FMulticastInlineDelegate OnUserInputSettingsChanged; // 0x460(0x10)
	struct US_GameInputStaticData* GameInputStaticData; // 0x470(0x08)
	bool bDevModeUI; // 0x478(0x01)
	char pad_479[0x7]; // 0x479(0x07)
	struct FMulticastInlineDelegate OnDevModeUIChanged; // 0x480(0x10)
	bool bPresentationModeUI; // 0x490(0x01)
	char pad_491[0x7]; // 0x491(0x07)
	struct US_ScoringData* ScoringData; // 0x498(0x08)
	struct FMulticastInlineDelegate OnCosmeticSelectionHistoryChanged; // 0x4a0(0x10)
	float AIMaxStepHeight; // 0x4b0(0x04)
	float AIMaxSlopeAngle; // 0x4b4(0x04)
	struct FS_WeaponGlobals WeaponGlobals; // 0x4b8(0xa8)
	struct FS_ArmorGlobals ArmorGlobals; // 0x560(0x10)
	float NonWindowsBaseFOVMultiplier; // 0x570(0x04)
	float NonWindowsBaseFOVArmLenghtMultiplier; // 0x574(0x04)
	struct UMaterialInterface* StormShellMaterialInstance; // 0x578(0x08)
	struct UMaterialParameterCollection* StormShellMPC; // 0x580(0x08)
	struct UMaterialParameterCollection* PostProcessMPC; // 0x588(0x08)
	struct US_AlphaPostProcessComponent* CurrentAlphaPostProcess; // 0x590(0x08)
	int32_t DefaultAlphaScreenPercentage; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct US_CameraManagerComponent* CameraManager; // 0x5a0(0x08)
	struct TMap<enum class ES_DetectionReason, struct US_DetectionTypeConfig*> MapDetectionConfig; // 0x5a8(0x50)
	struct UAkAudioEvent* DisableAIVoiceEvent; // 0x5f8(0x08)
	struct UAkAudioEvent* EnableAIVoiceEvent; // 0x600(0x08)
	struct UAkAudioEvent* DisableMusicEvent; // 0x608(0x08)
	struct UAkAudioEvent* EnableMusicEvent; // 0x610(0x08)
	struct UAkAudioEvent* DisableAmbianceEvent; // 0x618(0x08)
	struct UAkAudioEvent* EnableAmbianceEvent; // 0x620(0x08)
	struct UAkAudioEvent* DisableSFXEvent; // 0x628(0x08)
	struct UAkAudioEvent* EnableSFXEvent; // 0x630(0x08)
	struct UAkAudioEvent* DisableDialogueEvent; // 0x638(0x08)
	struct UAkAudioEvent* EnableDialogueEvent; // 0x640(0x08)
	struct UAkAuxBus* NoCoverAuxBus; // 0x648(0x08)
	struct UAkAuxBus* CraterCoverAuxBus; // 0x650(0x08)
	struct UAkAuxBus* PartialCoverAuxBus; // 0x658(0x08)
	struct UAkAuxBus* FullCoverAuxBus; // 0x660(0x08)
	struct FMulticastInlineDelegate OnLoginSucceed; // 0x668(0x10)
	struct FMulticastInlineDelegate OnLoginFailed; // 0x678(0x10)
	struct FMulticastInlineDelegate OnLoginFailedAccountBanned; // 0x688(0x10)
	struct FMulticastInlineDelegate OnXsollaLoginFailure; // 0x698(0x10)
	struct FMulticastInlineDelegate OnCurrentQueueChanged; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnPersistentInputTypeChanged; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnPersistentPlayerControllerChanged; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnActiveInputDeviceChanged; // 0x6d8(0x10)
	struct US_WidgetMessagePrompt* ControllerDisconnectMessagePrompt; // 0x6e8(0x08)
	int32_t NumberOfPlayersToStart; // 0x6f0(0x04)
	int32_t MaximumNumberOfPlayers; // 0x6f4(0x04)
	float StartDelayOnceMinimumNumberOfPlayersJoined; // 0x6f8(0x04)
	char pad_6FC[0x4]; // 0x6fc(0x04)
	struct FString GameMapName; // 0x700(0x10)
	struct FString TutorialMapName; // 0x710(0x10)
	struct FString MenuMapName; // 0x720(0x10)
	struct FString TrinityMapName; // 0x730(0x10)
	float MinimumSocialHubLoadingScreenTime; // 0x740(0x04)
	char pad_744[0x4]; // 0x744(0x04)
	SoftClassProperty GuidedMatchGameMode; // 0x748(0x28)
	struct FString GameSnapshotName; // 0x770(0x10)
	struct UDataTable* GameplayEffectMetadataTable; // 0x780(0x08)
	struct UDataTable* interfaceColorTable; // 0x788(0x08)
	struct UDataTable* ItemMetadataTable; // 0x790(0x08)
	struct UDataTable* DefaultLoadoutsTable; // 0x798(0x08)
	struct UDataTable* LevelDataTable; // 0x7a0(0x08)
	struct UDataTable* LocalizedTextTable; // 0x7a8(0x08)
	struct UDataTable* LocalizedItemNameTable; // 0x7b0(0x08)
	struct UDataTable* LocalizedItemDescriptionTable; // 0x7b8(0x08)
	struct UDataTable* RecipeMetadataTable; // 0x7c0(0x08)
	struct UDataTable* TalentMetadataTable; // 0x7c8(0x08)
	struct UDataTable* CosmeticItemMetadataTable; // 0x7d0(0x08)
	struct UDataTable* CosmeticItemSubMaterialMetadataTable; // 0x7d8(0x08)
	struct UDataTable* OnlineResearchProjectMetadataTable; // 0x7e0(0x08)
	struct UDataTable* OnlineStoreOfferMetadataTable; // 0x7e8(0x08)
	struct UDataTable* OnlineStoreFrontMetadataTable; // 0x7f0(0x08)
	struct UDataTable* OnlineChallengesNamesDataTable; // 0x7f8(0x08)
	struct UDataTable* OnlineChallengesDescriptionsDataTable; // 0x800(0x08)
	struct UDataTable* GameModeDataTable; // 0x808(0x08)
	struct UDataTable* CosmeticSetMetadataTable; // 0x810(0x08)
	struct UDataTable* OnlineEventMetadataTable; // 0x818(0x08)
	struct US_DebugOverlayWidget* DebugOverlayClass; // 0x820(0x08)
	struct UDataTable* MessagePromptMetadataTable; // 0x828(0x08)
	struct US_WidgetMessagePrompt* DefaultMessagePrompt; // 0x830(0x08)
	int32_t AmmoMaximumStackSizes[0xa]; // 0x838(0x28)
	int32_t CurrencyMaximumStackSizes[0x7]; // 0x860(0x1c)
	char pad_87C[0x4]; // 0x87c(0x04)
	struct FS_ImpactEffectTemplate DefaultImpactEffectTemplate; // 0x880(0x40)
	struct UDataTable* ImpactEffectTemplateKeyMatrix; // 0x8c0(0x08)
	struct TMap<struct FName, struct FS_ImpactEffectTemplate> ImpactEffectTemplates; // 0x8c8(0x50)
	struct UPhysicalMaterial* SurfaceTypeToCanonicalPhysicalMaterial[0x29]; // 0x918(0x148)
	struct UDataTable* ClientEventsTable; // 0xa60(0x08)
	struct TMap<struct FName, struct FS_WeaponClassAttributeModifiers> MapOfBaseAttributeToWeaponClassAttributeModifiers; // 0xa68(0x50)
	struct TMap<struct FName, struct FS_ChangeCauseAttributeModifiers> MapOfBaseAttributeToChangeCauseAttributeModifiers; // 0xab8(0x50)
	struct TMap<struct FName, struct FS_IsUsingADSAttributeModifiers> MapOfBaseAttributeToIsUsingADSAttributeModifiers; // 0xb08(0x50)
	struct TMap<struct FName, struct FS_WeaponModifiers> MapOfBaseAttributeToWeaponModifiers; // 0xb58(0x50)
	struct TMap<struct TSoftObjectPtr<struct USkeleton>, struct UDataTable*> DefaultSkeletalMontages; // 0xba8(0x50)
	struct TMap<struct TSoftObjectPtr<struct USkeleton>, struct US_CharacterMontagePackage*> DefaultCharacterAttackMontages; // 0xbf8(0x50)
	struct TMap<struct TSoftObjectPtr<struct USkeleton>, struct US_WeaponMontagePackage*> DefaultWeaponAttackMontages; // 0xc48(0x50)
	struct US_AssassinationMontagePackage* AssassinationMontages; // 0xc98(0x08)
	struct US_SoftPingSetups* SoftPingSetups; // 0xca0(0x08)
	struct TMap<struct FGameplayTag, struct UGameplayEffect*> StatsComponentShimGameplayEffects; // 0xca8(0x50)
	struct US_ItemData* AmmoItemData[0xa]; // 0xcf8(0x50)
	struct US_ItemData* CurrencyItemData[0x7]; // 0xd48(0x38)
	struct US_InteractableIconConfig* InteractableIconConfig; // 0xd80(0x08)
	struct US_OnlineGameTunings* OnlineGameTunings; // 0xd88(0x08)
	struct UObject* OnlineGameModeTunings; // 0xd90(0x08)
	struct UDataTable* PlatformLocaleCodeToCultureDataTable; // 0xd98(0x08)
	struct US_OnlineDataTable* DamageOverTimeConfigurationDataTable; // 0xda0(0x08)
	struct US_DefaultUserSettings* DefaultUserSettingsAsset; // 0xda8(0x08)
	struct UDataTable* OnlineCatalogMetadata; // 0xdb0(0x08)
	struct UDataTable* OnlineCurrencyMetadata; // 0xdb8(0x08)
	struct UDataTable* OnlineRestrictionMetadata; // 0xdc0(0x08)
	struct UDataTable* GlobalPhysicalSurfaceDataTable; // 0xdc8(0x08)
	struct FName TravelFailureErrorCode; // 0xdd0(0x08)
	struct US_WidgetMessagePrompt* TravelFailureErrorWidget; // 0xdd8(0x08)
	struct FName NetworkFailureErrorCode; // 0xde0(0x08)
	struct FName OutdatedClientErrorCode; // 0xde8(0x08)
	struct FName IntegrityErrorCode; // 0xdf0(0x08)
	struct FName IntegrityMessageErrorCode; // 0xdf8(0x08)
	struct FName PatchDownloadErrorCode; // 0xe00(0x08)
	struct US_WidgetMessagePrompt* NetworkFailureErrorWidget; // 0xe08(0x08)
	struct US_WidgetMessagePrompt* IntegrityErrorWidget; // 0xe10(0x08)
	struct US_WidgetMessagePrompt* PatchDownloadErrorWidget; // 0xe18(0x08)
	struct UMaterialInstance* LoadingAsset; // 0xe20(0x08)
	struct UDataTable* NavigationInputSettingsDataTable; // 0xe28(0x08)
	struct US_VirtualCursorManager* m_virtualCursorManager; // 0xe30(0x08)
	float HeartbeatTimerFrontend; // 0xe38(0x04)
	float HeartbeatTimerInGame; // 0xe3c(0x04)
	struct US_OnlineDataTable* LoadingScreenTemplate; // 0xe40(0x08)
	struct US_OnlineDataTable* LoadingScreenTemplateMutator; // 0xe48(0x08)
	char pad_E50[0x18]; // 0xe50(0x18)
	struct US_PostMatchManager* PostMatchManagerClass; // 0xe68(0x08)
	char pad_E70[0x50]; // 0xe70(0x50)
	struct TMap<struct FUniqueNetIdRepl, struct FS_PlayerInstanceState> m_mapOfPlayerUniqueNetIdToPlayerInstanceState; // 0xec0(0x50)
	char pad_F10[0x30]; // 0xf10(0x30)
	struct US_FeatureFlagManager* m_featureFlagManager; // 0xf40(0x08)
	struct US_OnlineServiceManager* m_onlineServiceManager; // 0xf48(0x08)
	struct US_OnlineOverrideConfigManager* m_onlineOverrideConfigManager; // 0xf50(0x08)
	struct US_OnlineImageDownloader* m_onlineImageDownloader; // 0xf58(0x08)
	struct US_TelemetryManager* m_telemetryManager; // 0xf60(0x08)
	struct US_RagdollManager* m_ragdollManager; // 0xf68(0x08)
	struct US_OnlineDataTable* m_loadingScreenTemplateInUse; // 0xf70(0x08)
	char pad_F78[0x510]; // 0xf78(0x510)
	struct FS_OnlineGameTuningValues m_onlineGameTuningValuesFromBackend; // 0x1488(0x14)
	char pad_149C[0x4]; // 0x149c(0x04)
	struct UObject* m_onlineGameModeTuningValuesFromBackend; // 0x14a0(0x08)
	struct US_TeammateInfoManager* m_teammateInfoManager; // 0x14a8(0x08)
	char pad_14B0[0x150]; // 0x14b0(0x150)
	struct US_UnseenObjectBadgeManager* m_unseenObjectBadgeManager; // 0x1600(0x08)
	struct US_ScreenInputManager* m_screenInputManager; // 0x1608(0x08)
	struct US_GameTransitionManager* m_transitionManager; // 0x1610(0x08)
	struct US_PostMatchManager* m_postMatchManager; // 0x1618(0x08)
	struct TMap<struct FS_CollisionPair, float> m_impactEffectCooldownTimers; // 0x1620(0x50)
	struct US_AkCallbackManager* AkCallbackManager; // 0x1670(0x08)
	struct US_UIAudioSystem* UIAudioSystem; // 0x1678(0x08)
	struct US_MusicSystem* MusicSystem; // 0x1680(0x08)
	struct US_DialogueSystem* DialogueSystem; // 0x1688(0x08)
	struct US_SubtitleSystem* SubtitleSystem; // 0x1690(0x08)
	struct US_LootAudioSystem* LootAudioSystem; // 0x1698(0x08)
	char pad_16A0[0x14]; // 0x16a0(0x14)
	int32_t ConnectionRetryLimit; // 0x16b4(0x04)
	char pad_16B8[0x78]; // 0x16b8(0x78)
	struct US_DebugOverlayWidget* m_DebugOverlay; // 0x1730(0x08)
	struct TMap<enum class ES_FrontEndItemReceiverType, struct AS_FrontEndItemReceiver*> m_registeredItemReceivers; // 0x1738(0x50)
	char pad_1788[0x140]; // 0x1788(0x140)
	struct FS_MixStateManager MixStateManager; // 0x18c8(0x410)
	char pad_1CD8[0x4520]; // 0x1cd8(0x4520)
	struct US_WeatherAudioSystem* WeatherAudioSystem; // 0x61f8(0x08)
	char pad_6200[0xa0]; // 0x6200(0xa0)
	bool WasInSocialHub; // 0x62a0(0x01)
	char pad_62A1[0xf]; // 0x62a1(0x0f)

	bool WasLaunchedFromMainMenu(); // Function Scavenger.S_GameInstance.WasLaunchedFromMainMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool WasLaunchedCorrectly(); // Function Scavenger.S_GameInstance.WasLaunchedCorrectly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void TravelToTutorial(); // Function Scavenger.S_GameInstance.TravelToTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TravelToGame(); // Function Scavenger.S_GameInstance.TravelToGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TravelFailureEventCallback(struct UWorld* World, enum class ETravelFailure FailureType, struct FString ErrorString); // Function Scavenger.S_GameInstance.TravelFailureEventCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void TestAccountLogin(struct UPlayer* Player, struct FString testAccountId, enum class ES_ImprobableTestAccountType testAccountType, struct FString testAccountAuthToken); // Function Scavenger.S_GameInstance.TestAccountLogin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TerminateAllTeamChatSessions(); // Function Scavenger.S_GameInstance.TerminateAllTeamChatSessions // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StoreMutatorType(enum class ES_MutatorType mutatorType); // Function Scavenger.S_GameInstance.StoreMutatorType // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SphereInViewFrustum(struct FVector Location, float Radius); // Function Scavenger.S_GameInstance.SphereInViewFrustum // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ShowPlatformLoginUI(int32_t PlayerIndex, bool bShowOnlineOnly, bool bShowSkipButton); // Function Scavenger.S_GameInstance.ShowPlatformLoginUI // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowFrontEndItemOfType(enum class ES_FrontEndItemReceiverType Type, struct FName ItemId); // Function Scavenger.S_GameInstance.ShowFrontEndItemOfType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowAccountUpgradeUI(); // Function Scavenger.S_GameInstance.ShowAccountUpgradeUI // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ShouldSkipPhotoSensitivityWarning(); // Function Scavenger.S_GameInstance.ShouldSkipPhotoSensitivityWarning // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUsingMultiplayerFeatures(bool bUsingMP); // Function Scavenger.S_GameInstance.SetUsingMultiplayerFeatures // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserSettings(struct FS_UserSettings NewSettings, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetUserKeyBindSetting(enum class ES_GameInputActionType GameInputAction, struct FKey newbind, bool bPrimary, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserKeyBindSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserInputSettings(struct FS_UserInputSettings NewSettings, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserInputSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserGameSettings(struct FS_UserGameSettings NewSettings, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserGameSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserAudioSettings(struct FS_UserAudioSettings NewSettings, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserAudioSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserAccessibilitySettings(struct FS_UserAccessibilitySettings NewSettings, bool bAndSave); // Function Scavenger.S_GameInstance.SetUserAccessibilitySettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetReportCard(struct FS_GameReportCardForPlayer reportCard); // Function Scavenger.S_GameInstance.SetReportCard // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetReadyForSession(); // Function Scavenger.S_GameInstance.SetReadyForSession // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SetPreTakeoffSnapshotForCurrentGame(struct FS_GameScoreSnapshot Snapshot); // Function Scavenger.S_GameInstance.SetPreTakeoffSnapshotForCurrentGame // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPostTakeoffSnapshotForCurrentGame(struct FS_GameScoreSnapshot Snapshot); // Function Scavenger.S_GameInstance.SetPostTakeoffSnapshotForCurrentGame // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOnlineGameModeTunings(struct UObject* gameModeTunings); // Function Scavenger.S_GameInstance.SetOnlineGameModeTunings // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentQueue(struct FS_LobbyQueue queue, bool ShouldDisconnectPlayer); // Function Scavenger.S_GameInstance.SetCurrentQueue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCosmeticSelectionHistory(struct FS_OnlineCosmeticSelectionHistory newHistory); // Function Scavenger.S_GameInstance.SetCosmeticSelectionHistory // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SaveUserSettings(); // Function Scavenger.S_GameInstance.SaveUserSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReturnToMainMenu_BP(); // Function Scavenger.S_GameInstance.ReturnToMainMenu_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RetryConnectToSpatial(struct FString Reason); // Function Scavenger.S_GameInstance.RetryConnectToSpatial // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ResetUserSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserMouseAndKeyboardInputSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserMouseAndKeyboardInputSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserInputSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserInputSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserGameSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserGameSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserGamepadInputSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserGamepadInputSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserAudioSettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserAudioSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetUserAccessibilitySettings(bool bAndSave); // Function Scavenger.S_GameInstance.ResetUserAccessibilitySettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetMainMenu(); // Function Scavenger.S_GameInstance.ResetMainMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetClient(); // Function Scavenger.S_GameInstance.ResetClient // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestMinimizeWindowIfFullscreen(); // Function Scavenger.S_GameInstance.RequestMinimizeWindowIfFullscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReleaseFrontEndItemReceiverOfType(enum class ES_FrontEndItemReceiverType Type); // Function Scavenger.S_GameInstance.ReleaseFrontEndItemReceiverOfType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_WidgetMessagePrompt* RegisterMessagePromptWithArguments(struct AS_PlayerControllerBase* PlayerController, struct FName MessageId, struct US_WidgetMessagePrompt* messagePromptClass, struct FS_MessagePromptArguments MessagePromptArguments); // Function Scavenger.S_GameInstance.RegisterMessagePromptWithArguments // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_WidgetMessagePrompt* RegisterMessagePrompt(struct AS_PlayerControllerBase* PlayerController, struct FName MessageId, struct US_WidgetMessagePrompt* messagePromptClass); // Function Scavenger.S_GameInstance.RegisterMessagePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QuitGame(); // Function Scavenger.S_GameInstance.QuitGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PreloadLoadingScreenAssets(); // Function Scavenger.S_GameInstance.PreloadLoadingScreenAssets // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool PredictTeamStartLocations(struct TArray<struct FVector> spawnLocations, struct FVector seedLocation, int32_t RandomSeed, int32_t expectedTeamCount, struct TArray<struct FVector> outSpawnLocations); // Function Scavenger.S_GameInstance.PredictTeamStartLocations // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FVector PredictTeamStart(struct TArray<struct FVector> spawnLocations, int32_t TeamIndex, int32_t RandomSeed); // Function Scavenger.S_GameInstance.PredictTeamStart // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FVector PredictDropshipLocation(struct TArray<struct FVector> predictedDropshipLocations, int32_t RandomSeed); // Function Scavenger.S_GameInstance.PredictDropshipLocation // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void PlayLocalGame(); // Function Scavenger.S_GameInstance.PlayLocalGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlatformLogout(struct UPlayer* Player); // Function Scavenger.S_GameInstance.PlatformLogout // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlatformLogin(struct UPlayer* Player); // Function Scavenger.S_GameInstance.PlatformLogin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnFadeOutTravelToTutorial(bool IsFadingOut); // Function Scavenger.S_GameInstance.OnFadeOutTravelToTutorial // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyPlayerTeamChanged_BP(struct AS_PlayerStateBase* PlayerState, int32_t TeamIndex); // Function Scavenger.S_GameInstance.NotifyPlayerTeamChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayersChanged_BP(); // Function Scavenger.S_GameInstance.NotifyPlayersChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerCharacterChanged_BP(struct AS_PlayerControllerBase* PlayerController, struct US_PlayerClassData* ClassData); // Function Scavenger.S_GameInstance.NotifyPlayerCharacterChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NetworkFailureMessageResolved(); // Function Scavenger.S_GameInstance.NetworkFailureMessageResolved // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NetworkFailureEventCallback(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure FailureType, struct FString ErrorString); // Function Scavenger.S_GameInstance.NetworkFailureEventCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void Login(struct UPlayer* Player, struct FText AccountName, struct FText accountPassword, bool bSavePassword, bool bIsCreate); // Function Scavenger.S_GameInstance.Login // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool LocationInViewFrustum(struct FVector Location); // Function Scavenger.S_GameInstance.LocationInViewFrustum // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLoggedIn(struct UPlayer* Player); // Function Scavenger.S_GameInstance.IsLoggedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasPreLoginDataBeenRetrieved(); // Function Scavenger.S_GameInstance.HasPreLoginDataBeenRetrieved // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleUserAudioSettingsChanged(struct FS_UserAudioSettings OldSettings, struct FS_UserAudioSettings NewSettings); // Function Scavenger.S_GameInstance.HandleUserAudioSettingsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePreLoginFailureTimer(); // Function Scavenger.S_GameInstance.HandlePreLoginFailureTimer // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandlePlayerBanDetected(); // Function Scavenger.S_GameInstance.HandlePlayerBanDetected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnlinePreLoginDataRetrieved(enum class ES_OnlineResult onlineResult); // Function Scavenger.S_GameInstance.HandleOnlinePreLoginDataRetrieved // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnlineGameTuningsUpdated(struct FString jsonTunings); // Function Scavenger.S_GameInstance.HandleOnlineGameTuningsUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnlineGameModeTuningsUpdated(struct FString jsonTunings); // Function Scavenger.S_GameInstance.HandleOnlineGameModeTuningsUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	struct US_WeatherAudioSystem* GetWeatherAudioSystem(); // Function Scavenger.S_GameInstance.GetWeatherAudioSystem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_VirtualCursorManager* GetVirtualCursorManager(); // Function Scavenger.S_GameInstance.GetVirtualCursorManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_UserSettings GetUserSettings(); // Function Scavenger.S_GameInstance.GetUserSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UnseenObjectBadgeManager* GetUnseenObjectBadgeManager(); // Function Scavenger.S_GameInstance.GetUnseenObjectBadgeManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UIAudioSystem* GetUIAudioSystem(); // Function Scavenger.S_GameInstance.GetUIAudioSystem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_GameTransitionManager* GetTransitionManager(); // Function Scavenger.S_GameInstance.GetTransitionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_TextChatManager* GetTextChatManager(); // Function Scavenger.S_GameInstance.GetTextChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetTestAccountId(struct UPlayer* Player); // Function Scavenger.S_GameInstance.GetTestAccountId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_TelemetryManager* GetTelemetryManager(); // Function Scavenger.S_GameInstance.GetTelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerStart* GetTeamStart(struct TArray<struct AS_PlayerStart*> spawnLocations, int32_t TeamIndex, int32_t RandomSeed); // Function Scavenger.S_GameInstance.GetTeamStart // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool GetTalentMetadata_BP(struct FName talentId, struct FS_TalentMetadata outTalentMetadata); // Function Scavenger.S_GameInstance.GetTalentMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_SubtitleSystem* GetSubtitleSystem(); // Function Scavenger.S_GameInstance.GetSubtitleSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_SocialManager* GetSocialManager(); // Function Scavenger.S_GameInstance.GetSocialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ScreenInputManager* GetScreenInputManager(); // Function Scavenger.S_GameInstance.GetScreenInputManager // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetReportCardForLastGame(struct FS_GameReportCardForPlayer reportCard); // Function Scavenger.S_GameInstance.GetReportCardForLastGame // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadata_BP(struct FName RecipeId, struct FS_RecipeMetadata outRecipeMetadata); // Function Scavenger.S_GameInstance.GetRecipeMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetRandomSeedForInitialSpawns(); // Function Scavenger.S_GameInstance.GetRandomSeedForInitialSpawns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_RagdollManager* GetRagdollManager(); // Function Scavenger.S_GameInstance.GetRagdollManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetPreferredRegion(); // Function Scavenger.S_GameInstance.GetPreferredRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_PostMatchManager* GetPostMatchManager(); // Function Scavenger.S_GameInstance.GetPostMatchManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineServiceManager* GetOnlineServiceManager(); // Function Scavenger.S_GameInstance.GetOnlineServiceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineOverrideConfigManager* GetOnlineOverrideConfigManager(); // Function Scavenger.S_GameInstance.GetOnlineOverrideConfigManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineImageDownloader* GetOnlineImageDownloader(); // Function Scavenger.S_GameInstance.GetOnlineImageDownloader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineGameTuningValues(struct FS_OnlineGameTuningValues outGameTuningValues, bool outSuccess, bool outValuesFromBackend); // Function Scavenger.S_GameInstance.GetOnlineGameTuningValues // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UObject* GetOnlineGameModeTunings(bool outValuesFromBackend); // Function Scavenger.S_GameInstance.GetOnlineGameModeTunings // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetNavigationInputDataFromWidget(struct US_WidgetMinimal* Widget, struct TArray<struct FS_NavigationInputData> outNavigationInputData); // Function Scavenger.S_GameInstance.GetNavigationInputDataFromWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetNavigationInputDataFromClass(SoftClassProperty WidgetClass, struct TArray<struct FS_NavigationInputData> outNavigationInputData); // Function Scavenger.S_GameInstance.GetNavigationInputDataFromClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_MusicSystem* GetMusicSystem(); // Function Scavenger.S_GameInstance.GetMusicSystem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetMaximumNumberOfPlayers(); // Function Scavenger.S_GameInstance.GetMaximumNumberOfPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_LootAudioSystem* GetLootAudioSystem(); // Function Scavenger.S_GameInstance.GetLootAudioSystem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetLocalizedTextFromHandle_BP(struct FDataTableRowHandle TextHandle, struct FText outLocalizedText); // Function Scavenger.S_GameInstance.GetLocalizedTextFromHandle_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetLocalizedText_BP(struct FName textId, struct FText outLocalizedText); // Function Scavenger.S_GameInstance.GetLocalizedText_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetLocalizedObjectName(struct FDataTableRowHandle TextHandle, struct FText outLocalizedName); // Function Scavenger.S_GameInstance.GetLocalizedObjectName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetLocalizedObjectDescription(struct FDataTableRowHandle TextHandle, struct FText outLocalizedDescription); // Function Scavenger.S_GameInstance.GetLocalizedObjectDescription // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UMaterialInstance* GetLoadingAsset(); // Function Scavenger.S_GameInstance.GetLoadingAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetLastGameMatchRecord(struct FS_MatchRecord outMatchRecord); // Function Scavenger.S_GameInstance.GetLastGameMatchRecord // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetLastGameMatchId(); // Function Scavenger.S_GameInstance.GetLastGameMatchId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetItemRarityColor(struct APlayerController* PlayerController, enum class ES_ItemRarity Rarity); // Function Scavenger.S_GameInstance.GetItemRarityColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColorFromHandle(struct FDataTableRowHandle interfaceColorHandle, enum class ES_InterfaceColorMode interfaceColorMode); // Function Scavenger.S_GameInstance.GetInterfaceColorFromHandle // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetInterfaceColor(struct FName colorId, enum class ES_InterfaceColorMode interfaceColorMode); // Function Scavenger.S_GameInstance.GetInterfaceColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetHasBenchmarkRan(); // Function Scavenger.S_GameInstance.GetHasBenchmarkRan // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetGameplayEffectMetadata_BP(struct FGameplayTag gameplayEffectTag, struct FS_GameplayEffectMetadata outGameplayEffectMetadata); // Function Scavenger.S_GameInstance.GetGameplayEffectMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_FrontEndItemReceiver* GetFrontEndItemReceiverOfType(enum class ES_FrontEndItemReceiverType Type); // Function Scavenger.S_GameInstance.GetFrontEndItemReceiverOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_FeatureFlagManager* GetFeatureFlagManager(); // Function Scavenger.S_GameInstance.GetFeatureFlagManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetErrorMessage(); // Function Scavenger.S_GameInstance.GetErrorMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_DialogueSystem* GetDialogueSystem(); // Function Scavenger.S_GameInstance.GetDialogueSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_UserSettings GetDefaultUserSettings(); // Function Scavenger.S_GameInstance.GetDefaultUserSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_LobbyQueue GetCurrentQueue(); // Function Scavenger.S_GameInstance.GetCurrentQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_CameraManagerComponent* GetCurrentCameraTransform(struct FTransform outTransform); // Function Scavenger.S_GameInstance.GetCurrentCameraTransform // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_CameraManagerComponent* GetCurrentCameraRotation(struct FRotator OutRotation); // Function Scavenger.S_GameInstance.GetCurrentCameraRotation // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_CameraManagerComponent* GetCurrentCameraLocation(struct FVector OutLocation); // Function Scavenger.S_GameInstance.GetCurrentCameraLocation // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_CameraManagerComponent* GetCurrentCameraFieldOfView(float outFieldOfView); // Function Scavenger.S_GameInstance.GetCurrentCameraFieldOfView // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_CameraManagerComponent* GetCurrentCamera(struct FVector OutLocation, struct FRotator outRotator, float outFieldOfView); // Function Scavenger.S_GameInstance.GetCurrentCamera // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetCurrencyItemData(enum class ES_CurrencyType CurrencyType); // Function Scavenger.S_GameInstance.GetCurrencyItemData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_OnlineCosmeticSelectionHistory GetCosmeticSelectionHistory(); // Function Scavenger.S_GameInstance.GetCosmeticSelectionHistory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValueWithAttributeSet(struct FName AttributeName, struct AActor* Actor, struct US_AttributeSetBase* AttributeSet, struct FS_AttributeContext attributeContext); // Function Scavenger.S_GameInstance.GetAttributeValueWithAttributeSet // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttributeValue(struct FName AttributeName, struct AActor* Actor, struct FS_AttributeContext attributeContext); // Function Scavenger.S_GameInstance.GetAttributeValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetAmmoItemData(enum class ES_AmmoType AmmoType); // Function Scavenger.S_GameInstance.GetAmmoItemData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_Platform GetActiveInputDeviceType(); // Function Scavenger.S_GameInstance.GetActiveInputDeviceType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetAccountPasswordSaved(struct UPlayer* Player); // Function Scavenger.S_GameInstance.GetAccountPasswordSaved // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetAccountPassword(struct UPlayer* Player); // Function Scavenger.S_GameInstance.GetAccountPassword // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetAccountName(struct UPlayer* Player); // Function Scavenger.S_GameInstance.GetAccountName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAccountLevel(struct UPlayer* Player); // Function Scavenger.S_GameInstance.GetAccountLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GenerateTeamStartLocations(struct FVector seedLocation, int32_t RandomSeed, int32_t expectedTeamCount, struct TArray<struct AS_PlayerStart*> outSpawnLocations); // Function Scavenger.S_GameInstance.GenerateTeamStartLocations // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void FadeOutScreen(float Duration); // Function Scavenger.S_GameInstance.FadeOutScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FadeInScreen(float Duration); // Function Scavenger.S_GameInstance.FadeInScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EndLoadingScreenMapLoad(struct UWorld* inLoadedWorld); // Function Scavenger.S_GameInstance.EndLoadingScreenMapLoad // (Native|Protected) // @ game+0xffff8008e4a10000
	bool DistanceToFrustumLessThan(struct FVector Location, float testValue); // Function Scavenger.S_GameInstance.DistanceToFrustumLessThan // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AActor* DetermineDropshipLocation(struct TArray<struct AActor*> dropshipSpawners, int32_t RandomSeed); // Function Scavenger.S_GameInstance.DetermineDropshipLocation // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ConnectToSpatial(struct FText serverAddress); // Function Scavenger.S_GameInstance.ConnectToSpatial // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheckForServerMaintenance(); // Function Scavenger.S_GameInstance.CheckForServerMaintenance // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginLoadingScreen(struct FString MapName); // Function Scavenger.S_GameInstance.BeginLoadingScreen // (Native|Protected) // @ game+0xffff8008e4a10000
	bool ApplyLatestOnlineOverrideConfig(); // Function Scavenger.S_GameInstance.ApplyLatestOnlineOverrideConfig // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameMode
// Size: 0x1560 (Inherited: 0x388)
struct AS_GameMode : AGameMode {
	struct FMulticastInlineDelegate OnActorDamaged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnActorDowned; // 0x398(0x10)
	struct FMulticastInlineDelegate OnActorTerminal; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnActorKilled; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnActorResurrected; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnActorRevived; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnActorStatsStateChanged; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnAISpawned; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnPlayerItemAcquired; // 0x408(0x10)
	struct FMulticastInlineDelegate OnPlayerItemDestroyed; // 0x418(0x10)
	struct FMulticastInlineDelegate OnPlayerItemDropped; // 0x428(0x10)
	struct FMulticastInlineDelegate OnPlayerItemEquipped; // 0x438(0x10)
	struct FMulticastInlineDelegate OnPlayerItemUnequipped; // 0x448(0x10)
	struct FMulticastInlineDelegate OnPlayerItemUsed; // 0x458(0x10)
	struct FMulticastInlineDelegate OnPlayerInteracted; // 0x468(0x10)
	struct FMulticastInlineDelegate OnPlayerLogin; // 0x478(0x10)
	struct FMulticastInlineDelegate OnPlayerLogout; // 0x488(0x10)
	struct FMulticastInlineDelegate OnGameplayEvent; // 0x498(0x10)
	struct FMulticastInlineDelegate OnPreDropshipTakeoff; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnPostDropShipTakeoff; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnGameModeEnded; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnPlayerCocooned; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnPlayerFreedFromCocoon; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnPlayerKilledInCocoon; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnPlayerExtracting; // 0x508(0x10)
	struct FMulticastInlineDelegate OnPlayerExtracted; // 0x518(0x10)
	struct TArray<struct FS_AbilitySpecifier> CharacterDefaultAbilities; // 0x528(0x10)
	struct TArray<struct FS_AbilitySpecifier> PlayerDefaultAbilities; // 0x538(0x10)
	struct TArray<struct FS_AbilitySpecifier> AIDefaultAbilities; // 0x548(0x10)
	struct TArray<struct UGameplayEffect*> CharacterDefaultGameEffects; // 0x558(0x10)
	struct TArray<struct UGameplayEffect*> PlayerDefaultGameEffects; // 0x568(0x10)
	struct TArray<struct UGameplayEffect*> AIDefaultGameEffects; // 0x578(0x10)
	struct US_LeaderboardRankingSettings* LeaderboardRankingSettings; // 0x588(0x08)
	struct US_LeaderboardRankingSettings* LeaderboardRankingSettingsFinalTally; // 0x590(0x08)
	bool bUseOnboardingPlayerSetup; // 0x598(0x01)
	char pad_599[0x7]; // 0x599(0x07)
	struct FS_PlayerInstanceState OnboardingPlayerSetup; // 0x5a0(0x150)
	int32_t MaxPossibleAttackers; // 0x6f0(0x04)
	int32_t MaxMeleeAttackers; // 0x6f4(0x04)
	int32_t MaxMediumAttackers; // 0x6f8(0x04)
	int32_t MaxExtendedAttackers; // 0x6fc(0x04)
	float MeleeAttackerRange; // 0x700(0x04)
	float MediumAttackerRange; // 0x704(0x04)
	float HowLongAttackerShouldAttack; // 0x708(0x04)
	float HowLongToWaitToFireIfUnable; // 0x70c(0x04)
	struct FS_VisibilityWeights VisibilityWeights; // 0x710(0x3c)
	char pad_74C[0x4]; // 0x74c(0x04)
	struct TArray<float> RogueRankToDetectionDistance; // 0x750(0x10)
	struct TArray<float> ShardCountToDetectionDistance; // 0x760(0x10)
	int32_t MaxNumberOfTeams; // 0x770(0x04)
	struct FS_AITargetingWeights AITargettingWeights; // 0x774(0x20)
	int32_t DesiredMaxAICount; // 0x794(0x04)
	bool IsDropshipDoorsBlocked; // 0x798(0x01)
	bool ForceAISpawnOneByOne; // 0x799(0x01)
	char pad_79A[0x6]; // 0x79a(0x06)
	struct UDataTable* AIPhaseTable; // 0x7a0(0x08)
	int32_t GlobalAIWeaponTuningAdjustment; // 0x7a8(0x04)
	char pad_7AC[0x4]; // 0x7ac(0x04)
	struct FMulticastInlineDelegate OnExpectedPlayerCountReceived; // 0x7b0(0x10)
	struct FMulticastInlineDelegate OnDifficultyReceived; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnScoreEvent; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnInventoryInitialized; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnEquipmentInitialized; // 0x7f0(0x10)
	struct FMulticastInlineDelegate OnFirstFrame; // 0x800(0x10)
	struct FMulticastInlineDelegate OnPlayerOnlineDataAvailable; // 0x810(0x10)
	struct FMulticastInlineDelegate OnCheatEvent; // 0x820(0x10)
	struct FMulticastInlineDelegate OnNextDynamicObjectivesBegin; // 0x830(0x10)
	struct FMulticastInlineDelegate OnSupplyDropBegin; // 0x840(0x10)
	char pad_850[0xa0]; // 0x850(0xa0)
	struct TArray<struct US_RadarBlipComponent*> m_radarBlipComponents; // 0x8f0(0x10)
	struct TSet<struct US_RadarScannerComponent*> m_globalRadarScannerComponents; // 0x900(0x50)
	struct TMap<int32_t, struct FS_BakedOpportunityPointPtrWrapper> GlobalBakedOpportunityPoints; // 0x950(0x50)
	struct FString TelemetryMatchId; // 0x9a0(0x10)
	float TeamLocationReportingInterval; // 0x9b0(0x04)
	float TeamLocationReportingSquadDistance; // 0x9b4(0x04)
	struct FS_MatchTelemetryIds WorkerMatchTelemetryIds; // 0x9b8(0x28)
	struct TArray<struct TWeakObjectPtr<struct AS_OpportunityPoint>> pendingAddOpportunityPoints; // 0x9e0(0x10)
	char pad_9F0[0x750]; // 0x9f0(0x750)
	struct TArray<struct AS_LatencyBeacon*> m_latencyBeacons; // 0x1140(0x10)
	struct US_FiringPointManagerComponent* m_firingPointManagerComponent; // 0x1150(0x08)
	char pad_1158[0x8]; // 0x1158(0x08)
	struct FS_AISpawnPhaseTable m_aiSpawnData; // 0x1160(0x18)
	float PlayerRespawnDelayTime; // 0x1178(0x04)
	float NonPlayerCleanupDelayTime; // 0x117c(0x04)
	float NonPlayerCleanupFailsafeTime; // 0x1180(0x04)
	char pad_1184[0x4]; // 0x1184(0x04)
	struct TArray<struct FS_ItemState> DefaultPlayerInventoryItems; // 0x1188(0x10)
	struct FName DefaultPlayerEquipment[0x11]; // 0x1198(0x88)
	struct TArray<struct AS_LatencyBeacon*> LatencyBeaconClasses; // 0x1220(0x10)
	struct TArray<struct TSoftObjectPtr<struct US_RecipeData>> ImprobableTestRecipeData; // 0x1230(0x10)
	float DeadPawnAddedLifespan; // 0x1240(0x04)
	struct FS_TeamBelongingDamageMultipliers m_teamBelongingDamageMultipliers; // 0x1244(0x2c)
	struct UDataTable* BotNames; // 0x1270(0x08)
	struct TArray<struct FString> AvailableBotNames; // 0x1278(0x10)
	bool FillScoreboardWithFakeEntries; // 0x1288(0x01)
	char pad_1289[0x7]; // 0x1289(0x07)
	struct TMap<struct APawn*, struct FS_ReviveExecuteInteractableData> m_mapOfRegisteredPawnToInteractableData; // 0x1290(0x50)
	struct US_GameModeEventHistory* m_eventHistory; // 0x12e0(0x08)
	struct US_GameModeRewardProcessor* m_rewardProcessor; // 0x12e8(0x08)
	struct TMap<struct APlayerController*, struct FS_OnlineGameModePlayerSessionData> m_mapOfPlayerControllerToPlayerSessionData; // 0x12f0(0x50)
	char pad_1340[0xb8]; // 0x1340(0xb8)
	struct TArray<struct US_LandscapeDeformerAgent*> m_deformerAgents; // 0x13f8(0x10)
	char pad_1408[0x8]; // 0x1408(0x08)
	float m_defaultPlayerRadarRespawnDelayTime; // 0x1410(0x04)
	char pad_1414[0x4]; // 0x1414(0x04)
	double enemyInfoUpdateTimeSlice; // 0x1418(0x08)
	struct TMap<struct AS_PlayerController*, struct FS_KRADLEnemyInfo> m_playerControllersToEnemyInfos; // 0x1420(0x50)
	struct TArray<struct AS_PlayerController*> m_allPlayerControllers; // 0x1470(0x10)
	struct TArray<struct AS_PlayerController*> m_currentActivePlayerControllers; // 0x1480(0x10)
	char pad_1490[0xc0]; // 0x1490(0xc0)
	enum class ES_MixStageExclusive m_defaultExclusiveAudioMixState; // 0x1550(0x01)
	char pad_1551[0xf]; // 0x1551(0x0f)

	void WWiseTrimPriorityAudioQueue(struct FS_PriorityAudioTrim Trim, struct US_PriorityAudioChannelDef* ChannelDef); // Function Scavenger.S_GameMode.WWiseTrimPriorityAudioQueue // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWiseQueuePriorityAudioEvent_ByName(struct FString TeamEventName, struct FString EnemyEventName, int32_t TeamIndex, struct AActor* EventInstigator, struct FS_PriorityAudioSettings PrioritySettings, struct US_PriorityAudioChannelDef* Channel); // Function Scavenger.S_GameMode.WWiseQueuePriorityAudioEvent_ByName // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWiseQueuePriorityAudioEvent(struct UAkAudioEvent* TeamEvent, struct UAkAudioEvent* EnemyEvent, int32_t TeamIndex, struct AActor* EventInstigator, struct FS_PriorityAudioSettings PrioritySettings, struct US_PriorityAudioChannelDef* Channel); // Function Scavenger.S_GameMode.WWiseQueuePriorityAudioEvent // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWisePlayMusicCueOnTeam(int32_t TeamIndex, enum class ES_MusicCue Cue); // Function Scavenger.S_GameMode.WWisePlayMusicCueOnTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWisePlayAttached3DSoundOnAllClients(struct UAkAudioEvent* AkEvent, struct AActor* Actor, float MaxDistance); // Function Scavenger.S_GameMode.WWisePlayAttached3DSoundOnAllClients // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWisePlay3DSoundOnAllClients(struct UAkAudioEvent* AkEvent, struct FVector Location, float MaxDistance); // Function Scavenger.S_GameMode.WWisePlay3DSoundOnAllClients // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWisePlay2DSoundOnTeam(int32_t TeamIndex, struct UAkAudioEvent* AkEvent, bool bStopWhenAttachedToDestroyed); // Function Scavenger.S_GameMode.WWisePlay2DSoundOnTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WWisePlay2DSoundOnAllClients(struct UAkAudioEvent* AkEvent, bool bStopWhenAttachedToDestroyed); // Function Scavenger.S_GameMode.WWisePlay2DSoundOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void WipeTeam(int32_t TeamIndex, struct AS_PlayerCharacter* lastPlayer); // Function Scavenger.S_GameMode.WipeTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateReportCardsForGameEnd(); // Function Scavenger.S_GameMode.UpdateReportCardsForGameEnd // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateReportCardsForActivePlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.UpdateReportCardsForActivePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnRegisterOpportunityPoint(int32_t OpportunityPointID); // Function Scavenger.S_GameMode.UnRegisterOpportunityPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FActiveGameplayEffectHandle TryApplyGameplayEffectSpecToActor(struct AActor* Actor, struct FGameplayEffectSpec GameplayEffectSpec); // Function Scavenger.S_GameMode.TryApplyGameplayEffectSpecToActor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* SpawnServerPlayerBot(int32_t TeamIndex, struct FVector SpawnLocation, struct AS_PlayerCharacter* playerCharacterToSpawn, struct AS_PlayerController* playerControllerToSpawn, struct AS_AIController* aiControllerOverride, bool giveStartingLoadout, struct FString customStartingLoadout); // Function Scavenger.S_GameMode.SpawnServerPlayerBot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SpawnGameplayEffectVolume(struct AS_GameplayEffectVolume* gameplayEffectVolumeClass, struct FTransform SpawnTransform); // Function Scavenger.S_GameMode.SpawnGameplayEffectVolume // (Net|NetReliableNative|Event|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetGameSleepMode(bool bShouldSleep); // Function Scavenger.S_GameMode.SetGameSleepMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetExclusiveAudioMixState(enum class ES_MixStageExclusive NewMixState); // Function Scavenger.S_GameMode.SetExclusiveAudioMixState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDropshipDoorsBlocked(); // Function Scavenger.S_GameMode.SetDropshipDoorsBlocked // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerShutdown(); // Function Scavenger.S_GameMode.ServerShutdown // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerReady(); // Function Scavenger.S_GameMode.ServerReady // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerEventGameplayAuthority(struct FName EventName, struct AActor* Actor, struct UObject* objectParameter, float floatParameter1, float floatParameter2); // Function Scavenger.S_GameMode.ServerEventGameplayAuthority // (Final|Net|NetReliableNative|Event|Private) // @ game+0xffff8008e4a10000
	void SendPingEventOverrideToTeam(int32_t TeamIndex, enum class ES_PingInfoType PingType, enum class ES_AutoPingType AutoPingType); // Function Scavenger.S_GameMode.SendPingEventOverrideToTeam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendMatchStartTelemetry(); // Function Scavenger.S_GameMode.SendMatchStartTelemetry // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendEventToTeam(int32_t TeamIndex, struct FName EventName, struct FS_ClientEventParameters eventParameters); // Function Scavenger.S_GameMode.SendEventToTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendEventToAllClients(struct FName EventName, struct FS_ClientEventParameters eventParameters); // Function Scavenger.S_GameMode.SendEventToAllClients // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RouteGameplayEventToActor(struct AActor* Actor, struct FGameplayTag GameplayTag, struct FGameplayEventData GameplayEventData); // Function Scavenger.S_GameMode.RouteGameplayEventToActor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RewardOnlineItemsForExtractedItems(struct APlayerController* PlayerController); // Function Scavenger.S_GameMode.RewardOnlineItemsForExtractedItems // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetPlayer(struct AS_PlayerController* PlayerController, bool bDestroyEquippedWeapons); // Function Scavenger.S_GameMode.ResetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportResurrection(struct APlayerController* resurrectingPlayerController, struct AActor* resurrectedActor); // Function Scavenger.S_GameMode.ReportResurrection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportPlayerFreedFromCocoon(struct AS_PlayerController* FreedPlayerController); // Function Scavenger.S_GameMode.ReportPlayerFreedFromCocoon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportPlayerExtracting(struct AS_PlayerController* ExtractingPlayerController); // Function Scavenger.S_GameMode.ReportPlayerExtracting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportPlayerExtracted(struct AS_PlayerController* ExtractedPlayerController); // Function Scavenger.S_GameMode.ReportPlayerExtracted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveGameplayEffectFromActor(struct AActor* Actor, struct FActiveGameplayEffectHandle ActiveGameplayEffectHandle); // Function Scavenger.S_GameMode.RemoveGameplayEffectFromActor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RegisterPawnForRevive(struct APawn* Pawn, struct FS_InteractableData reviveInteractableData, struct FS_InteractableData executeInteractableData); // Function Scavenger.S_GameMode.RegisterPawnForRevive // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t RegisterOpportunityPoint(struct AS_OpportunityPoint* OpportunityPoint, struct FTransform PointTransform, struct UObject* inUserData); // Function Scavenger.S_GameMode.RegisterOpportunityPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RecordTeamRankings(); // Function Scavenger.S_GameMode.RecordTeamRankings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PreDropshipTakeoff(); // Function Scavenger.S_GameMode.PreDropshipTakeoff // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostDropshipTakeoff(); // Function Scavenger.S_GameMode.PostDropshipTakeoff // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Play2DSoundOnTeam(int32_t TeamIndex, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Scavenger.S_GameMode.Play2DSoundOnTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Play2DSoundOnAllClients(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Scavenger.S_GameMode.Play2DSoundOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PayOutPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.PayOutPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnStatsComponentStateChange(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_GameMode.OnStatsComponentStateChange // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_WorkerMatchTelemetryIds(struct FS_MatchTelemetryIds lastMatchTelemetryIds); // Function Scavenger.S_GameMode.OnRep_WorkerMatchTelemetryIds // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyWholeTeamDowned_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_EventParameterVariant finalDownedPlayer, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyWholeTeamDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyScoreEvent_BP(struct AS_PlayerController* PlayerController, int32_t Score); // Function Scavenger.S_GameMode.NotifyScoreEvent_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPreTeamWipe_BP(struct AS_PlayerCharacter* lastPlayer, struct TArray<struct AS_PlayerController*> teamControllers, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPreTeamWipe_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPostTeamWipe_BP(struct AS_PlayerCharacter* lastPlayer, struct TArray<struct AS_PlayerController*> teamControllers, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPostTeamWipe_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerTerminal_BP(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant terminalPlayer, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPlayerTerminal_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerRevived_BP(struct FS_EventParameterControllerVariant revivingController, struct FS_EventParameterVariant revivedPlayer, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPlayerRevived_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerOnlineDataAvailable_BP(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.NotifyPlayerOnlineDataAvailable_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogout_BP(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_GameMode.NotifyPlayerLogout_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogin_BP(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_GameMode.NotifyPlayerLogin_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerLeftGame_BP(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_GameMode.NotifyPlayerLeftGame_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerKilledInCocoon_BP(struct FS_EventParameterControllerVariant KilledPlayerController, struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_GameMode.NotifyPlayerKilledInCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerKilled_BP(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPlayerKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemUsed_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.NotifyPlayerItemUsed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemUnequipped_BP(struct FS_EventParameterControllerVariant PlayerController, enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.NotifyPlayerItemUnequipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemEquipped_BP(struct FS_EventParameterControllerVariant PlayerController, enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.NotifyPlayerItemEquipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemDropped_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_GameMode.NotifyPlayerItemDropped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemDestroyed_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.NotifyPlayerItemDestroyed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemAcquired_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.NotifyPlayerItemAcquired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerInteracted_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_GameMode.NotifyPlayerInteracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerFreedFromCocoon_BP(struct FS_EventParameterControllerVariant FreedPlayerController, struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_GameMode.NotifyPlayerFreedFromCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerExtracting_BP(struct FS_EventParameterControllerVariant ExtractingPlayerController, struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_GameMode.NotifyPlayerExtracting_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerExtracted_BP(struct FS_EventParameterControllerVariant ExtractedPlayerController, struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_GameMode.NotifyPlayerExtracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerDowned_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_EventParameterVariant downedPlayer, int32_t TeamIndex); // Function Scavenger.S_GameMode.NotifyPlayerDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerCocooned_BP(struct FS_EventParameterControllerVariant CocoonedPlayerController, struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_GameMode.NotifyPlayerCocooned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInventoryInitialized_BP(struct US_InventoryComponent* InventoryComponent); // Function Scavenger.S_GameMode.NotifyInventoryInitialized_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGameplayEvent_BP(enum class ES_GameplayEvent GameplayEvent, struct FS_EventParameterVariant InstigatingActor); // Function Scavenger.S_GameMode.NotifyGameplayEvent_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGameModeEnded_BP(); // Function Scavenger.S_GameMode.NotifyGameModeEnded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEquipmentInitialized_BP(struct US_EquipmentComponent* EquipmentComponent); // Function Scavenger.S_GameMode.NotifyEquipmentInitialized_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAISpawned_BP(struct FS_EventParameterControllerVariant AIController); // Function Scavenger.S_GameMode.NotifyAISpawned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorTerminal_BP(struct FS_EventParameterControllerVariant TerminatingController, struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_GameMode.NotifyActorTerminal_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorStatsStateChanged_BP(struct FS_EventParameterControllerVariant ChangeCausingController, struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_GameMode.NotifyActorStatsStateChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorRevived_BP(struct FS_EventParameterControllerVariant revivingController, struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_GameMode.NotifyActorRevived_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorResurrected_BP(struct FS_EventParameterControllerVariant resurrectingController, struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_GameMode.NotifyActorResurrected_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorKilled_BP(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_GameMode.NotifyActorKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorDowned_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_GameMode.NotifyActorDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorDamaged_BP(struct FS_EventParameterControllerVariant DamagingController, struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_GameMode.NotifyActorDamaged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MoveToMatchEnd_BP(); // Function Scavenger.S_GameMode.MoveToMatchEnd_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void JumpToAISpawnPhase(enum class ES_AISpawnPhase Phase, bool useSkippedTime); // Function Scavenger.S_GameMode.JumpToAISpawnPhase // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsPlayerControllerLiving(struct APlayerController* PlayerController, struct FS_StatStatesCountedAsLiving statStatesThatCountAsLiving); // Function Scavenger.S_GameMode.IsPlayerControllerLiving // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleMatchPhaseChange(struct FString matchPhase); // Function Scavenger.S_GameMode.HandleMatchPhaseChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetTotalNumLivingPlayers(struct FS_StatStatesCountedAsLiving statStatesThatCountAsLiving); // Function Scavenger.S_GameMode.GetTotalNumLivingPlayers // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_PlayerStart* GetPlayerStart(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.GetPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerRadarRespawnDelayTime(); // Function Scavenger.S_GameMode.GetPlayerRadarRespawnDelayTime // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	int32_t GetNumPlayersOnTeam(int32_t TeamIndex); // Function Scavenger.S_GameMode.GetNumPlayersOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetNumLivingPlayersOnTeam(int32_t TeamIndex, struct FS_StatStatesCountedAsLiving statStatesThatCountAsLiving); // Function Scavenger.S_GameMode.GetNumLivingPlayersOnTeam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetItemCountOnTeamByItemData(int32_t TeamIndex, struct US_ItemData* ItemData); // Function Scavenger.S_GameMode.GetItemCountOnTeamByItemData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetGameSleepMode(); // Function Scavenger.S_GameMode.GetGameSleepMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetFinalizedPlayerReportCard(struct FName PlayerId, struct FS_GameReportCardForPlayer outReportCard); // Function Scavenger.S_GameMode.GetFinalizedPlayerReportCard // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_GameModeEventHistory* GetEventHistory(); // Function Scavenger.S_GameMode.GetEventHistory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_AISpawnPhase GetCurrentAISpawnPhase(); // Function Scavenger.S_GameMode.GetCurrentAISpawnPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetClosestSetOfPlayerStartsFromSeedLocation(int32_t numberOfTotalPlayerStarts, struct FVector seedLocation, struct TArray<struct AS_PlayerStart*> outPlayerStarts, bool use3DDistance); // Function Scavenger.S_GameMode.GetClosestSetOfPlayerStartsFromSeedLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetClosestSetOfPlayerStartsFromSeed(int32_t numberOfTotalPlayerStarts, struct AS_PlayerStart* startSeed, struct TArray<struct AS_PlayerStart*> outPlayerStarts, bool use3DDistance); // Function Scavenger.S_GameMode.GetClosestSetOfPlayerStartsFromSeed // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetClosestSetOfPlayerStarts(int32_t numberOfPlayerStarts, struct TArray<struct AS_PlayerStart*> outPlayerStarts, bool use3DDistance); // Function Scavenger.S_GameMode.GetClosestSetOfPlayerStarts // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_PlayerClassData* GetClassDataOverrideForJoiningPlayer(struct AS_PlayerControllerBase* PlayerController, int32_t TeamIndex, bool outApplyOverride); // Function Scavenger.S_GameMode.GetClassDataOverrideForJoiningPlayer // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FVector GetAverageLocationOfTeam(int32_t TeamIndex); // Function Scavenger.S_GameMode.GetAverageLocationOfTeam // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetAdditionalScore_BP(struct AS_PlayerState* PlayerState); // Function Scavenger.S_GameMode.GetAdditionalScore_BP // (Event|Public|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
	void GetAdditionalLootForDeadAI_BP(struct AS_AICharacter* aiCharacter, struct TArray<struct FS_ItemState> outAdditionalItems); // Function Scavenger.S_GameMode.GetAdditionalLootForDeadAI_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void GameModeEnded(); // Function Scavenger.S_GameMode.GameModeEnded // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FindSurvivingTeams(struct TArray<int32_t> outSurvivingTeams); // Function Scavenger.S_GameMode.FindSurvivingTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool FindActorSpawnPointNearPlayer(struct AS_PlayerController* PlayerController, struct AActor* ActorClass, struct FTransform outSpawnPointTransform); // Function Scavenger.S_GameMode.FindActorSpawnPointNearPlayer // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FinalizeTeamExfil(int32_t TeamIndex); // Function Scavenger.S_GameMode.FinalizeTeamExfil // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FinalizeReportCardForPlayerLeavingEarly(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.FinalizeReportCardForPlayerLeavingEarly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FinalizeReportCardForDisconnectingPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GameMode.FinalizeReportCardForDisconnectingPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ExecuteGameplayEventOnActorAuthorityServer(struct FName EventName, struct AActor* Actor, struct UObject* objectParameter, float floatParameter1, float floatParameter2); // Function Scavenger.S_GameMode.ExecuteGameplayEventOnActorAuthorityServer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventPlayerLogout(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_GameMode.EventPlayerLogout // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerLogin(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_GameMode.EventPlayerLogin // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerKilledInCocoon(struct FS_EventParameterControllerVariant PlayerController, struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_GameMode.EventPlayerKilledInCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemUsed(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.EventPlayerItemUsed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemUnequipped(struct FS_EventParameterControllerVariant PlayerController, enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.EventPlayerItemUnequipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemEquipped(struct FS_EventParameterControllerVariant PlayerController, enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.EventPlayerItemEquipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemDropped(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_GameMode.EventPlayerItemDropped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemDestroyed(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.EventPlayerItemDestroyed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerItemAcquired(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_GameMode.EventPlayerItemAcquired // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerInteracted(struct FS_EventParameterControllerVariant PlayerController, struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_GameMode.EventPlayerInteracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerFreedFromCocoon(struct FS_EventParameterControllerVariant PlayerController, struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_GameMode.EventPlayerFreedFromCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerExtracting(struct FS_EventParameterControllerVariant PlayerController, struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_GameMode.EventPlayerExtracting // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerExtracted(struct FS_EventParameterControllerVariant PlayerController, struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_GameMode.EventPlayerExtracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventPlayerCocooned(struct FS_EventParameterControllerVariant PlayerController, struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_GameMode.EventPlayerCocooned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventGameplayEvent(enum class ES_GameplayEvent GameplayEvent, struct FS_EventParameterVariant InstigatingActor); // Function Scavenger.S_GameMode.EventGameplayEvent // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventGameplayAuthority_BP(struct FName EventName, struct AActor* Actor, struct UObject* objectParameter, float floatParameter1, float floatParameter2); // Function Scavenger.S_GameMode.EventGameplayAuthority_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void EventAISpawned(struct FS_EventParameterControllerVariant AIController); // Function Scavenger.S_GameMode.EventAISpawned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorTerminal(struct FS_EventParameterControllerVariant TerminatingController, struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_GameMode.EventActorTerminal // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorStatsStateChanged(struct FS_EventParameterControllerVariant ChangeCausingController, struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_GameMode.EventActorStatsStateChanged // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorRevived(struct FS_EventParameterControllerVariant revivingController, struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_GameMode.EventActorRevived // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorResurrected(struct FS_EventParameterControllerVariant resurrectingController, struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_GameMode.EventActorResurrected // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorKilled(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_GameMode.EventActorKilled // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorDowned(struct FS_EventParameterControllerVariant DowningController, struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_GameMode.EventActorDowned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventActorDamaged(struct FS_EventParameterControllerVariant DamagingController, struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_GameMode.EventActorDamaged // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void DestroyAllOtherPlayerStarts(struct TArray<struct AS_PlayerStart*> playerStartsToKeep); // Function Scavenger.S_GameMode.DestroyAllOtherPlayerStarts // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Cheat_RemoveGameTimer(); // Function Scavenger.S_GameMode.Cheat_RemoveGameTimer // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void Cheat_EnableAlwaysRez(); // Function Scavenger.S_GameMode.Cheat_EnableAlwaysRez // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void Cheat_CompleteObjective(); // Function Scavenger.S_GameMode.Cheat_CompleteObjective // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void AddScoreToPlayer(struct AS_PlayerController* PlayerController, int32_t Score); // Function Scavenger.S_GameMode.AddScoreToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameModeEventHistory
// Size: 0x50 (Inherited: 0x28)
struct US_GameModeEventHistory : UObject {
	char pad_28[0x28]; // 0x28(0x28)

	void RecordGameEventForTeam(enum class ES_GameModeEvent EventType, int32_t TeamIndex, float floatAmount, int32_t intAmount, struct FName NameData, struct APlayerController* otherPlayer); // Function Scavenger.S_GameModeEventHistory.RecordGameEventForTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RecordGameEventForPlayer(enum class ES_GameModeEvent EventType, struct APlayerController* sourcePlayer, float floatAmount, int32_t intAmount, struct FName NameData, struct APlayerController* otherPlayer); // Function Scavenger.S_GameModeEventHistory.RecordGameEventForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RecordGameEvent(enum class ES_GameModeEvent EventType, float floatAmount, int32_t intAmount, struct FName NameData, struct APlayerController* otherPlayer); // Function Scavenger.S_GameModeEventHistory.RecordGameEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DebugLogHistory(); // Function Scavenger.S_GameModeEventHistory.DebugLogHistory // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LeaderboardRankingSettings
// Size: 0x60 (Inherited: 0x30)
struct US_LeaderboardRankingSettings : UDataAsset {
	struct TArray<struct FS_LeaderboardRankingRule> LeaderboardRankingRules; // 0x30(0x10)
	struct FS_LeaderboardRankingRequirement LeaderboardRankingRequirements; // 0x40(0x20)
};

// Class Scavenger.S_GameModeMainMenu
// Size: 0x388 (Inherited: 0x388)
struct AS_GameModeMainMenu : AGameMode {
};

// Class Scavenger.S_GameModeRewardProcessor
// Size: 0x98 (Inherited: 0x28)
struct US_GameModeRewardProcessor : UObject {
	char pad_28[0x70]; // 0x28(0x70)
};

// Class Scavenger.S_GamepadLayout
// Size: 0xa8 (Inherited: 0x30)
struct US_GamepadLayout : UDataAsset {
	struct FText DisplayName; // 0x30(0x18)
	struct TMap<struct FKey, struct FS_GamepadButtonToGameActionMapping> ButtonToGameActionMappings; // 0x48(0x50)
	struct TArray<struct FS_GamepadMultiButtonToGameActionMapping> MultiButtonMappings; // 0x98(0x10)
};

// Class Scavenger.S_GamePiecesManager
// Size: 0xc0 (Inherited: 0xb0)
struct US_GamePiecesManager : UActorComponent {
	struct TArray<struct AS_RegionVolume*> m_RegionVolumes; // 0xb0(0x10)

	struct AS_RegionVolume* FindRegionForPoint(struct FVector testPoint, struct TArray<struct AS_RegionVolume*> Regions); // Function Scavenger.S_GamePiecesManager.FindRegionForPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameplayEffectVolume
// Size: 0x290 (Inherited: 0x288)
struct AS_GameplayEffectVolume : AActor {
	struct US_GameplayEffectVolumeComponent* GameplayEffectVolumeComponent; // 0x288(0x08)
};

// Class Scavenger.S_GameplayEffectTeamVolume
// Size: 0x2a8 (Inherited: 0x290)
struct AS_GameplayEffectTeamVolume : AS_GameplayEffectVolume {
	char pad_290[0x8]; // 0x290(0x08)
	enum class ES_ScavAITeams DefaultTeamType; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	int32_t DefaultPlayerTeamIndex; // 0x29c(0x04)
	char pad_2A0[0x8]; // 0x2a0(0x08)

	void SetTeam(enum class ES_ScavAITeams teamType, int32_t playerTeamIndex); // Function Scavenger.S_GameplayEffectTeamVolume.SetTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_ScavAITeams GetTeamType(); // Function Scavenger.S_GameplayEffectTeamVolume.GetTeamType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerTeamIndex(); // Function Scavenger.S_GameplayEffectTeamVolume.GetPlayerTeamIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameplayEffectPhysicsVolume
// Size: 0x3b8 (Inherited: 0x2d0)
struct AS_GameplayEffectPhysicsVolume : APhysicsVolume {
	struct FMulticastInlineDelegate OnGameplayEffectApplied; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnGameplayEffectRemoved; // 0x2e0(0x10)
	bool bEnabled; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct FS_GameplayEffectVolumeParameters Parameters; // 0x2f8(0x18)
	char pad_310[0xa8]; // 0x310(0xa8)

	void SetEnabled(bool Enabled); // Function Scavenger.S_GameplayEffectPhysicsVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetEnabled(); // Function Scavenger.S_GameplayEffectPhysicsVolume.GetEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameplayEffectVolumeComponent
// Size: 0x5d0 (Inherited: 0x4e0)
struct US_GameplayEffectVolumeComponent : US_VolumeComponent {
	struct FMulticastInlineDelegate OnGameplayEffectApplied; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnGameplayEffectRemoved; // 0x4f0(0x10)
	bool bEnabled; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)
	struct FS_GameplayEffectVolumeParameters Parameters; // 0x508(0x18)
	char pad_520[0xb0]; // 0x520(0xb0)

	void SetEnabled(bool Enabled); // Function Scavenger.S_GameplayEffectVolumeComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetEnabled(); // Function Scavenger.S_GameplayEffectVolumeComponent.GetEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameResolutionPhase
// Size: 0x260 (Inherited: 0x58)
struct US_GameResolutionPhase : US_PostMatchPhase {
	struct TMap<enum class ES_ResolutionState, SoftClassProperty> GameResolutionWidgets; // 0x58(0x50)
	float SecondsUntilMatchEnd; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct US_WidgetGameResolutionSubscreen* m_gameResolutionSubscreen; // 0xb0(0x08)
	struct FS_MatchRecord m_matchRecord; // 0xb8(0x180)
	struct FS_TeamScoreSnapshot m_teamScoreSnapshot; // 0x238(0x20)
	struct FTimerHandle m_matchEndTimer; // 0x258(0x08)

	void HandleOnMatchEndTimerEnded(); // Function Scavenger.S_GameResolutionPhase.HandleOnMatchEndTimerEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleGameResolutionWidgetCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_GameResolutionPhase.HandleGameResolutionWidgetCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameStateBase
// Size: 0x578 (Inherited: 0x318)
struct AS_GameStateBase : AGameState {
	char pad_318[0x10]; // 0x318(0x10)
	float ServerTimings[0xb]; // 0x328(0x2c)
	float ServerCounters[0xd]; // 0x354(0x34)
	int32_t ServerActorCount; // 0x388(0x04)
	int32_t ServerPlayerControllerCount; // 0x38c(0x04)
	int32_t ServerAIControllerCount; // 0x390(0x04)
	int32_t ServerProcessedPerceptionCount; // 0x394(0x04)
	int32_t ServerTracesPerceptionCount; // 0x398(0x04)
	int32_t ServerTotalPerceptionCount; // 0x39c(0x04)
	int32_t ServerAISpawnPhase; // 0x3a0(0x04)
	float ServerAIThreshold; // 0x3a4(0x04)
	bool m_isBuildingNavMesh; // 0x3a8(0x01)
	char pad_3A9[0x3]; // 0x3a9(0x03)
	float m_timeSpentBuildingNavMesh; // 0x3ac(0x04)
	bool m_isNavMeshLocked; // 0x3b0(0x01)
	char pad_3B1[0x17]; // 0x3b1(0x17)
	uint32_t m_replicatedTickCount; // 0x3c8(0x04)
	char pad_3CC[0x4]; // 0x3cc(0x04)
	struct TArray<struct FS_TeamDefinition> TeamDefinitions; // 0x3d0(0x10)
	struct US_ItemData* SpecialItemData[0x3]; // 0x3e0(0x18)
	int32_t m_numberOfTeams; // 0x3f8(0x04)
	float m_serverRealTimeSeconds; // 0x3fc(0x04)
	char pad_400[0x58]; // 0x400(0x58)
	struct US_AITickManager* m_AITickManager; // 0x458(0x08)
	struct UDataTable* PlayerClassMetadataTable; // 0x460(0x08)
	struct UDataTable* RecipeMetadataTable; // 0x468(0x08)
	struct UDataTable* ItemMetadataTable; // 0x470(0x08)
	char pad_478[0xf0]; // 0x478(0xf0)
	enum class ES_MixStageExclusive m_exclusiveAudioMixState; // 0x568(0x01)
	char pad_569[0x7]; // 0x569(0x07)
	struct US_ManagedSoundBankComponent* m_managedSoundBankComponent; // 0x570(0x08)

	void SetNumberOfTeams(int32_t Number); // Function Scavenger.S_GameStateBase.SetNumberOfTeams // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetExclusiveAudioMixState(enum class ES_MixStageExclusive NewMixState); // Function Scavenger.S_GameStateBase.SetExclusiveAudioMixState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestEndTargetsExecution(struct AS_CharacterBase* ExecutionTarget); // Function Scavenger.S_GameStateBase.RequestEndTargetsExecution // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void RequestEndExecutorsExecution(struct AS_CharacterBase* ExecutionTarget); // Function Scavenger.S_GameStateBase.RequestEndExecutorsExecution // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void RequestBeginExecutionTargetMontage(struct AS_CharacterBase* ExecutionTarget, struct AS_CharacterBase* executor, struct UAnimMontage* Montage, struct FName montageTableRowId); // Function Scavenger.S_GameStateBase.RequestBeginExecutionTargetMontage // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void RemovePlayerFromTeam(struct AS_PlayerStateBase* PlayerState, int32_t TeamIndex); // Function Scavenger.S_GameStateBase.RemovePlayerFromTeam // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTickCount(); // Function Scavenger.S_GameStateBase.NotifyReplicatedTickCount // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerRealTimeSeconds(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerRealTimeSeconds // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerPlayerControllerCount(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerPlayerControllerCount // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerPerceptionTraces(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerPerceptionTraces // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerPerceptionTotal(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerPerceptionTotal // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerPerceptionProcessed(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerPerceptionProcessed // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerCounters(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerCounters // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerAvgTickTime(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerAvgTickTime // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerAIThreshold(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerAIThreshold // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerAISpawnPhase(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerAISpawnPhase // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerAIControllerCount(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerAIControllerCount // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerActorCount(); // Function Scavenger.S_GameStateBase.NotifyReplicatedServerActorCount // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExclusiveAudioMixState(); // Function Scavenger.S_GameStateBase.NotifyReplicatedExclusiveAudioMixState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool GetTeamDefinition(int32_t TeamIndex, struct FS_TeamDefinition outTeamDefinition); // Function Scavenger.S_GameStateBase.GetTeamDefinition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadataFromHandle_BP(struct TSoftObjectPtr<struct US_RecipeData> RecipeHandle, struct FS_RecipeMetadata OutMetadata); // Function Scavenger.S_GameStateBase.GetRecipeMetadataFromHandle_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPlayerClassMetadataFromHandle_BP(struct TSoftObjectPtr<struct US_PlayerClassData> PlayerClassHandle, struct FS_PlayerClassMetadata OutMetadata); // Function Scavenger.S_GameStateBase.GetPlayerClassMetadataFromHandle_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfTeams(); // Function Scavenger.S_GameStateBase.GetNumberOfTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetMaximumNumberOfTeams(); // Function Scavenger.S_GameStateBase.GetMaximumNumberOfTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ManagedSoundBankComponent* GetManagedSoundBankComponent(); // Function Scavenger.S_GameStateBase.GetManagedSoundBankComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetItemMetadataFromHandle_BP(struct TSoftObjectPtr<struct US_ItemData> ItemHandle, struct FS_ItemMetadata OutMetadata); // Function Scavenger.S_GameStateBase.GetItemMetadataFromHandle_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameState
// Size: 0xde0 (Inherited: 0x578)
struct AS_GameState : AS_GameStateBase {
	char pad_578[0x8]; // 0x578(0x08)
	struct FMulticastInlineDelegate OnNewLivePlayerCount; // 0x580(0x10)
	struct FMulticastInlineDelegate OnAnyTeamStateChanged; // 0x590(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerGodModeChanged; // 0x5a0(0x10)
	char pad_5B0[0x628]; // 0x5b0(0x628)
	enum class ES_FakeTeamDataMode m_fakeTeamDataMode; // 0xbd8(0x01)
	char pad_BD9[0x7]; // 0xbd9(0x07)
	struct UDataTable* m_fakeNamesDataSource; // 0xbe0(0x08)
	struct TArray<struct FString> LoadedFakeNames; // 0xbe8(0x10)
	char pad_BF8[0x58]; // 0xbf8(0x58)
	int32_t m_numberOfLivePlayers; // 0xc50(0x04)
	int32_t m_numberOfPlayers; // 0xc54(0x04)
	struct TArray<int32_t> m_scorePerPlayer; // 0xc58(0x10)
	struct TArray<struct FS_TeamGameState> m_gameStatePerTeam; // 0xc68(0x10)
	struct TArray<struct FS_TeamGameStaticState> m_gameStaticStatePerTeam; // 0xc78(0x10)
	int32_t m_scoreToWin; // 0xc88(0x04)
	int32_t m_timeRemaining; // 0xc8c(0x04)
	int32_t m_numberOfJoinedPlayers; // 0xc90(0x04)
	int32_t m_numberOfNeededPlayers; // 0xc94(0x04)
	struct US_TimeOfDayAndWeatherComponent* m_timeOfDayAndWeatherComponent; // 0xc98(0x08)
	struct US_VFXManagerComponent* m_vfxManagerComponent; // 0xca0(0x08)
	struct US_SkinningManagerComponent* m_skinningManagerComponent; // 0xca8(0x08)
	struct US_AutoPingManagerComponent* m_autoPingManagerComponent; // 0xcb0(0x08)
	struct US_AmbianceSystemComponent* m_ambianceSystemComponent; // 0xcb8(0x08)
	struct US_MapManager* m_mapManager; // 0xcc0(0x08)
	struct FS_WeatherState m_currentWeatherState; // 0xcc8(0x10)
	char pad_CD8[0x5c]; // 0xcd8(0x5c)
	struct FS_TeamBelongingDamageMultipliers m_teamBelongingDamageMultipliers; // 0xd34(0x2c)
	struct US_ActionConfiguration* m_actionConfiguration; // 0xd60(0x08)
	struct FS_WeatherState InitialWeatherState; // 0xd68(0x10)
	float ScrapTimeInSeconds; // 0xd78(0x04)
	float ItemDropTimeInSeconds; // 0xd7c(0x04)
	struct UDataTable* m_weaponTuningsTable; // 0xd80(0x08)
	struct UAnimMontage* ConsumableMontageDefault; // 0xd88(0x08)
	struct UAnimMontage* ConsumableMontageDefaultsByConsumablePackageType[0x8]; // 0xd90(0x40)
	bool IsDropshipDeparting; // 0xdd0(0x01)
	char pad_DD1[0x3]; // 0xdd1(0x03)
	float m_gameEndTimestamp; // 0xdd4(0x04)
	struct US_ProjectileObjectPool* m_projectileObjectPool; // 0xdd8(0x08)

	void UpdateTeamPlacements(); // Function Scavenger.S_GameState.UpdateTeamPlacements // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateLivePlayerCount(); // Function Scavenger.S_GameState.UpdateLivePlayerCount // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetWeatherState(struct FS_WeatherState weatherState); // Function Scavenger.S_GameState.SetWeatherState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamShardsHeld(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.SetTeamShardsHeld // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamShardsExtracted(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.SetTeamShardsExtracted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamShardsBanked(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.SetTeamShardsBanked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamResurrectionTokensEarned(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.SetTeamResurrectionTokensEarned // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamHasExfiled(int32_t TeamIndex, bool hasExfiled); // Function Scavenger.S_GameState.SetTeamHasExfiled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamEliminationTime(int32_t TeamIndex, float gameTimeSeconds); // Function Scavenger.S_GameState.SetTeamEliminationTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetScoreToWin(int32_t Score); // Function Scavenger.S_GameState.SetScoreToWin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerScore(int32_t PlayerIndex, int32_t Score); // Function Scavenger.S_GameState.SetPlayerScore // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsTeamJoinable(int32_t TeamIndex, bool isJoinable); // Function Scavenger.S_GameState.SetIsTeamJoinable // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetGameEndTimestamp(float Timestamp); // Function Scavenger.S_GameState.SetGameEndTimestamp // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedGodMode(); // Function Scavenger.S_GameState.NotifyReplicatedGodMode // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedGameStatePerTeam(); // Function Scavenger.S_GameState.NotifyReplicatedGameStatePerTeam // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFakeTeamsSettings(); // Function Scavenger.S_GameState.NotifyReplicatedFakeTeamsSettings // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCurrentWeatherState(); // Function Scavenger.S_GameState.NotifyReplicatedCurrentWeatherState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyNumberOfLivePlayers(); // Function Scavenger.S_GameState.NotifyNumberOfLivePlayers // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsPawnBeingSpectated(struct APawn* targetPawn); // Function Scavenger.S_GameState.IsPawnBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPawnBeingLocallySpectated(struct APawn* targetPawn); // Function Scavenger.S_GameState.IsPawnBeingLocallySpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandlePreDropShipTakeoff(); // Function Scavenger.S_GameState.HandlePreDropShipTakeoff // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandlePostDropShipTakeoff(); // Function Scavenger.S_GameState.HandlePostDropShipTakeoff // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnCurrentXpChangedDelta(struct AS_PlayerController* PlayerController, int32_t XPDelta); // Function Scavenger.S_GameState.HandleOnCurrentXpChangedDelta // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleGamePhaseSet(struct FString matchPhaseEnumAsString, struct FString ChangeReason, float ChangeReasonDetail); // Function Scavenger.S_GameState.HandleGamePhaseSet // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleGameModeEnded(); // Function Scavenger.S_GameState.HandleGameModeEnded // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleComponentCreatedPhysics(struct UActorComponent* Component); // Function Scavenger.S_GameState.HandleComponentCreatedPhysics // (Final|Native|Static|Public) // @ game+0xffff8008e4a10000
	void HandleActorKilled(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_GameState.HandleActorKilled // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	struct FS_WeatherState GetWeatherState(); // Function Scavenger.S_GameState.GetWeatherState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTimeRemaining(); // Function Scavenger.S_GameState.GetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTeamStaticState(int32_t TeamIndex, struct FS_TeamGameStaticState outTeamState); // Function Scavenger.S_GameState.GetTeamStaticState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTeamState(int32_t TeamIndex, struct FS_TeamGameState outTeamState); // Function Scavenger.S_GameState.GetTeamState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamShardsHeld(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamShardsHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamShardsExtracted(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamShardsExtracted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamShardsBanked(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamShardsBanked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamScrapCollected_BP(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamScrapCollected_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	int32_t GetTeamScore(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamResurrectionTokensEarned(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamResurrectionTokensEarned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<int32_t> GetTeamPlacementOrder(); // Function Scavenger.S_GameState.GetTeamPlacementOrder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamPlacement(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamPlacement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamObjectivesCompleted(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamObjectivesCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTeamIsSolo(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamIsSolo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTeamIsAlive(int32_t TeamIndex); // Function Scavenger.S_GameState.GetTeamIsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTalentMetadata_BP(struct FName talentId, struct FS_TalentMetadata outTalentMetadata); // Function Scavenger.S_GameState.GetTalentMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetScoreToWin(); // Function Scavenger.S_GameState.GetScoreToWin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadata_BP(struct FName RecipeId, struct FS_RecipeMetadata outRecipeMetadata); // Function Scavenger.S_GameState.GetRecipeMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPlayerStaticStateByIndex(int32_t PlayerIndex, struct FS_PlayerGameStaticState outPlayerStaticState); // Function Scavenger.S_GameState.GetPlayerStaticStateByIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_PlayerController*> GetPlayersOnTeam(int32_t TeamIndex); // Function Scavenger.S_GameState.GetPlayersOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerShardsBanked(int32_t PlayerIndex, enum class ES_BankingMethod bankingMethod); // Function Scavenger.S_GameState.GetPlayerShardsBanked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetPlayerScore(int32_t PlayerIndex); // Function Scavenger.S_GameState.GetPlayerScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumExplorersExtracted(int32_t TeamIndex); // Function Scavenger.S_GameState.GetNumExplorersExtracted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfPlayersEverOnTeam(int32_t TeamIndex); // Function Scavenger.S_GameState.GetNumberOfPlayersEverOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfPlayers(); // Function Scavenger.S_GameState.GetNumberOfPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfConnectedPlayersOnTeam(int32_t TeamIndex); // Function Scavenger.S_GameState.GetNumberOfConnectedPlayersOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfAliveTeams(); // Function Scavenger.S_GameState.GetNumberOfAliveTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetLocalSpectators(struct TArray<struct AS_BasicSpectatorPlayerPawn*> outLocalSpectators); // Function Scavenger.S_GameState.GetLocalSpectators // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetItemRarityColor(struct APlayerController* PlayerController, enum class ES_ItemRarity Rarity); // Function Scavenger.S_GameState.GetItemRarityColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsTeamJoinable(int32_t TeamIndex); // Function Scavenger.S_GameState.GetIsTeamJoinable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetGameplayEffectMetadata_BP(struct FGameplayTag gameplayEffectTag, struct FS_GameplayEffectMetadata outGameplayEffectMetadata); // Function Scavenger.S_GameState.GetGameplayEffectMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetGameEndTimestamp(); // Function Scavenger.S_GameState.GetGameEndTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ActionConfiguration* GetActionConfiguration(); // Function Scavenger.S_GameState.GetActionConfiguration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_GameScoreSnapshot GenerateScoreSnapshot(); // Function Scavenger.S_GameState.GenerateScoreSnapshot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FinalizeTeamPlacements(); // Function Scavenger.S_GameState.FinalizeTeamPlacements // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTeamShardsHeld(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddTeamShardsHeld // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTeamShardsExtracted(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddTeamShardsExtracted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTeamShardsBanked(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddTeamShardsBanked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTeamResurrectionTokensEarned(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddTeamResurrectionTokensEarned // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTeamObjectivesCompleted(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddTeamObjectivesCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerShardsLeftBehind(int32_t PlayerIndex, int32_t Count); // Function Scavenger.S_GameState.AddPlayerShardsLeftBehind // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerShardsBanked(int32_t PlayerIndex, int32_t Count, enum class ES_BankingMethod bankingMethod); // Function Scavenger.S_GameState.AddPlayerShardsBanked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerScore(int32_t PlayerIndex, int32_t Score); // Function Scavenger.S_GameState.AddPlayerScore // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddExplorersExtracted(int32_t TeamIndex, int32_t Count); // Function Scavenger.S_GameState.AddExplorersExtracted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameStateMainMenu
// Size: 0x580 (Inherited: 0x578)
struct AS_GameStateMainMenu : AS_GameStateBase {
	struct US_SkinningManagerComponent* m_skinningManagerComponent; // 0x578(0x08)
};

// Class Scavenger.S_GameTransitionManager
// Size: 0x68 (Inherited: 0x28)
struct US_GameTransitionManager : UObject {
	struct FMulticastInlineDelegate OnTransition; // 0x28(0x10)
	char pad_38[0x28]; // 0x38(0x28)
	struct AS_PlayerControllerBase* m_playerController; // 0x60(0x08)

	void StartGame(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_GameTransitionManager.StartGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowSimpleMessagePrompt(struct US_WidgetMessagePrompt* WidgetClass, struct FName MessageId, enum class ES_GameLocation SuccessTransition); // Function Scavenger.S_GameTransitionManager.ShowSimpleMessagePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowMessagePromptWithDelegates(struct US_WidgetMessagePrompt* WidgetClass, struct FName MessageId, struct FDelegate OnAccept, struct FDelegate OnReject); // Function Scavenger.S_GameTransitionManager.ShowMessagePromptWithDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReturnFromGameMode(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_GameTransitionManager.ReturnFromGameMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QuitGame(); // Function Scavenger.S_GameTransitionManager.QuitGame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenGameModeLevel(enum class ES_GameMode GameMode); // Function Scavenger.S_GameTransitionManager.OpenGameModeLevel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleRejectWithDelegate(); // Function Scavenger.S_GameTransitionManager.HandleRejectWithDelegate // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLaunchIntoMenu(); // Function Scavenger.S_GameTransitionManager.HandleLaunchIntoMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleAcceptWithTransition(); // Function Scavenger.S_GameTransitionManager.HandleAcceptWithTransition // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAcceptWithDelegate(); // Function Scavenger.S_GameTransitionManager.HandleAcceptWithDelegate // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void Goto(enum class ES_GameLocation Location); // Function Scavenger.S_GameTransitionManager.Goto // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameUserSettings
// Size: 0x130 (Inherited: 0x120)
struct US_GameUserSettings : UGameUserSettings {
	float Gamma; // 0x120(0x04)
	enum class ES_SupportedRHIType PreferredRHIType; // 0x124(0x01)
	enum class ES_ResolutionScalingMode ResolutionScalingMode; // 0x125(0x01)
	enum class ES_DlssMode DLSSMode; // 0x126(0x01)
	char pad_127[0x1]; // 0x127(0x01)
	uint32_t ScavVersion; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)

	void UpdateScavVersion(); // Function Scavenger.S_GameUserSettings.UpdateScavVersion // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetResolutionScalingMode(enum class ES_ResolutionScalingMode InResolutionScalingMode); // Function Scavenger.S_GameUserSettings.SetResolutionScalingMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPreferredRHIType(enum class ES_SupportedRHIType InPreferredRHIType); // Function Scavenger.S_GameUserSettings.SetPreferredRHIType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetGamma(float gammaLevel, bool applyImmediately); // Function Scavenger.S_GameUserSettings.SetGamma // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsScavVersionUpToDate(); // Function Scavenger.S_GameUserSettings.IsScavVersionUpToDate // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_ResolutionScalingMode GetResolutionScalingMode(); // Function Scavenger.S_GameUserSettings.GetResolutionScalingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SupportedRHIType GetPreferredRHIType(); // Function Scavenger.S_GameUserSettings.GetPreferredRHIType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetGamma(); // Function Scavenger.S_GameUserSettings.GetGamma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SupportedRHIType GetCurrentRHIType(); // Function Scavenger.S_GameUserSettings.GetCurrentRHIType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GameViewportClient
// Size: 0x390 (Inherited: 0x360)
struct US_GameViewportClient : UGameViewportClient {
	struct UCurveFloat* FadeCurve; // 0x360(0x08)
	struct FMulticastInlineDelegate OnFadeFinished; // 0x368(0x10)
	char pad_378[0x18]; // 0x378(0x18)
};

// Class Scavenger.S_GenericLocationVolume
// Size: 0x2b0 (Inherited: 0x288)
struct AS_GenericLocationVolume : AActor {
	struct FS_NamedLocationMetadataTableRowReference MetaData; // 0x288(0x20)
	struct US_OverheadMapIconComponent* overheadIconComponent; // 0x2a8(0x08)

	bool GetLocationMetadata_BP(struct FS_NamedLocationMetadata OutLocationMetadata); // Function Scavenger.S_GenericLocationVolume.GetLocationMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GlobalHelperFunctions
// Size: 0x28 (Inherited: 0x28)
struct US_GlobalHelperFunctions : UBlueprintFunctionLibrary {

	void SquadRemoveAIControllerIn(struct AS_AIController* AIController); // Function Scavenger.S_GlobalHelperFunctions.SquadRemoveAIControllerIn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float SquadGetStrengthOfLiving(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadGetStrengthOfLiving // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float SquadGetStrength(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadGetStrength // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t SquadGetMaxCount(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadGetMaxCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t SquadGetLivingCount(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadGetLivingCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SquadGetAIControllersIn(struct AS_GameMode* GameMode, struct FName Squad, struct TArray<struct AS_AIController*> controllers); // Function Scavenger.S_GlobalHelperFunctions.SquadGetAIControllersIn // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SquadErase(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadErase // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SquadClearAreas(struct AS_GameMode* GameMode, struct FName Squad); // Function Scavenger.S_GlobalHelperFunctions.SquadClearAreas // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SquadAddAIController(struct FName Squad, struct AS_AIController* AIController); // Function Scavenger.S_GlobalHelperFunctions.SquadAddAIController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SortPairsByValueDecending(struct TArray<struct FS_IntPair> pairs); // Function Scavenger.S_GlobalHelperFunctions.SortPairsByValueDecending // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SortPairsByValue(struct TArray<struct FS_IntPair> pairs); // Function Scavenger.S_GlobalHelperFunctions.SortPairsByValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AActor* SLOWGetClosestActorOfType(struct AActor* TestActor, struct AActor* ActorClass); // Function Scavenger.S_GlobalHelperFunctions.SLOWGetClosestActorOfType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct AActor*> SLOWGetActorsOfTypeWithinRadius(struct UObject* Context, struct AActor* ActorClass, float Radius, struct FVector Location, bool shouldSort); // Function Scavenger.S_GlobalHelperFunctions.SLOWGetActorsOfTypeWithinRadius // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRenderCustomDepthAndStencilValue(struct AActor* Actor, bool bRenderCustomDepth, char stencilValue, bool applyToChildren); // Function Scavenger.S_GlobalHelperFunctions.SetRenderCustomDepthAndStencilValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHardwareQualitySettingsByGroup(struct FString settingsGroup, int32_t scalabilityLevel); // Function Scavenger.S_GlobalHelperFunctions.SetHardwareQualitySettingsByGroup // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDropShipSpawnerClass(struct FSoftObjectPath ActorClass); // Function Scavenger.S_GlobalHelperFunctions.SetDropShipSpawnerClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetComponentTeammateOutline(struct UPrimitiveComponent* Component, char teammateIndex, bool bRenderIfOccluded); // Function Scavenger.S_GlobalHelperFunctions.SetComponentTeammateOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetComponentTargetingOutline(struct UPrimitiveComponent* Component, char ColorIndex, float Opacity); // Function Scavenger.S_GlobalHelperFunctions.SetComponentTargetingOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetComponentPickupOutline(struct UPrimitiveComponent* Component, enum class ES_ItemRarity Rarity, bool drawOutline, float Opacity); // Function Scavenger.S_GlobalHelperFunctions.SetComponentPickupOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetComponentBlockerOutline(struct UPrimitiveComponent* Component, bool particleMask); // Function Scavenger.S_GlobalHelperFunctions.SetComponentBlockerOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCanAffectNavigationGeneration(struct UActorComponent* Component, bool NewValue); // Function Scavenger.S_GlobalHelperFunctions.SetCanAffectNavigationGeneration // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAllVsibilityForArrayOfUUserWidget(struct TArray<struct UUserWidget*> widgets, enum class ESlateVisibility InVisibility); // Function Scavenger.S_GlobalHelperFunctions.SetAllVsibilityForArrayOfUUserWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActorTeammateOutline(struct AActor* Actor, char teammateIndex, bool bRenderIfOccluded); // Function Scavenger.S_GlobalHelperFunctions.SetActorTeammateOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActorTargetingOutline(struct AActor* Actor, char ColorIndex, float Opacity); // Function Scavenger.S_GlobalHelperFunctions.SetActorTargetingOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActorPickupOutline(struct AActor* Actor, enum class ES_ItemRarity Rarity, bool drawOutline, float Opacity); // Function Scavenger.S_GlobalHelperFunctions.SetActorPickupOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActorBlockerOutline(struct AActor* Actor, bool particleMask); // Function Scavenger.S_GlobalHelperFunctions.SetActorBlockerOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SeparateActors(struct TArray<struct AActor*> Actors, float minSeparation, float separationForce, int32_t MaxIterations); // Function Scavenger.S_GlobalHelperFunctions.SeparateActors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestExitDedicatedServer(bool Force, struct UObject* Context); // Function Scavenger.S_GlobalHelperFunctions.RequestExitDedicatedServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RegisterWithValidOverlord(struct AActor* Actor, struct AS_AIOverlordActor* outOverlord); // Function Scavenger.S_GlobalHelperFunctions.RegisterWithValidOverlord // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AController* ReallyGetController(struct APawn* Pawn); // Function Scavenger.S_GlobalHelperFunctions.ReallyGetController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool ProjectWorldToScreenAndClamp(struct AS_PlayerController* scavController, struct FVector WorldPosition, struct FVector2D OutScreenPosition); // Function Scavenger.S_GlobalHelperFunctions.ProjectWorldToScreenAndClamp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ObjectIsA_Fast(struct UObject* Object, SoftClassProperty objectClass); // Function Scavenger.S_GlobalHelperFunctions.ObjectIsA_Fast // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool ObjectIsA(struct UObject* Object, SoftClassProperty objectClass); // Function Scavenger.S_GlobalHelperFunctions.ObjectIsA // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void MoveToPosition(struct AS_PlayerController* PlayerController, struct FVector Location, struct FRotator Rotation); // Function Scavenger.S_GlobalHelperFunctions.MoveToPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MoveToActor(struct AS_PlayerController* PlayerController, struct FName actorName); // Function Scavenger.S_GlobalHelperFunctions.MoveToActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MountUpdatePak(struct FString UpdatePakPath); // Function Scavenger.S_GlobalHelperFunctions.MountUpdatePak // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void JitterActors(struct TArray<struct AActor*> Actors, struct FVector jitterRange); // Function Scavenger.S_GlobalHelperFunctions.JitterActors // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsUsingNullRHI(); // Function Scavenger.S_GlobalHelperFunctions.IsUsingNullRHI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsPlatformTypeConsole(enum class ES_Platform currentPlatformType); // Function Scavenger.S_GlobalHelperFunctions.IsPlatformTypeConsole // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsPlatform(enum class ES_Platform PlatformType); // Function Scavenger.S_GlobalHelperFunctions.IsPlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsDefaultPlatformTypeConsole(); // Function Scavenger.S_GlobalHelperFunctions.IsDefaultPlatformTypeConsole // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsConsoleVarSet(struct FString ConsoleVarName); // Function Scavenger.S_GlobalHelperFunctions.IsConsoleVarSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasValidUniqueNetIdForLocalPlayer(struct ULocalPlayer* LocalPlayer); // Function Scavenger.S_GlobalHelperFunctions.HasValidUniqueNetIdForLocalPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool HasValidUniqueNetIdForController(int32_t ControllerId); // Function Scavenger.S_GlobalHelperFunctions.HasValidUniqueNetIdForController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AActor* GetUltimateOwnerParentActorUtil(struct AActor* child, struct UObject* stopAtActorClass); // Function Scavenger.S_GlobalHelperFunctions.GetUltimateOwnerParentActorUtil // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AActor* GetUltimateAttachParentActor(struct AActor* child, struct UObject* stopAtActorClass); // Function Scavenger.S_GlobalHelperFunctions.GetUltimateAttachParentActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetTimeElapsedSinceServerTime(struct UObject* WorldContextObject, float ServerTime); // Function Scavenger.S_GlobalHelperFunctions.GetTimeElapsedSinceServerTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_Platform GetPlatformTypeFromName(struct FString PlatformName); // Function Scavenger.S_GlobalHelperFunctions.GetPlatformTypeFromName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_Platform GetPlatformType(); // Function Scavenger.S_GlobalHelperFunctions.GetPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetLocalTimeFromServerTime(struct UObject* WorldContextObject, float ServerTime); // Function Scavenger.S_GlobalHelperFunctions.GetLocalTimeFromServerTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_PlayerController*> GetLocalPlayerControllers(struct UObject* Context); // Function Scavenger.S_GlobalHelperFunctions.GetLocalPlayerControllers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_Platform GetInputPlatformType(struct FName activeInputDeviceName); // Function Scavenger.S_GlobalHelperFunctions.GetInputPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void GetHitInfoFromDamageEvent(struct FDamageEvent DamageEvent, struct AActor* InHitActor, struct FHitResult OutHitResult, struct FVector OutImpulseDir); // Function Scavenger.S_GlobalHelperFunctions.GetHitInfoFromDamageEvent // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AActor* GetDebugSelectedActor(struct AActor* contextActor); // Function Scavenger.S_GlobalHelperFunctions.GetDebugSelectedActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetConsoleVarValueAsString(struct FString ConsoleVarName); // Function Scavenger.S_GlobalHelperFunctions.GetConsoleVarValueAsString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void GetBoneHitInfoFromHitResult(struct FHitResult HitResult, struct FBoneHitInfo outBoneHitInfo); // Function Scavenger.S_GlobalHelperFunctions.GetBoneHitInfoFromHitResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UCameraComponent* FindPawnActiveCameraComponent(struct APawn* Pawn); // Function Scavenger.S_GlobalHelperFunctions.FindPawnActiveCameraComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_IntPair FindPairByKey(struct TArray<struct FS_IntPair> pairs, int32_t Key); // Function Scavenger.S_GlobalHelperFunctions.FindPairByKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct ULevel* FindLevelByWorldPosition(struct UWorld* World, struct FVector Position); // Function Scavenger.S_GlobalHelperFunctions.FindLevelByWorldPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UCameraComponent* FindControllerActiveCameraComponent(struct APlayerController* PlayerController); // Function Scavenger.S_GlobalHelperFunctions.FindControllerActiveCameraComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool FindAllOverlordsWithinRadius(struct UWorld* World, struct FVector Position, float Radius, struct TArray<struct AS_AIOverlordActor*> outOverlords); // Function Scavenger.S_GlobalHelperFunctions.FindAllOverlordsWithinRadius // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_AIOverlordActor* FindActorOverlord(struct AActor* Actor); // Function Scavenger.S_GlobalHelperFunctions.FindActorOverlord // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DrawUMGCircle(struct FPaintContext Context, struct FVector2D Center, float Radius, int32_t numVertices, struct FLinearColor Color, bool AntiAlias); // Function Scavenger.S_GlobalHelperFunctions.DrawUMGCircle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DrawUMGBox(struct FPaintContext Context, struct FVector2D Min, struct FVector2D Max, struct FLinearColor Color, bool AntiAlias); // Function Scavenger.S_GlobalHelperFunctions.DrawUMGBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DispatchGameplayEvent(enum class ES_GameplayEvent GameplayEvent, struct AActor* instigatorActor); // Function Scavenger.S_GlobalHelperFunctions.DispatchGameplayEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DisableAllSubEmitters(struct UParticleSystemComponent* particleComp); // Function Scavenger.S_GlobalHelperFunctions.DisableAllSubEmitters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DeActivateFreeCam(); // Function Scavenger.S_GlobalHelperFunctions.DeActivateFreeCam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ControllerClearAreas(struct AS_AIController* Controller); // Function Scavenger.S_GlobalHelperFunctions.ControllerClearAreas // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ControllerAssignToAreaByName(struct AS_AIController* Controller, struct FName Name); // Function Scavenger.S_GlobalHelperFunctions.ControllerAssignToAreaByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientProjectileExplodeOnImpact(struct AS_ProjectileBase* Projectile, struct FHitResult HitResult); // Function Scavenger.S_GlobalHelperFunctions.ClientProjectileExplodeOnImpact // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearComponentOutline(struct UPrimitiveComponent* Component); // Function Scavenger.S_GlobalHelperFunctions.ClearComponentOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearActorOutline(struct AActor* Actor); // Function Scavenger.S_GlobalHelperFunctions.ClearActorOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector hitFromDirection, struct FHitResult HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Scavenger.S_GlobalHelperFunctions.ApplyPointDamage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyExplosiveDamage(struct US_DamageTypeExplosive* DamageType, struct AActor* DamageCauser, struct AController* Instigator, struct FVector closestSurfaceNormal); // Function Scavenger.S_GlobalHelperFunctions.ApplyExplosiveDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddSpawnerToClosestOverlordWithinRadius(struct AS_AISpawner* spawner, float Radius, struct AS_AIOverlordActor* outOverlord); // Function Scavenger.S_GlobalHelperFunctions.AddSpawnerToClosestOverlordWithinRadius // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ActivateFreeCam(struct AS_PlayerController* PlayerController); // Function Scavenger.S_GlobalHelperFunctions.ActivateFreeCam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GlobalUIHelperFunctions
// Size: 0x28 (Inherited: 0x28)
struct US_GlobalUIHelperFunctions : UBlueprintFunctionLibrary {

	bool WidgetIsInFocusPath(struct UWidget* Widget, struct APlayerController* PlayerController); // Function Scavenger.S_GlobalUIHelperFunctions.WidgetIsInFocusPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void SetMaterialScalarParameterWithInit(struct UMaterialInstanceDynamic* retainedMaterial, struct FName ParamName, int32_t matIndex, float newScalarValue); // Function Scavenger.S_GlobalUIHelperFunctions.SetMaterialScalarParameterWithInit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetImageFromSoftTextureWithLoadingAsset(struct UObject* Context, struct UImage* imageWidget, struct TSoftObjectPtr<struct UTexture2D> softTexture, bool useTextureSize); // Function Scavenger.S_GlobalUIHelperFunctions.SetImageFromSoftTextureWithLoadingAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayUISound(struct APlayerController* PlayerController, struct UAkAudioEvent* Event); // Function Scavenger.S_GlobalUIHelperFunctions.PlayUISound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsWidgetVisible(struct UWidget* Widget); // Function Scavenger.S_GlobalUIHelperFunctions.IsWidgetVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsWidgetInHierarchy(struct UWidget* parentWidget, struct UWidget* ChildWidget); // Function Scavenger.S_GlobalUIHelperFunctions.IsWidgetInHierarchy // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsWidgetHierarchyVisible(struct UWidget* Widget, bool doCheckSelf); // Function Scavenger.S_GlobalUIHelperFunctions.IsWidgetHierarchyVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsMouseAttached(); // Function Scavenger.S_GlobalUIHelperFunctions.IsMouseAttached // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsKeyboardAttached(); // Function Scavenger.S_GlobalUIHelperFunctions.IsKeyboardAttached // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsInViewportOrHasParent(struct US_WidgetMinimal* Widget); // Function Scavenger.S_GlobalUIHelperFunctions.IsInViewportOrHasParent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsGamepadAttached(); // Function Scavenger.S_GlobalUIHelperFunctions.IsGamepadAttached // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetThreatColorFromRank(struct APlayerController* PlayerController, int32_t rank); // Function Scavenger.S_GlobalUIHelperFunctions.GetThreatColorFromRank // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct FLinearColor> GetSquadIndicatorColors(struct APlayerController* PlayerController); // Function Scavenger.S_GlobalUIHelperFunctions.GetSquadIndicatorColors // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetSquadIndicatorColorFromIndex(struct APlayerController* PlayerController, int32_t Index); // Function Scavenger.S_GlobalUIHelperFunctions.GetSquadIndicatorColorFromIndex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetSecondsUntilServerTimeAsInt(struct UObject* Context, float ServerTimestamp); // Function Scavenger.S_GlobalUIHelperFunctions.GetSecondsUntilServerTimeAsInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetSecondsUntilServerTimeAsFloat(struct UObject* Context, float ServerTimestamp); // Function Scavenger.S_GlobalUIHelperFunctions.GetSecondsUntilServerTimeAsFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FText GetRarityTextFormat(enum class ES_ItemRarity Rarity); // Function Scavenger.S_GlobalUIHelperFunctions.GetRarityTextFormat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FText GetPlatformIconIdentifierByOnlinePlatform(enum class ES_OnlinePlatformType PlayerPlatform); // Function Scavenger.S_GlobalUIHelperFunctions.GetPlatformIconIdentifierByOnlinePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FText GetPlatformIconIdentifierByDefaultPlatform(enum class ES_Platform playerDefaultPlatform); // Function Scavenger.S_GlobalUIHelperFunctions.GetPlatformIconIdentifierByDefaultPlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UWidget* GetParentOrOuter(struct UWidget* Widget); // Function Scavenger.S_GlobalUIHelperFunctions.GetParentOrOuter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct UWidget* GetParentOfType(struct UWidget* Widget, struct UWidget* ParentClass); // Function Scavenger.S_GlobalUIHelperFunctions.GetParentOfType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_OnlinePlatformType GetOnlinePlatformTypeByPlatformName(struct FString platformAsString); // Function Scavenger.S_GlobalUIHelperFunctions.GetOnlinePlatformTypeByPlatformName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FLinearColor GetLocationDifficultyColor(struct APlayerController* PlayerController, enum class ES_LocationDifficultyTier difficulty); // Function Scavenger.S_GlobalUIHelperFunctions.GetLocationDifficultyColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetLocalizedText(struct UObject* Context, struct FDataTableRowHandle TextHandle, struct FText outLocalizedText); // Function Scavenger.S_GlobalUIHelperFunctions.GetLocalizedText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetLocalizedObjectName(struct UObject* Context, struct FDataTableRowHandle TextHandle, struct FText outLocalizedText); // Function Scavenger.S_GlobalUIHelperFunctions.GetLocalizedObjectName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetLocalizedObjectDescription(struct UObject* Context, struct FDataTableRowHandle TextHandle, struct FText outLocalizedText); // Function Scavenger.S_GlobalUIHelperFunctions.GetLocalizedObjectDescription // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct UMaterialInstance* GetLoadingAsset(struct UObject* Context); // Function Scavenger.S_GlobalUIHelperFunctions.GetLoadingAsset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_TonedInterfaceColors GetItemRarityTonedColor(struct APlayerController* PlayerController, enum class ES_ItemRarity Rarity); // Function Scavenger.S_GlobalUIHelperFunctions.GetItemRarityTonedColor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetItemRarityColor(struct APlayerController* PlayerController, enum class ES_ItemRarity Rarity); // Function Scavenger.S_GlobalUIHelperFunctions.GetItemRarityColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetDisplayableItemMetadata(struct FDataTableRowHandle Handle, struct FS_DisplayableItemMetadata outDisplayableItemMetadata); // Function Scavenger.S_GlobalUIHelperFunctions.GetDisplayableItemMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FLinearColor GetArmorRangeColorFromTankCount(struct APlayerController* PlayerController, int32_t numTanks); // Function Scavenger.S_GlobalUIHelperFunctions.GetArmorRangeColorFromTankCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetArmorRangeColorFromMaxArmor(struct APlayerController* PlayerController, float maxArmor); // Function Scavenger.S_GlobalUIHelperFunctions.GetArmorRangeColorFromMaxArmor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* CreateWidget(struct APlayerController* PlayerController, struct US_WidgetMinimal* WidgetClass, bool addToNavStack, bool AddToViewport, enum class ES_InGameZOrderCategory ZOrder); // Function Scavenger.S_GlobalUIHelperFunctions.CreateWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearUiTimer(struct APlayerController* PlayerController, struct FTimerHandle Timer); // Function Scavenger.S_GlobalUIHelperFunctions.ClearUiTimer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GlobalWindSourceComponent
// Size: 0x230 (Inherited: 0x220)
struct US_GlobalWindSourceComponent : UWindDirectionalSourceComponent {
	char pad_220[0x10]; // 0x220(0x10)
};

// Class Scavenger.S_GpuUtility
// Size: 0x28 (Inherited: 0x28)
struct US_GpuUtility : UObject {

	bool IsGpuSupported(); // Function Scavenger.S_GpuUtility.IsGpuSupported // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsGPUDriverUpToDate(); // Function Scavenger.S_GpuUtility.IsGPUDriverUpToDate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsCpuSupported(); // Function Scavenger.S_GpuUtility.IsCpuSupported // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasEnoughMemory(); // Function Scavenger.S_GpuUtility.HasEnoughMemory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetShouldQuitOnMinspecFail(); // Function Scavenger.S_GpuUtility.GetShouldQuitOnMinspecFail // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetRequiredGPUDriverVersion(); // Function Scavenger.S_GpuUtility.GetRequiredGPUDriverVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetMinspecFailSupportLink(); // Function Scavenger.S_GpuUtility.GetMinspecFailSupportLink // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetMemoryAmountString(); // Function Scavenger.S_GpuUtility.GetMemoryAmountString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_GPUVendor GetGPUVendor(); // Function Scavenger.S_GpuUtility.GetGPUVendor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetGpuName(); // Function Scavenger.S_GpuUtility.GetGpuName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetGPUDriverVersion(); // Function Scavenger.S_GpuUtility.GetGPUDriverVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetCpuName(); // Function Scavenger.S_GpuUtility.GetCpuName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetClampedDefaultScreenPercentage(struct FIntPoint CurrRes); // Function Scavenger.S_GpuUtility.GetClampedDefaultScreenPercentage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetClampedDefaultResolution(struct FIntPoint CurrRes, struct FIntPoint ClampedResolution); // Function Scavenger.S_GpuUtility.GetClampedDefaultResolution // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_GrenadeProjectile
// Size: 0x4e8 (Inherited: 0x3e0)
struct AS_GrenadeProjectile : AS_ProjectileBase {
	char pad_3E0[0x10]; // 0x3e0(0x10)
	struct USphereComponent* m_collisionSphere; // 0x3f0(0x08)
	float TimeUntilDetonationRegardless; // 0x3f8(0x04)
	float ServerTimeAfterDetonationToKeepAlive; // 0x3fc(0x04)
	float TimeAfterDetonationToKeepAlive; // 0x400(0x04)
	char pad_404[0xc]; // 0x404(0x0c)
	bool m_hasExplodedSignal; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	struct FHitResult m_serverImpactResult; // 0x414(0x8c)
	struct US_DamageTypeExplosive* DamageType; // 0x4a0(0x08)
	bool bHasGrenadeIndicator; // 0x4a8(0x01)
	char pad_4A9[0x7]; // 0x4a9(0x07)
	struct UTexture2D* GrenadeIndicatorIcon; // 0x4b0(0x08)
	bool bIndicatorAlreadyAdded; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	float ActivateIndicatorAngle; // 0x4bc(0x04)
	bool VerticalImpactChangesDetonationTimer; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	float VerticalIgnitionAngle; // 0x4c4(0x04)
	float TimeUntilDetonationOnHit; // 0x4c8(0x04)
	float TimeUntilDetonationOnAttach; // 0x4cc(0x04)
	float TimeUntilDetonationOnPlayerAttach; // 0x4d0(0x04)
	float deformationRadiusMultiplier; // 0x4d4(0x04)
	struct FRotator GrenadeSpawnRotation; // 0x4d8(0x0c)
	bool CausesAIDangerEvent; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)

	void ServerMadeImpact(); // Function Scavenger.S_GrenadeProjectile.ServerMadeImpact // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyNearbyOverlords(struct FVector Location, float TimeRemaining); // Function Scavenger.S_GrenadeProjectile.NotifyNearbyOverlords // (Net|Native|Event|NetMulticast|Protected|HasDefaults|Const) // @ game+0xffff8008e4a10000
	void NotifyHasExploded(); // Function Scavenger.S_GrenadeProjectile.NotifyHasExploded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetDetonationTimeRemainingPercent(); // Function Scavenger.S_GrenadeProjectile.GetDetonationTimeRemainingPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void Explode(); // Function Scavenger.S_GrenadeProjectile.Explode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CrossServerAddProjectileVelocity(struct FVector velocityOffset); // Function Scavenger.S_GrenadeProjectile.CrossServerAddProjectileVelocity // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void BP_OnExplode(struct UPhysicalMaterial* hitMaterial); // Function Scavenger.S_GrenadeProjectile.BP_OnExplode // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_MontageAbilityWithEffects
// Size: 0x3e0 (Inherited: 0x3b8)
struct US_MontageAbilityWithEffects : US_GameplayAbility {
	struct UAnimMontage* AbilityMontage; // 0x3b8(0x08)
	struct TArray<struct UGameplayEffect*> GameplayEffectClassesWhileMontage; // 0x3c0(0x10)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void OnMontageEnded(); // Function Scavenger.S_MontageAbilityWithEffects.OnMontageEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HardPingAbility
// Size: 0x3e0 (Inherited: 0x3e0)
struct US_HardPingAbility : US_MontageAbilityWithEffects {

	void PrepareHardPing(struct FGameplayEventData TriggerEventData); // Function Scavenger.S_HardPingAbility.PrepareHardPing // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HarvestManagerComponent
// Size: 0x240 (Inherited: 0xb0)
struct US_HarvestManagerComponent : UActorComponent {
	struct FS_HarvestedFoliageArray m_harvestedFoliageArray; // 0xb0(0x120)
	struct TSet<struct FS_WeakLevelReferenceWrapper> m_trackedLevels; // 0x1d0(0x50)
	struct TArray<struct FS_HarvestConfiguration> HarvestConfigurationArray; // 0x220(0x10)
	struct AS_AutoHarvestedFoliageActor* AutoHarvestedFoliageActorClass; // 0x230(0x08)
	float AutoHarvestedFoliageActorZAdjustmentMultiplier; // 0x238(0x04)
	float AutoHarvestedFoliageActorZAdjustmentFlat; // 0x23c(0x04)

	void OnLevelLoaded(); // Function Scavenger.S_HarvestManagerComponent.OnLevelLoaded // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HitFeedbackAudioComponent
// Size: 0x430 (Inherited: 0xb0)
struct US_HitFeedbackAudioComponent : UActorComponent {
	struct FS_FeedbackAudio Events1pTo3p; // 0xb0(0x100)
	struct FS_3PFeedbackAudio Events3pTo1p; // 0x1b0(0x140)
	struct FS_3PFeedbackAudio Events3pTo3p; // 0x2f0(0x140)

	void OnPreTakeDamage(struct AActor* DamagedActor, float UnmodifiedDamageAmount, float ArmorOrShieldDamageAmount, float HealthDamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, char DamageModifiersApplied, struct AController* InstigatorController, struct FS_PreTakeDamageInfo DamageInfo); // Function Scavenger.S_HitFeedbackAudioComponent.OnPreTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void OnKilledBy(struct FS_EventParameterControllerVariant KillingController, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_HitFeedbackAudioComponent.OnKilledBy // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HordeWaveManagerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct US_HordeWaveManagerComponent : UActorComponent {
	struct TArray<struct FS_HordeWaveDefinition> WaveDefinitions; // 0xb0(0x10)
};

// Class Scavenger.S_HUD
// Size: 0x5e8 (Inherited: 0x378)
struct AS_HUD : AHUD {
	struct FMulticastInlineDelegate OnHudCreated; // 0x378(0x10)
	struct FMulticastInlineDelegate OnHudLogicTick; // 0x388(0x10)
	struct FMulticastInlineDelegate OnAnyVisibleWidgetHoverIn; // 0x398(0x10)
	struct FMulticastInlineDelegate OnAnyVisibleWidgetHoverOut; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnAnyMouseButtonDown; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnAnyMouseButtonUp; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnWidgetRemovedFromNavStack; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnWidgetAddedToNavStack; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnWindowMoved; // 0x3f8(0x10)
	struct FS_HudToggleDisplayMethod DefaultToggleDisplayMethod; // 0x408(0x08)
	struct FS_HudToggleDisplayMethod PopupMenuToggleDisplayMethod; // 0x410(0x08)
	struct US_UMGHUD* GameplayHUDClass; // 0x418(0x08)
	struct US_UMGHUD* CinematicHUDClass; // 0x420(0x08)
	struct US_UMGHUD* SpectatorHUDClass; // 0x428(0x08)
	struct US_UMGHUD* SpectatorCurtainsHUDClass; // 0x430(0x08)
	struct US_UMGInGamePauseMenu* PauseMenuHUDClass; // 0x438(0x08)
	struct US_WidgetPresentationHUD* DeathHUDClass; // 0x440(0x08)
	struct US_WidgetGameEndHUD* PositveMatchEndHUDClass; // 0x448(0x08)
	struct US_WidgetGameEndHUD* NegativeMatchEndHUDClass; // 0x450(0x08)
	struct US_UMGInGameGameplayMenu* GameplayMenuClass; // 0x458(0x08)
	struct US_UMGInGameMenuBase* QuickItemsMenuClass; // 0x460(0x08)
	struct US_UMGInGameMenuBase* PingMenuClass; // 0x468(0x08)
	struct US_UMGInGameRadialMenuSelectWeapon* SelectWeaponMenuClass; // 0x470(0x08)
	struct US_UMGInGameMenuBase* EmoteMenuClass; // 0x478(0x08)
	struct US_WidgetTextFormatCache* WidgetTextFormatCacheClass; // 0x480(0x08)
	struct FS_SpawnableHUD NotificationCenter; // 0x488(0x10)
	struct FS_SpawnableHUD PersistentInGame; // 0x498(0x10)
	struct US_UMGHUD* m_GameplayHUD; // 0x4a8(0x08)
	struct US_UMGHUD* m_CinematicHUD; // 0x4b0(0x08)
	struct US_WidgetPresentationHUD* m_SpectatingCurtainsHUD; // 0x4b8(0x08)
	struct US_UMGInGameMenuBase* m_quickItemsMenu; // 0x4c0(0x08)
	struct US_UMGInGameMenuBase* m_pingMenu; // 0x4c8(0x08)
	struct US_UMGInGameMenuBase* m_emoteMenu; // 0x4d0(0x08)
	struct US_UMGInGameRadialMenuSelectWeapon* m_selectWeaponRadialMenu; // 0x4d8(0x08)
	struct US_UMGInGameGameplayMenu* m_gameplayMenu; // 0x4e0(0x08)
	struct US_UMGInGamePauseMenu* m_pauseMenu; // 0x4e8(0x08)
	struct US_UMGHUD* m_notificationCenter; // 0x4f0(0x08)
	char pad_4F8[0x8]; // 0x4f8(0x08)
	struct TArray<struct US_UMGHUD*> m_activeHuds; // 0x500(0x10)
	struct TArray<struct US_UMGHUD*> m_protectedHuds; // 0x510(0x10)
	struct TArray<struct US_WidgetMinimal*> m_navStack; // 0x520(0x10)
	struct TArray<struct US_UMGHUD*> m_hiddenHuds; // 0x530(0x10)
	struct TArray<struct US_WidgetMinimal*> m_cachedWidgets; // 0x540(0x10)
	struct TArray<enum class ESlateVisibility> m_cachedWidgetStartVisibility; // 0x550(0x10)
	char pad_560[0x68]; // 0x560(0x68)
	struct US_UMGInGameMenuBase* m_cachedBaseMenu; // 0x5c8(0x08)
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct US_WidgetMap* m_cachedMapWidget; // 0x5d8(0x08)
	struct US_WidgetTextFormatCache* m_textFormatCache; // 0x5e0(0x08)

	void SimulateMenuActionPressed(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_HUD.SimulateMenuActionPressed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ShowHudOfClass(struct US_UMGHUD* hudClassToShow, struct FS_HudToggleDisplayMethod displayMethod); // Function Scavenger.S_HUD.ShowHudOfClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHUDVisibility(bool shown); // Function Scavenger.S_HUD.SetHUDVisibility // (Exec|Native|Public) // @ game+0xffff8008e4a10000
	void RequestCloseRadialMenu(); // Function Scavenger.S_HUD.RequestCloseRadialMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestClosePauseMenu(); // Function Scavenger.S_HUD.RequestClosePauseMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestCloseGameplayMenu(); // Function Scavenger.S_HUD.RequestCloseGameplayMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestCloseCurrentMenu(); // Function Scavenger.S_HUD.RequestCloseCurrentMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveTopOfNavStackFromViewport(); // Function Scavenger.S_HUD.RemoveTopOfNavStackFromViewport // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	bool RemoveHudOfClass(struct US_UMGHUD* hudClassToRemove); // Function Scavenger.S_HUD.RemoveHudOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PushWidgetToNavStack(struct US_WidgetMinimal* widgetToAdd); // Function Scavenger.S_HUD.PushWidgetToNavStack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PopWidgetsFromNavStackToParent(struct US_WidgetMinimal* ParentClass, bool inclusive, bool RemoveFromViewport, bool bNotifyNewTop); // Function Scavenger.S_HUD.PopWidgetsFromNavStackToParent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PopWidgetFromNavStack(bool bRemoveFromViewport, bool bNotifyNewTop); // Function Scavenger.S_HUD.PopWidgetFromNavStack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_UMGInGameRadialMenuSelectWeapon* OpenSelectWeaponRadialMenu(); // Function Scavenger.S_HUD.OpenSelectWeaponRadialMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenQuickItemsMenu(); // Function Scavenger.S_HUD.OpenQuickItemsMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenPingMenu(); // Function Scavenger.S_HUD.OpenPingMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenPauseMenu(); // Function Scavenger.S_HUD.OpenPauseMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenGameplayMenu(); // Function Scavenger.S_HUD.OpenGameplayMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenEmoteWheelMenu(); // Function Scavenger.S_HUD.OpenEmoteWheelMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyWidgetRemovedFromNavStack_BP(struct US_WidgetMinimal* RemovedWidget, struct US_WidgetMinimal* NewTopWidget); // Function Scavenger.S_HUD.NotifyWidgetRemovedFromNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetAddedToNavStack_BP(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_HUD.NotifyWidgetAddedToNavStack_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyHudCreated(struct US_UMGHUD* HUD); // Function Scavenger.S_HUD.NotifyHudCreated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool NavStackContainsClass(struct US_WidgetMinimal* WidgetClass); // Function Scavenger.S_HUD.NavStackContainsClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsRadialMenuOpen(); // Function Scavenger.S_HUD.IsRadialMenuOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPauseMenuOpen(); // Function Scavenger.S_HUD.IsPauseMenuOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsGameplayMenuOpen(); // Function Scavenger.S_HUD.IsGameplayMenuOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBaseMenuOpen(); // Function Scavenger.S_HUD.IsBaseMenuOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HideHudOfClass(struct US_UMGHUD* hudClassToHide, struct FS_HudToggleDisplayMethod displayMethod); // Function Scavenger.S_HUD.HideHudOfClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool HasHudOfClass(struct US_UMGHUD* hudClassToFind); // Function Scavenger.S_HUD.HasHudOfClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandlePauseMenuOpened(); // Function Scavenger.S_HUD.HandlePauseMenuOpened // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePauseMenuClosed(); // Function Scavenger.S_HUD.HandlePauseMenuClosed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOwningPlayerChangedPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_HUD.HandleOwningPlayerChangedPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTerminalBy(struct FS_EventParameterVariant TerminatingPawn, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_HUD.HandleOnTerminalBy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnResurrectedBy(struct FS_EventParameterVariant ResurrectingPawn); // Function Scavenger.S_HUD.HandleOnResurrectedBy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnKilledBy(struct FS_EventParameterVariant KillingPawn, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_HUD.HandleOnKilledBy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleMenuActionReleased(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_HUD.HandleMenuActionReleased // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleMenuActionPressed(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_HUD.HandleMenuActionPressed // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleGameplayMenuOpened(); // Function Scavenger.S_HUD.HandleGameplayMenuOpened // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleGameplayMenuClosed(); // Function Scavenger.S_HUD.HandleGameplayMenuClosed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_UMGHUD* GetUMGHUD(); // Function Scavenger.S_HUD.GetUMGHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetTopOfNavStack(); // Function Scavenger.S_HUD.GetTopOfNavStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetTextFormatCache* GetTextFormatCache(); // Function Scavenger.S_HUD.GetTextFormatCache // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetRootOfNavStack(); // Function Scavenger.S_HUD.GetRootOfNavStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetPreviousTopOfNavStack(); // Function Scavenger.S_HUD.GetPreviousTopOfNavStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGInGamePauseMenu* GetPauseMenu(); // Function Scavenger.S_HUD.GetPauseMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetNavStackLabels(struct TArray<struct FText> outWidgetLabels); // Function Scavenger.S_HUD.GetNavStackLabels // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct US_WidgetMinimal*> GetNavStack(); // Function Scavenger.S_HUD.GetNavStack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetGameplayMenuCurrentPage(); // Function Scavenger.S_HUD.GetGameplayMenuCurrentPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGInGameGameplayMenu* GetGameplayMenu(); // Function Scavenger.S_HUD.GetGameplayMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGHUD* FindHudOfClass(int32_t hudIndex, struct US_UMGHUD* hudClassToFind); // Function Scavenger.S_HUD.FindHudOfClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CycleMenuPage(enum class ES_CycleDirection cycleDirection); // Function Scavenger.S_HUD.CycleMenuPage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CreateSoftWidgetWithCallback_BP(SoftClassProperty softWidgetClass, bool bPushToNavStack, bool bAddToViewport, enum class ES_InGameZOrderCategory ZOrder, struct FDelegate postLoadCallback, bool bCacheWidget); // Function Scavenger.S_HUD.CreateSoftWidgetWithCallback_BP // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CreateSoftWidget_BP(SoftClassProperty softWidgetClass, bool bPushToNavStack, bool bAddToViewport, enum class ES_InGameZOrderCategory ZOrder, bool bCacheWidget); // Function Scavenger.S_HUD.CreateSoftWidget_BP // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CloseRadialMenu(); // Function Scavenger.S_HUD.CloseRadialMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClosePauseMenu(); // Function Scavenger.S_HUD.ClosePauseMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CloseGameplayMenu(); // Function Scavenger.S_HUD.CloseGameplayMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CloseCurrentMenu(); // Function Scavenger.S_HUD.CloseCurrentMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearNavStack(bool clearAllButRoot); // Function Scavenger.S_HUD.ClearNavStack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearCachedWidgets(); // Function Scavenger.S_HUD.ClearCachedWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDOffscreenIndicator
// Size: 0x510 (Inherited: 0x4b8)
struct US_HUDOffscreenIndicator : US_WidgetMinimal {
	float IndicatorContainerXSizeMultiplier; // 0x4b8(0x04)
	float IndicatorContainerYSizeMultiplier; // 0x4bc(0x04)
	struct UMaterial* DirectionalIndicatorMaterial; // 0x4c0(0x08)
	struct UMaterial* IconImageMaterial; // 0x4c8(0x08)
	struct UTextBlock* IndicatorText; // 0x4d0(0x08)
	struct UImage* IconImage; // 0x4d8(0x08)
	struct UMaterialInstanceDynamic* IconImageDynamicMaterial; // 0x4e0(0x08)
	struct UImage* DirectionalIndicatorImage; // 0x4e8(0x08)
	struct UMaterialInstanceDynamic* DirectionalIndicatorImageDynamicMaterial; // 0x4f0(0x08)
	struct UVerticalBox* IndicatorContainer; // 0x4f8(0x08)
	struct USizeBox* IconImageContainer; // 0x500(0x08)
	struct UWidgetAnimation* FlashRed; // 0x508(0x08)
};

// Class Scavenger.S_HUDAllyIcon
// Size: 0x5e0 (Inherited: 0x510)
struct US_HUDAllyIcon : US_HUDOffscreenIndicator {
	struct URetainerBox* TopRetainerBox; // 0x510(0x08)
	struct UCanvasPanel* container; // 0x518(0x08)
	struct UTexture2D* DownedIcon; // 0x520(0x08)
	struct UTexture2D* DeadIcon; // 0x528(0x08)
	struct UTexture2D* CocoonedIcon; // 0x530(0x08)
	struct UTexture2D* InVehicleIcon; // 0x538(0x08)
	struct US_WidgetCircularFill* DownedFillTimer; // 0x540(0x08)
	struct UGridPanel* GridPanel; // 0x548(0x08)
	struct UImage* UpArrow; // 0x550(0x08)
	struct UImage* DownArrow; // 0x558(0x08)
	struct UImage* RightArrow; // 0x560(0x08)
	struct UImage* LeftArrow; // 0x568(0x08)
	struct UCurveFloat* ScaleCurve; // 0x570(0x08)
	struct UCurveFloat* AdditionalHeightCurve; // 0x578(0x08)
	struct TWeakObjectPtr<struct AActor> m_actor; // 0x580(0x08)
	struct FString m_actorName; // 0x588(0x10)
	bool m_inVehicle; // 0x598(0x01)
	char pad_599[0x17]; // 0x599(0x17)
	struct US_StatsComponent* m_statsComponent; // 0x5b0(0x08)
	char pad_5B8[0x28]; // 0x5b8(0x28)

	struct FString GetPlayerName(); // Function Scavenger.S_HUDAllyIcon.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetIndicatorColor(); // Function Scavenger.S_HUDAllyIcon.GetIndicatorColor // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetActor(); // Function Scavenger.S_HUDAllyIcon.GetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDDamageNumber
// Size: 0x5c8 (Inherited: 0x4b8)
struct US_HUDDamageNumber : US_WidgetMinimal {
	float VisibleDuration; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct UCurveFloat* Curve; // 0x4c0(0x08)
	char pad_4C8[0x100]; // 0x4c8(0x100)

	void SetVisibilityTime(float Duration); // Function Scavenger.S_HUDDamageNumber.SetVisibilityTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyInitialized(struct FVector WorldLocation, int32_t UnmodifiedDamageAmount, int32_t ArmorDamageAmount, int32_t HealthDamageAmount, struct US_DamageTypeBase* DamageType, char DamageModifiersApplied, struct FS_PointDamageEvent DamageEvent); // Function Scavenger.S_HUDDamageNumber.NotifyInitialized // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsWeakpoint(); // Function Scavenger.S_HUDDamageNumber.IsWeakpoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasDamageModifier(enum class ES_DamageModiferFlag damageModifierFlag); // Function Scavenger.S_HUDDamageNumber.HasDamageModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetColorFromVisibility(struct UCurveLinearColor* Curve); // Function Scavenger.S_HUDDamageNumber.GetColorFromVisibility // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAlphaFromVisibility(struct UCurveFloat* Curve); // Function Scavenger.S_HUDDamageNumber.GetAlphaFromVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDDrawDebug
// Size: 0x28 (Inherited: 0x28)
struct US_HUDDrawDebug : UObject {

	void Draw2DStringsWithCanvas(struct UCanvas* Canvas); // Function Scavenger.S_HUDDrawDebug.Draw2DStringsWithCanvas // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DString(struct UObject* WorldContextObject, struct FString String, struct FLinearColor Color, struct FLinearColor BackgroundColor, struct FVector2D PositionOffset, bool bUseOffsetAsAbsolute); // Function Scavenger.S_HUDDrawDebug.Draw2DString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DLineWithCanvas(struct UCanvas* Canvas, struct FVector2D Start, struct FVector2D End, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DLineWithCanvas // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DLine(struct FVector2D Start, struct FVector2D End, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DFCurve(struct UCurveFloat* Curve, struct FVector2D Position, float Width, float Height, struct FLinearColor CurveColor, float CurrTime, bool bDrawFrame, int32_t NumCurveSegments); // Function Scavenger.S_HUDDrawDebug.Draw2DFCurve // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DCircleWithCanvas(struct UCanvas* Canvas, struct FVector2D Center, float Radius, int32_t NumSides, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DCircleWithCanvas // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DCircle(struct FVector2D Center, float Radius, int32_t NumSides, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DBoxWithCanvas(struct UCanvas* Canvas, struct FBox2D Box, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DBoxWithCanvas // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Draw2DBox(struct FBox2D Box, struct FLinearColor LineColor, float LineThickness); // Function Scavenger.S_HUDDrawDebug.Draw2DBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGHUD
// Size: 0x640 (Inherited: 0x4b8)
struct US_UMGHUD : US_WidgetMinimal {
	enum class ES_WidgetHideMethod allowedHideMethod; // 0x4b8(0x01)
	bool ShouldCaptureAllInput; // 0x4b9(0x01)
	char pad_4BA[0x6]; // 0x4ba(0x06)
	struct AS_PlayerControllerBase* m_basePlayerController; // 0x4c0(0x08)
	char pad_4C8[0x58]; // 0x4c8(0x58)
	struct TArray<struct FS_WidgetData> m_managedWidgetData; // 0x520(0x10)
	struct US_EffectContainerWidget* m_effectContainerWidgets[0x2]; // 0x530(0x10)
	struct FS_ParabolicHUDEffectData m_parabolicEffectData; // 0x540(0x10)
	struct US_WidgetMinimal* cursorWidgets[0xf]; // 0x550(0x78)
	struct US_WidgetMinimal* cursorWidgetClasses[0xf]; // 0x5c8(0x78)

	void ToggleWidgetGroup(int32_t widgetGroupNumber, enum class ES_WidgetHideMethod hideMethod); // Function Scavenger.S_UMGHUD.ToggleWidgetGroup // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleHUD(enum class ES_WidgetHideMethod hideMethod); // Function Scavenger.S_UMGHUD.ToggleHUD // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowWidgetGroup(int32_t widgetGroupNumber); // Function Scavenger.S_UMGHUD.ShowWidgetGroup // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowHUDBasedOnToggleDisplayMethod(struct FS_HudToggleDisplayMethod displayMethod); // Function Scavenger.S_UMGHUD.ShowHUDBasedOnToggleDisplayMethod // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowHUD(); // Function Scavenger.S_UMGHUD.ShowHUD // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowControllerCursor(bool show); // Function Scavenger.S_UMGHUD.ShowControllerCursor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSpawnableWidgetPositionInContainer(struct FS_WidgetPositioningData positioningData, struct US_WidgetMinimal* Widget); // Function Scavenger.S_UMGHUD.SetSpawnableWidgetPositionInContainer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCursorWidget(enum class EMouseCursor cursorType, struct US_WidgetMinimal* Widget); // Function Scavenger.S_UMGHUD.SetCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetContainerWidgetForEffect(enum class ES_WidgetEffectType EffectType, struct US_EffectContainerWidget* effectCanvasContainer); // Function Scavenger.S_UMGHUD.SetContainerWidgetForEffect // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveWidget(struct UUserWidget* Widget); // Function Scavenger.S_UMGHUD.RemoveWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HideWidgetGroup(int32_t widgetGroupNumber, enum class ES_WidgetHideMethod hideMethod); // Function Scavenger.S_UMGHUD.HideWidgetGroup // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HideHUDBasedOnToggleDisplayMethod(struct FS_HudToggleDisplayMethod displayMethod); // Function Scavenger.S_UMGHUD.HideHUDBasedOnToggleDisplayMethod // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HideHUD(enum class ES_WidgetHideMethod hideMethod); // Function Scavenger.S_UMGHUD.HideHUD // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_ParabolicHUDEffectData GetParabolicHUDEffectData(); // Function Scavenger.S_UMGHUD.GetParabolicHUDEffectData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetCursorWidget(enum class EMouseCursor cursorType); // Function Scavenger.S_UMGHUD.GetCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddWidget(struct UUserWidget* Widget, int32_t ZOrder, int32_t widgetGroupNumber, enum class ES_WidgetEffectType widgetEffectType, enum class ES_WidgetHideMethod allowedHideMethod); // Function Scavenger.S_UMGHUD.AddWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddSpawnableWidget(struct FS_SpawnableWidget spawnableWidget, struct UUserWidget* Widget, struct UCanvasPanel* CanvasPanel, int32_t ZOrder, int32_t SortOrder, enum class ES_WidgetEffectType widgetEffectType, enum class ES_WidgetHideMethod hideMethod, enum class ESlateVisibility widgetVisibility); // Function Scavenger.S_UMGHUD.AddSpawnableWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddExistingWidget(struct UUserWidget* Widget, int32_t ZOrder, int32_t widgetGroupNumber, enum class ES_WidgetEffectType widgetEffectType, enum class ES_WidgetHideMethod allowedHideMethod); // Function Scavenger.S_UMGHUD.AddExistingWidget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDNotificationCenter
// Size: 0x650 (Inherited: 0x640)
struct US_HUDNotificationCenter : US_UMGHUD {
	struct TArray<struct FS_NotificationQueue> ActiveNotificationQueues; // 0x640(0x10)
};

// Class Scavenger.S_HUDFrontEndNotificationCenter
// Size: 0x6d0 (Inherited: 0x650)
struct US_HUDFrontEndNotificationCenter : US_HUDNotificationCenter {
	float NewItemMessageFadeTime; // 0x650(0x04)
	int32_t MaximumNumberOfNewFrontEndItems; // 0x654(0x04)
	int32_t MaximumNumberOfSocialNotifications; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct US_WidgetNewItemNotification* NewItemNotificationClass; // 0x660(0x08)
	struct US_WidgetSocialNotification* SocialNotificationClass; // 0x668(0x08)
	struct FDataTableRowHandle NewItemTextFormat; // 0x670(0x10)
	struct TArray<enum class ES_OnlineItemMetadataType> IgnoredMetadataTypes; // 0x680(0x10)
	float NewItemDisplayInterval; // 0x690(0x04)
	float m_warmupDuration; // 0x694(0x04)
	struct UVerticalBox* NewItemMessageFeed; // 0x698(0x08)
	struct UVerticalBox* SocialNotificationMessageFeed; // 0x6a0(0x08)
	char pad_6A8[0x28]; // 0x6a8(0x28)

	void ProcessNextSocialNotification(); // Function Scavenger.S_HUDFrontEndNotificationCenter.ProcessNextSocialNotification // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ProcessNextNewItem(); // Function Scavenger.S_HUDFrontEndNotificationCenter.ProcessNextNewItem // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePlayerLeftMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePlayerLeftMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerJoinedMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePlayerJoinedMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePartyJoinRequestSent(struct FString PlayerId); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePartyJoinRequestSent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyJoinRequestReceived(struct FString PlayerId); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePartyJoinRequestReceived // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyInviteSent(struct FString PlayerId); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePartyInviteSent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyInviteReceived(struct FString PlayerId, struct FString PartyId, struct FS_LobbyEndpoint lobbyEndpoint, struct FString playerDisplayName); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandlePartyInviteReceived // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryChanged(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleOnPlayerInventoryChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleLeftPlayersParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleLeftPlayersParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleJoinedPlayersParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleJoinedPlayersParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleFriendRequestSent(struct FS_FriendEntry friendEntry); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleFriendRequestSent // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleFriendRequestReceived(struct FS_FriendEntry friendEntry); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleFriendRequestReceived // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleFriendRequestAccepted(struct FS_FriendEntry friendEntry); // Function Scavenger.S_HUDFrontEndNotificationCenter.HandleFriendRequestAccepted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDGrenadeIndicator
// Size: 0x518 (Inherited: 0x510)
struct US_HUDGrenadeIndicator : US_HUDOffscreenIndicator {
	float MaxDistanceToDisplay; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
};

// Class Scavenger.S_HUDInteractableMarker
// Size: 0x278 (Inherited: 0x270)
struct US_HUDInteractableMarker : UUserWidget {
	float MarkerZOffset; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)

	void NotifyShown(struct FVector Location, struct UTexture2D* iconTexture); // Function Scavenger.S_HUDInteractableMarker.NotifyShown // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDMainMenu
// Size: 0x648 (Inherited: 0x5e8)
struct AS_HUDMainMenu : AS_HUD {
	struct TArray<struct US_WidgetMinimal*> m_alwaysActiveInputListeners; // 0x5e8(0x10)
	char pad_5F8[0x50]; // 0x5f8(0x50)

	void ReleaseAlwaysActiveInputListener(struct US_WidgetMinimal* Widget); // Function Scavenger.S_HUDMainMenu.ReleaseAlwaysActiveInputListener // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterAlwaysActiveInputListener(struct US_WidgetMinimal* Widget); // Function Scavenger.S_HUDMainMenu.RegisterAlwaysActiveInputListener // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPostMatchPhasesStarted(); // Function Scavenger.S_HUDMainMenu.HandleOnPostMatchPhasesStarted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPostMatchPhasesEnded(); // Function Scavenger.S_HUDMainMenu.HandleOnPostMatchPhasesEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_GameInstance* GetScavengersGameInstance(); // Function Scavenger.S_HUDMainMenu.GetScavengersGameInstance // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGHUDMainMenu* GetMainMenu(); // Function Scavenger.S_HUDMainMenu.GetMainMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetNotificationCenterItem
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetNotificationCenterItem : US_WidgetMinimal {

	void NotifyNotificationExpired(); // Function Scavenger.S_WidgetNotificationCenterItem.NotifyNotificationExpired // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDPingBase
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_HUDPingBase : US_WidgetMinimal {
	char pad_4B8[0x3]; // 0x4b8(0x03)
	enum class ES_AutoPingType AutoPingType; // 0x4bb(0x01)
	enum class ES_PingInfoType PingType; // 0x4bc(0x01)
	char pad_4BD[0x3b]; // 0x4bd(0x3b)

	void SetWorldLocation(struct FVector WorldLocation); // Function Scavenger.S_HUDPingBase.SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPingInfoType(enum class ES_PingInfoType PingType); // Function Scavenger.S_HUDPingBase.SetPingInfoType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAutoPingType(enum class ES_AutoPingType AutoPingType); // Function Scavenger.S_HUDPingBase.SetAutoPingType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandlePingInfoTypeSet_BP(enum class ES_PingInfoType oldPingType, enum class ES_PingInfoType newPingType); // Function Scavenger.S_HUDPingBase.HandlePingInfoTypeSet_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleAutoPingTypeSet_BP(enum class ES_AutoPingType oldAutoPingType, enum class ES_AutoPingType newAutoPingType); // Function Scavenger.S_HUDPingBase.HandleAutoPingTypeSet_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDPingItem
// Size: 0x5a8 (Inherited: 0x4f8)
struct US_HUDPingItem : US_HUDPingBase {
	struct FText DistanceRichTextTag; // 0x4f8(0x18)
	struct UMaterialInterface* PingMaterial; // 0x510(0x08)
	float AdsOpacity; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct US_RichTextBlock* DistanceText; // 0x520(0x08)
	struct UImage* PingIcon; // 0x528(0x08)
	struct UImage* PingItemIcon; // 0x530(0x08)
	struct UImage* IMG_ArrowUp; // 0x538(0x08)
	struct UImage* IMG_ArrowDown; // 0x540(0x08)
	struct UImage* IMG_ArrowRight; // 0x548(0x08)
	struct UImage* IMG_ArrowLeft; // 0x550(0x08)
	struct UCanvasPanel* MainCanvasPanel; // 0x558(0x08)
	struct UTexture2D* m_PingTextureReference; // 0x560(0x08)
	struct UMaterialInterface* PingItemMaterial; // 0x568(0x08)
	char pad_570[0x18]; // 0x570(0x18)
	struct UMaterialInstanceDynamic* m_pingMaterial; // 0x588(0x08)
	struct UMaterialInstanceDynamic* m_pingItemMaterial; // 0x590(0x08)
	char pad_598[0x10]; // 0x598(0x10)

	void HandleOnAdsUpdated(bool bIsInAds); // Function Scavenger.S_HUDPingItem.HandleOnAdsUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDReticule
// Size: 0x510 (Inherited: 0x4b8)
struct US_HUDReticule : US_WidgetMinimal {
	struct UWidgetAnimation* BloomAnimation; // 0x4b8(0x08)
	struct US_WidgetAnimation* BloomLiteAnimation; // 0x4c0(0x08)
	struct UWidgetAnimation* ChargeAnimation; // 0x4c8(0x08)
	struct US_WidgetAnimation* ChargeLiteAnimation; // 0x4d0(0x08)
	struct USoundBase* IncreasedDamageSoundCue; // 0x4d8(0x08)
	struct USoundBase* DecreasedDamageSoundCue; // 0x4e0(0x08)
	struct USoundBase* NoModifierSoundCue; // 0x4e8(0x08)
	float FadedRenderOpacity; // 0x4f0(0x04)
	float DefaultRenderOpacity; // 0x4f4(0x04)
	bool ShouldHideInAdsOverride; // 0x4f8(0x01)
	char pad_4F9[0xf]; // 0x4f9(0x0f)
	struct AS_WeaponBase* m_weapon; // 0x508(0x08)

	void SetShouldHideInAds(bool shouldHide); // Function Scavenger.S_HUDReticule.SetShouldHideInAds // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPreDealDamage(struct AActor* DamagedActor, float UnmodifiedDamageAmount, float ArmorDamageAmount, float HealthDamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, char DamageModifiersApplied, bool isCritical); // Function Scavenger.S_HUDReticule.NotifyPreDealDamage // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleStateChanged(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_HUDReticule.HandleStateChanged // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnSprintUpdated(bool bIsSprinting); // Function Scavenger.S_HUDReticule.HandleOnSprintUpdated // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnRedDotStateChanged(bool IsActive); // Function Scavenger.S_HUDReticule.HandleOnRedDotStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterShotUnblocked(enum class ES_TriggerType triggerType); // Function Scavenger.S_HUDReticule.HandleOnCharacterShotUnblocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterShotBlocked(enum class ES_TriggerType triggerType, struct FVector BlockedLocation); // Function Scavenger.S_HUDReticule.HandleOnCharacterShotBlocked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void HandleADSUpdated(bool isInAds); // Function Scavenger.S_HUDReticule.HandleADSUpdated // (Native|Protected) // @ game+0xffff8008e4a10000
	float GetWeaponWindupFraction(); // Function Scavenger.S_HUDReticule.GetWeaponWindupFraction // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetWeapon(); // Function Scavenger.S_HUDReticule.GetWeapon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDSession
// Size: 0x5f0 (Inherited: 0x5e8)
struct AS_HUDSession : AS_HUD {
	float SecondsUntilPostMatchTimeout; // 0x5e8(0x04)
	char pad_5EC[0x4]; // 0x5ec(0x04)

	void HandleOnPostMatchPhasesEnded(); // Function Scavenger.S_HUDSession.HandleOnPostMatchPhasesEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_HUDSprintReticle
// Size: 0x510 (Inherited: 0x510)
struct US_HUDSprintReticle : US_HUDReticule {
};

// Class Scavenger.S_HUDTargetInfo
// Size: 0x5f8 (Inherited: 0x4b8)
struct US_HUDTargetInfo : US_WidgetMinimal {
	bool bIsAiControlled; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	struct FLinearColor RogueThreatColor; // 0x4bc(0x10)
	struct FLinearColor RogueTransitionColor; // 0x4cc(0x10)
	struct FLinearColor NoRepColor; // 0x4dc(0x10)
	struct FLinearColor CurrentRepColor; // 0x4ec(0x10)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UDataTable* RankIcons; // 0x500(0x08)
	struct UDataTable* TeamIcons; // 0x508(0x08)
	struct UCurveFloat* ScaleCurve; // 0x510(0x08)
	float FadeInTime; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct UHorizontalBox* Nameplate; // 0x520(0x08)
	struct US_WidgetArmorContainer* ArmorContainer; // 0x528(0x08)
	struct US_WidgetCommonProgressBar* HealthBar; // 0x530(0x08)
	struct UImage* IconBackground; // 0x538(0x08)
	struct US_RichTextBlock* TargetLevel; // 0x540(0x08)
	struct UImage* TeamIcon; // 0x548(0x08)
	struct US_RichTextBlock* TargetName; // 0x550(0x08)
	struct UImage* PvpIndicator; // 0x558(0x08)
	struct USizeBox* HealthbarContainer; // 0x560(0x08)
	struct UImage* MarkedPlayerIcon; // 0x568(0x08)
	struct URetainerBox* TopRetainerBox; // 0x570(0x08)
	struct FText TargetNameRichTextLabel; // 0x578(0x18)
	struct FText CurrentLevelRichTextLabel; // 0x590(0x18)
	char pad_5A8[0xc]; // 0x5a8(0x0c)
	struct TWeakObjectPtr<struct AActor> m_actor; // 0x5b4(0x08)
	char pad_5BC[0x4]; // 0x5bc(0x04)
	struct US_StatsComponent* m_statsComponent; // 0x5c0(0x08)
	char pad_5C8[0x30]; // 0x5c8(0x30)

	void SetIsAiControlled(bool Value); // Function Scavenger.S_HUDTargetInfo.SetIsAiControlled // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFillAmount(float fillValue); // Function Scavenger.S_HUDTargetInfo.SetFillAmount // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerGearUpgraded(); // Function Scavenger.S_HUDTargetInfo.PlayerGearUpgraded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyTargetLost_BP(struct AActor* oldActor); // Function Scavenger.S_HUDTargetInfo.NotifyTargetLost_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTargetAcquired_BP(struct AActor* oldActor); // Function Scavenger.S_HUDTargetInfo.NotifyTargetAcquired_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStateChanged_BP(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_HUDTargetInfo.NotifyStateChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySimpleStatChanged_BP(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_HUDTargetInfo.NotifySimpleStatChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOwnerChanged_BP(struct AActor* oldActor, struct AActor* newActor); // Function Scavenger.S_HUDTargetInfo.NotifyOwnerChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InternalNotifyTargetLost(struct AActor* TargetActor); // Function Scavenger.S_HUDTargetInfo.InternalNotifyTargetLost // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InternalNotifyTargetAcquired(struct AActor* TargetActor); // Function Scavenger.S_HUDTargetInfo.InternalNotifyTargetAcquired // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InternalNotifyStateChanged(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_HUDTargetInfo.InternalNotifyStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InternalNotifySimpleStatChanged(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_HUDTargetInfo.InternalNotifySimpleStatChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InternalNotifyOwnerChanged(struct AActor* oldActor, struct AActor* newActor); // Function Scavenger.S_HUDTargetInfo.InternalNotifyOwnerChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerMarkedStateChanged(bool bPlayerIsMarked); // Function Scavenger.S_HUDTargetInfo.HandleOnPlayerMarkedStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct UTexture2D* GetTargetTeamIcon(struct FScavengerTeamID TeamId); // Function Scavenger.S_HUDTargetInfo.GetTargetTeamIcon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetRogueTransitionColor(); // Function Scavenger.S_HUDTargetInfo.GetRogueTransitionColor // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetRogueThreatColor(); // Function Scavenger.S_HUDTargetInfo.GetRogueThreatColor // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UTexture2D* GetRankIcon(int32_t rank); // Function Scavenger.S_HUDTargetInfo.GetRankIcon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FLinearColor GetNoRepColor(); // Function Scavenger.S_HUDTargetInfo.GetNoRepColor // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetHealth(); // Function Scavenger.S_HUDTargetInfo.GetHealth // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetFillAmount(); // Function Scavenger.S_HUDTargetInfo.GetFillAmount // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FText GetDisplayName(); // Function Scavenger.S_HUDTargetInfo.GetDisplayName // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetActor(); // Function Scavenger.S_HUDTargetInfo.GetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGInGameMenuBase
// Size: 0x6a8 (Inherited: 0x640)
struct US_UMGInGameMenuBase : US_UMGHUD {
	struct FMulticastInlineDelegate OnPageChanged; // 0x640(0x10)
	struct FMulticastInlineDelegate OnRequestClose; // 0x650(0x10)
	struct FMulticastInlineDelegate OnOpened; // 0x660(0x10)
	struct FMulticastInlineDelegate OnClosed; // 0x670(0x10)
	char pad_680[0x8]; // 0x680(0x08)
	struct UWidgetSwitcher* MenuPageSwitcher; // 0x688(0x08)
	struct US_WidgetNavBar* InGameMenuNavbar; // 0x690(0x08)
	struct TArray<struct FName> SupportedPageNames; // 0x698(0x10)

	void RequestClose(); // Function Scavenger.S_UMGInGameMenuBase.RequestClose // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OpenToPage(struct FName PageName); // Function Scavenger.S_UMGInGameMenuBase.OpenToPage // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Open(); // Function Scavenger.S_UMGInGameMenuBase.Open // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPageChange(struct FName PageName); // Function Scavenger.S_UMGInGameMenuBase.NotifyPageChange // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnRequestClose(); // Function Scavenger.S_UMGInGameMenuBase.NotifyOnRequestClose // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnOpen(); // Function Scavenger.S_UMGInGameMenuBase.NotifyOnOpen // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnClose(); // Function Scavenger.S_UMGInGameMenuBase.NotifyOnClose // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsOpen(); // Function Scavenger.S_UMGInGameMenuBase.IsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasPage(struct FName PageName); // Function Scavenger.S_UMGInGameMenuBase.HasPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleOnNavbarInteraction(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_UMGInGameMenuBase.HandleOnNavbarInteraction // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GoToPage(struct FName PageName); // Function Scavenger.S_UMGInGameMenuBase.GoToPage // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FName GetOpenPage(); // Function Scavenger.S_UMGInGameMenuBase.GetOpenPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CyclePage(enum class ES_CycleDirection cycleDirection); // Function Scavenger.S_UMGInGameMenuBase.CyclePage // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Close(); // Function Scavenger.S_UMGInGameMenuBase.Close // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanGoToPage(struct FName PageName); // Function Scavenger.S_UMGInGameMenuBase.CanGoToPage // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGInGameRadialMenu
// Size: 0x6c8 (Inherited: 0x6a8)
struct US_UMGInGameRadialMenu : US_UMGInGameMenuBase {
	enum class ES_GameInputActionType OpenInputAction; // 0x6a8(0x01)
	enum class ES_GameInputActionType ConfirmInputAction; // 0x6a9(0x01)
	enum class ES_GameInputActionType CloseInputAction; // 0x6aa(0x01)
	char pad_6AB[0x5]; // 0x6ab(0x05)
	struct TArray<enum class ES_GameInputActionType> BlockedInputActions; // 0x6b0(0x10)
	struct US_WidgetRadialPanel* RadialPanel; // 0x6c0(0x08)

	void ConfirmSelectionAndClose(); // Function Scavenger.S_UMGInGameRadialMenu.ConfirmSelectionAndClose // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ActivateSelection(); // Function Scavenger.S_UMGInGameRadialMenu.ActivateSelection // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InGameRadialMenuPing
// Size: 0x700 (Inherited: 0x6c8)
struct US_InGameRadialMenuPing : US_UMGInGameRadialMenu {
	struct US_WidgetRadialPingItem* ItemPingWidgetClass; // 0x6c8(0x08)
	struct FDataTableRowHandle PingNameTextFormatHandle; // 0x6d0(0x10)
	struct FDataTableRowHandle LocalizedQuickPingTextHandle; // 0x6e0(0x10)
	struct FDataTableRowHandle LocalizedClearAllTextHandle; // 0x6f0(0x10)

	void OnRadialPanelSelectionIndexChanged(int32_t OldSelection, int32_t NewSelection); // Function Scavenger.S_InGameRadialMenuPing.OnRadialPanelSelectionIndexChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InGameRadialMenuQuickItems
// Size: 0x6d0 (Inherited: 0x6c8)
struct US_InGameRadialMenuQuickItems : US_UMGInGameRadialMenu {
	struct US_WidgetRadialEquippedItem* ItemWidgetClass; // 0x6c8(0x08)

	void NotifyQuickItemSlotChanged(int32_t quickItemIndex); // Function Scavenger.S_InGameRadialMenuQuickItems.NotifyQuickItemSlotChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnQuickItemSlotChanged(enum class ES_EquipmentSlot NewSlot); // Function Scavenger.S_InGameRadialMenuQuickItems.HandleOnQuickItemSlotChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InteractableIconComponent
// Size: 0x2c0 (Inherited: 0x200)
struct US_InteractableIconComponent : USceneComponent {
	struct UMaterialInterface* MainIconMaterial; // 0x1f8(0x08)
	struct UMaterialInterface* NoPickupIconMaterial; // 0x200(0x08)
	struct FVector2D IconScale; // 0x208(0x08)
	char pad_218[0xc]; // 0x218(0x0c)
	enum class ES_InteractIcon m_CachedItemType; // 0x224(0x01)
	char pad_225[0x3]; // 0x225(0x03)
	struct TMap<int32_t, struct UMaterialInterface*> m_disabledMaterials; // 0x228(0x50)
	char pad_278[0x8]; // 0x278(0x08)
	struct USceneComponent* m_cachedTaggedSceneComponent; // 0x280(0x08)
	char pad_288[0x28]; // 0x288(0x28)
	struct US_WidgetInteractableIcon* m_widgetInteractableIcon; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)

	void SetZOffset(float ZOffset); // Function Scavenger.S_InteractableIconComponent.SetZOffset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOwningInteractableInstance(struct FS_InteractableItem InteractableItem); // Function Scavenger.S_InteractableIconComponent.SetOwningInteractableInstance // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsInUse(bool inIsInUse); // Function Scavenger.S_InteractableIconComponent.SetIsInUse // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFallOffSizeCurve(struct UCurveFloat* fallOffCurve); // Function Scavenger.S_InteractableIconComponent.SetFallOffSizeCurve // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFallOffOpacityCurve(struct UCurveFloat* fallOffCurve); // Function Scavenger.S_InteractableIconComponent.SetFallOffOpacityCurve // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBillboardMaterial(struct UMaterialInterface* Material); // Function Scavenger.S_InteractableIconComponent.SetBillboardMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBillboardElementFromItem(struct FS_InteractableItem InteractableItem); // Function Scavenger.S_InteractableIconComponent.SetBillboardElementFromItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnToggleHUD(); // Function Scavenger.S_InteractableIconComponent.OnToggleHUD // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnInventoryChanged(); // Function Scavenger.S_InteractableIconComponent.OnInventoryChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnEquipmentItemUnequiped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState); // Function Scavenger.S_InteractableIconComponent.OnEquipmentItemUnequiped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnEquipmentItemEquiped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState ItemState); // Function Scavenger.S_InteractableIconComponent.OnEquipmentItemEquiped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnEquipmentItemChanged(enum class ES_EquipmentSlot SlotIndex, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_InteractableIconComponent.OnEquipmentItemChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnADSUpdated(bool IsADSOn); // Function Scavenger.S_InteractableIconComponent.OnADSUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsInUse(); // Function Scavenger.S_InteractableIconComponent.IsInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void InitializeFromPlayerController(struct AS_PlayerController* PlayerController); // Function Scavenger.S_InteractableIconComponent.InitializeFromPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetZOffset(); // Function Scavenger.S_InteractableIconComponent.GetZOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwningInteractableInstance(struct FS_InteractableItem InteractableItem); // Function Scavenger.S_InteractableIconComponent.GetIsOwningInteractableInstance // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void CheckPickupFromEquipmentAndInventory(); // Function Scavenger.S_InteractableIconComponent.CheckPickupFromEquipmentAndInventory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InteractableIconConfig
// Size: 0x6a8 (Inherited: 0x30)
struct US_InteractableIconConfig : UDataAsset {
	struct UTexture2D* InteractableIcons[0x38]; // 0x30(0x1c0)
	struct UTexture2D* WeaponIcons[0xc]; // 0x1f0(0x60)
	struct TSet<enum class ES_CosmeticWeaponClass> SquareWeaponClasses; // 0x250(0x50)
	struct UTexture2D* AmmoIcons[0xa]; // 0x2a0(0x50)
	struct UCurveFloat* IconOpacityReticuleCurve; // 0x2f0(0x08)
	struct UCurveFloat* IconFadeOutOpacityCurves[0x38]; // 0x2f8(0x1c0)
	struct UCurveFloat* IconFadeOutSizeCurves[0x38]; // 0x4b8(0x1c0)
	struct UMaterialInterface* InteractableIconBaseMaterial; // 0x678(0x08)
	struct UMaterialInterface* WeaponIconBaseMaterial; // 0x680(0x08)
	struct UMaterialInterface* AmmoIconBaseMaterial; // 0x688(0x08)
	struct UCurveFloat* DefaultIconFadeOutOpacityCurve; // 0x690(0x08)
	struct UCurveFloat* DefaultIconFadeOutSizeCurve; // 0x698(0x08)
	struct UMaterialInterface* NoPickupDisplayMaterial; // 0x6a0(0x08)

	struct UMaterialInterface* GetNoPickupMaterial(); // Function Scavenger.S_InteractableIconConfig.GetNoPickupMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InteractionManagerComponent
// Size: 0x188 (Inherited: 0xb0)
struct US_InteractionManagerComponent : UActorComponent {
	struct TMap<struct TWeakObjectPtr<struct AS_PlayerController>, struct FS_InteractionPlayerState> m_playerControllerToInteractionPlayerState; // 0xb0(0x50)
	struct TMap<struct FS_InteractableTuple, struct FS_InteractableDataWrapper> m_interactableTupleToDataAndIndex; // 0x100(0x50)
	struct TArray<struct FS_InteractableTuple> m_sortedInteractableTuples; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
	float PlayerInteractionRadius; // 0x170(0x04)
	float PlayerInteractionMaximumAngle; // 0x174(0x04)
	float InteractableReplicationRadius; // 0x178(0x04)
	int32_t MaximumNumberOfReplicatedInteractables; // 0x17c(0x04)
	float PlayerCurrencyAutoPickupRadius; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)

	void UnregisterInteractableActorWithIndex(struct AActor* InteractableActor, int32_t instanceIndex); // Function Scavenger.S_InteractionManagerComponent.UnregisterInteractableActorWithIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnregisterInteractableActorComponentWithIndex(struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, int32_t instanceIndex); // Function Scavenger.S_InteractionManagerComponent.UnregisterInteractableActorComponentWithIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnregisterInteractableActorComponent(struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent); // Function Scavenger.S_InteractionManagerComponent.UnregisterInteractableActorComponent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnregisterInteractableActor(struct AActor* InteractableActor); // Function Scavenger.S_InteractionManagerComponent.UnregisterInteractableActor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterInteractableActorWithIndex(struct AActor* InteractableActor, int32_t instanceIndex, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractionManagerComponent.RegisterInteractableActorWithIndex // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterInteractableActorComponentWithIndex(struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, int32_t instanceIndex, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractionManagerComponent.RegisterInteractableActorComponentWithIndex // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterInteractableActorComponent(struct AActor* InteractableActor, struct UPrimitiveComponent* InteractableComponent, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractionManagerComponent.RegisterInteractableActorComponent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterInteractableActor(struct AActor* InteractableActor, struct FS_InteractableData InteractableData); // Function Scavenger.S_InteractionManagerComponent.RegisterInteractableActor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandlePlayerLogout(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_InteractionManagerComponent.HandlePlayerLogout // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	struct US_InteractionManagerComponent* GetInteractionManagerComponentOfWorld(struct UWorld* World); // Function Scavenger.S_InteractionManagerComponent.GetInteractionManagerComponentOfWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_InteractionManagerComponent* GetInteractionManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_InteractionManagerComponent.GetInteractionManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InteractionFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_InteractionFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsInteractionValid(struct FS_InteractionFeedbackState interactionFeedbackState); // Function Scavenger.S_InteractionFunctionLibrary.IsInteractionValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsInteractionInProgress(struct FS_InteractionFeedbackState interactionFeedbackState); // Function Scavenger.S_InteractionFunctionLibrary.IsInteractionInProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void GetInteractionText(struct AS_PlayerController* PlayerController, struct FText outPrimaryInteractonText, struct FText outSecondaryInteractionText); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractionText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetInteractionProgressPercentage(struct FS_InteractionFeedbackState interactionFeedbackState); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractionProgressPercentage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetInteractionItemData(struct AS_PlayerController* PlayerController, struct FS_ItemState outItemState, struct FS_ItemMetadata outItemMetadata); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractionItemData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetInteractableScreenLocation(struct AS_PlayerController* PlayerController, struct FVector2D outScreenLocation); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractableScreenLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetInteractableItemBounds(struct FS_InteractableItem InteractableItem, struct FBox outBounds); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractableItemBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_InteractableItem GetInteractableItem(struct AS_PlayerController* PlayerController); // Function Scavenger.S_InteractionFunctionLibrary.GetInteractableItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_InventoryComponent
// Size: 0x250 (Inherited: 0xb0)
struct US_InventoryComponent : UActorComponent {
	struct FMulticastInlineDelegate OnChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemAdded; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemRemoved; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMaximumCapacityChanged; // 0xf0(0x10)
	char pad_100[0x30]; // 0x100(0x30)
	struct TArray<struct FS_ItemState> InitialInventoryItems; // 0x130(0x10)
	int32_t MaximumCapacityByCategory[0xe]; // 0x140(0x38)
	struct TArray<int32_t> m_capacitiesByCategory; // 0x178(0x10)
	char pad_188[0x50]; // 0x188(0x50)
	struct TArray<struct FS_ItemState> m_items; // 0x1d8(0x10)
	char pad_1E8[0x20]; // 0x1e8(0x20)
	struct TArray<struct FS_ItemState> m_predictedItems; // 0x208(0x10)
	char pad_218[0x38]; // 0x218(0x38)

	void Reset(); // Function Scavenger.S_InventoryComponent.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedItems(); // Function Scavenger.S_InventoryComponent.NotifyReplicatedItems // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCapacitiesByCategory(); // Function Scavenger.S_InventoryComponent.NotifyReplicatedCapacitiesByCategory // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_InventoryComponent* GetInventoryComponentOfActor(struct AActor* Actor); // Function Scavenger.S_InventoryComponent.GetInventoryComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemData
// Size: 0x100 (Inherited: 0x30)
struct US_ItemData : UDataAsset {
	struct FS_ItemMetadataTableRowReference MetaData; // 0x30(0x20)
	struct AS_ItemPickup* ItemPickupClass; // 0x50(0x08)
	struct USkeletalMesh* EquipmentMesh; // 0x58(0x08)
	struct AActor* EquipmentClass; // 0x60(0x08)
	struct FName EquipmentSocketName; // 0x68(0x08)
	struct US_ItemStatsEffectArray* EquippedStatsEffectArrayClass; // 0x70(0x08)
	struct TMap<struct FName, struct UPhysicalMaterial*> EquippedBonePhysicsMaterialOverrides; // 0x78(0x50)
	struct US_ItemStatsEffectArray* ConsumableStatsEffectArrayClass; // 0xc8(0x08)
	struct TArray<struct UGameplayEffect*> GameplayEffectsOnConsume; // 0xd0(0x10)
	struct AS_WeaponProjectileAttachment* GrenadeProjectileAttachment; // 0xe0(0x08)
	struct FDataTableRowHandle FlashPointSettingsHandle; // 0xe8(0x10)
	struct UAnimMontage* ConsumableMontage; // 0xf8(0x08)

	bool GetItemMetadata_BP(struct FS_ItemMetadata outItemMetadata); // Function Scavenger.S_ItemData.GetItemMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetItemId(); // Function Scavenger.S_ItemData.GetItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetFlashpointSettings_BP(struct FS_FlashpointSettings OutFlashpointSettings); // Function Scavenger.S_ItemData.GetFlashpointSettings_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemManager
// Size: 0x28 (Inherited: 0x28)
struct US_ItemManager : UBlueprintFunctionLibrary {

	void UnequipItem(struct AActor* Owner, enum class ES_EquipmentSlot EquipmentSlot, int32_t Flags, enum class ES_ItemPickupOrDropReason unequipReason); // Function Scavenger.S_ItemManager.UnequipItem // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_ItemPickup* SpawnItemPickupWithLocationAndRotation(struct UObject* Context, struct FVector Location, struct FRotator Rotation, struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.SpawnItemPickupWithLocationAndRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_ItemPickup* SpawnItemPickupFromPawn(struct APawn* pawnSource, struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.SpawnItemPickupFromPawn // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_ItemPickup* SpawnItemPickupFromActor(struct AActor* actorSource, struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.SpawnItemPickupFromActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveItem(struct AActor* Owner, struct FS_ItemState ItemState, int32_t Flags, enum class ES_ItemPickupOrDropReason RemoveReason, int32_t outNumberRemoved); // Function Scavenger.S_ItemManager.RemoveItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_ItemState MakeCurrencyItemState(struct UObject* Context, enum class ES_CurrencyType CurrencyType, int32_t Count); // Function Scavenger.S_ItemManager.MakeCurrencyItemState // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ItemState MakeAmmoItemState(struct UObject* Context, enum class ES_AmmoType AmmoType, int32_t Count); // Function Scavenger.S_ItemManager.MakeAmmoItemState // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasItem(struct AActor* Owner, struct FS_ItemState ItemState, int32_t Flags); // Function Scavenger.S_ItemManager.HasItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetServerTimestamp(struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.GetServerTimestamp // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetLockedCount(struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.GetLockedCount // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TMap<struct US_ItemData*, int32_t> GetItemCatalog(struct AActor* Owner, int32_t Flags); // Function Scavenger.S_ItemManager.GetItemCatalog // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetCurrencyItemData(struct UObject* Context, enum class ES_CurrencyType CurrencyType); // Function Scavenger.S_ItemManager.GetCurrencyItemData // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetCountOfItemFromHandle(struct AActor* Owner, struct TSoftObjectPtr<struct US_ItemData> ItemHandle, int32_t Flags); // Function Scavenger.S_ItemManager.GetCountOfItemFromHandle // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetCountOfItem(struct AActor* Owner, struct US_ItemData* ItemData, int32_t Flags); // Function Scavenger.S_ItemManager.GetCountOfItem // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_InventoryCategory GetCategoryOfItemFromItemState(struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.GetCategoryOfItemFromItemState // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_InventoryCategory GetCategoryOfItemFromItemData(struct US_ItemData* ItemData); // Function Scavenger.S_ItemManager.GetCategoryOfItemFromItemData // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetAvailableCount(struct FS_ItemState ItemState); // Function Scavenger.S_ItemManager.GetAvailableCount // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetAmmoItemData(struct UObject* Context, enum class ES_AmmoType AmmoType); // Function Scavenger.S_ItemManager.GetAmmoItemData // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool EquipItem(struct AActor* Owner, enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState, int32_t Flags, enum class ES_ItemPickupOrDropReason equipReason); // Function Scavenger.S_ItemManager.EquipItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ChangeItem(struct AActor* Owner, enum class ES_ItemChangeOperation Operation, struct US_ItemData* ItemData, int32_t numberToChange, int32_t Flags, int32_t outNumberChanged); // Function Scavenger.S_ItemManager.ChangeItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanAddItem(struct AActor* Owner, struct FS_ItemState ItemState, int32_t Flags); // Function Scavenger.S_ItemManager.CanAddItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool AddItem(struct AActor* Owner, struct FS_ItemState ItemState, int32_t Flags, enum class ES_ItemPickupOrDropReason pickupReason, int32_t outNumberAdded); // Function Scavenger.S_ItemManager.AddItem // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemManagerComponent
// Size: 0x1d0 (Inherited: 0xb0)
struct US_ItemManagerComponent : UActorComponent {
	struct TArray<struct FS_ItemState> InitialInventoryItems; // 0xb0(0x10)
	struct FName InitialEquippedItems[0x11]; // 0xc0(0x88)
	struct US_ItemData* InitialEquippedItemData[0x11]; // 0x148(0x88)

	void ServerRequestUseInventory(int32_t SlotIndex); // Function Scavenger.S_ItemManagerComponent.ServerRequestUseInventory // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestUseEquipment(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_ItemManagerComponent.ServerRequestUseEquipment // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDropInventory(int32_t sourceInventorySlotIndex); // Function Scavenger.S_ItemManagerComponent.ServerRequestDropInventory // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDropEquipmentOnEquipment(int32_t sourceEquipmentSlotIndex, int32_t destinationEquipmentSlotIndex); // Function Scavenger.S_ItemManagerComponent.ServerRequestDropEquipmentOnEquipment // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDropEquipment(enum class ES_EquipmentSlot sourceEquipmentSlot); // Function Scavenger.S_ItemManagerComponent.ServerRequestDropEquipment // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void Reset(); // Function Scavenger.S_ItemManagerComponent.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_ItemManagerComponent* GetItemManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_ItemManagerComponent.GetItemManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemPickup
// Size: 0x5d8 (Inherited: 0x448)
struct AS_ItemPickup : AS_ItemBase {
	char pad_448[0x8]; // 0x448(0x08)
	struct FMulticastInlineDelegate OnItemStateChanged; // 0x450(0x10)
	struct US_InteractableIconComponent* OverrideInteractableIconComponent; // 0x460(0x08)
	struct FMulticastInlineDelegate OnItemPendingDestruction; // 0x468(0x10)
	struct FMulticastInlineDelegate OnItemPickedUp; // 0x478(0x10)
	struct FS_InteractableData InteractableData; // 0x488(0x90)
	bool bAlwaysFullPickup; // 0x518(0x01)
	char pad_519[0x3]; // 0x519(0x03)
	float TimeUntilDeactivate; // 0x51c(0x04)
	int32_t DeactivateTries; // 0x520(0x04)
	char pad_524[0x4]; // 0x524(0x04)
	struct TArray<struct FS_SkeletalMeshAndSocketNamePair> AdditionalSkeletalMeshesWithSocketNames; // 0x528(0x10)
	float DestructionDelayTime; // 0x538(0x04)
	float AutoCollectBlockTimeInSeconds; // 0x53c(0x04)
	char pad_540[0x8]; // 0x540(0x08)
	struct USC_SkeletalMeshComponent* ItemPickupMesh; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)
	struct US_ItemData* m_lastUpdatedItemData; // 0x558(0x08)
	bool m_isPendingDestroy; // 0x560(0x01)
	char pad_561[0x7]; // 0x561(0x07)
	struct TArray<struct USC_SkeletalMeshComponent*> m_additionalSkeletalMeshComponents; // 0x568(0x10)
	struct TMap<struct FName, struct FS_ItemPickupAdditionalMeshRecord> m_socketNameToAdditionalSkeletalMeshComponents; // 0x578(0x50)
	char pad_5C8[0x10]; // 0x5c8(0x10)

	void SetItemCount(int32_t Count); // Function Scavenger.S_ItemPickup.SetItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function Scavenger.S_ItemPickup.OnHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void NotifyReplicatedPendingDestroy(); // Function Scavenger.S_ItemPickup.NotifyReplicatedPendingDestroy // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetItemCount(); // Function Scavenger.S_ItemPickup.GetItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddMassNormalizedImpulse(struct FVector impulseDirection, float impulseScale); // Function Scavenger.S_ItemPickup.AddMassNormalizedImpulse // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemStatsEffect
// Size: 0x30 (Inherited: 0x28)
struct US_ItemStatsEffect : UObject {
	char bIsPermanent : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float DurationInSeconds; // 0x2c(0x04)
};

// Class Scavenger.S_ItemStatsEffectArray
// Size: 0x38 (Inherited: 0x28)
struct US_ItemStatsEffectArray : UObject {
	struct TArray<struct US_ItemStatsEffect*> ItemStatsEffects; // 0x28(0x10)
};

// Class Scavenger.S_ItemStatsEffectContinuousCondition
// Size: 0x38 (Inherited: 0x30)
struct US_ItemStatsEffectContinuousCondition : US_ItemStatsEffect {
	enum class ES_StatType StatType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ChangePerSecond; // 0x34(0x04)

	float GetChangePerSecond_BP(struct AActor* affectedActor, struct TSet<struct FName> causeTags, float defaultChangePerSecond); // Function Scavenger.S_ItemStatsEffectContinuousCondition.GetChangePerSecond_BP // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemStatsEffectIntervalCondition
// Size: 0x40 (Inherited: 0x30)
struct US_ItemStatsEffectIntervalCondition : US_ItemStatsEffect {
	enum class ES_StatType StatType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ChangePerTick; // 0x34(0x04)
	float IntervalBetweenTicksInSeconds; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	float GetChangePerTick_BP(struct AActor* affectedActor, struct TSet<struct FName> causeTags, float defaultChangePerTick); // Function Scavenger.S_ItemStatsEffectIntervalCondition.GetChangePerTick_BP // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ItemStatsEffectRemoveDamageOverTimeCount
// Size: 0x38 (Inherited: 0x30)
struct US_ItemStatsEffectRemoveDamageOverTimeCount : US_ItemStatsEffect {
	enum class ES_DamageOverTimeType DamageOverTimeType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t TickCountToRemove; // 0x34(0x04)
};

// Class Scavenger.S_ItemViewerInputComponent
// Size: 0xd8 (Inherited: 0xb0)
struct US_ItemViewerInputComponent : UActorComponent {
	struct FVector RotationVectorScalars; // 0xb0(0x0c)
	float BaseRotationSpeed; // 0xbc(0x04)
	char pad_C0[0x18]; // 0xc0(0x18)

	void NotifyRegisteredObjectChanged(); // Function Scavenger.S_ItemViewerInputComponent.NotifyRegisteredObjectChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActiveStateChanged(bool IsActive); // Function Scavenger.S_ItemViewerInputComponent.NotifyActiveStateChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_Keeper
// Size: 0x2b8 (Inherited: 0x288)
struct AS_Keeper : AActor {
	struct USkeletalMeshComponent* KeeperSkeletalMesh; // 0x288(0x08)
	char pad_290[0x28]; // 0x290(0x28)

	void SetMeshFromCosmeticData(struct FS_CosmeticItemMetadata cosmeticMetadata); // Function Scavenger.S_Keeper.SetMeshFromCosmeticData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* GetPlayer_BP(); // Function Scavenger.S_Keeper.GetPlayer_BP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_KeeperInteractable
// Size: 0x2e8 (Inherited: 0x2d0)
struct AS_KeeperInteractable : AS_InteractableActor {
	float m_cullDistance; // 0x2d0(0x04)
	struct FName AssociatedChallenge; // 0x2d4(0x08)
	char pad_2DC[0xc]; // 0x2dc(0x0c)

	struct FName GetAssociatedChallenge(); // Function Scavenger.S_KeeperInteractable.GetAssociatedChallenge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EventUpdateEndTime(float ServerEndTime); // Function Scavenger.S_KeeperInteractable.EventUpdateEndTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventStop(); // Function Scavenger.S_KeeperInteractable.EventStop // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventStart(struct AS_PlayerController* PlayerController, float ServerEndTime); // Function Scavenger.S_KeeperInteractable.EventStart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FName BP_GetAssociatedChallenge(); // Function Scavenger.S_KeeperInteractable.BP_GetAssociatedChallenge // (Event|Public|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_KillZVolume
// Size: 0x2d0 (Inherited: 0x2d0)
struct AS_KillZVolume : APhysicsVolume {
};

// Class Scavenger.S_LandscapeDeformerAgent
// Size: 0x148 (Inherited: 0xb0)
struct US_LandscapeDeformerAgent : UActorComponent {
	struct TArray<struct FS_LandscapeDeformationAgentBone> Bones; // 0xb0(0x10)
	struct US_LandscapeDeformer* m_landscapeDeformer; // 0xc0(0x08)
	struct USkeletalMeshComponent* m_skeleton; // 0xc8(0x08)
	float SampleInterval; // 0xd0(0x04)
	float SampleDistance; // 0xd4(0x04)
	struct FName GaitName; // 0xd8(0x08)
	float FullTickVelocityInMetersPerSecond; // 0xe0(0x04)
	float FullTickDistanceInMeters; // 0xe4(0x04)
	char pad_E8[0x5c]; // 0xe8(0x5c)
	bool m_bEnabled; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
};

// Class Scavenger.S_LandscapeDeformerStreamTracker
// Size: 0x38 (Inherited: 0x28)
struct US_LandscapeDeformerStreamTracker : UObject {
	struct ULevelStreaming* Stream; // 0x28(0x08)
	struct US_LandscapeDeformer* Deformer; // 0x30(0x08)

	void OnLevelShown(); // Function Scavenger.S_LandscapeDeformerStreamTracker.OnLevelShown // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnLevelHidden(); // Function Scavenger.S_LandscapeDeformerStreamTracker.OnLevelHidden // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LandscapeDeformerHeightmapTexture
// Size: 0xf0 (Inherited: 0xe0)
struct US_LandscapeDeformerHeightmapTexture : UTexture {
	char pad_E0[0x10]; // 0xe0(0x10)
};

// Class Scavenger.S_LandscapeDeformer
// Size: 0x208 (Inherited: 0xb0)
struct US_LandscapeDeformer : UActorComponent {
	int32_t HeightmapResolution; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TSoftObjectPtr<struct UMaterialParameterCollection> LandscapeMPC; // 0xb8(0x28)
	float LandscapeDepth; // 0xe0(0x04)
	float ViewDistance; // 0xe4(0x04)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UMaterialParameterCollectionInstance* m_landscapeMPCInst; // 0xf0(0x08)
	struct TArray<struct FS_LandscapeDeformerFootprint> m_footprintsToDraw; // 0xf8(0x10)
	struct TArray<struct FS_LandscapeDeformerPath> m_pathsToDraw; // 0x108(0x10)
	char pad_118[0x18]; // 0x118(0x18)
	struct TArray<struct FS_LandscapeDeformerFootprint> m_footprintsToSend; // 0x130(0x10)
	char pad_140[0x10]; // 0x140(0x10)
	struct UDataTable* GaitDataTable; // 0x150(0x08)
	char pad_158[0x18]; // 0x158(0x18)
	struct TArray<struct US_LandscapeDeformerStreamTracker*> m_streamTrackers; // 0x170(0x10)
	struct TMap<struct ULevelStreaming*, struct ALandscapeProxy*> m_landscapes; // 0x180(0x50)
	char pad_1D0[0x10]; // 0x1d0(0x10)
	float ElevationSize; // 0x1e0(0x04)
	char pad_1E4[0x4]; // 0x1e4(0x04)
	struct TArray<struct FS_SnowLayer> SnowLayers; // 0x1e8(0x10)
	struct US_LandscapeDeformerHeightmapTexture* m_heightmap; // 0x1f8(0x08)
	char pad_200[0x8]; // 0x200(0x08)

	void ResetFootprints_Server(); // Function Scavenger.S_LandscapeDeformer.ResetFootprints_Server // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ReceivePathsQuantized(struct TArray<struct FS_LandscapeDeformerQuantizedPath> Paths); // Function Scavenger.S_LandscapeDeformer.ReceivePathsQuantized // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void PlaceFootprint(struct FVector Position, float Size, float Depth); // Function Scavenger.S_LandscapeDeformer.PlaceFootprint // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetLandscapeDepth(); // Function Scavenger.S_LandscapeDeformer.GetLandscapeDepth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetHeightmapResolution(); // Function Scavenger.S_LandscapeDeformer.GetHeightmapResolution // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FIntVector GetCurrentCell(); // Function Scavenger.S_LandscapeDeformer.GetCurrentCell // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AcknowledgePaths(); // Function Scavenger.S_LandscapeDeformer.AcknowledgePaths // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LatencyBeacon
// Size: 0x2f0 (Inherited: 0x288)
struct AS_LatencyBeacon : AActor {
	char pad_288[0x1c]; // 0x288(0x1c)
	int32_t m_tickCount; // 0x2a4(0x04)
	char pad_2A8[0x20]; // 0x2a8(0x20)
	float m_currentMSAvg; // 0x2c8(0x04)
	int32_t m_AIControllerCount; // 0x2cc(0x04)
	int32_t m_ProcessedSightPerceptionQueries; // 0x2d0(0x04)
	int32_t m_TracedSightPerceptionQueries; // 0x2d4(0x04)
	int32_t m_TotalSightPerceptionQueries; // 0x2d8(0x04)
	bool m_isBuildingNavMesh; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	float m_timeSpentBuildingNavMesh; // 0x2e0(0x04)
	bool m_isNavMeshLocked; // 0x2e4(0x01)
	char pad_2E5[0xb]; // 0x2e5(0x0b)

	void WorkerConsoleCommand(struct FString Command); // Function Scavenger.S_LatencyBeacon.WorkerConsoleCommand // (Net|NetReliableNative|Event|Public|NetValidate) // @ game+0xffff8008e4a10000
	void RequestDebugTriggerNearbyAlarms(struct FVector Position, float Distance); // Function Scavenger.S_LatencyBeacon.RequestDebugTriggerNearbyAlarms // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void RequestDebugResetNearbyEncounters(struct FVector Position, float Distance); // Function Scavenger.S_LatencyBeacon.RequestDebugResetNearbyEncounters // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void RequestDebugBrainDeadAI(struct AS_AICharacter* aiCharacter, bool brainDead); // Function Scavenger.S_LatencyBeacon.RequestDebugBrainDeadAI // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTickCount(); // Function Scavenger.S_LatencyBeacon.NotifyReplicatedTickCount // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LatencyBeacon_OffloadWorker
// Size: 0x2f0 (Inherited: 0x2f0)
struct AS_LatencyBeacon_OffloadWorker : AS_LatencyBeacon {

	void ServerEventGameplayAuthority(struct FName EventName, struct AActor* Actor, struct UObject* objectParameter, float floatParameter1, float floatParameter2); // Function Scavenger.S_LatencyBeacon_OffloadWorker.ServerEventGameplayAuthority // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LeapAbilityBase
// Size: 0x3c8 (Inherited: 0x3b8)
struct US_LeapAbilityBase : US_GameplayAbility {
	struct FVector trajectory; // 0x3b8(0x0c)
	char pad_3C4[0x4]; // 0x3c4(0x04)

	struct FVector GetStoredTrajectory(); // Function Scavenger.S_LeapAbilityBase.GetStoredTrajectory // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LerpToAction
// Size: 0x80 (Inherited: 0x30)
struct US_LerpToAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate LerpToReached; // 0x30(0x10)
	char pad_40[0x40]; // 0x40(0x40)

	struct US_LerpToAction* StartLerpTo(struct AS_AICharacter* aiCharacter, float Time, struct FVector Start, struct FVector Destination, struct FRotator startRotation, struct FRotator destinatinRotation); // Function Scavenger.S_LerpToAction.StartLerpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LevelStreamingDebugLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_LevelStreamingDebugLibrary : UBlueprintFunctionLibrary {

	void DrawLevelStreamingOverlay(struct FPaintContext PaintContext, struct UWidget* Map, struct FString DebugStreamingLayerName, struct UDataTable* DebugSizeDataTable, struct FVector CameraWorldPosition, float CameraOrthoWidth, struct USlateBrushAsset* SlateBrushAsset, struct UFont* FontAsset); // Function Scavenger.S_LevelStreamingDebugLibrary.DrawLevelStreamingOverlay // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LintHelpers
// Size: 0x28 (Inherited: 0x28)
struct US_LintHelpers : UBlueprintFunctionLibrary {

	void ValidateUIWidgets(bool clearLog); // Function Scavenger.S_LintHelpers.ValidateUIWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RunDependencyCongestionDetection(struct FName From, struct FName To, bool clearLog); // Function Scavenger.S_LintHelpers.RunDependencyCongestionDetection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintRedirectors(bool clearLog); // Function Scavenger.S_LintHelpers.LintRedirectors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintNamePrefixes(bool clearLog); // Function Scavenger.S_LintHelpers.LintNamePrefixes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintMemoryFootprints(bool excludeCommon, bool clearLog); // Function Scavenger.S_LintHelpers.LintMemoryFootprints // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintInvalidAssets(bool clearLog); // Function Scavenger.S_LintHelpers.LintInvalidAssets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintDependencies(bool clearLog); // Function Scavenger.S_LintHelpers.LintDependencies // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintAssetLocations(bool clearLog); // Function Scavenger.S_LintHelpers.LintAssetLocations // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LintAll(bool clearLog); // Function Scavenger.S_LintHelpers.LintAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetNewAssetName(struct UObject* Target, struct FString oldPrefix, struct FString newPrefix, bool smartTarget, bool clearLog); // Function Scavenger.S_LintHelpers.GetNewAssetName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CharacterLoadoutUtilities
// Size: 0x28 (Inherited: 0x28)
struct US_CharacterLoadoutUtilities : UBlueprintFunctionLibrary {
};

// Class Scavenger.S_LocalGameJoinParametersSave
// Size: 0x148 (Inherited: 0x28)
struct US_LocalGameJoinParametersSave : USaveGame {
	struct FS_LocalGameJoinParameters JoinParameters; // 0x28(0x120)
};

// Class Scavenger.S_LocalPlayer
// Size: 0x290 (Inherited: 0x258)
struct US_LocalPlayer : ULocalPlayer {
	char pad_258[0x38]; // 0x258(0x38)

	void RecheckValidityOfControllerID(); // Function Scavenger.S_LocalPlayer.RecheckValidityOfControllerID // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LootAudioSystem
// Size: 0x230 (Inherited: 0x28)
struct US_LootAudioSystem : UObject {
	float GroupingDelay; // 0x28(0x04)
	float AudibleDistance; // 0x2c(0x04)
	struct FS_LootAudioTypeInfo ItemTypeInfo[0x9]; // 0x30(0x1b0)
	char pad_1E0[0x50]; // 0x1e0(0x50)

	void TriggerLootEvent(struct US_LootComponent* LootComp, enum class ES_ItemType ItemType, enum class ES_ItemRarity ItemRarity, int32_t Amount); // Function Scavenger.S_LootAudioSystem.TriggerLootEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostLootAudioEvent(struct US_LootComponent* LootComp, struct FString EventName); // Function Scavenger.S_LootAudioSystem.PostLootAudioEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LootComponent
// Size: 0x140 (Inherited: 0xb0)
struct US_LootComponent : UActorComponent {
	struct FS_SoftDataTableRowHandle LootDescriptorSoftRowHandle; // 0xb0(0x38)
	struct FDataTableRowHandle LootDescriptorRowHandle; // 0xe8(0x10)
	struct TArray<struct FS_ItemState> m_lootItems; // 0xf8(0x10)
	char pad_108[0x38]; // 0x108(0x38)

	bool TryToSpawnLoot(struct TArray<struct FS_ItemState> lootItems, struct FS_LootSpawnSettings LootSpawnSettings); // Function Scavenger.S_LootComponent.TryToSpawnLoot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TryToGenerateAndSpawnLoot(struct FS_LootSpawnSettings LootSpawnSettings); // Function Scavenger.S_LootComponent.TryToGenerateAndSpawnLoot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MulticastPlayLootAudio(struct FString EventName); // Function Scavenger.S_LootComponent.MulticastPlayLootAudio // (Net|Native|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	bool IsLootSpawningInProgress(); // Function Scavenger.S_LootComponent.IsLootSpawningInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLootDescriptorNull(); // Function Scavenger.S_LootComponent.IsLootDescriptorNull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_ItemState> GenerateLoot(); // Function Scavenger.S_LootComponent.GenerateLoot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LootContainer
// Size: 0x2e8 (Inherited: 0x2d0)
struct AS_LootContainer : AS_InteractableActor {
	struct USC_SkeletalMeshComponent* m_mesh; // 0x2d0(0x08)
	struct UArrowComponent* m_lootSpawnLocation; // 0x2d8(0x08)
	float m_cullDistance; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
};

// Class Scavenger.S_LootTableDescriptorData
// Size: 0x40 (Inherited: 0x30)
struct US_LootTableDescriptorData : UDataAsset {
	struct FS_LootTableDescriptor LootTableDescriptor; // 0x30(0x10)
};

// Class Scavenger.S_ManagedSoundBankComponent
// Size: 0xc0 (Inherited: 0xb0)
struct US_ManagedSoundBankComponent : UActorComponent {
	struct TArray<struct UAkAudioBank*> AudioBanks; // 0xb0(0x10)

	void RemoveManagedBank(struct UAkAudioBank* AudioBank); // Function Scavenger.S_ManagedSoundBankComponent.RemoveManagedBank // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveBank(struct UAkAudioBank* AudioBank); // Function Scavenger.S_ManagedSoundBankComponent.RemoveBank // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void AddManagedBank(struct UAkAudioBank* AudioBank); // Function Scavenger.S_ManagedSoundBankComponent.AddManagedBank // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddBank(struct UAkAudioBank* AudioBank); // Function Scavenger.S_ManagedSoundBankComponent.AddBank // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_MapConfig
// Size: 0x538 (Inherited: 0x30)
struct US_MapConfig : UDataAsset {
	struct FS_MapDisplayData DefaultMapData[0x9]; // 0x30(0x438)
	struct TMap<enum class ES_EnemyInfoType, struct FS_MapDisplayData> DefaultKRADLMapData; // 0x468(0x50)
	bool bUseOverridePlayerColor; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	struct FLinearColor OverridePlayerColor; // 0x4bc(0x10)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct TMap<enum class ES_StatsState, struct UTexture2D*> StatsStateToIcon; // 0x4d0(0x50)
	struct UDataTable* OverrideMapDisplayDataTable; // 0x520(0x08)
	struct US_RandomEncounterNameGenerator* RandomEncounterNameGeneratorAsset; // 0x528(0x08)
	struct UCompositeDataTable* CompositeNamedLocationsTable; // 0x530(0x08)
};

// Class Scavenger.S_MapDetectableComponent
// Size: 0xc8 (Inherited: 0xb0)
struct US_MapDetectableComponent : UActorComponent {
	float LastUpdateTimeGameSeconds; // 0xb0(0x04)
	char pad_B4[0x14]; // 0xb4(0x14)

	void SetDetectionScore(enum class ES_DetectionReason detectionType, float newScore); // Function Scavenger.S_MapDetectableComponent.SetDetectionScore // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetDetectionScore(enum class ES_DetectionReason detectionType); // Function Scavenger.S_MapDetectableComponent.GetDetectionScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDetectionDistance(enum class ES_DetectionReason detectionType); // Function Scavenger.S_MapDetectableComponent.GetDetectionDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool DetectionEnabled(enum class ES_DetectionReason detectionType); // Function Scavenger.S_MapDetectableComponent.DetectionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddToDetectionScore(enum class ES_DetectionReason detectionType, float amountToAdd); // Function Scavenger.S_MapDetectableComponent.AddToDetectionScore // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_MapManager
// Size: 0x110 (Inherited: 0xb0)
struct US_MapManager : UActorComponent {
	struct TArray<struct FS_MapDisplayData> MapDataArray; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FMulticastInlineDelegate OnSetMapOverheadCamera; // 0xc8(0x10)
	struct US_MapConfig* MapConfig; // 0xd8(0x08)
	struct FS_InternalMapServerData m_internalMapServerData; // 0xe0(0x10)
	struct AS_OverheadMapCamera* m_OverheadMapCamera; // 0xf0(0x08)
	struct US_TimeOfDayAndWeatherComponent* m_cachedToDaWComponent; // 0xf8(0x08)
	struct TArray<struct FS_MapDisplayData> m_previousMapDataArray; // 0x100(0x10)

	void UpdateMapData(int32_t Index, struct FS_MapDisplayData MapData); // Function Scavenger.S_MapManager.UpdateMapData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveMapData(int32_t Index); // Function Scavenger.S_MapManager.RemoveMapData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMapDataArray(); // Function Scavenger.S_MapManager.NotifyReplicatedMapDataArray // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandlePlayerLogout(struct FS_EventParameterControllerVariant Controller); // Function Scavenger.S_MapManager.HandlePlayerLogout // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void ClientSetOverheadCamera(struct AS_OverheadMapCamera* overheadCamera); // Function Scavenger.S_MapManager.ClientSetOverheadCamera // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	int32_t AddMapData(struct FS_MapDisplayData MapData); // Function Scavenger.S_MapManager.AddMapData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DetectionTypeConfig
// Size: 0x58 (Inherited: 0x30)
struct US_DetectionTypeConfig : UDataAsset {
	struct TArray<struct FS_DetectionTypeConfigItem> DetectionConfigItems; // 0x30(0x10)
	struct UTexture2D* iconTexture; // 0x40(0x08)
	struct FLinearColor PulseColor; // 0x48(0x10)
};

// Class Scavenger.S_RandomEncounterNameGenerator
// Size: 0x60 (Inherited: 0x30)
struct US_RandomEncounterNameGenerator : UDataAsset {
	struct TArray<struct FString> EncounterTypes; // 0x30(0x10)
	struct TArray<struct FString> FirstRandomizedEntry; // 0x40(0x10)
	struct TArray<struct FString> SecondRandomizedEntry; // 0x50(0x10)
};

// Class Scavenger.S_MatchFeedbackPhase
// Size: 0x198 (Inherited: 0x58)
struct US_MatchFeedbackPhase : US_PostMatchPhase {
	SoftClassProperty MatchFeedbackSubscreen; // 0x58(0x28)
	struct FS_GameReportCardForPlayer m_reportCard; // 0x80(0x118)
};

// Class Scavenger.S_Math2DLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_Math2DLibrary : UBlueprintFunctionLibrary {

	bool IsLineIntersectingAABB(struct FBox2D BoundingBox, struct FVector2D LineStart, struct FVector2D LineEnd); // Function Scavenger.S_Math2DLibrary.IsLineIntersectingAABB // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsConeIntersectingAABB(struct FBox2D BoundingBox, struct FVector2D coneOrigin, struct FVector2D coneRay, float rayAngle); // Function Scavenger.S_Math2DLibrary.IsConeIntersectingAABB // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsCircleIntersectingAABB(struct FBox2D BoundingBox, struct FVector2D circleOrigin, float circleRadius); // Function Scavenger.S_Math2DLibrary.IsCircleIntersectingAABB // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector2D GetRandomPointInAABB(struct FBox2D BoundingBox); // Function Scavenger.S_Math2DLibrary.GetRandomPointInAABB // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetDistanceToAABB(struct FBox2D BoundingBox, struct FVector2D Point); // Function Scavenger.S_Math2DLibrary.GetDistanceToAABB // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_MeleeHitPlaybackSettings
// Size: 0x50 (Inherited: 0x30)
struct US_MeleeHitPlaybackSettings : UDataAsset {
	struct UCurveFloat* PlaybackSpeed; // 0x30(0x08)
	struct UMatineeCameraShake* ImpactCameraShakeClass; // 0x38(0x08)
	struct UCameraAnim* CameraAnimBiasLeft; // 0x40(0x08)
	struct UCameraAnim* CameraAnimBiasRight; // 0x48(0x08)
};

// Class Scavenger.S_MessengerAbilitySet
// Size: 0x40 (Inherited: 0x30)
struct US_MessengerAbilitySet : UDataAsset {
	struct TArray<struct FS_MessengerAbilityInfo> Entries; // 0x30(0x10)
};

// Class Scavenger.S_MixStates
// Size: 0x28 (Inherited: 0x28)
struct US_MixStates : UObject {

	void SetPlayerTeamKeeperActive(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerTeamKeeperActive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerTakingFreezeDamage(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerTakingFreezeDamage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerLowHealth(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerLowHealth // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerLastManStanding(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerLastManStanding // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerInStorm(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerInStorm // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerInHUD(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerInHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerExecuting(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerExecuting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerDownBleedingOut(bool mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerDownBleedingOut // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerController(enum class ES_PlayerControllerState mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMixStageExclusive(enum class ES_MixStageExclusive mixState, struct UObject* WorldContextObject); // Function Scavenger.S_MixStates.SetMixStageExclusive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_MixStateVolume
// Size: 0x2c8 (Inherited: 0x2c0)
struct AS_MixStateVolume : AS_AreaVolumeBase {
	struct FName MixStateName; // 0x2c0(0x08)
};

// Class Scavenger.S_MrVDBActor
// Size: 0x288 (Inherited: 0x288)
struct AS_MrVDBActor : AActor {
};

// Class Scavenger.S_MusicSystem
// Size: 0x68 (Inherited: 0x28)
struct US_MusicSystem : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct US_AkCallbackManager* AkCallbackManager; // 0x48(0x08)
	struct TArray<struct FS_MusicEvent> MusicEvents; // 0x50(0x10)
	int32_t MusicFadeOutMs; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	void StopMusicCue(enum class ES_MusicCue Cue); // Function Scavenger.S_MusicSystem.StopMusicCue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartMusicCue(enum class ES_MusicCue Cue); // Function Scavenger.S_MusicSystem.StartMusicCue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_NavArea_Null_LargeCharacter
// Size: 0x48 (Inherited: 0x48)
struct US_NavArea_Null_LargeCharacter : UNavArea_Null {
};

// Class Scavenger.S_NavigationSystem
// Size: 0x1650 (Inherited: 0x15e0)
struct US_NavigationSystem : UNavigationSystemV1 {
	struct FNavAgentSelector LargeCharacterNullAreaSupportedAgents; // 0x15e0(0x04)
	char pad_15E4[0x4]; // 0x15e4(0x04)
	double MinNavBuildingTimeSliceDuration; // 0x15e8(0x08)
	double MaxNavBuildingTimeSliceDuration; // 0x15f0(0x08)
	int32_t MaxNonEditorStandaloneNavTilGenerationJobs; // 0x15f8(0x04)
	char pad_15FC[0x54]; // 0x15fc(0x54)
};

// Class Scavenger.S_NavMeshData
// Size: 0x548 (Inherited: 0x540)
struct AS_NavMeshData : ARecastNavMesh {
	char pad_540[0x8]; // 0x540(0x08)
};

// Class Scavenger.S_NetworkUtilityBPFL
// Size: 0x28 (Inherited: 0x28)
struct US_NetworkUtilityBPFL : UBlueprintFunctionLibrary {

	bool IsStandalone(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsStandalone // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsServer(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsServer // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsNetworkedWorld(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsNetworkedWorld // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsListenServer(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsListenServer // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsDedicatedServer(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsDedicatedServer // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsClientOrStandalone(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsClientOrStandalone // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsClient(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.IsClient // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasWorldAuthority(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.HasWorldAuthority // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasActorComponentAuthority(struct UActorComponent* ActorComponent); // Function Scavenger.S_NetworkUtilityBPFL.HasActorComponentAuthority // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasActorAuthority(struct AActor* Actor); // Function Scavenger.S_NetworkUtilityBPFL.HasActorAuthority // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetSDABaseClientConnectionIdentifier(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.GetSDABaseClientConnectionIdentifier // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_NetMode GetNetMode(struct UObject* Context); // Function Scavenger.S_NetworkUtilityBPFL.GetNetMode // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetCurrentChangelist(); // Function Scavenger.S_NetworkUtilityBPFL.GetCurrentChangelist // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetBuildVersion(); // Function Scavenger.S_NetworkUtilityBPFL.GetBuildVersion // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool ExistsOnOwnedConnection(struct AActor* Actor); // Function Scavenger.S_NetworkUtilityBPFL.ExistsOnOwnedConnection // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_Objective
// Size: 0x290 (Inherited: 0x28)
struct US_Objective : UObject {
	struct TWeakObjectPtr<struct UWorld> m_world; // 0x28(0x08)
	char pad_30[0x10]; // 0x30(0x10)
	struct FS_ObjectiveState m_state; // 0x40(0x128)
	struct FS_ObjectiveDescriptor Descriptor; // 0x168(0xd8)
	struct TArray<struct FS_GoalDescriptor> GoalDescriptors; // 0x240(0x10)
	char pad_250[0x40]; // 0x250(0x40)

	void Tick_BP(float deltaTimeInSeconds); // Function Scavenger.S_Objective.Tick_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetObjectiveProgressFailureValue(int32_t Value); // Function Scavenger.S_Objective.SetObjectiveProgressFailureValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetObjectiveProgressCompleteValue(int32_t Value); // Function Scavenger.S_Objective.SetObjectiveProgressCompleteValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportSubGoalProgressChange(struct FS_SubGoalHandle subGoalHandle, int32_t progressChange); // Function Scavenger.S_Objective.ReportSubGoalProgressChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportSubGoalProgress(struct FS_SubGoalHandle subGoalHandle, int32_t progressTotal); // Function Scavenger.S_Objective.ReportSubGoalProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportSubGoalFailure(struct FS_SubGoalHandle subGoalHandle, enum class ES_ObjectiveFailureReason FailureReason); // Function Scavenger.S_Objective.ReportSubGoalFailure // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportSubGoalComplete(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.ReportSubGoalComplete // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportObjectiveProgressChange(int32_t progressChange); // Function Scavenger.S_Objective.ReportObjectiveProgressChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportObjectiveProgress(int32_t progressTotal); // Function Scavenger.S_Objective.ReportObjectiveProgress // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportObjectiveFailure(enum class ES_ObjectiveFailureReason FailureReason); // Function Scavenger.S_Objective.ReportObjectiveFailure // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportObjectiveComplete(); // Function Scavenger.S_Objective.ReportObjectiveComplete // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportGoalProgressChange(struct FS_GoalHandle goalHandle, int32_t progressChange); // Function Scavenger.S_Objective.ReportGoalProgressChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportGoalProgress(struct FS_GoalHandle goalHandle, int32_t progressTotal); // Function Scavenger.S_Objective.ReportGoalProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportGoalFailure(struct FS_GoalHandle goalHandle, enum class ES_ObjectiveFailureReason FailureReason); // Function Scavenger.S_Objective.ReportGoalFailure // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportGoalComplete(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.ReportGoalComplete // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveSubGoal(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.RemoveSubGoal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveMarker(struct FS_MarkerHandle markerHandle); // Function Scavenger.S_Objective.RemoveMarker // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveGoal(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.RemoveGoal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySubGoalTimerTick_BP(struct FS_SubGoalHandle subGoalHandle, float deltaTimeInSeconds); // Function Scavenger.S_Objective.NotifySubGoalTimerTick_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalTimerExpired_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalTimerExpired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalProgressChanged_BP(struct FS_SubGoalHandle subGoalHandle, int32_t OldValue, int32_t NewValue); // Function Scavenger.S_Objective.NotifySubGoalProgressChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalFailed_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalFailed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalComplete_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalComplete_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalAreaTimerExpired_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalAreaTimerExpired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalAreaLeft_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalAreaLeft_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubGoalAreaEntered_BP(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.NotifySubGoalAreaEntered_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogout_BP(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_Objective.NotifyPlayerLogout_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogin_BP(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_Objective.NotifyPlayerLogin_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemUsed_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_Objective.NotifyPlayerItemUsed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemDropped_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_Objective.NotifyPlayerItemDropped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemAcquired_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_Objective.NotifyPlayerItemAcquired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerInteracted_BP(struct FS_EventParameterControllerVariant PlayerController, struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_Objective.NotifyPlayerInteracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveTimerTick_BP(float deltaTimeInSeconds); // Function Scavenger.S_Objective.NotifyObjectiveTimerTick_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveStopped_BP(); // Function Scavenger.S_Objective.NotifyObjectiveStopped_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveStarted_BP(); // Function Scavenger.S_Objective.NotifyObjectiveStarted_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveProgressChanged_BP(int32_t OldValue, int32_t NewValue); // Function Scavenger.S_Objective.NotifyObjectiveProgressChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveFailed_BP(); // Function Scavenger.S_Objective.NotifyObjectiveFailed_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveComplete_BP(); // Function Scavenger.S_Objective.NotifyObjectiveComplete_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAreaTimerExpired_BP(); // Function Scavenger.S_Objective.NotifyObjectiveAreaTimerExpired_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAreaLeft_BP(); // Function Scavenger.S_Objective.NotifyObjectiveAreaLeft_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAreaEntered_BP(); // Function Scavenger.S_Objective.NotifyObjectiveAreaEntered_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectimeTimerExpired_BP(); // Function Scavenger.S_Objective.NotifyObjectimeTimerExpired_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalTimerTick_BP(struct FS_GoalHandle goalHandle, float deltaTimeInSeconds); // Function Scavenger.S_Objective.NotifyGoalTimerTick_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalTimerExpired_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalTimerExpired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalProgressChanged_BP(struct FS_GoalHandle goalHandle, int32_t OldValue, int32_t NewValue); // Function Scavenger.S_Objective.NotifyGoalProgressChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalFailed_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalFailed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalComplete_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalComplete_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalAreaTimerExpired_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalAreaTimerExpired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalAreaLeft_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalAreaLeft_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGoalAreaEntered_BP(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.NotifyGoalAreaEntered_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorStatsStateChanged_BP(struct FS_EventParameterControllerVariant ChangeCausingController, struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_Objective.NotifyActorStatsStateChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorKilled_BP(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_Objective.NotifyActorKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActorDamaged_BP(struct FS_EventParameterControllerVariant DamagingController, struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_Objective.NotifyActorDamaged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsSubGoalHandleValid(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.IsSubGoalHandleValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsSubGoalFailed(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.IsSubGoalFailed // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsSubGoalComplete(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.IsSubGoalComplete // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsObjectiveFailed(); // Function Scavenger.S_Objective.IsObjectiveFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsObjectiveComplete(); // Function Scavenger.S_Objective.IsObjectiveComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsMarkerHandleValid(struct FS_MarkerHandle markerHandle); // Function Scavenger.S_Objective.IsMarkerHandleValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsGoalHandleValid(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.IsGoalHandleValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsGoalFailed(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.IsGoalFailed // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsGoalComplete(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.IsGoalComplete // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsApplicableToPlayerController(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_Objective.IsApplicableToPlayerController // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetSubGoals(struct FS_GoalHandle goalHandle, struct TArray<struct FS_SubGoalHandle> outSubGoalHandles); // Function Scavenger.S_Objective.GetSubGoals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetSubGoalProgressCompleteValue(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.GetSubGoalProgressCompleteValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetSubGoalProgress(struct FS_SubGoalHandle subGoalHandle); // Function Scavenger.S_Objective.GetSubGoalProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetObjectiveTeamIndex(); // Function Scavenger.S_Objective.GetObjectiveTeamIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetObjectiveRewardScore(); // Function Scavenger.S_Objective.GetObjectiveRewardScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetObjectiveProgressCompleteValue(); // Function Scavenger.S_Objective.GetObjectiveProgressCompleteValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetObjectiveProgress(); // Function Scavenger.S_Objective.GetObjectiveProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerController* GetObjectivePlayerController(); // Function Scavenger.S_Objective.GetObjectivePlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetMarkers(struct TArray<struct FS_MarkerHandle> outMarkerHandles); // Function Scavenger.S_Objective.GetMarkers // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetGoals(struct TArray<struct FS_GoalHandle> outGoalHandles); // Function Scavenger.S_Objective.GetGoals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetGoalProgressCompleteValue(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.GetGoalProgressCompleteValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetGoalProgress(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.GetGoalProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_GameState* GetGameState(); // Function Scavenger.S_Objective.GetGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_GameMode* GetGameMode(); // Function Scavenger.S_Objective.GetGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_GameInstance* GetGameInstance(); // Function Scavenger.S_Objective.GetGameInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearSubGoals(struct FS_GoalHandle goalHandle); // Function Scavenger.S_Objective.ClearSubGoals // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearGoals(); // Function Scavenger.S_Objective.ClearGoals // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_SubGoalHandle AddSubGoal(struct FS_GoalHandle goalHandle, struct FS_ObjectiveDescriptor subGoalDescriptor); // Function Scavenger.S_Objective.AddSubGoal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_MarkerHandle AddMarker(struct FS_MarkerDescriptor MarkerDescriptor); // Function Scavenger.S_Objective.AddMarker // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_GoalHandle AddGoal(struct FS_GoalDescriptor goalDescriptor); // Function Scavenger.S_Objective.AddGoal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ObjectiveManagerComponent
// Size: 0x100 (Inherited: 0xb0)
struct US_ObjectiveManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnObjectiveStarted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnObjectiveFinished; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnObjectiveStopped; // 0xd0(0x10)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct TArray<struct FS_ObjectiveContainer> m_objectives; // 0xe8(0x10)
	float ObjectiveCleanupTimeInSeconds; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	void StopObjective(struct FS_ObjectiveHandle objectiveHandle); // Function Scavenger.S_ObjectiveManagerComponent.StopObjective // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_ObjectiveHandle StartObjective(struct US_Objective* objectiveClass, int32_t TeamIndex, struct AS_PlayerController* PlayerController); // Function Scavenger.S_ObjectiveManagerComponent.StartObjective // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogout(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerLogout // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerLogin(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerLogin // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemUsed(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerItemUsed // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemDropped(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerItemDropped // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerItemAcquired(struct FS_EventParameterControllerVariant PlayerController, struct FS_ItemState ItemState); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerItemAcquired // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerInteracted(struct FS_EventParameterControllerVariant PlayerController, struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_ObjectiveManagerComponent.NotifyPlayerInteracted // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyActorStatsStateChanged(struct FS_EventParameterControllerVariant ChangeCausingController, struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_ObjectiveManagerComponent.NotifyActorStatsStateChanged // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyActorKilled(struct FS_EventParameterControllerVariant KillingController, struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_ObjectiveManagerComponent.NotifyActorKilled // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyActorDamaged(struct FS_EventParameterControllerVariant DamagingController, struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_ObjectiveManagerComponent.NotifyActorDamaged // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	bool IsObjectiveHandleValid(struct FS_ObjectiveHandle objectiveHandle); // Function Scavenger.S_ObjectiveManagerComponent.IsObjectiveHandleValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ObjectiveManagerComponent* GetObjectiveManagerComponentOfWorld(struct UWorld* World); // Function Scavenger.S_ObjectiveManagerComponent.GetObjectiveManagerComponentOfWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_ObjectiveManagerComponent* GetObjectiveManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_ObjectiveManagerComponent.GetObjectiveManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void GetAllObjectives(struct TArray<struct US_Objective*> outObjectiveArray); // Function Scavenger.S_ObjectiveManagerComponent.GetAllObjectives // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void CompleteAllObjectivesForTeam(int32_t TeamIndex); // Function Scavenger.S_ObjectiveManagerComponent.CompleteAllObjectivesForTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineCatalogUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineCatalogUtility : UBlueprintFunctionLibrary {

	bool GetPotentialCatalogItemContents(struct UObject* Context, struct FName onlineCatalogItemId, struct TArray<struct FName> outOnlineItemIds, struct TArray<struct FName> outOnlineCurrencyIds); // Function Scavenger.S_OnlineCatalogUtility.GetPotentialCatalogItemContents // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetGuaranteedCatalogItemContents(struct UObject* Context, struct FName onlineCatalogItemId, enum class ES_CatalogItemContentCalculationMethod calculationMethod, struct FS_OnlineCatalogItemContents outCatalogItemContents); // Function Scavenger.S_OnlineCatalogUtility.GetGuaranteedCatalogItemContents // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineClientRequest
// Size: 0x58 (Inherited: 0x28)
struct US_OnlineClientRequest : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Scavenger.S_OnlineClientRequestQueue
// Size: 0x58 (Inherited: 0x28)
struct US_OnlineClientRequestQueue : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct US_OnlineClientRequest* m_activeClientRequest; // 0x38(0x08)
	struct US_OnlineClientRequest* m_lastCompletedClientRequest; // 0x40(0x08)
	struct TArray<struct US_OnlineClientRequest*> m_requestQueue; // 0x48(0x10)
};

// Class Scavenger.S_OnlineEventMetadataUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineEventMetadataUtility : UBlueprintFunctionLibrary {

	bool GetOnlineEventMetadata(struct UObject* Context, struct FName EventId, struct FS_OnlineEventMetadata outOnlineEventMetadata); // Function Scavenger.S_OnlineEventMetadataUtility.GetOnlineEventMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCarouselMetadata(struct FS_OnlineEventMetadata eventMetadataRow, struct FS_CarouselMetadata outCarouselMetadata); // Function Scavenger.S_OnlineEventMetadataUtility.GetCarouselMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineGameTunings
// Size: 0x48 (Inherited: 0x30)
struct US_OnlineGameTunings : UDataAsset {
	struct FS_OnlineGameTuningValues OnlineGameTunings; // 0x30(0x14)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Scavenger.S_OnlineImageDownloaderInstance
// Size: 0x50 (Inherited: 0x28)
struct US_OnlineImageDownloaderInstance : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct US_OnlineImageDownloader* m_downloader; // 0x48(0x08)

	void HandleDownloadImageSuccess(struct UTexture2DDynamic* Texture); // Function Scavenger.S_OnlineImageDownloaderInstance.HandleDownloadImageSuccess // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDownloadImageFailure(struct UTexture2DDynamic* Texture); // Function Scavenger.S_OnlineImageDownloaderInstance.HandleDownloadImageFailure // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineImageDownloader
// Size: 0x88 (Inherited: 0x28)
struct US_OnlineImageDownloader : UObject {
	struct TArray<struct US_OnlineImageDownloaderInstance*> m_downloadInstances; // 0x28(0x10)
	struct TMap<struct FString, struct UTexture2DDynamic*> m_downloadedTextures; // 0x38(0x50)
};

// Class Scavenger.S_OnlineItemData
// Size: 0x40 (Inherited: 0x30)
struct US_OnlineItemData : UDataAsset {
	struct FDataTableRowHandle OnlineMetadata; // 0x30(0x10)

	bool GetOnlineItemMetadata_BP(struct FS_OnlineItemMetadata OutMetadata); // Function Scavenger.S_OnlineItemData.GetOnlineItemMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetOnlineItemId(); // Function Scavenger.S_OnlineItemData.GetOnlineItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineItemMetadataUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineItemMetadataUtility : UBlueprintFunctionLibrary {

	bool ValidateOnlineItemMetadataTable(struct UObject* Context, struct UDataTable* onlineItemMetadataTable); // Function Scavenger.S_OnlineItemMetadataUtility.ValidateOnlineItemMetadataTable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsLoadoutItem(struct FS_OnlineItemMetadata TableRow); // Function Scavenger.S_OnlineItemMetadataUtility.IsLoadoutItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsCosmeticItem(struct FS_OnlineItemMetadata TableRow); // Function Scavenger.S_OnlineItemMetadataUtility.IsCosmeticItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetTierRestrictionIndexFromRestrictionId(struct FName RestrictionId); // Function Scavenger.S_OnlineItemMetadataUtility.GetTierRestrictionIndexFromRestrictionId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetTierRestrictionIndexFromRestrictionDefinition(struct FS_OnlineRestrictionDefinition restrictionDefinition); // Function Scavenger.S_OnlineItemMetadataUtility.GetTierRestrictionIndexFromRestrictionDefinition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetTalentMetadata(struct FS_OnlineItemMetadata TableRow, struct FS_TalentMetadata outTalentMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetTalentMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetSalvageItemMetadata(struct FS_OnlineItemMetadata TableRow, struct FS_SalvageItemMetadata outSalvageItemMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetSalvageItemMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_RestrictionStateTypes GetRestrictionStateTypeFromRestrictionId(struct APlayerController* PlayerController, struct FName RestrictionId); // Function Scavenger.S_OnlineItemMetadataUtility.GetRestrictionStateTypeFromRestrictionId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	enum class ES_RestrictionStateTypes GetRestrictionStateTypeFromResearchProjectId(struct APlayerController* PlayerController, struct FName ResearchProjectId); // Function Scavenger.S_OnlineItemMetadataUtility.GetRestrictionStateTypeFromResearchProjectId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetResourceMetadata(struct FS_OnlineItemMetadata TableRow, struct FS_OnlineResourceItemMetadata outResourceItemMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetResourceMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetRequiredCraftingLevel(struct FS_OnlineItemMetadata TableRow, int32_t craftingLevel); // Function Scavenger.S_OnlineItemMetadataUtility.GetRequiredCraftingLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadataChainForOnlineItem(struct FS_OnlineItemMetadata TableRow, struct TArray<struct FS_RecipeMetadata> outRecipeMetadataChain); // Function Scavenger.S_OnlineItemMetadataUtility.GetRecipeMetadataChainForOnlineItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadataChainForBaseRecipe(struct FS_RecipeMetadata TableRow, struct TArray<struct FS_RecipeMetadata> outRecipeMetadataChain); // Function Scavenger.S_OnlineItemMetadataUtility.GetRecipeMetadataChainForBaseRecipe // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetRecipeMetadata(struct FS_OnlineItemMetadata TableRow, struct FS_RecipeMetadata outRecipeMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetRecipeMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetOnlineItemIdsOfLoadoutTypeForClass(struct APlayerController* PlayerController, struct FString ClassId, enum class ES_LoadoutSlotType loadoutSlotType); // Function Scavenger.S_OnlineItemMetadataUtility.GetOnlineItemIdsOfLoadoutTypeForClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetLocalizedTypeTextWithRarity(struct FS_OnlineItemMetadata MetaData, struct FText outLocalizedTypeText); // Function Scavenger.S_OnlineItemMetadataUtility.GetLocalizedTypeTextWithRarity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetLocalizedTypeText(struct FS_OnlineItemMetadata MetaData, struct FText outLocalizedTypeText); // Function Scavenger.S_OnlineItemMetadataUtility.GetLocalizedTypeText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetLocalizedRarityText(struct FS_OnlineItemMetadata MetaData, struct FText outLocalizedRariyText); // Function Scavenger.S_OnlineItemMetadataUtility.GetLocalizedRarityText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetLoadoutSlotType(struct FS_OnlineItemMetadata TableRow, enum class ES_LoadoutSlotType outSlotType); // Function Scavenger.S_OnlineItemMetadataUtility.GetLoadoutSlotType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetItemRarity(struct FS_OnlineItemMetadata TableRow, enum class ES_ItemRarity Rarity); // Function Scavenger.S_OnlineItemMetadataUtility.GetItemRarity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetIcon(struct FS_OnlineItemMetadata TableRow, struct TSoftObjectPtr<struct UTexture2D> Icon); // Function Scavenger.S_OnlineItemMetadataUtility.GetIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetFirstFailingTierRestrictionIndex(struct APlayerController* PlayerController); // Function Scavenger.S_OnlineItemMetadataUtility.GetFirstFailingTierRestrictionIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetDisplayName(struct UObject* Context, struct FS_OnlineItemMetadata TableRow, struct FText DisplayName); // Function Scavenger.S_OnlineItemMetadataUtility.GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetDescription(struct UObject* Context, struct FS_OnlineItemMetadata TableRow, struct FText Description); // Function Scavenger.S_OnlineItemMetadataUtility.GetDescription // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCurrentClassWeaponForClassId(struct APlayerController* PlayerController, struct FName ClassId, struct FS_ItemMetadata OutMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetCurrentClassWeaponForClassId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCreationTime(struct FS_OnlineItemMetadata TableRow, float CreationTime); // Function Scavenger.S_OnlineItemMetadataUtility.GetCreationTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetCosmeticsMetadata(struct FS_OnlineItemMetadata TableRow, struct FS_CosmeticItemMetadata outCosmeticMetadata); // Function Scavenger.S_OnlineItemMetadataUtility.GetCosmeticsMetadata // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetCosmeticItemIdsOfTypeForClass(struct APlayerController* PlayerController, struct FString ClassId, enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_OnlineItemMetadataUtility.GetCosmeticItemIdsOfTypeForClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetAvailableCosmeticItemIdsForItemId(struct APlayerController* PlayerController, struct FName ItemId); // Function Scavenger.S_OnlineItemMetadataUtility.GetAvailableCosmeticItemIdsForItemId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_LobbyClientNotificationTarget
// Size: 0x28 (Inherited: 0x28)
struct US_LobbyClientNotificationTarget : UInterface {

	void NotifyReceivedTextMessage_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyReceivedTextMessage textMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyReceivedTextMessage_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnlinePlayerListReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyOnlinePlayers onlinePlayers, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyOnlinePlayerListReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyTitleNews_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyTitleNews titleNews, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyTitleNews_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyTeamStateReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyTeamState teamStateMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyTeamStateReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyStartDraft_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyStartDraft startDraftMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyStartDraft_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyQueueStatusReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyQueueStatus queueStatusMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyQueueStatusReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyQueueListReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyQueueList queueListMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyQueueListReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyPartyStateReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyPartyState partyStateMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyPartyStateReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyPartyInviteReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyPartyInvite partyStateMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyPartyInviteReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyNextDraftingPeriod_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyNextDraftingPeriod nextDraftingPeriod, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyNextDraftingPeriod_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyMyPlayerLockedIn_BP(struct US_OnlineLobbyConnectionClient* Source); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyMyPlayerLockedIn_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyJoinQueueFailed_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyJoinQueueFailed joinQueueFailedMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyJoinQueueFailed_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyHaveFunReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyHaveFun haveFunMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyHaveFunReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyForceRehydrateParty_BP(struct US_OnlineLobbyConnectionClient* Source, struct TArray<struct FString> profileIds, struct FString MatchID); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyForceRehydrateParty_BP // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyCrossRegionPartyInviteReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FString profileId, struct FString PartyId, struct FString lobbyUri, struct FString playerDisplayName); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyCrossRegionPartyInviteReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyCrossRegionPartyInviteCanceled_BP(struct US_OnlineLobbyConnectionClient* Source, struct FString profileId); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyCrossRegionPartyInviteCanceled_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyCrossRegionJoinPartyRequestReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FString profileId); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyCrossRegionJoinPartyRequestReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyCrossRegionJoinPartyRequestCanceled_BP(struct US_OnlineLobbyConnectionClient* Source, struct FString profileId); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyCrossRegionJoinPartyRequestCanceled_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyCrossRegionJoinPartyRequestAccepted_BP(struct US_OnlineLobbyConnectionClient* Source, struct FString profileId); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyCrossRegionJoinPartyRequestAccepted_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLobbyConnectToServerReceived_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyConnectToServer connectToServerMessage, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyLobbyConnectToServerReceived_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyJoinPartyFailed_BP(struct US_OnlineLobbyConnectionClient* Source, struct FS_LobbyJoinPartyFailed joinPartyFailed, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyJoinPartyFailed_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyConnectionStateChanged_BP(struct US_OnlineLobbyConnectionClient* Source, enum class ES_LobbyConnectionState newConnectionState); // Function Scavenger.S_LobbyClientNotificationTarget.NotifyConnectionStateChanged_BP // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineLobbyConnectionBase
// Size: 0x218 (Inherited: 0x28)
struct US_OnlineLobbyConnectionBase : UObject {
	char pad_28[0x1f0]; // 0x28(0x1f0)

	bool GetLobbyVersionString(struct FString outLobbyConnectionString); // Function Scavenger.S_OnlineLobbyConnectionBase.GetLobbyVersionString // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetLobbyUri(); // Function Scavenger.S_OnlineLobbyConnectionBase.GetLobbyUri // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetLobbyHost(); // Function Scavenger.S_OnlineLobbyConnectionBase.GetLobbyHost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_LobbyConnectionState GetLobbyConnectionState(); // Function Scavenger.S_OnlineLobbyConnectionBase.GetLobbyConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetLastError(); // Function Scavenger.S_OnlineLobbyConnectionBase.GetLastError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void Disconnect(); // Function Scavenger.S_OnlineLobbyConnectionBase.Disconnect // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineLobbyConnectionClient
// Size: 0x508 (Inherited: 0x218)
struct US_OnlineLobbyConnectionClient : US_OnlineLobbyConnectionBase {
	char pad_218[0x28]; // 0x218(0x28)
	struct TArray<struct TScriptInterface<None>> m_NotificationTargets; // 0x240(0x10)
	char pad_250[0x2b8]; // 0x250(0x2b8)

	bool UpdatePlayerDetails(struct AS_PlayerControllerBase* PlayerController, bool isLockedIn); // Function Scavenger.S_OnlineLobbyConnectionClient.UpdatePlayerDetails // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TravelToServer(struct AS_PlayerControllerBase* PlayerController, struct FS_LobbyConnectToServer connectToServerMessage); // Function Scavenger.S_OnlineLobbyConnectionClient.TravelToServer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SocialDisconnectedRetriesExhausted(enum class ES_SocialDisconnectReason disconnectReason, struct FString ErrorDetails); // Function Scavenger.S_OnlineLobbyConnectionClient.SocialDisconnectedRetriesExhausted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	struct US_OnlineLobbyConnectionClient* SetNotificationTarget(struct UObject* notificationTarget); // Function Scavenger.S_OnlineLobbyConnectionClient.SetNotificationTarget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMyAssignedSpawnIndexFromTeamState(struct FS_LobbyTeamState TeamState, struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_OnlineLobbyConnectionClient.SetMyAssignedSpawnIndexFromTeamState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendUpdatePlayerDetailsMessage(struct FS_LobbyUpdatePlayerDetails Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendUpdatePlayerDetailsMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendTextMessage(struct FS_LobbySendTextMessage Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendTextMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendReturnToLobbyMessage(struct FS_LobbyReturnToLobby Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendReturnToLobbyMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendRefreshTitleNewsMessage(); // Function Scavenger.S_OnlineLobbyConnectionClient.SendRefreshTitleNewsMessage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendRefreshOnlinePlayersListMessage(struct FS_LobbyRefreshOnlinePlayersList Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendRefreshOnlinePlayersListMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendPresenceUpdate(); // Function Scavenger.S_OnlineLobbyConnectionClient.SendPresenceUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendJoinQueueMessage(struct FS_LobbyJoinMyPartyToQueue Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendJoinQueueMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendJoinPartyRequest(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.SendJoinPartyRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendInviteRequest(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.SendInviteRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendGameJoinedMessage(struct FS_LobbyGameJoined Message); // Function Scavenger.S_OnlineLobbyConnectionClient.SendGameJoinedMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestVoiceChatCredentials(); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestVoiceChatCredentials // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestToLeaveCurrentQueue(); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestToLeaveCurrentQueue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestToLeaveCurrentParty(); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestToLeaveCurrentParty // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestToJoinParty(struct FString PartyId); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestToJoinParty // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestTeamChange(int32_t TeamIndex); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestTeamChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestGameStart(); // Function Scavenger.S_OnlineLobbyConnectionClient.RequestGameStart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveNotificationTarget(struct UObject* notificationTarget); // Function Scavenger.S_OnlineLobbyConnectionClient.RemoveNotificationTarget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveAllNotificationTargets(); // Function Scavenger.S_OnlineLobbyConnectionClient.RemoveAllNotificationTargets // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RefreshQueues(); // Function Scavenger.S_OnlineLobbyConnectionClient.RefreshQueues // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnWebSocketMessageReceived(struct FString Message); // Function Scavenger.S_OnlineLobbyConnectionClient.OnWebSocketMessageReceived // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnWebSocketConnectError(struct FString Error); // Function Scavenger.S_OnlineLobbyConnectionClient.OnWebSocketConnectError // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnWebSocketConnected(); // Function Scavenger.S_OnlineLobbyConnectionClient.OnWebSocketConnected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnWebSocketClosed(int32_t StatusCode, struct FString Reason, bool bWasClean); // Function Scavenger.S_OnlineLobbyConnectionClient.OnWebSocketClosed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnGameSettingsChanged(struct FS_UserGameSettings OldSettings, struct FS_UserGameSettings NewSettings); // Function Scavenger.S_OnlineLobbyConnectionClient.OnGameSettingsChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	bool MatchesPlayerController(struct AS_PlayerControllerBase* playerControllerBase, struct FS_LobbyPlayer lobbyPlayer); // Function Scavenger.S_OnlineLobbyConnectionClient.MatchesPlayerController // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool JoinQueueById(struct FString QueueId, struct FString QueueName, struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_OnlineLobbyConnectionClient.JoinQueueById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_LobbyQueueCompatibility IsQueueCompatibleWithMyClient(struct FS_LobbyQueue queue); // Function Scavenger.S_OnlineLobbyConnectionClient.IsQueueCompatibleWithMyClient // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlayerPartyLeader(struct UPlayer* Player); // Function Scavenger.S_OnlineLobbyConnectionClient.IsPlayerPartyLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlayerInMyParty(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.IsPlayerInMyParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlayerIdPartyLeader(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.IsPlayerIdPartyLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineLobbyConnectionClient* Initialize(struct FString LobbyHost, struct UPlayer* Player, struct FText AccountName); // Function Scavenger.S_OnlineLobbyConnectionClient.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleTextChatControlCommand(struct FString profileId, enum class ES_TextChatControlCommand controlCommand, struct TArray<struct FString> arguments); // Function Scavenger.S_OnlineLobbyConnectionClient.HandleTextChatControlCommand // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerAuthTokenRefreshed(struct UPlayer* Player); // Function Scavenger.S_OnlineLobbyConnectionClient.HandlePlayerAuthTokenRefreshed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCharacterLevelUpdated(struct FName CharacterId, int32_t NewLevel); // Function Scavenger.S_OnlineLobbyConnectionClient.HandleCharacterLevelUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	int32_t GetMyAssignedSpawnIndex(); // Function Scavenger.S_OnlineLobbyConnectionClient.GetMyAssignedSpawnIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_LobbyPartyState GetCurrentPartyState(); // Function Scavenger.S_OnlineLobbyConnectionClient.GetCurrentPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAutostartEstimatedTimeRemaining(); // Function Scavenger.S_OnlineLobbyConnectionClient.GetAutostartEstimatedTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineLobbyConnectionClient* ConnectAsClient(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, enum class ES_OnlineResult outConnectResult); // Function Scavenger.S_OnlineLobbyConnectionClient.ConnectAsClient // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheckNetworkBandWidth(); // Function Scavenger.S_OnlineLobbyConnectionClient.CheckNetworkBandWidth // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CancelJoinPartyRequest(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.CancelJoinPartyRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CancelInviteRequest(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.CancelInviteRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AcceptJoinPartyRequest(struct FString PlayerId); // Function Scavenger.S_OnlineLobbyConnectionClient.AcceptJoinPartyRequest // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineLobbyUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineLobbyUtility : UBlueprintFunctionLibrary {

	struct FS_CharacterLoadout GetCharacterLoadoutFromLobbyPlayer(struct FS_LobbyPlayer Player); // Function Scavenger.S_OnlineLobbyUtility.GetCharacterLoadoutFromLobbyPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetCharacterCosmeticLoadoutFromLobbyPlayer(struct UObject* Context, struct FS_LobbyPlayer Player); // Function Scavenger.S_OnlineLobbyUtility.GetCharacterCosmeticLoadoutFromLobbyPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetAccountCosmeticLoadoutFromLobbyPlayer(struct UObject* Context, struct FS_LobbyPlayer Player); // Function Scavenger.S_OnlineLobbyUtility.GetAccountCosmeticLoadoutFromLobbyPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineDataAsset
// Size: 0x30 (Inherited: 0x30)
struct US_OnlineDataAsset : UDataAsset {
};

// Class Scavenger.S_OnlineDataTable
// Size: 0xb0 (Inherited: 0xb0)
struct US_OnlineDataTable : UDataTable {
};

// Class Scavenger.S_OnlineOverrideConfigManager
// Size: 0x88 (Inherited: 0x28)
struct US_OnlineOverrideConfigManager : UObject {
	char pad_28[0x60]; // 0x28(0x60)
};

// Class Scavenger.S_OnlinePlatformBase
// Size: 0x28 (Inherited: 0x28)
struct US_OnlinePlatformBase : UObject {
};

// Class Scavenger.S_OnlinePlatformEpic
// Size: 0x40 (Inherited: 0x28)
struct US_OnlinePlatformEpic : US_OnlinePlatformBase {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Scavenger.S_OnlinePlatformPSN
// Size: 0x80 (Inherited: 0x28)
struct US_OnlinePlatformPSN : US_OnlinePlatformBase {
	char pad_28[0x58]; // 0x28(0x58)
};

// Class Scavenger.S_OnlinePlatformSteam
// Size: 0x158 (Inherited: 0x28)
struct US_OnlinePlatformSteam : US_OnlinePlatformBase {
	char pad_28[0x130]; // 0x28(0x130)
};

// Class Scavenger.S_OnlinePlatformXBoxLive
// Size: 0x30 (Inherited: 0x28)
struct US_OnlinePlatformXBoxLive : US_OnlinePlatformBase {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Scavenger.S_OnlineResearchProjectUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineResearchProjectUtility : UBlueprintFunctionLibrary {
};

// Class Scavenger.S_OnlineServiceManager
// Size: 0xb30 (Inherited: 0x28)
struct US_OnlineServiceManager : UObject {
	struct FMulticastInlineDelegate OnPlayerBanDetected; // 0x28(0x10)
	struct TArray<struct FS_OnlineTitleNewsItem> titleNewsItems; // 0x38(0x10)
	struct FMulticastInlineDelegate OnTitleNewsRefreshed; // 0x48(0x10)
	struct FMulticastInlineDelegate OnHeartbeat; // 0x58(0x10)
	struct FMulticastInlineDelegate OnPlayerAccountStateRefreshed; // 0x68(0x10)
	struct FMulticastInlineDelegate OnPlayerInventoryRefreshed; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPlayerCurrencyRefreshed; // 0x88(0x10)
	struct FMulticastInlineDelegate OnPlayerResearchProjectsRefreshed; // 0x98(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnCharacterLoadoutRefreshed; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnCharacterCosmeticLoadoutRefreshed; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnPlayerAccountCosmeticLoadoutRefreshed; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnPlayerUnseenRewardsRefreshed; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnPlayerChallengeInstancesRefreshed; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnPlayerSeasonStatesRefreshed; // 0x108(0x10)
	struct FMulticastInlineDelegate OnOnlineGameTuningsRefreshed; // 0x118(0x10)
	struct FMulticastInlineDelegate OnOnlineGameModeTuningsRefreshed; // 0x128(0x10)
	struct FMulticastInlineDelegate OnOnlinePowerGenerationStateRefreshed; // 0x138(0x10)
	struct FMulticastInlineDelegate OnOnlineStoreDataRefreshed; // 0x148(0x10)
	struct FMulticastInlineDelegate OnOnlineTitleDataRefreshed; // 0x158(0x10)
	struct FMulticastInlineDelegate OnOnlineLeaderboardsRefreshed; // 0x168(0x10)
	struct FMulticastInlineDelegate OnOnlineLeaderboardContentsRefreshed; // 0x178(0x10)
	struct FMulticastInlineDelegate OnOnlineFeatureFlagsRefreshed; // 0x188(0x10)
	int32_t PendingControllerID; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FMulticastInlineDelegate OnPlayerInventoryChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnConnectionCheckComplete; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnQueryUserPrivilegeComplete; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnLoggedInUserChanged; // 0x1d0(0x10)
	struct TArray<int32_t> CharacterLevelProgression; // 0x1e0(0x10)
	struct TArray<struct FName> CharacterRoster; // 0x1f0(0x10)
	struct TMap<struct FName, struct FS_OnlineCharacterDefinition> CharacterClassIdToOnlineCharacterDefinition; // 0x200(0x50)
	struct FS_CosmeticLoadout DefaultAccountCosmeticLoadout; // 0x250(0x50)
	struct TArray<struct FS_OnlineAssemblyRecipe> OnlineAssemblyRecipes; // 0x2a0(0x10)
	float BoostMultiplierPersonal; // 0x2b0(0x04)
	float BoostMultiplierTeam; // 0x2b4(0x04)
	float GlobalBoostMultiplier; // 0x2b8(0x04)
	struct FName DailyOfferId; // 0x2bc(0x08)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct FString BandwidthTestAssetPath; // 0x2c8(0x10)
	struct FName GlobalBoostId; // 0x2d8(0x08)
	struct FMulticastInlineDelegate OnDisplayNameChangeSuccess; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnDisplayNameChangeFail; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnSelectedLobbyEndpointChanged; // 0x300(0x10)
	struct FMulticastInlineDelegate OnSelectedLobbyEndpointRemoved; // 0x310(0x10)
	struct FMulticastInlineDelegate OnLobbyEndpointsChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnLobbyEndpointPingsUpdated; // 0x330(0x10)
	struct FMulticastInlineDelegate OnNetworkConnectionStatusChanged; // 0x340(0x10)
	float LobbyEndpointPingPeriodSeconds; // 0x350(0x04)
	float LobbyEndpointPingTimeoutSeconds; // 0x354(0x04)
	int32_t LobbyEndpointPingsPerEndpoint; // 0x358(0x04)
	int32_t LobbyEndpointMinResultsRequired; // 0x35c(0x04)
	float LobbyEndpointMaxPacketLossAllowed; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct FMulticastInlineDelegate OnPlayerAccountVerificationStatusUpdated; // 0x368(0x10)
	struct FMulticastInlineDelegate OnPlayerReauthenticated; // 0x378(0x10)
	struct FMulticastInlineDelegate OnPlayerImprobableAuthTokenRefreshed; // 0x388(0x10)
	struct US_OnlineLobbyConnectionClient* m_lobbyConnection; // 0x398(0x08)
	struct UDataTable* m_onlineItemMetadata; // 0x3a0(0x08)
	char pad_3A8[0xa0]; // 0x3a8(0xa0)
	struct UDataTable* m_onlineCurrencyMetadata; // 0x448(0x08)
	struct TArray<struct FName> m_onlineItemMetadataIds; // 0x450(0x10)
	struct UDataTable* m_onlineRestrictionMetadata; // 0x460(0x08)
	struct TMap<struct FName, struct FS_OnlineCatalogItemDefinition> m_catalogItemDefinitions; // 0x468(0x50)
	struct TMap<struct FName, struct FS_OnlineCurrencyDefinition> m_currencyDefinitions; // 0x4b8(0x50)
	struct TMap<struct FName, struct FS_OnlineResearchProjectDefinition> m_researchDefinitions; // 0x508(0x50)
	struct TMap<struct FName, struct FS_OnlineDisassemblyProjectDefinition> m_disassemblyDefinitions; // 0x558(0x50)
	struct TMap<struct FName, struct FS_OnlineDropTableDefinition> m_dropTableDefinitions; // 0x5a8(0x50)
	char pad_5F8[0x50]; // 0x5f8(0x50)
	struct TMap<struct FName, struct FS_OnlineStoreOfferDefinition> m_storeOfferIdToStoreOffer; // 0x648(0x50)
	struct TMap<struct FName, struct FS_OnlineStoreFrontDefinition> m_storeFrontIdToStoreFront; // 0x698(0x50)
	struct TMap<struct FName, struct FS_OnlineRestrictionDefinition> m_restrictionDefinitions; // 0x6e8(0x50)
	struct TMap<struct FName, struct FS_OnlineChallengeDefinition> m_challengeDefinitions; // 0x738(0x50)
	struct TArray<struct FS_OnlineLeaderboardDefinition> m_leaderboardDefinitions; // 0x788(0x10)
	struct TArray<struct FS_OnlineLeaderboardContents> m_leaderboardContents; // 0x798(0x10)
	struct TMap<struct FName, struct FS_OnlineSeasonDefinition> m_seasonDefinitions; // 0x7a8(0x50)
	struct TMap<struct FName, struct FS_OnlineSeasonRewardDefinition> m_seasonRewardDefinitions; // 0x7f8(0x50)
	struct TMap<struct UPlayer*, struct FS_OnlineServiceManagerPlayerState> m_mapOfPlayerToPlayerState; // 0x848(0x50)
	struct US_OnlinePlatformBase* m_onlinePlatform; // 0x898(0x08)
	char pad_8A0[0x50]; // 0x8a0(0x50)
	struct US_OnlineSocialHubScheduler* m_socialHubScheduler; // 0x8f0(0x08)
	char pad_8F8[0x238]; // 0x8f8(0x238)

	void UpdateTitleNewsItems(struct TArray<struct FS_OnlineTitleNewsItem> newTitleNewsItems); // Function Scavenger.S_OnlineServiceManager.UpdateTitleNewsItems // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateLobbyEndpointPings(); // Function Scavenger.S_OnlineServiceManager.UpdateLobbyEndpointPings // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TryPlayerChangeDisplayName(struct UPlayer* Player, struct FString newDisplayName); // Function Scavenger.S_OnlineServiceManager.TryPlayerChangeDisplayName // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SubmitNewPingEndpoint(struct FString Address, struct FString RegionCode); // Function Scavenger.S_OnlineServiceManager.SubmitNewPingEndpoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserFlags(struct UPlayer* Player, struct TMap<struct FString, bool> Values); // Function Scavenger.S_OnlineServiceManager.SetUserFlags // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserFlag(struct UPlayer* Player, struct FString userFlag, bool NewValue); // Function Scavenger.S_OnlineServiceManager.SetUserFlag // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetSelectedLobbyEndpointIndex(int32_t Index); // Function Scavenger.S_OnlineServiceManager.SetSelectedLobbyEndpointIndex // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayTutorialChallengeComplete(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.SetPlayTutorialChallengeComplete // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerLoadout(struct UPlayer* Player, struct FName ClassId, struct FS_CharacterLoadout Loadout); // Function Scavenger.S_OnlineServiceManager.SetPlayerLoadout // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerControllerLoadout(struct APlayerController* PlayerController, struct FName ClassId, struct FS_CharacterLoadout Loadout); // Function Scavenger.S_OnlineServiceManager.SetPlayerControllerLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t SendHeartbeatRequest(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.SendHeartbeatRequest // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestOpenLevelWithCleanup(struct FName levelToOpen); // Function Scavenger.S_OnlineServiceManager.RequestOpenLevelWithCleanup // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshPlayerInventory(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.RefreshPlayerInventory // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshPlayerCurrency(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.RefreshPlayerCurrency // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshPlayerControllerInventory(struct APlayerController* PlayerController); // Function Scavenger.S_OnlineServiceManager.RefreshPlayerControllerInventory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshPlayerControllerCurrency(struct APlayerController* PlayerController); // Function Scavenger.S_OnlineServiceManager.RefreshPlayerControllerCurrency // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshCurrentlyLoggedInPlayersAccountStatus(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.RefreshCurrentlyLoggedInPlayersAccountStatus // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshAllPlayerControllerCharacterLevels(struct APlayerController* PlayerController); // Function Scavenger.S_OnlineServiceManager.RefreshAllPlayerControllerCharacterLevels // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshAllPlayerCharacterLevels(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.RefreshAllPlayerCharacterLevels // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QueryPlatformUserPrivilege(struct ULocalPlayer* Player, enum class ES_UserPrivilege privilegeType); // Function Scavenger.S_OnlineServiceManager.QueryPlatformUserPrivilege // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QueryAllPlatformUserPrivileges(); // Function Scavenger.S_OnlineServiceManager.QueryAllPlatformUserPrivileges // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool PlayerOwnsItemId(struct UPlayer* Player, struct FName ItemId); // Function Scavenger.S_OnlineServiceManager.PlayerOwnsItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool PlayerOwnsCharacter(struct UPlayer* Player, struct FName ClassId); // Function Scavenger.S_OnlineServiceManager.PlayerOwnsCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsValidLobbyUri(struct FString lobbyUri, struct FS_LobbyEndpoint outEndpoint, int32_t outEndpointIndex); // Function Scavenger.S_OnlineServiceManager.IsValidLobbyUri // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsUserPrivilegeAllowed(enum class ES_UserPrivilege userPrivilege); // Function Scavenger.S_OnlineServiceManager.IsUserPrivilegeAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlatformLoginUIOpen(); // Function Scavenger.S_OnlineServiceManager.IsPlatformLoginUIOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLobbyLaunchingIntoMatch(); // Function Scavenger.S_OnlineServiceManager.IsLobbyLaunchingIntoMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCurrentlyLoggedInPlayersAccountVerified(); // Function Scavenger.S_OnlineServiceManager.IsCurrentlyLoggedInPlayersAccountVerified // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GlobalLobbyEnabled(); // Function Scavenger.S_OnlineServiceManager.GlobalLobbyEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetXPOfNextCharacterLevelFromCurrentXP(int32_t cxpAmount); // Function Scavenger.S_OnlineServiceManager.GetXPOfNextCharacterLevelFromCurrentXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_UserPrivilegeResult GetUserPrivilege(enum class ES_UserPrivilege userPrivilege); // Function Scavenger.S_OnlineServiceManager.GetUserPrivilege // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetUserFlagIsSet(struct UPlayer* Player, struct FString userFlag); // Function Scavenger.S_OnlineServiceManager.GetUserFlagIsSet // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_OnlineSocialHubScheduler* GetSocialHubScheduler(); // Function Scavenger.S_OnlineServiceManager.GetSocialHubScheduler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetSelectedLobbyEndpointIndex(); // Function Scavenger.S_OnlineServiceManager.GetSelectedLobbyEndpointIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetResearchProjectIdFromOnlineItemId(struct FName OnlineItemId); // Function Scavenger.S_OnlineServiceManager.GetResearchProjectIdFromOnlineItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetPowerCapForAccountLevel(int32_t AccountLevel); // Function Scavenger.S_OnlineServiceManager.GetPowerCapForAccountLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPlayerStateFromPlayerController_BP(struct APlayerController* PlayerController, struct FS_OnlineServiceManagerPlayerState outPlayerState); // Function Scavenger.S_OnlineServiceManager.GetPlayerStateFromPlayerController_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPlayerStateFromPlayer_BP(struct UPlayer* Player, struct FS_OnlineServiceManagerPlayerState outPlayerState); // Function Scavenger.S_OnlineServiceManager.GetPlayerStateFromPlayer_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerRemainingXPToNextCharacterLevelFromXP(int32_t cxpAmount); // Function Scavenger.S_OnlineServiceManager.GetPlayerRemainingXPToNextCharacterLevelFromXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerProgressToNextCharacterLevelFromXP(int32_t cxpAmount); // Function Scavenger.S_OnlineServiceManager.GetPlayerProgressToNextCharacterLevelFromXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerProgressToNextCharacterLevel(struct UPlayer* Player, struct FName CharacterId); // Function Scavenger.S_OnlineServiceManager.GetPlayerProgressToNextCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerControllerProgressToNextCharacterLevel(struct APlayerController* PlayerController, struct FName CharacterId); // Function Scavenger.S_OnlineServiceManager.GetPlayerControllerProgressToNextCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerAccountLevel(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.GetPlayerAccountLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_OnlineLobbyConnectionClient* GetOrCreateClientLobbyConnectionForPlayer(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.GetOrCreateClientLobbyConnectionForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_OnlineServiceManager* GetOnlineServiceManagerFromObject(struct UObject* Context); // Function Scavenger.S_OnlineServiceManager.GetOnlineServiceManagerFromObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_OnlineServiceManager* GetOnlineServiceManagerFromGameInstance(struct UGameInstance* GameInstance); // Function Scavenger.S_OnlineServiceManager.GetOnlineServiceManagerFromGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void GetOnlineResearchProjectIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineResearchProjectIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineItemMetadataIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineItemMetadataIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetOnlineItemMetadata_BP(struct FName ID, struct FS_OnlineItemMetadata outOnlineItemMetadata); // Function Scavenger.S_OnlineServiceManager.GetOnlineItemMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineDropTableIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineDropTableIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineDisassemblyInputItemIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineDisassemblyInputItemIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineCurrencyIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineCurrencyIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOnlineCatalogItemIds(struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetOnlineCatalogItemIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_NetworkConnectionStatus GetNetworkConnectionState(); // Function Scavenger.S_OnlineServiceManager.GetNetworkConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetLobbyHost(struct FString outLobbyHost); // Function Scavenger.S_OnlineServiceManager.GetLobbyHost // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_LobbyEndpoint> GetLobbyEndpoints(); // Function Scavenger.S_OnlineServiceManager.GetLobbyEndpoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetLevelFromXp(int32_t xpValue); // Function Scavenger.S_OnlineServiceManager.GetLevelFromXp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetFirstUnlockOfType(struct FName ClassId, enum class ES_LoadoutSlotType ItemType, struct FS_OnlineItemMetadata OutMetadata); // Function Scavenger.S_OnlineServiceManager.GetFirstUnlockOfType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetFirstOwnedUnlockOfType(struct UPlayer* Player, struct FName ClassId, enum class ES_LoadoutSlotType ItemType, struct FS_OnlineItemMetadata OutMetadata); // Function Scavenger.S_OnlineServiceManager.GetFirstOwnedUnlockOfType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_FeedbackQuestionContainer GetFeedbackQuestionContainer(); // Function Scavenger.S_OnlineServiceManager.GetFeedbackQuestionContainer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetExpectedResearchHurryCost(struct UPlayer* Player, struct FString ResearchStationId); // Function Scavenger.S_OnlineServiceManager.GetExpectedResearchHurryCost // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetEndpointUriIndex(int32_t outIndex, struct FString EndpointUri); // Function Scavenger.S_OnlineServiceManager.GetEndpointUriIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetEndpointUriAtIndex(struct FString outEndpointUri, int32_t Index); // Function Scavenger.S_OnlineServiceManager.GetEndpointUriAtIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetEndpointDisplayNames(struct TArray<struct FText> outDisplayNames); // Function Scavenger.S_OnlineServiceManager.GetEndpointDisplayNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCurrentCharacterStateFromPlayerController_BP(struct APlayerController* PlayerController, struct FS_OnlineCharacterState outCharacterState); // Function Scavenger.S_OnlineServiceManager.GetCurrentCharacterStateFromPlayerController_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCurrentCharacterStateFromPlayer_BP(struct UPlayer* Player, struct FS_OnlineCharacterState outCharacterState); // Function Scavenger.S_OnlineServiceManager.GetCurrentCharacterStateFromPlayer_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCharacterUnlocks(struct FName ClassId, struct TArray<struct FName> outUnlocks); // Function Scavenger.S_OnlineServiceManager.GetCharacterUnlocks // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCharacterStateForCharacterTypeFromPlayerController_BP(struct APlayerController* PlayerController, struct US_PlayerClassData* ClassData, struct FS_OnlineCharacterState outCharacterState); // Function Scavenger.S_OnlineServiceManager.GetCharacterStateForCharacterTypeFromPlayerController_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCharacterStateForCharacterTypeFromPlayer_BP(struct UPlayer* Player, struct US_PlayerClassData* ClassData, struct FS_OnlineCharacterState outCharacterState); // Function Scavenger.S_OnlineServiceManager.GetCharacterStateForCharacterTypeFromPlayer_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetCharacterLevelForItemUnlock(struct FName ClassId, struct FName OnlineItemId); // Function Scavenger.S_OnlineServiceManager.GetCharacterLevelForItemUnlock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCarouselContents(struct FName carouselId, struct TArray<struct FName> outIds); // Function Scavenger.S_OnlineServiceManager.GetCarouselContents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetBestLobbyEndpointIndex(); // Function Scavenger.S_OnlineServiceManager.GetBestLobbyEndpointIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetAwardForCharacterLevel(struct FName ClassId, int32_t CharacterLevel, struct FName outCatalogItemId); // Function Scavenger.S_OnlineServiceManager.GetAwardForCharacterLevel // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetAwardForAccountLevel(int32_t AccountLevel, struct FName outCatalogItemId); // Function Scavenger.S_OnlineServiceManager.GetAwardForAccountLevel // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetAccountVerificationUrl(); // Function Scavenger.S_OnlineServiceManager.GetAccountVerificationUrl // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetAccountVerificationDisplayUrl(); // Function Scavenger.S_OnlineServiceManager.GetAccountVerificationDisplayUrl // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool FindPingEndpointByRegionAddress(struct FString Address, struct FS_PingEndpoint pingEndpoint); // Function Scavenger.S_OnlineServiceManager.FindPingEndpointByRegionAddress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool EvaluateRestriction(struct UPlayer* Player, struct FName RestrictionId); // Function Scavenger.S_OnlineServiceManager.EvaluateRestriction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CheatSpeedResearch(struct UPlayer* Player, struct FString ResearchStationId); // Function Scavenger.S_OnlineServiceManager.CheatSpeedResearch // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatRevokePlayerItems(struct UPlayer* Player, struct TArray<struct FString> ItemInstanceIds); // Function Scavenger.S_OnlineServiceManager.CheatRevokePlayerItems // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatRevokePlayerControllerItems(struct APlayerController* PlayerController, struct TArray<struct FString> ItemInstanceIds); // Function Scavenger.S_OnlineServiceManager.CheatRevokePlayerControllerItems // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatResetPlayer(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.CheatResetPlayer // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatMarkAsLegacyAccount(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.CheatMarkAsLegacyAccount // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerItems(struct UPlayer* Player, struct TMap<struct FName, int32_t> onlineItemMetadataIdsToCounts); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerItems // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerCurrency(struct UPlayer* Player, struct FName CurrencyId, int32_t Amount); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerCurrency // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerControllerItems(struct APlayerController* PlayerController, struct TMap<struct FName, int32_t> onlineItemMetadataIdsToCounts); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerControllerItems // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerControllerCurrency(struct APlayerController* PlayerController, struct FName CurrencyId, int32_t Amount); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerControllerCurrency // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerControllerCharacterXp(struct APlayerController* PlayerController, struct FName ClassId, int32_t Amount); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerControllerCharacterXp // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatGrantPlayerCharacterXp(struct UPlayer* Player, struct FName ClassId, int32_t Amount); // Function Scavenger.S_OnlineServiceManager.CheatGrantPlayerCharacterXp // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenRewards(struct UPlayer* Player, struct TArray<struct FString> unseenRewardIds); // Function Scavenger.S_OnlineServiceManager.AcknowledgeUnseenRewards // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeAllUnseenRewards(struct UPlayer* Player); // Function Scavenger.S_OnlineServiceManager.AcknowledgeAllUnseenRewards // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineServiceLocalEndpointConfigs
// Size: 0x38 (Inherited: 0x28)
struct US_OnlineServiceLocalEndpointConfigs : UObject {
	struct TArray<struct FS_OnlineServiceEndpointConfig> Endpoints; // 0x28(0x10)
};

// Class Scavenger.S_OnlineServiceEndpointLocatorConfig
// Size: 0x38 (Inherited: 0x28)
struct US_OnlineServiceEndpointLocatorConfig : UObject {
	struct FString EndpointLocatorAddress; // 0x28(0x10)
};

// Class Scavenger.S_OnlineServiceSecrets
// Size: 0x38 (Inherited: 0x28)
struct US_OnlineServiceSecrets : UObject {
	struct FString ServerSharedSecret; // 0x28(0x10)
};

// Class Scavenger.S_OnlineEditorConfig
// Size: 0x38 (Inherited: 0x28)
struct US_OnlineEditorConfig : UObject {
	struct TArray<struct FName> EditorPlayerFlags; // 0x28(0x10)
};

// Class Scavenger.S_OnlineServiceManagerDataApi
// Size: 0xc48 (Inherited: 0xb30)
struct US_OnlineServiceManagerDataApi : US_OnlineServiceManager {
	float EndpointPingPeriodSeconds; // 0xb30(0x04)
	float EndpointPingTimeoutSeconds; // 0xb34(0x04)
	int32_t EndpointPingsPerEndpoint; // 0xb38(0x04)
	int32_t EndpointMinResultsRequired; // 0xb3c(0x04)
	float EndpointMaxPacketLossAllowed; // 0xb40(0x04)
	char pad_B44[0x4]; // 0xb44(0x04)
	struct TMap<struct UPlayer*, struct FS_OnlineServiceManagerDataApiClientConnectionState> m_mapOfPlayerToConnectionState; // 0xb48(0x50)
	char pad_B98[0x30]; // 0xb98(0x30)
	struct UPlayFabAuthenticationContext* m_telemetryAuthenticationContext; // 0xbc8(0x08)
	char pad_BD0[0x78]; // 0xbd0(0x78)

	void TravelToSplashScreen(); // Function Scavenger.S_OnlineServiceManagerDataApi.TravelToSplashScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheckForNetworkConnection(struct ULocalPlayer* LocalPlayer); // Function Scavenger.S_OnlineServiceManagerDataApi.CheckForNetworkConnection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineSocialHubScheduler
// Size: 0xe0 (Inherited: 0x28)
struct US_OnlineSocialHubScheduler : UObject {
	char pad_28[0x30]; // 0x28(0x30)
	bool IsSocialHubEnabled; // 0x58(0x01)
	char pad_59[0x87]; // 0x59(0x87)

	void RequestSocialEventFullStatus(); // Function Scavenger.S_OnlineSocialHubScheduler.RequestSocialEventFullStatus // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool IsEventUnlocked(); // Function Scavenger.S_OnlineSocialHubScheduler.IsEventUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEventSilent(); // Function Scavenger.S_OnlineSocialHubScheduler.IsEventSilent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEventObligatory(); // Function Scavenger.S_OnlineSocialHubScheduler.IsEventObligatory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEventFull(); // Function Scavenger.S_OnlineSocialHubScheduler.IsEventFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEventAdvertised(); // Function Scavenger.S_OnlineSocialHubScheduler.IsEventAdvertised // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleLiveDataUpdated(); // Function Scavenger.S_OnlineSocialHubScheduler.HandleLiveDataUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	enum class ES_SocialHubSchedulingState GetState(); // Function Scavenger.S_OnlineSocialHubScheduler.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_GameMode GetDefaultGameMode(); // Function Scavenger.S_OnlineSocialHubScheduler.GetDefaultGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlinePlayerUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlinePlayerUtility : UObject {

	struct FText GetSafePlayerNameText(struct FText PlayerName); // Function Scavenger.S_OnlinePlayerUtility.GetSafePlayerNameText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetSafePlayerNameString(struct FString PlayerName); // Function Scavenger.S_OnlinePlayerUtility.GetSafePlayerNameString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetSafePlayerNameAndIdText(struct FText PlayerName, struct FText outPlayerName, struct FText outId); // Function Scavenger.S_OnlinePlayerUtility.GetSafePlayerNameAndIdText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetPlayerNameDivider(); // Function Scavenger.S_OnlinePlayerUtility.GetPlayerNameDivider // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineStoreUtility
// Size: 0x28 (Inherited: 0x28)
struct US_OnlineStoreUtility : UBlueprintFunctionLibrary {

	bool IsStoreOfferOwnedByPlayer(struct UObject* Context, struct FName StoreOfferId, struct UPlayer* Player); // Function Scavenger.S_OnlineStoreUtility.IsStoreOfferOwnedByPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetStoreOfferTitle(struct UObject* Context, struct FName StoreOfferId, struct FText outOfferTitle); // Function Scavenger.S_OnlineStoreUtility.GetStoreOfferTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetStoreOfferSubtitle(struct UObject* Context, struct FName StoreOfferId, struct FText outOfferSubtitle); // Function Scavenger.S_OnlineStoreUtility.GetStoreOfferSubtitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetStoreOfferDescription(struct UObject* Context, struct FName StoreOfferId, struct FText outOfferDescription); // Function Scavenger.S_OnlineStoreUtility.GetStoreOfferDescription // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetStoreFrontTitle(struct UObject* Context, struct FName storefrontId, struct FText outStorefrontTitle); // Function Scavenger.S_OnlineStoreUtility.GetStoreFrontTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TSoftObjectPtr<struct UTexture2D> GetStoreFrontIcon(struct UObject* Context, struct FName storefrontId); // Function Scavenger.S_OnlineStoreUtility.GetStoreFrontIcon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OnlineCosmeticSelectionHistorySaveGame
// Size: 0x78 (Inherited: 0x28)
struct US_OnlineCosmeticSelectionHistorySaveGame : USaveGame {
	struct FS_OnlineCosmeticSelectionHistory CosmeticSelectionHistory; // 0x28(0x50)
};

// Class Scavenger.S_OpportunityPoint
// Size: 0x308 (Inherited: 0x288)
struct AS_OpportunityPoint : AActor {
	struct FS_OpportunityPointInfo OpportunityPoint; // 0x288(0x70)
	float FitPointToGroundTraceLength; // 0x2f8(0x04)
	float SnoffSet; // 0x2fc(0x04)
	char bFitPointsToGround : 1; // 0x300(0x01)
	char pad_300_1 : 7; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
};

// Class Scavenger.S_OutlanderAnimInstance
// Size: 0x6e0 (Inherited: 0x6d0)
struct US_OutlanderAnimInstance : US_HumanAnimInstance {
	bool Native_IsBulwark; // 0x6c8(0x01)
	bool Native_GripAdditiveOff; // 0x6c9(0x01)
	bool Native_IsFleeing; // 0x6ca(0x01)
	bool Native_IsSearching; // 0x6cb(0x01)
	float Native_RootMotionWeight; // 0x6cc(0x04)
	float Native_BaseMovementCurve; // 0x6d0(0x04)
	bool Native_CanBlendPerBoneWhenStowing; // 0x6d4(0x01)
	bool Native_CanEnterCrouchToLoco; // 0x6d5(0x01)
	char pad_6DE[0x2]; // 0x6de(0x02)
};

// Class Scavenger.S_OverheadMapCamera
// Size: 0x340 (Inherited: 0x288)
struct AS_OverheadMapCamera : AActor {
	struct FVector2D mapViewportDimensions; // 0x288(0x08)
	struct USceneCaptureComponent2D* SceneCaptureComponent; // 0x290(0x08)
	float ActorLevelWidth; // 0x298(0x04)
	int32_t NumberOfActorLevelsWide; // 0x29c(0x04)
	struct FVector2D CenterOfMapRegion; // 0x2a0(0x08)
	float DesiredZAxis; // 0x2a8(0x04)
	char pad_2AC[0x94]; // 0x2ac(0x94)

	struct FVector2D WorldToScreenPosition(struct FVector worldPos); // Function Scavenger.S_OverheadMapCamera.WorldToScreenPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector2D WorldToMapPosition(struct FVector World); // Function Scavenger.S_OverheadMapCamera.WorldToMapPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapViewportDimensions(struct FVector2D mapViewportDimensions); // Function Scavenger.S_OverheadMapCamera.SetMapViewportDimensions // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector ScreenToWorldPosition(struct FVector2D screenCoords); // Function Scavenger.S_OverheadMapCamera.ScreenToWorldPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector MapToWorldPosition(struct FVector2D Map); // Function Scavenger.S_OverheadMapCamera.MapToWorldPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetOrthoWidth(); // Function Scavenger.S_OverheadMapCamera.GetOrthoWidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CaptureWholeMap(); // Function Scavenger.S_OverheadMapCamera.CaptureWholeMap // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OverheadMapIconComponent
// Size: 0x178 (Inherited: 0xb0)
struct US_OverheadMapIconComponent : UActorComponent {
	char pad_B0[0x78]; // 0xb0(0x78)
	bool bAutoAddData; // 0x128(0x01)
	bool bIsEnabled; // 0x129(0x01)
	bool bUpdateIconLocationFromOwner; // 0x12a(0x01)
	enum class ES_MapIconUse MapIconUse; // 0x12b(0x01)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FS_OverrideMapDisplayDataTableRowReference OverrideMapDisplayData; // 0x130(0x20)
	bool UseOverrideMapDisplayData; // 0x150(0x01)
	bool HasEntryInALocationNameTable; // 0x151(0x01)
	char pad_152[0x6]; // 0x152(0x06)
	struct FS_NamedLocationMetadataTableRowReference MetaData; // 0x158(0x20)

	void UpdateMapIconData(); // Function Scavenger.S_OverheadMapIconComponent.UpdateMapIconData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetRandomizedEncounterLabel(int32_t encounterTypeIndex, struct FName outGeneratedEncounterLabel); // Function Scavenger.S_OverheadMapIconComponent.SetRandomizedEncounterLabel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconWorldSize(float WorldSize); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconWorldLocation(struct FVector2D WorldLocation); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconWorldLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconTextures(struct UTexture2D* Texture, struct UTexture2D* AltTexture); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconTextures // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconDisplayText(struct FName Name); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconDisplayText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconColor(struct FLinearColor Color); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconAltTextureSize(float AltTextureSize); // Function Scavenger.S_OverheadMapIconComponent.SetMapIconAltTextureSize // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetLocationLabelWithOverride(struct FName locationNameOverride); // Function Scavenger.S_OverheadMapIconComponent.SetLocationLabelWithOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetLocationLabelFromNamedLocationVolume(struct AS_GenericLocationVolume* namedLocationVolume, struct FName outLocationLabel); // Function Scavenger.S_OverheadMapIconComponent.SetLocationLabelFromNamedLocationVolume // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetLocationLabelFromMapIconMetadata(struct FName outLocationLabel); // Function Scavenger.S_OverheadMapIconComponent.SetLocationLabelFromMapIconMetadata // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveMapIconData(); // Function Scavenger.S_OverheadMapIconComponent.RemoveMapIconData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetLocationMetadata_BP(struct FS_NamedLocationMetadata OutLocationMetadata); // Function Scavenger.S_OverheadMapIconComponent.GetLocationMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_OverlappingInput
// Size: 0x90 (Inherited: 0x28)
struct US_OverlappingInput : UObject {
	struct US_OverlappingInputResolver* m_resolver; // 0x28(0x08)
	char pad_30[0x60]; // 0x30(0x60)
};

// Class Scavenger.S_OverlappingInputResolver
// Size: 0x78 (Inherited: 0x28)
struct US_OverlappingInputResolver : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct TArray<struct US_OverlappingInput*> m_inputCatchers; // 0x48(0x10)
	char pad_58[0x20]; // 0x58(0x20)
};

// Class Scavenger.S_PawnBase
// Size: 0x498 (Inherited: 0x2e8)
struct AS_PawnBase : APawn {
	char pad_2E8[0x18]; // 0x2e8(0x18)
	struct AController* m_cachedController; // 0x300(0x08)
	struct FMulticastInlineDelegate OnDamagedBy; // 0x308(0x10)
	struct FMulticastInlineDelegate OnDownedBy; // 0x318(0x10)
	struct FMulticastInlineDelegate OnTerminalBy; // 0x328(0x10)
	struct FMulticastInlineDelegate OnKilledBy; // 0x338(0x10)
	struct FMulticastInlineDelegate OnResurrectedBy; // 0x348(0x10)
	struct FMulticastInlineDelegate OnRevivedBy; // 0x358(0x10)
	struct FMulticastInlineDelegate OnStatsStateChangedBy; // 0x368(0x10)
	struct FMulticastInlineDelegate OnItemAcquired; // 0x378(0x10)
	struct FMulticastInlineDelegate OnItemDestroyed; // 0x388(0x10)
	struct FMulticastInlineDelegate OnItemDropped; // 0x398(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnItemUsed; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnCocooned; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnFreedFromCocoon; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnKilledInCocoon; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnExtracting; // 0x408(0x10)
	struct FMulticastInlineDelegate OnExtracted; // 0x418(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0x428(0x10)
	struct FMulticastInlineDelegate OnPreTakeDamage; // 0x438(0x10)
	struct FMulticastInlineDelegate OnPreTakePointDamage; // 0x448(0x10)
	struct FMulticastInlineDelegate OnPostTakeDamage; // 0x458(0x10)
	struct FMulticastInlineDelegate OnPostTakePointDamage; // 0x468(0x10)
	struct FMulticastInlineDelegate OnStormCategoryChanged; // 0x478(0x10)
	enum class ES_StormCategory m_IsInStormCategory; // 0x488(0x01)
	char pad_489[0x7]; // 0x489(0x07)
	bool bShowDamageNumbers; // 0x490(0x01)
	char pad_491[0x7]; // 0x491(0x07)

	void SetIsInStormCategory(enum class ES_StormCategory NewInStormCategory); // Function Scavenger.S_PawnBase.SetIsInStormCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetControlRotationLocked(bool bLocked); // Function Scavenger.S_PawnBase.SetControlRotationLocked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ScavengerCrossServerTakeDamage(float DamageAmount, struct FS_PointDamageEvent DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser, enum class ES_TriggerType triggerType); // Function Scavenger.S_PawnBase.ScavengerCrossServerTakeDamage // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void ScavengerCrossServerAddImpulseAtLocation(struct FVector Impulse, struct FVector Location); // Function Scavenger.S_PawnBase.ScavengerCrossServerAddImpulseAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void ResetControlRotationLock(); // Function Scavenger.S_PawnBase.ResetControlRotationLock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyTerminalBy_BP(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PawnBase.NotifyTerminalBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatsStateChangedBy_BP(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PawnBase.NotifyStatsStateChangedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevivedBy_BP(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_PawnBase.NotifyRevivedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectedBy_BP(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_PawnBase.NotifyResurrectedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledInCocoon_BP(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_PawnBase.NotifyKilledInCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledBy_BP(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_PawnBase.NotifyKilledBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUsed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.NotifyItemUsed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUnequipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.NotifyItemUnequipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemEquipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.NotifyItemEquipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDropped_BP(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_PawnBase.NotifyItemDropped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDestroyed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.NotifyItemDestroyed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemAcquired_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.NotifyItemAcquired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyIsInStormCategory(); // Function Scavenger.S_PawnBase.NotifyIsInStormCategory // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyFreedFromCocoon_BP(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_PawnBase.NotifyFreedFromCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracting_BP(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_PawnBase.NotifyExtracting_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracted_BP(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_PawnBase.NotifyExtracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDownedBy_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PawnBase.NotifyDownedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamagedBy_BP(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_PawnBase.NotifyDamagedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyControllerChanged_BP(struct AController* OldController, struct AController* NewController); // Function Scavenger.S_PawnBase.NotifyControllerChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCocooned_BP(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_PawnBase.NotifyCocooned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamageBatch(struct TArray<struct FS_PointDamageMulticast> multiCastEvents); // Function Scavenger.S_PawnBase.MulticastTakePointDamageBatch // (Net|Native|Event|NetMulticast|Protected|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastTakePointDamage(float DamageAmount, struct FS_PointDamageEvent PointDamageEvent, struct APawn* instigatorPawn, struct AActor* CauseActor, enum class ES_TriggerType triggerType); // Function Scavenger.S_PawnBase.MulticastTakePointDamage // (Net|Native|Event|NetMulticast|Protected|NetValidate) // @ game+0xffff8008e4a10000
	enum class ES_StormCategory GetIsInStormCategory(); // Function Scavenger.S_PawnBase.GetIsInStormCategory // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetIsInStorm(); // Function Scavenger.S_PawnBase.GetIsInStorm // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetControlRotationLocked(); // Function Scavenger.S_PawnBase.GetControlRotationLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EventTerminalBy(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PawnBase.EventTerminalBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventStatsStateChangedBy(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PawnBase.EventStatsStateChangedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevivedBy(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_PawnBase.EventRevivedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrectedBy(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_PawnBase.EventResurrectedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledInCocoon(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_PawnBase.EventKilledInCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledBy(struct FS_EventParameterControllerVariant KillingController); // Function Scavenger.S_PawnBase.EventKilledBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUsed(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.EventItemUsed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.EventItemUnequipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.EventItemEquipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDropped(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_PawnBase.EventItemDropped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDestroyed(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.EventItemDestroyed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemAcquired(struct FS_ItemState ItemState); // Function Scavenger.S_PawnBase.EventItemAcquired // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventFreedFromCocoon(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_PawnBase.EventFreedFromCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracting(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_PawnBase.EventExtracting // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracted(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_PawnBase.EventExtracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDownedBy(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PawnBase.EventDownedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamagedBy(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_PawnBase.EventDamagedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventCocooned(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_PawnBase.EventCocooned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AssetAuditHelpers
// Size: 0x28 (Inherited: 0x28)
struct US_AssetAuditHelpers : UBlueprintFunctionLibrary {

	void ValidatePrefabAssets(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.ValidatePrefabAssets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ValidateCullDistanceGroupsForMeshes(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.ValidateCullDistanceGroupsForMeshes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateCullDistances(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.UpdateCullDistances // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLODGroupsForMeshes(struct TArray<struct UStaticMesh*> meshes, struct FName newGroup); // Function Scavenger.S_AssetAuditHelpers.SetLODGroupsForMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReplaceAutomergedPrefabs(bool onlyChildren, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.ReplaceAutomergedPrefabs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PurgeUnusedLandscapeLayers(int32_t totalThreshold, int32_t pixelsThreshold, int32_t maxUsageThreshold, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.PurgeUnusedLandscapeLayers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ListForceStaticMergePrefabs(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.ListForceStaticMergePrefabs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetMeshSizeTotal(struct TArray<struct UStaticMesh*> meshes); // Function Scavenger.S_AssetAuditHelpers.GetMeshSizeTotal // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetLODGroupsForStaticMeshes(); // Function Scavenger.S_AssetAuditHelpers.GetLODGroupsForStaticMeshes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TMap<struct FName, int32_t> GetLODGroupCountsFromMeshes(struct TArray<struct UStaticMesh*> meshes); // Function Scavenger.S_AssetAuditHelpers.GetLODGroupCountsFromMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FixupSelectedPrefab(struct TArray<struct APrefabActor*> Targets, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.FixupSelectedPrefab // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FixupLandscapeLayerUsages(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.FixupLandscapeLayerUsages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DumpCloseActors_BP(bool printFile, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.DumpCloseActors_BP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditWorldCollision(bool dumpLog, bool dumpCSV, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditWorldCollision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditVertTriRatios(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditVertTriRatios // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureStreamSetting(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureStreamSetting // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureSizes(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureSizes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureResolutions(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureResolutions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureMips(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureMips // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureMeshAssetRatios(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureMeshAssetRatios // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditTextureMeshActorRatios(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditTextureMeshActorRatios // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditStaticMeshCollisionSettings(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditStaticMeshCollisionSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditSimulatedPhysicsOnActors(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditSimulatedPhysicsOnActors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditShaders(bool dumpInstructions, bool dumpTextures, bool dumpShadingModelUsages, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditShaders // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditSceneGPUCost(enum class ES_AuditGPUSelection auditSelection, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditSceneGPUCost // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditReplicatedActors(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditReplicatedActors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditNonStaticMeshes(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditNonStaticMeshes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditMeshSizes(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditMeshSizes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditMeshesAndTextures(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditMeshesAndTextures // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditMaterials(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditMaterials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditLODs(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditLODs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditLandscapeLayers(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditLandscapeLayers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditLandscapeComponentMaterials(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditLandscapeComponentMaterials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditImportant(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditImportant // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditCollisionLOD(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditCollisionLOD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditCollisionComplexAsSimple(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditCollisionComplexAsSimple // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditChildActorComponents(bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditChildActorComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditBigObjects(struct TArray<struct FString> targetSubstrings, float minScale, bool checkName, bool checkMeshName, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditBigObjects // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditAll(bool dumpAll, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AuditActorMobility(bool printStatic, bool clearLog); // Function Scavenger.S_AssetAuditHelpers.AuditActorMobility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SplineHelperFunctions
// Size: 0x28 (Inherited: 0x28)
struct US_SplineHelperFunctions : UBlueprintFunctionLibrary {

	void SetSplineMeshMaxDrawDistance(struct UStaticMesh* Mesh, float maxDrawDistance); // Function Scavenger.S_SplineHelperFunctions.SetSplineMeshMaxDrawDistance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct UStaticMesh*> GetSplineMeshList(); // Function Scavenger.S_SplineHelperFunctions.GetSplineMeshList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<float> GetSplineMeshAverageDrawDistances(); // Function Scavenger.S_SplineHelperFunctions.GetSplineMeshAverageDrawDistances // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_CullDistanceVisFunctions
// Size: 0x28 (Inherited: 0x28)
struct US_CullDistanceVisFunctions : UBlueprintFunctionLibrary {

	struct TArray<struct UPrimitiveComponent*> GetPrimitivesInCullDistanceVolume(struct ACullDistanceVolume* CullDistanceVolume); // Function Scavenger.S_CullDistanceVisFunctions.GetPrimitivesInCullDistanceVolume // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TMap<struct UPrimitiveComponent*, int32_t> GetAffectedPrimitivesInCullDistanceVolume(struct ACullDistanceVolume* CullDistanceVolume); // Function Scavenger.S_CullDistanceVisFunctions.GetAffectedPrimitivesInCullDistanceVolume // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PingableWidget
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_PingableWidget : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnPinged; // 0x4b8(0x10)

	void OnPinged_BP(); // Function Scavenger.S_PingableWidget.OnPinged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleUIActionPressed(enum class ES_UIAction ActionType); // Function Scavenger.S_PingableWidget.HandleUIActionPressed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PingConfig
// Size: 0xbc0 (Inherited: 0x30)
struct US_PingConfig : UDataAsset {
	struct TArray<struct FS_PingChannel> Channels; // 0x30(0x10)
	struct TMap<enum class ES_AutoPingType, struct US_WidgetMinimal*> AutoPingWidgetClasses; // 0x40(0x50)
	float PingMaxDistance; // 0x90(0x04)
	struct FVector PingBoxTraceHalfSize; // 0x94(0x0c)
	struct FName PingSocketName; // 0xa0(0x08)
	struct FS_PingDisplayData PingDisplayData[0x15]; // 0xa8(0x9d8)
	struct TMap<enum class ES_AutoPingType, struct FS_AutoPingDisplayData> AutoPingDisplayDataOverride; // 0xa80(0x50)
	struct TMap<enum class ES_AutoPingType, struct UTexture2D*> AutoPingImageMap; // 0xad0(0x50)
	struct TMap<enum class ES_InteractIcon, struct UTexture2D*> InteractableTypeToPingIcon; // 0xb20(0x50)
	struct TMap<enum class ES_ScavAITeams, struct UTexture2D*> TeamToPingIcon; // 0xb70(0x50)
};

// Class Scavenger.S_PingMetadataComponent
// Size: 0x108 (Inherited: 0xb0)
struct US_PingMetadataComponent : UActorComponent {
	enum class ES_PingInfoType PingType; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FS_DialogueContext PingDialogueContext; // 0xb8(0x50)
};

// Class Scavenger.S_PingMetadataInterface
// Size: 0x28 (Inherited: 0x28)
struct US_PingMetadataInterface : UInterface {

	bool GetPingDialogueContext(struct AS_PlayerController* pingingPlayerController, struct FS_DialogueContext OutContext); // Function Scavenger.S_PingMetadataInterface.GetPingDialogueContext // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PingUtility_BPFL
// Size: 0x28 (Inherited: 0x28)
struct US_PingUtility_BPFL : UBlueprintFunctionLibrary {

	bool GetPingDialogueContextForActor(struct AActor* Actor, struct AS_PlayerController* pingingPlayerController, struct FS_DialogueContext OutContext); // Function Scavenger.S_PingUtility_BPFL.GetPingDialogueContextForActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerCameraManager
// Size: 0x2e40 (Inherited: 0x2820)
struct AS_PlayerCameraManager : APlayerCameraManager {
	char pad_2820[0x610]; // 0x2820(0x610)
	float PossesCameraBlendTime; // 0x2e30(0x04)
	char pad_2E34[0xc]; // 0x2e34(0x0c)

	void SetPossesCameraBlendTime(float Time); // Function Scavenger.S_PlayerCameraManager.SetPossesCameraBlendTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetPossesCameraBlendTime(); // Function Scavenger.S_PlayerCameraManager.GetPossesCameraBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ForceSendClientSideCameraUpdate(); // Function Scavenger.S_PlayerCameraManager.ForceSendClientSideCameraUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BlueprintVewTargetChanged(struct AActor* NewCameraTarget, struct AActor* OldCameraTarget); // Function Scavenger.S_PlayerCameraManager.BlueprintVewTargetChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerCharacter
// Size: 0x2d80 (Inherited: 0x2650)
struct AS_PlayerCharacter : AS_AICharacter {
	struct FMulticastInlineDelegate OnTryActivateAbilityFailed; // 0x2650(0x10)
	struct FS_KRADLEnemyInfo EnemyInfo; // 0x2660(0x40)
	char pad_26A0[0x80]; // 0x26a0(0x80)
	enum class ES_EquipmentSlot m_currentlySelectedQuickItemSlot; // 0x2720(0x01)
	char pad_2721[0x7]; // 0x2721(0x07)
	struct FMulticastInlineDelegate OnQuickItemSlotChanged; // 0x2728(0x10)
	enum class ES_CameraSettings m_activeSpringArmSetting; // 0x2738(0x01)
	char pad_2739[0x7]; // 0x2739(0x07)
	struct FMulticastInlineDelegate OnSpringArmActiveSettingChanged; // 0x2740(0x10)
	char pad_2750[0x10]; // 0x2750(0x10)
	bool m_hasSpectatorsAttached; // 0x2760(0x01)
	enum class ES_SelectionSet m_currentSelectionSet; // 0x2761(0x01)
	char pad_2762[0x6]; // 0x2762(0x06)
	struct FMulticastInlineDelegate OnSelectionSetChanged; // 0x2768(0x10)
	bool m_isSelectionLocked; // 0x2778(0x01)
	char pad_2779[0x3]; // 0x2779(0x03)
	float SprintToggleInputThreshold; // 0x277c(0x04)
	float DodgeAngleForwardRight; // 0x2780(0x04)
	float DodgeAngleForwardLeft; // 0x2784(0x04)
	float DodgeAngleBackRight; // 0x2788(0x04)
	float DodgeAngleBackLeft; // 0x278c(0x04)
	float TimeBetweenWeatherUpdates; // 0x2790(0x04)
	char pad_2794[0x4]; // 0x2794(0x04)
	struct FMulticastInlineDelegate OnLevelUp; // 0x2798(0x10)
	struct FMulticastInlineDelegate OnCharacterInteractStart; // 0x27a8(0x10)
	struct FMulticastInlineDelegate OnCharacterInteractStop; // 0x27b8(0x10)
	struct FMulticastInlineDelegate OnCharacterShotBlocked; // 0x27c8(0x10)
	struct FMulticastInlineDelegate OnCharacterShotUnblocked; // 0x27d8(0x10)
	struct FS_InputQueue DodgeQueue; // 0x27e8(0x08)
	struct FS_ScreenDamageIndicators DamageIndicators; // 0x27f0(0x80)
	struct FS_CriticalHealthConfig CriticalHealthConfig; // 0x2870(0x18)
	struct TArray<struct FS_InteractableSound> InteractionSounds; // 0x2888(0x10)
	struct FSpatialLatencyPayload crouchRepPayload; // 0x2898(0x28)
	char pad_28C0[0x8]; // 0x28c0(0x08)
	struct FMulticastInlineDelegate OnBoardingStatusChanged; // 0x28c8(0x10)
	char pad_28D8[0x30]; // 0x28d8(0x30)
	struct AS_PlayerController* m_playerController; // 0x2908(0x08)
	struct AS_PlayerControllerBase* m_playerControllerBase; // 0x2910(0x08)
	struct APlayerState* m_playerState; // 0x2918(0x08)
	char pad_2920[0x34]; // 0x2920(0x34)
	bool m_bJumpSlide; // 0x2954(0x01)
	char pad_2955[0x7]; // 0x2955(0x07)
	bool m_bFallingSlide; // 0x295c(0x01)
	char pad_295D[0x23]; // 0x295d(0x23)
	struct US_OverlappingInputResolver* m_selectOrUseQuickItemResolver; // 0x2980(0x08)
	struct US_OverlappingInputResolver* m_selectOrUsePingResolver; // 0x2988(0x08)
	struct TArray<enum class ES_ActionID> LoseTheWillToSprintOnAction; // 0x2990(0x10)
	struct TArray<enum class ES_ActionID> OnlyTriggerSprintOnTapAction; // 0x29a0(0x10)
	struct TArray<enum class ES_ActionID> ActionsToCancelOnSprintButtonPressed; // 0x29b0(0x10)
	struct TArray<enum class ES_ActionID> ActionsToCancelOnAbilityUse; // 0x29c0(0x10)
	float m_minWantsToSprintTime; // 0x29d0(0x04)
	char pad_29D4[0x4]; // 0x29d4(0x04)
	float m_timeFallingBeforeStoppingSlide; // 0x29d8(0x04)
	char pad_29DC[0x4]; // 0x29dc(0x04)
	struct US_PlayerClassData* m_classData; // 0x29e0(0x08)
	char pad_29E8[0x10]; // 0x29e8(0x10)
	struct FS_InteractionState m_interactionState; // 0x29f8(0x48)
	char pad_2A40[0xa0]; // 0x2a40(0xa0)
	bool m_ensureHolstered; // 0x2ae0(0x01)
	bool m_tryToUnholster; // 0x2ae1(0x01)
	char pad_2AE2[0x2]; // 0x2ae2(0x02)
	int32_t m_numPlayersKilled; // 0x2ae4(0x04)
	int32_t m_droppedDatapoints; // 0x2ae8(0x04)
	char pad_2AEC[0x4]; // 0x2aec(0x04)
	struct FMulticastInlineDelegate OnKeeperPerformAction; // 0x2af0(0x10)
	struct AS_Keeper* Keeper; // 0x2b00(0x08)
	struct AS_Keeper* m_keeper; // 0x2b08(0x08)
	struct FS_KeeperStateInfo m_keeperStateInfo; // 0x2b10(0x20)
	char pad_2B30[0x8]; // 0x2b30(0x08)
	struct USpringArmComponent* KeeperSpringArm; // 0x2b38(0x08)
	char pad_2B40[0x10]; // 0x2b40(0x10)
	struct USpringArmComponent* FlashlightSpringArm; // 0x2b50(0x08)
	struct FVector FlashlightRelativeLocation; // 0x2b58(0x0c)
	bool IsFlashlightOn; // 0x2b64(0x01)
	char pad_2B65[0xb]; // 0x2b65(0x0b)
	struct UCurveFloat* FlashlightLightCurve; // 0x2b70(0x08)
	float MaximumFlashlightIntensity; // 0x2b78(0x04)
	char pad_2B7C[0x4]; // 0x2b7c(0x04)
	struct USpotLightComponent* Flashlight; // 0x2b80(0x08)
	char pad_2B88[0x10]; // 0x2b88(0x10)
	struct US_DrunkGapModel* m_DrunkGapModel; // 0x2b98(0x08)
	struct FName m_playerAbilityName; // 0x2ba0(0x08)
	struct TArray<struct FS_DetectedActorLocationData> m_detectedActors; // 0x2ba8(0x10)
	struct US_MapDetectableComponent* MapDetectableComponent; // 0x2bb8(0x08)
	struct UInputComponent* m_interactionInputComponent; // 0x2bc0(0x08)
	char pad_2BC8[0x2c]; // 0x2bc8(0x2c)
	struct TWeakObjectPtr<struct AS_AIOverlordActor> m_currOverlord; // 0x2bf4(0x08)
	char pad_2BFC[0x4]; // 0x2bfc(0x04)
	SoftClassProperty BotControllerType; // 0x2c00(0x28)
	struct AS_PlayerController* BotPlayerControllerType; // 0x2c28(0x08)
	struct US_FiringPointManagerComponent* m_playerBotFiringPointManager; // 0x2c30(0x08)
	struct AS_FiringPointAreaVolume* m_playerBotFiringPointArea; // 0x2c38(0x08)
	struct FName ServerBotClassRowName; // 0x2c40(0x08)
	char pad_2C48[0x18]; // 0x2c48(0x18)
	struct FMulticastInlineDelegate OnReceiveNearbyInteractableLocations; // 0x2c60(0x10)
	struct UGameplayAbility* WholeTeamIncapacitated_BleedOutAbility; // 0x2c70(0x08)
	float RadiationLevelToCocoonAt; // 0x2c78(0x04)
	char pad_2C7C[0xc]; // 0x2c7c(0x0c)
	struct AS_PlayerCocoon* PlayerCocoonClass; // 0x2c88(0x08)
	struct UGameplayEffect* StunnedGameplayEffect; // 0x2c90(0x08)
	struct FName CocoonSpawnSocketName; // 0x2c98(0x08)
	float CocoonDamage_TimeInterval; // 0x2ca0(0x04)
	float CocoonDamage_Amount; // 0x2ca4(0x04)
	char pad_2CA8[0x8]; // 0x2ca8(0x08)
	struct AS_PlayerCocoon* m_cocoon; // 0x2cb0(0x08)
	char pad_2CB8[0x8]; // 0x2cb8(0x08)
	struct FS_UseItemAction m_useItemAction; // 0x2cc0(0x30)
	struct TSet<struct UActorComponent*> m_serverOptimizedOutComponents; // 0x2cf0(0x50)
	struct AS_PlayerCharacter* m_reviveTarget; // 0x2d40(0x08)
	struct AS_PlayerCharacter* m_fellaRevivingMe; // 0x2d48(0x08)
	char pad_2D50[0x8]; // 0x2d50(0x08)
	struct UAnimMontage* ReviveMontage; // 0x2d58(0x08)
	struct UAnimMontage* ReviveTargetMontage; // 0x2d60(0x08)
	char pad_2D68[0x18]; // 0x2d68(0x18)

	void UseCurrentlySelectedQuickItem(); // Function Scavenger.S_PlayerCharacter.UseCurrentlySelectedQuickItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateRogueStencil(float DeltaSeconds); // Function Scavenger.S_PlayerCharacter.UpdateRogueStencil // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnregisterDownedPlayerWithAllOverlords(); // Function Scavenger.S_PlayerCharacter.UnregisterDownedPlayerWithAllOverlords // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xffff8008e4a10000
	void UnDropPlayerBotfiringPoint(); // Function Scavenger.S_PlayerCharacter.UnDropPlayerBotfiringPoint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ShouldBlipOnMap(struct FS_FlashpointSettings flashpointSettings, enum class ES_AttackEvent attackEvent, bool bShouldBlip); // Function Scavenger.S_PlayerCharacter.ShouldBlipOnMap // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetWantsToSprint(bool bWantsToSprint); // Function Scavenger.S_PlayerCharacter.SetWantsToSprint // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetupPlayerClass_BP(); // Function Scavenger.S_PlayerCharacter.SetupPlayerClass_BP // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetShowInRadarSweep(bool bInShowInRadarSweep); // Function Scavenger.S_PlayerCharacter.SetShowInRadarSweep // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRogueStencilRanges(float rank1, float rank2, float rank3); // Function Scavenger.S_PlayerCharacter.SetRogueStencilRanges // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetKeeperUncloaked(); // Function Scavenger.S_PlayerCharacter.SetKeeperUncloaked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetKeeperCloaked(); // Function Scavenger.S_PlayerCharacter.SetKeeperCloaked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetKeeperAttachedToItemBeingIteractedWith(struct FName AttachSocketName); // Function Scavenger.S_PlayerCharacter.SetKeeperAttachedToItemBeingIteractedWith // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetKeeperAttached(struct UActorComponent* AttachComponent, struct FName AttachSocketName); // Function Scavenger.S_PlayerCharacter.SetKeeperAttached // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemKeeperInteractingWith(struct AS_InteractableActor* newItemInteractingWith); // Function Scavenger.S_PlayerCharacter.SetItemKeeperInteractingWith // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInteractionPromptShown(bool bNewShown); // Function Scavenger.S_PlayerCharacter.SetInteractionPromptShown // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFlashlightVisibility(bool newVisibility); // Function Scavenger.S_PlayerCharacter.SetFlashlightVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBoardingStatus(bool isInBoardingArea); // Function Scavenger.S_PlayerCharacter.SetBoardingStatus // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerRequestSwitchToWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_PlayerCharacter.ServerRequestSwitchToWeapon // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestSelectQuickItemSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_PlayerCharacter.ServerRequestSelectQuickItemSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestNewKeeperAbilityTask(struct FString TaskInstanceName); // Function Scavenger.S_PlayerCharacter.ServerRequestNewKeeperAbilityTask // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestKeeperAbilityTaskFinished(struct FString TaskInstanceName, enum class ES_KeeperAbilityTaskCompletionFunctions OptionalFunctionDelegate); // Function Scavenger.S_PlayerCharacter.ServerRequestKeeperAbilityTaskFinished // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestInteractRelease(enum class ES_Interaction interactionType); // Function Scavenger.S_PlayerCharacter.ServerRequestInteractRelease // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestInteractPressTrace(enum class ES_Interaction interactionType, struct FSpatialLatencyPayload clientItemAcquiredPayload); // Function Scavenger.S_PlayerCharacter.ServerRequestInteractPressTrace // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestInteractPress(enum class ES_Interaction interactionType); // Function Scavenger.S_PlayerCharacter.ServerRequestInteractPress // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestForceChangeFlashlightVisibility(int32_t debugValue, bool isGlobalForced); // Function Scavenger.S_PlayerCharacter.ServerRequestForceChangeFlashlightVisibility // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xffff8008e4a10000
	void ServerRequestChangeKeeperCloakState(enum class ES_KeeperCloakState newCloakState); // Function Scavenger.S_PlayerCharacter.ServerRequestChangeKeeperCloakState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestChangeKeeperAttachment(struct UActorComponent* AttachComponent, struct FName AttachSocketName); // Function Scavenger.S_PlayerCharacter.ServerRequestChangeKeeperAttachment // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestChangeFlashlightVisibility(bool IsVisible); // Function Scavenger.S_PlayerCharacter.ServerRequestChangeFlashlightVisibility // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestChangeAbilityActive(bool AbilityActive); // Function Scavenger.S_PlayerCharacter.ServerRequestChangeAbilityActive // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerPlayerBotSetHumanControl(bool humanControlled); // Function Scavenger.S_PlayerCharacter.ServerPlayerBotSetHumanControl // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerPlayerBotRequestNearbyInteractableLocation(struct AActor* InteractableType, struct FVector SearchLocation, float searchRadius); // Function Scavenger.S_PlayerCharacter.ServerPlayerBotRequestNearbyInteractableLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void ServerPlayerBotGetGrenades(struct FName grenadeName); // Function Scavenger.S_PlayerCharacter.ServerPlayerBotGetGrenades // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerOnKeeperPerformAction(); // Function Scavenger.S_PlayerCharacter.ServerOnKeeperPerformAction // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotfiyJumpSlide(bool bFlag); // Function Scavenger.S_PlayerCharacter.ServerNotfiyJumpSlide // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotfiyFallingSlide(bool bFlag); // Function Scavenger.S_PlayerCharacter.ServerNotfiyFallingSlide // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerMoveTrace(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode, struct FSpatialLatencyPayload myServerPayload); // Function Scavenger.S_PlayerCharacter.ServerMoveTrace // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCharMoveDebugRequest(int32_t ID); // Function Scavenger.S_PlayerCharacter.ServerCharMoveDebugRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerChangeActiveSpringArmSetting(enum class ES_CameraSettings activeSetting); // Function Scavenger.S_PlayerCharacter.ServerChangeActiveSpringArmSetting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void SelectAndModifyDodge(struct FVector InWorldDir, float LocalYawHeading, int32_t CustomDodgeIdx, struct FVector OutWorldDir); // Function Scavenger.S_PlayerCharacter.SelectAndModifyDodge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ResetRogueStencilFlashTimer(); // Function Scavenger.S_PlayerCharacter.ResetRogueStencilFlashTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveSpectator(struct AS_BasicSpectatorPlayerPawn* Spectator); // Function Scavenger.S_PlayerCharacter.RemoveSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveCachedCampfire(struct AActor* Actor); // Function Scavenger.S_PlayerCharacter.RemoveCachedCampfire // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterDownedPlayerWithAllOverlords(); // Function Scavenger.S_PlayerCharacter.RegisterDownedPlayerWithAllOverlords // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xffff8008e4a10000
	void QuickPingItem(); // Function Scavenger.S_PlayerCharacter.QuickPingItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayInteractionStopSound(enum class ES_InteractIcon interactionType); // Function Scavenger.S_PlayerCharacter.PlayInteractionStopSound // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void PlayInteractionStartSound(enum class ES_InteractIcon interactionType); // Function Scavenger.S_PlayerCharacter.PlayInteractionStartSound // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void PingItem(enum class ES_PingInfoType pingInfoType); // Function Scavenger.S_PlayerCharacter.PingItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PerformServerBotTakeover(struct AS_AIController* botControllerOverride); // Function Scavenger.S_PlayerCharacter.PerformServerBotTakeover // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PerformClientBotTakeover(); // Function Scavenger.S_PlayerCharacter.PerformClientBotTakeover // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PerformBotTakeover(struct AS_AIController* botControllerOverride); // Function Scavenger.S_PlayerCharacter.PerformBotTakeover // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnUserGameSettingsChangedCallback(struct FS_UserGameSettings OldSettings, struct FS_UserGameSettings NewSettings); // Function Scavenger.S_PlayerCharacter.OnUserGameSettingsChangedCallback // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnTerminal(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnTerminal // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnTeammateInfoAddedOrChanged(int32_t teammateIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_PlayerCharacter.OnTeammateInfoAddedOrChanged // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
	void OnRevived(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnRevived // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRepSelectionSet(enum class ES_SelectionSet lastSelectionSet); // Function Scavenger.S_PlayerCharacter.OnRepSelectionSet // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRepSelectedQuickItemSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_PlayerCharacter.OnRepSelectedQuickItemSlot // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRepHasSpectatorsAttached(); // Function Scavenger.S_PlayerCharacter.OnRepHasSpectatorsAttached // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRepCrouchRepPayload(); // Function Scavenger.S_PlayerCharacter.OnRepCrouchRepPayload // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRepActiveSpringArmSetting(); // Function Scavenger.S_PlayerCharacter.OnRepActiveSpringArmSetting // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnMantleUpdated(bool mantleActive); // Function Scavenger.S_PlayerCharacter.OnMantleUpdated // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnKilledInCocoon(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnKilledInCocoon // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnFreedFromCocoon(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnFreedFromCocoon // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnDowned(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnDowned // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnCocooned(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCharacter.OnCocooned // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnBlipOnMap_BP(struct FS_FlashpointSettings flashpointSettings, struct FS_KRADLEnemyInfo EnemyInfo); // Function Scavenger.S_PlayerCharacter.OnBlipOnMap_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnAbilityEnded(); // Function Scavenger.S_PlayerCharacter.OnAbilityEnded // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyWholeTeamIncapacitated_BP(); // Function Scavenger.S_PlayerCharacter.NotifyWholeTeamIncapacitated_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyUpdateDetectedActors(); // Function Scavenger.S_PlayerCharacter.NotifyUpdateDetectedActors // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedKeeperStateChanged(); // Function Scavenger.S_PlayerCharacter.NotifyReplicatedKeeperStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedJumpingSlide(bool bFlag); // Function Scavenger.S_PlayerCharacter.NotifyReplicatedJumpingSlide // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedInteractionState(); // Function Scavenger.S_PlayerCharacter.NotifyReplicatedInteractionState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFlashlightState(); // Function Scavenger.S_PlayerCharacter.NotifyReplicatedFlashlightState // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyReplicatedFallingSlide(bool bFlag); // Function Scavenger.S_PlayerCharacter.NotifyReplicatedFallingSlide // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyPlayerCharacterTerminal_BP(); // Function Scavenger.S_PlayerCharacter.NotifyPlayerCharacterTerminal_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerCharacterKilledInCocoon_BP(); // Function Scavenger.S_PlayerCharacter.NotifyPlayerCharacterKilledInCocoon_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerCharacterFreedFromCocoon_BP(); // Function Scavenger.S_PlayerCharacter.NotifyPlayerCharacterFreedFromCocoon_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLevelUp_BP(int32_t NewExperienceLevel); // Function Scavenger.S_PlayerCharacter.NotifyLevelUp_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastStopKeeperAbilityMontage(struct UAnimMontage* MontageToStop); // Function Scavenger.S_PlayerCharacter.MulticastStopKeeperAbilityMontage // (Net|NetReliableNative|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void MulticastHandleDirectionalDamage(enum class ES_DamageCauseActor CauseActor, struct FVector worldPos, enum class ES_StatChangeCauseType Type); // Function Scavenger.S_PlayerCharacter.MulticastHandleDirectionalDamage // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	bool IsUsingPlayerBotModel(); // Function Scavenger.S_PlayerCharacter.IsUsingPlayerBotModel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsKeeperInteracting(); // Function Scavenger.S_PlayerCharacter.IsKeeperInteracting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInteracting(); // Function Scavenger.S_PlayerCharacter.IsInteracting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEntireTeamIncapacitated(); // Function Scavenger.S_PlayerCharacter.IsEntireTeamIncapacitated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleItemUnequipTelemetry(enum class ES_EquipmentSlot ItemSlot, struct FS_ItemState Item); // Function Scavenger.S_PlayerCharacter.HandleItemUnequipTelemetry // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleItemEquipTelemetry(enum class ES_EquipmentSlot ItemSlot, struct FS_ItemState Item); // Function Scavenger.S_PlayerCharacter.HandleItemEquipTelemetry // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleIsTimeOfDayLockedChanged(bool IsLocked); // Function Scavenger.S_PlayerCharacter.HandleIsTimeOfDayLockedChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleDefaultTimeOfDayOffsetChanged(float NewDefaultTimeOfDayOffset); // Function Scavenger.S_PlayerCharacter.HandleDefaultTimeOfDayOffsetChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	bool GetWillTryToSlideOnLanding(); // Function Scavenger.S_PlayerCharacter.GetWillTryToSlideOnLanding // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetShowInRadarSweep(); // Function Scavenger.S_PlayerCharacter.GetShowInRadarSweep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerControllerBase* GetScavengerPlayerController(bool outWasFound); // Function Scavenger.S_PlayerCharacter.GetScavengerPlayerController // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetRadarLocation(); // Function Scavenger.S_PlayerCharacter.GetRadarLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	int32_t GetPlayerKills(); // Function Scavenger.S_PlayerCharacter.GetPlayerKills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerDroppedDatapoints(); // Function Scavenger.S_PlayerCharacter.GetPlayerDroppedDatapoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPerfectSlideTimeOut(); // Function Scavenger.S_PlayerCharacter.GetPerfectSlideTimeOut // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_Keeper* GetKeeper_BP(); // Function Scavenger.S_PlayerCharacter.GetKeeper_BP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetJumpSlideTimeOut(); // Function Scavenger.S_PlayerCharacter.GetJumpSlideTimeOut // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AS_InteractableActor* GetItemKeeperInteractingWith(); // Function Scavenger.S_PlayerCharacter.GetItemKeeperInteractingWith // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetIsPerfectSlide(); // Function Scavenger.S_PlayerCharacter.GetIsPerfectSlide // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetIsJumpSlide(); // Function Scavenger.S_PlayerCharacter.GetIsJumpSlide // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetIsFallingSlide(); // Function Scavenger.S_PlayerCharacter.GetIsFallingSlide // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_InteractableItem GetInteractableItem(); // Function Scavenger.S_PlayerCharacter.GetInteractableItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetFallingSlideTimeOut(); // Function Scavenger.S_PlayerCharacter.GetFallingSlideTimeOut // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_DetectedActorLocationData> GetDetectedActors(); // Function Scavenger.S_PlayerCharacter.GetDetectedActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_PlayerClassData* GetClassData(); // Function Scavenger.S_PlayerCharacter.GetClassData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct APlayerState* GetCachedPlayerState(); // Function Scavenger.S_PlayerCharacter.GetCachedPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetBoardingStatus(); // Function Scavenger.S_PlayerCharacter.GetBoardingStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetAllNearbyAI(float Radius, struct TArray<struct AS_AICharacter*> OutActors); // Function Scavenger.S_PlayerCharacter.GetAllNearbyAI // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DropPlayerBotFiringPointAtLocation(struct FVector dropLocation); // Function Scavenger.S_PlayerCharacter.DropPlayerBotFiringPointAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DebugGiveItemToPlayer(struct AActor* receivingPlayerCharacter, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerCharacter.DebugGiveItemToPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void CrossServerNotifyPostDealDamage(struct AActor* DamagedActor, float DamageAmount, struct FS_PointDamageEvent DamageEvent, struct AActor* CauseActor, enum class ES_TriggerType triggerType); // Function Scavenger.S_PlayerCharacter.CrossServerNotifyPostDealDamage // (Net|NetReliableNative|Event|Protected) // @ game+0xffff8008e4a10000
	void ClientUnpossessed(); // Function Scavenger.S_PlayerCharacter.ClientUnpossessed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xffff8008e4a10000
	void ClientSetDrunkGapModelBehavior(int32_t newBehaviorBitmask); // Function Scavenger.S_PlayerCharacter.ClientSetDrunkGapModelBehavior // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientPlayerBotReceiveNearbyInteractableLocation(struct TArray<struct FVector> Locations, struct AActor* InteractableType); // Function Scavenger.S_PlayerCharacter.ClientPlayerBotReceiveNearbyInteractableLocation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyLevelUp(int32_t NewExperienceLevel); // Function Scavenger.S_PlayerCharacter.ClientNotifyLevelUp // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientHandleDirectionalDamage(enum class ES_DamageCauseActor CauseActor, struct FVector worldPos, enum class ES_StatChangeCauseType Type); // Function Scavenger.S_PlayerCharacter.ClientHandleDirectionalDamage // (Final|Net|Native|Event|Private|HasDefaults|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientCharMoveDebugNotify(struct FCharMoveDebugInfo moveDebugInfo); // Function Scavenger.S_PlayerCharacter.ClientCharMoveDebugNotify // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClearAllPings(); // Function Scavenger.S_PlayerCharacter.ClearAllPings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CancelRevive(); // Function Scavenger.S_PlayerCharacter.CancelRevive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BlipOnMap(enum class ES_AttackEvent attackEvent, bool bOverrideShouldBlipOnMap); // Function Scavenger.S_PlayerCharacter.BlipOnMap // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AttachKeeperToSpringArm(); // Function Scavenger.S_PlayerCharacter.AttachKeeperToSpringArm // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyPlayerKillChange(int32_t change); // Function Scavenger.S_PlayerCharacter.ApplyPlayerKillChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddSpectator(struct AS_BasicSpectatorPlayerPawn* Spectator); // Function Scavenger.S_PlayerCharacter.AddSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerDroppedDatapoints(int32_t droppedDatapoints); // Function Scavenger.S_PlayerCharacter.AddPlayerDroppedDatapoints // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddCachedCampfire(struct AActor* Actor); // Function Scavenger.S_PlayerCharacter.AddCachedCampfire // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerClassAvatarData
// Size: 0xf8 (Inherited: 0x30)
struct US_PlayerClassAvatarData : UDataAsset {
	struct TMap<struct FName, struct TSoftObjectPtr<struct UTexture2D>> TeammateInfoAvatars; // 0x30(0x50)
	struct TSoftObjectPtr<struct UTexture2D> ProgressionBannerAvatar; // 0x80(0x28)
	struct TSoftObjectPtr<struct UTexture2D> ExplorerSelectOptionAvatar; // 0xa8(0x28)
	struct TSoftObjectPtr<struct UTexture2D> SquadTabAvatar; // 0xd0(0x28)

	struct TSoftObjectPtr<struct UTexture2D> GetTeammateInfoAvatarFromOnlineItemMetadata(struct FS_OnlineItemMetadata MetaData); // Function Scavenger.S_PlayerClassAvatarData.GetTeammateInfoAvatarFromOnlineItemMetadata // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerClassData
// Size: 0x1b8 (Inherited: 0x30)
struct US_PlayerClassData : UDataAsset {
	struct FS_PlayerClassMetadataTableRowReference TableRowReference; // 0x30(0x20)
	struct FText ClassName; // 0x50(0x18)
	struct FText ClassNameCapitalized; // 0x68(0x18)
	struct FText CharacterName; // 0x80(0x18)
	struct FText CharacterNameCapitalized; // 0x98(0x18)
	struct FText Description; // 0xb0(0x18)
	struct UTexture2D* Icon; // 0xc8(0x08)
	struct UTexture2D* Card; // 0xd0(0x08)
	struct TSoftObjectPtr<struct USkeletalMesh> SkeletalMesh; // 0xd8(0x28)
	struct TSoftObjectPtr<struct USkeletalMesh> DefaultBackpackMesh; // 0x100(0x28)
	struct FName DefaultMeshOnlineItemId; // 0x128(0x08)
	struct UAnimationAsset* IdlePoseAnimationAsset; // 0x130(0x08)
	struct TMap<enum class ES_EquipmentSlot, struct US_ItemData*> DefaultEquipmentData; // 0x138(0x50)
	struct FName DefaultClassTalentId; // 0x188(0x08)
	struct UTexture2D* ActiveTalentPanelBackgroundImage; // 0x190(0x08)
	struct UTexture2D* PassiveTalentPanelBackgroundImage; // 0x198(0x08)
	float ThreatLevel; // 0x1a0(0x04)
	enum class ES_PlayerClassGender Gender; // 0x1a4(0x01)
	enum class ES_CharacterSize Size; // 0x1a5(0x01)
	char pad_1A6[0x2]; // 0x1a6(0x02)
	struct FS_DialogueVoiceValue DialogueSpeakerVoice; // 0x1a8(0x08)
	struct APawn* CharacterClass; // 0x1b0(0x08)

	bool GetMetadata_BP(struct FS_PlayerClassMetadata OutMetadata); // Function Scavenger.S_PlayerClassData.GetMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerCocoon
// Size: 0x290 (Inherited: 0x288)
struct AS_PlayerCocoon : AActor {
	struct AS_DamageableActor* CocoonClass; // 0x288(0x08)

	struct AS_DamageableActor* SpawnDamageableCocoon(struct FTransform CocoonTransform); // Function Scavenger.S_PlayerCocoon.SpawnDamageableCocoon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPlayerHasDiedInThisCocoon_BP(); // Function Scavenger.S_PlayerCocoon.NotifyPlayerHasDiedInThisCocoon_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerFreedFromCocoon_BP(); // Function Scavenger.S_PlayerCocoon.NotifyPlayerFreedFromCocoon_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCocoonDied_BP(); // Function Scavenger.S_PlayerCocoon.NotifyCocoonDied_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleCocoonDied(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerCocoon.HandleCocoonDied // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerControllerBase
// Size: 0xca8 (Inherited: 0x5f0)
struct AS_PlayerControllerBase : APlayerController {
	struct FMulticastInlineDelegate OnCharacterLoadoutChanged; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnCosmeticLoadoutChanged; // 0x600(0x10)
	struct FMulticastInlineDelegate OnPreClientTravel; // 0x610(0x10)
	struct FMulticastInlineDelegate OnUIActionPressed; // 0x620(0x10)
	struct FMulticastInlineDelegate OnUIActionReleased; // 0x630(0x10)
	struct FMulticastInlineDelegate OnUIAxisInputEvent; // 0x640(0x10)
	struct FMulticastInlineDelegate OnMenuActionPressed; // 0x650(0x10)
	struct FMulticastInlineDelegate OnMenuActionReleased; // 0x660(0x10)
	struct FMulticastInlineDelegate OnInputTypeChanged; // 0x670(0x10)
	struct FMulticastInlineDelegate OnInputDeviceChanged; // 0x680(0x10)
	struct FMulticastInlineDelegate OnPlayerClassChanged; // 0x690(0x10)
	struct FMulticastInlineDelegate OnPlayerLoadoutChanged; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelUp; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnCharacterXPGain; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnSummonTextChatMenu; // 0x6d0(0x10)
	struct UDataAsset* TierIdentificationAsset; // 0x6e0(0x08)
	struct FMulticastInlineDelegate OnInterfaceColorModeChanged; // 0x6e8(0x10)
	struct TArray<struct FS_TeammateState> m_teammateStates; // 0x6f8(0x10)
	struct UDataTable* PlayerClassMetadataTable; // 0x708(0x08)
	struct US_PlayerClassData* m_classData; // 0x710(0x08)
	int32_t CustomPlayerStartIndex; // 0x718(0x04)
	int32_t CustomPlayerStartSubIndex; // 0x71c(0x04)
	char pad_720[0x8]; // 0x720(0x08)
	struct FS_CharacterLoadout m_characterLoadout; // 0x728(0x50)
	struct FS_CosmeticLoadoutForReplication m_characterCosmeticLoadoutForReplication; // 0x778(0x10)
	struct FS_CosmeticLoadout m_characterCosmeticLoadout; // 0x788(0x50)
	struct FS_CosmeticLoadoutForReplication m_accountCosmeticLoadoutForReplication; // 0x7d8(0x10)
	struct FS_CosmeticLoadout m_accountCosmeticLoadout; // 0x7e8(0x50)
	struct FS_JoystickProcessingParams m_movementStickProcessing; // 0x838(0x58)
	struct FS_JoystickProcessingParams m_aimStickProcessing; // 0x890(0x58)
	struct FS_TurnAccelerationParams m_turnAcceleration; // 0x8e8(0x18)
	struct US_GamepadLayout* m_selectedGameControlsLayout; // 0x900(0x08)
	struct UInputComponent* m_inputComponentForUI; // 0x908(0x08)
	struct UInputComponent* m_inputComponentForGame; // 0x910(0x08)
	struct UInputComponent* m_inputComponentForVehicle; // 0x918(0x08)
	struct UInputComponent* m_inputComponentForMenu; // 0x920(0x08)
	struct UInputComponent* m_inputComponentForResearch; // 0x928(0x08)
	struct UInputComponent* m_inputComponentForLoadout; // 0x930(0x08)
	struct UInputComponent* m_inputComponentForSeasons; // 0x938(0x08)
	struct UInputComponent* m_overlapResolvingInputComponent; // 0x940(0x08)
	struct UInputComponent* m_inputComponentForDebugMenu; // 0x948(0x08)
	struct UInputComponent* m_inputComponentForDebugBinds; // 0x950(0x08)
	enum class ES_PlayerInputContext InitialInputContext; // 0x958(0x01)
	char pad_959[0x7]; // 0x959(0x07)
	struct AS_CheatMenuHUD* m_cheatMenuHUD; // 0x960(0x08)
	struct AS_CosmeticsCheatMenuHUD* m_cosmeticsCheatMenuHUD; // 0x968(0x08)
	char pad_970[0x8]; // 0x970(0x08)
	struct TArray<struct US_OverlappingInputResolver*> m_overlappingInputResolvers; // 0x978(0x10)
	char pad_988[0x48]; // 0x988(0x48)
	struct FS_CustomizationStagingObject m_cosmeticStagingObject; // 0x9d0(0x2d0)
	char pad_CA0[0x8]; // 0xca0(0x08)

	void StoreCharacterLoadoutInOnlineData(); // Function Scavenger.S_PlayerControllerBase.StoreCharacterLoadoutInOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StoreCharacterCosmeticLoadoutInOnlineData(); // Function Scavenger.S_PlayerControllerBase.StoreCharacterCosmeticLoadoutInOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StoreAccountCosmeticLoadoutInOnlineData(); // Function Scavenger.S_PlayerControllerBase.StoreAccountCosmeticLoadoutInOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInterfaceColorMode(enum class ES_InterfaceColorMode interfaceColorMode); // Function Scavenger.S_PlayerControllerBase.SetInterfaceColorMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInputContext(enum class ES_PlayerInputContext inputContext); // Function Scavenger.S_PlayerControllerBase.SetInputContext // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCustomizationStagingObject(struct FS_CustomizationStagingObject newStagingObject); // Function Scavenger.S_PlayerControllerBase.SetCustomizationStagingObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterLoadoutFromOnlineData(); // Function Scavenger.S_PlayerControllerBase.SetCharacterLoadoutFromOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCharacterCosmeticLoadoutFromOnlineData(); // Function Scavenger.S_PlayerControllerBase.SetCharacterCosmeticLoadoutFromOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAimStickInputBlock(); // Function Scavenger.S_PlayerControllerBase.SetAimStickInputBlock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAccountCosmeticLoadoutFromOnlineData(); // Function Scavenger.S_PlayerControllerBase.SetAccountCosmeticLoadoutFromOnlineData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerRequestChangeClass(struct US_PlayerClassData* ClassData); // Function Scavenger.S_PlayerControllerBase.ServerRequestChangeClass // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCheatSetSubMaterialsFromTinkerPackId(enum class ES_CosmeticLoadoutSlotType cosmeticSlotType, struct FName TinkerPackId); // Function Scavenger.S_PlayerControllerBase.ServerCheatSetSubMaterialsFromTinkerPackId // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCheatSetSubMaterialParameters(enum class ES_CosmeticLoadoutSlotType cosmeticSlotType, int32_t SubmaterialIndex, struct FName SubMaterialId, struct FName colorId); // Function Scavenger.S_PlayerControllerBase.ServerCheatSetSubMaterialParameters // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCheatSetRandomCosmeticItemSubMaterials(enum class ES_CosmeticLoadoutSlotType cosmeticSlotType, bool ignoreTinkerPackRestrictions); // Function Scavenger.S_PlayerControllerBase.ServerCheatSetRandomCosmeticItemSubMaterials // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCheatSetCosmeticSlot(enum class ES_CosmeticLoadoutSlotType cosmeticSlotType, struct FString onlineItemInstanceId, struct FName OnlineItemId); // Function Scavenger.S_PlayerControllerBase.ServerCheatSetCosmeticSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerCheatResetCosmeticItemSubMaterials(enum class ES_CosmeticLoadoutSlotType cosmeticSlotType); // Function Scavenger.S_PlayerControllerBase.ServerCheatResetCosmeticItemSubMaterials // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void PreClientTravel_BP(struct FString PendingURL, enum class ETravelType TravelType, bool bIsSeamlessTravel); // Function Scavenger.S_PlayerControllerBase.PreClientTravel_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OptimizeAndStoreAllCharacterLoadouts(); // Function Scavenger.S_PlayerControllerBase.OptimizeAndStoreAllCharacterLoadouts // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnCharacterXPGain_BP(int32_t CharacterXP, int32_t OldCharacterXP); // Function Scavenger.S_PlayerControllerBase.OnCharacterXPGain_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnCharacterLevelUp_BP(int32_t CharacterLevel); // Function Scavenger.S_PlayerControllerBase.OnCharacterLevelUp_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedClassData(); // Function Scavenger.S_PlayerControllerBase.NotifyReplicatedClassData // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCharacterCosmeticLoadout(); // Function Scavenger.S_PlayerControllerBase.NotifyReplicatedCharacterCosmeticLoadout // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedAccountCosmeticLoadout(); // Function Scavenger.S_PlayerControllerBase.NotifyReplicatedAccountCosmeticLoadout // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyCosmeticLoadoutChanged_BP(); // Function Scavenger.S_PlayerControllerBase.NotifyCosmeticLoadoutChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCharacterLoadoutChanged_BP(); // Function Scavenger.S_PlayerControllerBase.NotifyCharacterLoadoutChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleUserInputSettingsChanged(struct FS_UserInputSettings OldSettings, struct FS_UserInputSettings NewSettings); // Function Scavenger.S_PlayerControllerBase.HandleUserInputSettingsChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleUIPadAxisY(float Value); // Function Scavenger.S_PlayerControllerBase.HandleUIPadAxisY // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleUIPadAxisX(float Value); // Function Scavenger.S_PlayerControllerBase.HandleUIPadAxisX // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleUIMouseAxisDeltaY(float Value); // Function Scavenger.S_PlayerControllerBase.HandleUIMouseAxisDeltaY // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleUIMouseAxisDeltaX(float Value); // Function Scavenger.S_PlayerControllerBase.HandleUIMouseAxisDeltaX // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleCosmeticLoadoutChanged(); // Function Scavenger.S_PlayerControllerBase.HandleCosmeticLoadoutChanged // (Native|Public) // @ game+0xffff8008e4a10000
	bool GetWasLastInputFromGamepad(); // Function Scavenger.S_PlayerControllerBase.GetWasLastInputFromGamepad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_GameViewportClient* GetViewportClient(); // Function Scavenger.S_PlayerControllerBase.GetViewportClient // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGHUD* GetUMGHUD(); // Function Scavenger.S_PlayerControllerBase.GetUMGHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_TeammateState> GetTeammateStates(); // Function Scavenger.S_PlayerControllerBase.GetTeammateStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetTeammateStateByPlayerState(struct APlayerState* inPlayerState, struct FS_TeammateState outTeammateState); // Function Scavenger.S_PlayerControllerBase.GetTeammateStateByPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_GameInstance* GetScavengersGameInstance(); // Function Scavenger.S_PlayerControllerBase.GetScavengersGameInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* GetScavengerPlayerCharacter(bool outWasFound); // Function Scavenger.S_PlayerControllerBase.GetScavengerPlayerCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FKey> GetMultiButtonKeysFromAction(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_PlayerControllerBase.GetMultiButtonKeysFromAction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_InterfaceColorMode GetInterfaceColorMode(); // Function Scavenger.S_PlayerControllerBase.GetInterfaceColorMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FKey GetInputKeyFromAction(enum class ES_GameInputActionType ActionType, enum class ES_InputActionFlag InputActionFlag, enum class ES_InputPriorityFlag inputPriorityFlag, enum class ES_InputDeviceFlag inputDeviceFlag); // Function Scavenger.S_PlayerControllerBase.GetInputKeyFromAction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FKey GetGamepadKeyFromAction(enum class ES_GameInputActionType ActionType, enum class ES_InputActionFlag InputActionFlag); // Function Scavenger.S_PlayerControllerBase.GetGamepadKeyFromAction // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_CustomizationStagingObject GetCustomizationStagingObject(); // Function Scavenger.S_PlayerControllerBase.GetCustomizationStagingObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_PlayerClassData* GetClassData(); // Function Scavenger.S_PlayerControllerBase.GetClassData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetCharacterPointsForClass(enum class ES_CharacterPointType characterPointType, struct US_PlayerClassData* ClassData); // Function Scavenger.S_PlayerControllerBase.GetCharacterPointsForClass // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_CharacterLoadout GetCharacterLoadout(); // Function Scavenger.S_PlayerControllerBase.GetCharacterLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetCharacterCosmeticLoadout(); // Function Scavenger.S_PlayerControllerBase.GetCharacterCosmeticLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_HUD* GetBaseHUD(); // Function Scavenger.S_PlayerControllerBase.GetBaseHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetAccountId(bool outIsValid); // Function Scavenger.S_PlayerControllerBase.GetAccountId // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CosmeticLoadout GetAccountCosmeticLoadout(); // Function Scavenger.S_PlayerControllerBase.GetAccountCosmeticLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CustomizationStagingObject GenerateCustomizationStagingObject(); // Function Scavenger.S_PlayerControllerBase.GenerateCustomizationStagingObject // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientRefreshInventory(); // Function Scavenger.S_PlayerControllerBase.ClientRefreshInventory // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientOnCharacterXPGain(int32_t Xp, int32_t oldxp); // Function Scavenger.S_PlayerControllerBase.ClientOnCharacterXPGain // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientOnCharacterLevelUp(int32_t CharacterLevel); // Function Scavenger.S_PlayerControllerBase.ClientOnCharacterLevelUp // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ChangeClass(struct US_PlayerClassData* ClassData); // Function Scavenger.S_PlayerControllerBase.ChangeClass // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerController
// Size: 0x1f68 (Inherited: 0xca8)
struct AS_PlayerController : AS_PlayerControllerBase {
	char pad_CA8[0x50]; // 0xca8(0x50)
	struct US_ActionHandler* m_actionHandler; // 0xcf8(0x08)
	struct TMap<struct AActor*, float> m_predictedAliveDamageAmounts; // 0xd00(0x50)
	struct TMap<struct AActor*, float> m_predictedDownedDamageAmounts; // 0xd50(0x50)
	struct TSet<struct AActor*> m_predictedDownedActors; // 0xda0(0x50)
	struct TSet<struct AActor*> m_predictedKilledActors; // 0xdf0(0x50)
	char pad_E40[0x10]; // 0xe40(0x10)
	struct FMulticastInlineDelegate OnDamagedBy; // 0xe50(0x10)
	struct FMulticastInlineDelegate OnDamagedByPawn; // 0xe60(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0xe70(0x10)
	struct FMulticastInlineDelegate OnDownedBy; // 0xe80(0x10)
	struct FMulticastInlineDelegate OnDownedByPawn; // 0xe90(0x10)
	struct FMulticastInlineDelegate OnDowned; // 0xea0(0x10)
	struct FMulticastInlineDelegate OnTerminalBy; // 0xeb0(0x10)
	struct FMulticastInlineDelegate OnTerminalByPawn; // 0xec0(0x10)
	struct FMulticastInlineDelegate OnTerminal; // 0xed0(0x10)
	struct FMulticastInlineDelegate OnKilledBy; // 0xee0(0x10)
	struct FMulticastInlineDelegate OnKilledByPawn; // 0xef0(0x10)
	struct FMulticastInlineDelegate OnKilled; // 0xf00(0x10)
	struct FMulticastInlineDelegate OnKilledPawn; // 0xf10(0x10)
	struct FMulticastInlineDelegate OnResurrectedBy; // 0xf20(0x10)
	struct FMulticastInlineDelegate OnResurrectedByPawn; // 0xf30(0x10)
	struct FMulticastInlineDelegate OnRevivedBy; // 0xf40(0x10)
	struct FMulticastInlineDelegate OnRevivedByPawn; // 0xf50(0x10)
	struct FMulticastInlineDelegate OnResurrected; // 0xf60(0x10)
	struct FMulticastInlineDelegate OnRevived; // 0xf70(0x10)
	struct FMulticastInlineDelegate OnStatsStateChangedBy; // 0xf80(0x10)
	struct FMulticastInlineDelegate OnStatsStateChangedByPawn; // 0xf90(0x10)
	struct FMulticastInlineDelegate OnCausedStatsStateChange; // 0xfa0(0x10)
	struct FMulticastInlineDelegate OnItemAcquired; // 0xfb0(0x10)
	struct FMulticastInlineDelegate OnItemDestroyed; // 0xfc0(0x10)
	struct FMulticastInlineDelegate OnItemDropped; // 0xfd0(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xfe0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xff0(0x10)
	struct FMulticastInlineDelegate OnItemUsed; // 0x1000(0x10)
	struct FMulticastInlineDelegate OnInteracted; // 0x1010(0x10)
	struct FMulticastInlineDelegate OnCocooned; // 0x1020(0x10)
	struct FMulticastInlineDelegate OnFreedFromCocoon; // 0x1030(0x10)
	struct FMulticastInlineDelegate OnKilledInCocoon; // 0x1040(0x10)
	struct FMulticastInlineDelegate OnExtracting; // 0x1050(0x10)
	struct FMulticastInlineDelegate OnExtracted; // 0x1060(0x10)
	struct FMulticastInlineDelegate OnSetPlayerState; // 0x1070(0x10)
	struct FMulticastInlineDelegate OnDropshipEntered; // 0x1080(0x10)
	struct FMulticastInlineDelegate OnMapDataAdd; // 0x1090(0x10)
	struct FMulticastInlineDelegate OnMapDataRemove; // 0x10a0(0x10)
	struct FMulticastInlineDelegate OnMapDataChange; // 0x10b0(0x10)
	struct FMulticastInlineDelegate OnPlayerCharacterSet; // 0x10c0(0x10)
	struct FMulticastInlineDelegate OnMapDataTransformChange; // 0x10d0(0x10)
	struct FMulticastInlineDelegate OnMapDataLocationChange; // 0x10e0(0x10)
	struct FMulticastInlineDelegate OnMapDataDirectionChange; // 0x10f0(0x10)
	struct FMulticastInlineDelegate OnPartyLeaveMatchRequested; // 0x1100(0x10)
	struct FMulticastInlineDelegate OnPingItem; // 0x1110(0x10)
	struct FMulticastInlineDelegate OnPingCleared; // 0x1120(0x10)
	struct TMap<struct UTexture2D*, int32_t> HardReferencesHackToWorkAroundUILoadSyncronously; // 0x1130(0x50)
	struct US_PingConfig* PingConfig; // 0x1180(0x08)
	struct FS_FlashpointSettings DefaultFlashpointSettings[0xb]; // 0x1188(0x108)
	struct FMulticastInlineDelegate OnReceivedReportCard; // 0x1290(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0x12a0(0x10)
	struct FMulticastInlineDelegate OnPreTakeDamage; // 0x12b0(0x10)
	struct FMulticastInlineDelegate OnPostDealDamage; // 0x12c0(0x10)
	struct FMulticastInlineDelegate OnPostTakeDamage; // 0x12d0(0x10)
	struct FMulticastInlineDelegate OnPredictiveKill; // 0x12e0(0x10)
	struct FMulticastInlineDelegate OnRollbackPredictiveKill; // 0x12f0(0x10)
	struct FMulticastInlineDelegate OnPredictiveDowned; // 0x1300(0x10)
	struct FMulticastInlineDelegate OnRollbackPredictiveDowned; // 0x1310(0x10)
	struct FMulticastInlineDelegate OnRecipeListChanged; // 0x1320(0x10)
	struct TArray<struct US_RadarBlipComponent*> m_radarBlipComponents; // 0x1330(0x10)
	struct FMulticastInlineDelegate OnAcquiredTalentsChanged; // 0x1340(0x10)
	struct FMulticastInlineDelegate OnForceUpdateCameraSettings; // 0x1350(0x10)
	struct FMulticastInlineDelegate OnInteractionProgressChanged; // 0x1360(0x10)
	struct FMulticastInlineDelegate OnInteractionStateChanged; // 0x1370(0x10)
	struct FMulticastInlineDelegate OnRespawnTimestampChanged; // 0x1380(0x10)
	char pad_1390[0x28]; // 0x1390(0x28)
	struct TMap<struct FName, struct US_PriorityAudioManagerComponent*> PriorityAudioManagerChannels; // 0x13b8(0x50)
	struct FMulticastInlineDelegate OnLevelUp; // 0x1408(0x10)
	struct FMulticastInlineDelegate OnObjectiveAdded; // 0x1418(0x10)
	struct FMulticastInlineDelegate OnObjectiveDeleted; // 0x1428(0x10)
	struct FMulticastInlineDelegate OnObjectiveUpdated; // 0x1438(0x10)
	struct FMulticastInlineDelegate OnObjectiveGoalAdded; // 0x1448(0x10)
	struct FMulticastInlineDelegate OnObjectiveGoalDeleted; // 0x1458(0x10)
	struct FMulticastInlineDelegate OnObjectiveGoalUpdated; // 0x1468(0x10)
	struct FMulticastInlineDelegate OnObjectiveSubGoalAdded; // 0x1478(0x10)
	struct FMulticastInlineDelegate OnObjectiveSubGoalDeleted; // 0x1488(0x10)
	struct FMulticastInlineDelegate OnObjectiveSubGoalUpdated; // 0x1498(0x10)
	struct FMulticastInlineDelegate OnInteractStart; // 0x14a8(0x10)
	struct FMulticastInlineDelegate OnInteractStop; // 0x14b8(0x10)
	struct FMulticastInlineDelegate OnReviveStart; // 0x14c8(0x10)
	struct FMulticastInlineDelegate OnReviveStop; // 0x14d8(0x10)
	struct FMulticastInlineDelegate OnCurrentXPChanged; // 0x14e8(0x10)
	struct FMulticastInlineDelegate OnCurrentXPChangedDelta; // 0x14f8(0x10)
	struct FMulticastInlineDelegate OnToggleHUD; // 0x1508(0x10)
	struct FMulticastInlineDelegate OnRedDotStateChanged; // 0x1518(0x10)
	struct AS_WeaponBase* m_testTinkeringWeaponActor; // 0x1528(0x08)
	char pad_1530[0x30]; // 0x1530(0x30)
	struct AS_CosmeticTinkeringTestActor* m_cosmeticTestTinkeringActor; // 0x1560(0x08)
	char pad_1568[0x60]; // 0x1568(0x60)
	struct FMulticastInlineDelegate OnEnteredLocationVolume; // 0x15c8(0x10)
	struct FMulticastInlineDelegate OnExitedLocationVolume; // 0x15d8(0x10)
	struct TMap<int32_t, struct FS_MapDisplayData> AllMapData; // 0x15e8(0x50)
	struct US_MapConfig* MapConfig; // 0x1638(0x08)
	char pad_1640[0x14]; // 0x1640(0x14)
	struct FS_RotationClamp DefaultControllerRotationToPawnClampAngles; // 0x1654(0x28)
	char pad_167C[0x4]; // 0x167c(0x04)
	struct FMulticastInlineDelegate OnOnTogglePerfStats; // 0x1680(0x10)
	float ReticuleTraceLength; // 0x1690(0x04)
	struct FS_RotationClamp ControllerRotationToPawnClampAngles; // 0x1694(0x28)
	char pad_16BC[0x4]; // 0x16bc(0x04)
	struct TArray<struct US_RecipeData*> InitialRecipes; // 0x16c0(0x10)
	float InteractableItemZOffset; // 0x16d0(0x04)
	float InteractableItemScale; // 0x16d4(0x04)
	float PositionStillnessTolerance; // 0x16d8(0x04)
	float RotationStillnessTolerance; // 0x16dc(0x04)
	struct AS_FlyCameraPerformanceTestPawn* FlyCameraPerfTestPawn; // 0x16e0(0x08)
	char pad_16E8[0x10]; // 0x16e8(0x10)
	struct US_DebugScreen* m_currentInGameDebugScreen; // 0x16f8(0x08)
	struct AS_PlayerState* m_playerState; // 0x1700(0x08)
	int32_t m_currentExperienceLevel; // 0x1708(0x04)
	int32_t m_currentXP; // 0x170c(0x04)
	int32_t m_XPEarnedThisLevel; // 0x1710(0x04)
	int32_t m_totalXPThisLevel; // 0x1714(0x04)
	int32_t m_currentSessionRewards; // 0x1718(0x04)
	char pad_171C[0x38]; // 0x171c(0x38)
	int32_t m_ignoreNewInputActionsCount; // 0x1754(0x04)
	int32_t m_ignoreNewInputActionsPostGameCount; // 0x1758(0x04)
	char pad_175C[0x2c]; // 0x175c(0x2c)
	struct US_ControllerComponent* ControllerComponent; // 0x1788(0x08)
	struct US_HitFeedbackAudioComponent* HitFeedbackComponent; // 0x1790(0x08)
	struct FS_InteractionFeedbackState m_interactionFeedbackState; // 0x1798(0x30)
	char pad_17C8[0x10]; // 0x17c8(0x10)
	struct TMap<int32_t, int32_t> StormIDToSlotId; // 0x17d8(0x50)
	struct TMap<int32_t, int32_t> TeammateInfoIndexToIconID; // 0x1828(0x50)
	struct TArray<struct FString> m_playerRecipePaths; // 0x1878(0x10)
	struct TArray<struct US_RecipeData*> m_loadedPlayerRecipes; // 0x1888(0x10)
	struct TArray<struct TSoftObjectPtr<struct US_RecipeData>> m_loadingPlayerRecipes; // 0x1898(0x10)
	char pad_18A8[0x20]; // 0x18a8(0x20)
	struct US_RecipeLoader* m_recipeLoader; // 0x18c8(0x08)
	struct AS_PlayerHome* m_playerHome; // 0x18d0(0x08)
	float m_playerHomeBoundaryDistance; // 0x18d8(0x04)
	char pad_18DC[0x4]; // 0x18dc(0x04)
	struct AActor* m_actorUnderReticule; // 0x18e0(0x08)
	float m_actorUnderReticuleStrength; // 0x18e8(0x04)
	char pad_18EC[0x4]; // 0x18ec(0x04)
	struct TArray<struct FS_ActorUnderReticle> m_actorsUnderReticule; // 0x18f0(0x10)
	struct US_AimAssistComponent* m_aimAssistComponent; // 0x1900(0x08)
	struct TArray<struct FName> m_activeTalentIds; // 0x1908(0x10)
	char pad_1918[0xd8]; // 0x1918(0xd8)
	struct TArray<struct FS_PlayerObjectiveBase> m_playerObjectiveBases; // 0x19f0(0x10)
	char pad_1A00[0x10]; // 0x1a00(0x10)
	struct TArray<struct FS_PlayerObjectiveDelta> m_playerObjectiveDeltas; // 0x1a10(0x10)
	char pad_1A20[0x10]; // 0x1a20(0x10)
	struct TArray<struct FS_PlayerObjectiveBase> m_playerObjectiveGoalBases; // 0x1a30(0x10)
	char pad_1A40[0x10]; // 0x1a40(0x10)
	struct TArray<struct FS_PlayerObjectiveDelta> m_playerObjectiveGoalDeltas; // 0x1a50(0x10)
	char pad_1A60[0x10]; // 0x1a60(0x10)
	struct TArray<struct FS_PlayerObjectiveBase> m_playerObjectiveSubGoalBases; // 0x1a70(0x10)
	char pad_1A80[0x10]; // 0x1a80(0x10)
	struct TArray<struct FS_PlayerObjectiveDelta> m_playerObjectiveSubGoalDeltas; // 0x1a90(0x10)
	char pad_1AA0[0x10]; // 0x1aa0(0x10)
	struct TArray<struct FS_PlayerObjectiveMarkerBase> m_playerObjectiveMarkerBases; // 0x1ab0(0x10)
	char pad_1AC0[0x10]; // 0x1ac0(0x10)
	struct TArray<struct FS_InteractableItem> m_interactableItems; // 0x1ad0(0x10)
	char pad_1AE0[0x18]; // 0x1ae0(0x18)
	struct TArray<struct UPrimitiveComponent*> m_lastOutlinedComponents; // 0x1af8(0x10)
	char pad_1B08[0x8]; // 0x1b08(0x08)
	SoftClassProperty DebugVehicleSpawnClass; // 0x1b10(0x28)
	float m_respawnTimestamp; // 0x1b38(0x04)
	char pad_1B3C[0x5c]; // 0x1b3c(0x5c)
	struct FS_ReviveState m_reviveState; // 0x1b98(0x14)
	char pad_1BAC[0x54]; // 0x1bac(0x54)
	struct TArray<struct FS_FlinchInterpolator> Flinches; // 0x1c00(0x10)
	struct US_FlinchSettings* FlinchSettings; // 0x1c10(0x08)
	bool bInCinematic; // 0x1c18(0x01)
	char pad_1C19[0x3]; // 0x1c19(0x03)
	int32_t PartyLeaveMatchCountdown; // 0x1c1c(0x04)
	struct FS_CinematicCameraSettings CinematicCameraSettings; // 0x1c20(0x08)
	struct US_TargetInfoSettings* TargetInfoSettings; // 0x1c28(0x08)
	char pad_1C30[0x18]; // 0x1c30(0x18)
	struct AS_CharacterBase* m_aimAssistMovementStickinessTarget; // 0x1c48(0x08)
	char pad_1C50[0x28]; // 0x1c50(0x28)
	struct FS_TargetInfoManager m_targetInfoManager; // 0x1c78(0x28)
	struct AS_AimAssistDebugHUD* m_aimAssistHUD; // 0x1ca0(0x08)
	char pad_1CA8[0x20]; // 0x1ca8(0x20)
	struct US_LandscapeDeformer* m_landscapeDeformer; // 0x1cc8(0x08)
	struct US_InteractableIconComponent* DefaultInteractableIconComponentClass; // 0x1cd0(0x08)
	struct US_PlayerRadarComponent* m_playerRadarComponent; // 0x1cd8(0x08)
	struct US_PlayerRadarComponent* PlayerRadarClass; // 0x1ce0(0x08)
	struct FVector m_cinematicCameraPos; // 0x1ce8(0x0c)
	char pad_1CF4[0x4]; // 0x1cf4(0x04)
	struct US_BloodSplatManagerComponent* m_bloodSplatManager; // 0x1cf8(0x08)
	struct AS_PlayerCharacter* m_character; // 0x1d00(0x08)
	struct USpatialPingComponent* m_spatialPingComponent; // 0x1d08(0x08)
	int32_t m_serverHeartbeatValue; // 0x1d10(0x04)
	char pad_1D14[0x40]; // 0x1d14(0x40)
	struct FS_ServerHeartbeatResponse m_serverHeartbeatResponse; // 0x1d54(0x08)
	char pad_1D5C[0xc]; // 0x1d5c(0x0c)
	struct AActor* m_TTKActor; // 0x1d68(0x08)
	float m_TTKStartTime; // 0x1d70(0x04)
	char pad_1D74[0x14]; // 0x1d74(0x14)
	struct TArray<struct AActor*> BotUnreachableTargets; // 0x1d88(0x10)
	char pad_1D98[0xa8]; // 0x1d98(0xa8)
	struct TArray<struct FS_ReplicatedActionResult> m_replicatedActionResults; // 0x1e40(0x10)
	struct FMulticastInlineDelegate OnBankingItemTypeChanged; // 0x1e50(0x10)
	struct FMulticastInlineDelegate OnUplinkBandwidthChanged; // 0x1e60(0x10)
	struct FMulticastInlineDelegate OnKeeperInteractionStateChanged; // 0x1e70(0x10)
	struct US_ItemData* m_bankingItemType; // 0x1e80(0x08)
	int32_t m_uplinkBandwidth; // 0x1e88(0x04)
	char pad_1E8C[0x4]; // 0x1e8c(0x04)
	struct FS_KeeperInteractionState m_keeperInteractionState; // 0x1e90(0x0c)
	char pad_1E9C[0x4]; // 0x1e9c(0x04)
	struct USplineComponent* AimingArcSplineComponent; // 0x1ea0(0x08)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x1ea8(0x10)
	struct UStaticMesh* SplineStaticMesh; // 0x1eb8(0x08)
	struct UMaterialInterface* AimingArcSplineMaterial; // 0x1ec0(0x08)
	float AimingArcStepSize; // 0x1ec8(0x04)
	float MaximumAmountOfAimingArcSteps; // 0x1ecc(0x04)
	char pad_1ED0[0x8]; // 0x1ed0(0x08)
	struct FMulticastInlineDelegate OnTeammateInfoAdded; // 0x1ed8(0x10)
	struct FMulticastInlineDelegate OnTeammateInfoAddedOrChanged; // 0x1ee8(0x10)
	struct FMulticastInlineDelegate OnTeammateInfoChanged; // 0x1ef8(0x10)
	struct FMulticastInlineDelegate OnTeammateInfoDeleted; // 0x1f08(0x10)
	struct TArray<struct FS_TeammateInfo> m_replicatedTeammateInfos; // 0x1f18(0x10)
	struct TArray<struct FS_TeammateInfo> m_teammateInfos; // 0x1f28(0x10)
	char pad_1F38[0x1]; // 0x1f38(0x01)
	bool m_isProtectedSession; // 0x1f39(0x01)
	char pad_1F3A[0x1e]; // 0x1f3a(0x1e)
	struct US_PSOBuildHelper* m_PSOBuildHelper; // 0x1f58(0x08)
	struct US_FlyCameraPSOWarmingPawn* m_FlyCameraPSOWarmingPawn; // 0x1f60(0x08)

	void WWiseTrimPriorityAudioQueue(struct FS_PriorityAudioTrim Trim, struct US_PriorityAudioChannelDef* ChannelDef, struct AActor* EventInstigator); // Function Scavenger.S_PlayerController.WWiseTrimPriorityAudioQueue // (Net|Native|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseQueuePrioritySequence(struct ULevelSequence* Sequence, struct AActor* EventInstigator, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PlayerController.WWiseQueuePrioritySequence // (Net|Native|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseQueuePriorityAudioEvent_ByName(struct FString EventName, struct AActor* EventInstigator, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PlayerController.WWiseQueuePriorityAudioEvent_ByName // (Net|Native|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseQueuePriorityAudioEvent(struct UAkAudioEvent* AkEvent, struct AActor* EventInstigator, struct US_PriorityAudioChannelDef* ChannelDef, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PlayerController.WWiseQueuePriorityAudioEvent // (Net|Native|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseClientPlaySound3D_ByName(struct FString EventName, struct FVector Location, struct AActor* AttachToActorIfPresent); // Function Scavenger.S_PlayerController.WWiseClientPlaySound3D_ByName // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseClientPlaySound3D(struct UAkAudioEvent* AkEvent, struct FVector Location, struct AActor* AttachToActorIfPresent); // Function Scavenger.S_PlayerController.WWiseClientPlaySound3D // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseClientPlaySound2D_ByName(struct FString EventName, bool bStopWhenAttachedToDestroyed); // Function Scavenger.S_PlayerController.WWiseClientPlaySound2D_ByName // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseClientPlaySound2D(struct UAkAudioEvent* AkEvent, bool bStopWhenAttachedToDestroyed); // Function Scavenger.S_PlayerController.WWiseClientPlaySound2D // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WWiseClientPlayMusicCue(enum class ES_MusicCue Cue); // Function Scavenger.S_PlayerController.WWiseClientPlayMusicCue // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void WorkerConsoleCommand(struct FString Command, enum class ES_LatencyBeacon workerType); // Function Scavenger.S_PlayerController.WorkerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void UpdateTTK(struct AActor* DamagedActor); // Function Scavenger.S_PlayerController.UpdateTTK // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void UpdatedRoamingStormIcons(); // Function Scavenger.S_PlayerController.UpdatedRoamingStormIcons // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void TryAcquireTalent(struct FName talentId, struct APawn* playerPawn); // Function Scavenger.S_PlayerController.TryAcquireTalent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleNoClip(); // Function Scavenger.S_PlayerController.ToggleNoClip // (Final|Exec|Native|Protected) // @ game+0xffff8008e4a10000
	void TeleportToVehicle(int32_t Param); // Function Scavenger.S_PlayerController.TeleportToVehicle // (Final|Exec|Native|Protected) // @ game+0xffff8008e4a10000
	void SpawnVehicle(); // Function Scavenger.S_PlayerController.SpawnVehicle // (Final|Exec|Native|Public) // @ game+0xffff8008e4a10000
	void SoloClient(bool bSolo); // Function Scavenger.S_PlayerController.SoloClient // (Final|Exec|Native|Public) // @ game+0xffff8008e4a10000
	bool ShowRedAimDot(); // Function Scavenger.S_PlayerController.ShowRedAimDot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool ShouldIgnoreNewInputActionsForPostGame(); // Function Scavenger.S_PlayerController.ShouldIgnoreNewInputActionsForPostGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool ShouldIgnoreNewInputActions(); // Function Scavenger.S_PlayerController.ShouldIgnoreNewInputActions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SetTimeScale(float newTimeScale); // Function Scavenger.S_PlayerController.SetTimeScale // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void SetTimeOfDay(float newTimeOfDay); // Function Scavenger.S_PlayerController.SetTimeOfDay // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void SetRespawnTimestamp(float RespawnTimestamp); // Function Scavenger.S_PlayerController.SetRespawnTimestamp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerHomeBoundaryDistance(float Distance); // Function Scavenger.S_PlayerController.SetPlayerHomeBoundaryDistance // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerHome(struct AS_PlayerHome* playerHome); // Function Scavenger.S_PlayerController.SetPlayerHome // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerCharacter(struct AS_PlayerCharacter* newPlayerCharacter); // Function Scavenger.S_PlayerController.SetPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIgnoreAllNewInputActionsForPostGame(bool bNewActionIgnores); // Function Scavenger.S_PlayerController.SetIgnoreAllNewInputActionsForPostGame // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIgnoreAllNewInputActions(bool bNewActionIgnores); // Function Scavenger.S_PlayerController.SetIgnoreAllNewInputActions // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFreeLookReturnSpeed(float Val); // Function Scavenger.S_PlayerController.SetFreeLookReturnSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentDebugScreen(struct US_DebugScreen* screen); // Function Scavenger.S_PlayerController.SetCurrentDebugScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCinematicCameraPos(struct FVector Pos); // Function Scavenger.S_PlayerController.SetCinematicCameraPos // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void SetBankingItemType(struct US_ItemData* BankingItemType); // Function Scavenger.S_PlayerController.SetBankingItemType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerSpawnPickupFromTestTinkeringWeaponActor(); // Function Scavenger.S_PlayerController.ServerSpawnPickupFromTestTinkeringWeaponActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSoloClient(bool bSolo); // Function Scavenger.S_PlayerController.ServerSoloClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerSetTestTinkeringWeaponType(struct FName itemTypeId); // Function Scavenger.S_PlayerController.ServerSetTestTinkeringWeaponType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSetTestTinkeringWeaponLoadout(struct FS_CosmeticLoadoutSlot LoadoutSlot); // Function Scavenger.S_PlayerController.ServerSetTestTinkeringWeaponLoadout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSetTestCosmeticTestLoadout(struct FS_CosmeticLoadoutSlot LoadoutSlot); // Function Scavenger.S_PlayerController.ServerSetTestCosmeticTestLoadout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerSetDropshipDoorsBlocked(); // Function Scavenger.S_PlayerController.ServerSetDropshipDoorsBlocked // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerSendPingEventOverrideToClient(enum class ES_PingInfoType PingType, enum class ES_AutoPingType AutoPingType); // Function Scavenger.S_PlayerController.ServerSendPingEventOverrideToClient // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerSendEventToClient(struct FName EventName, struct FS_ClientEventParameters eventParameters); // Function Scavenger.S_PlayerController.ServerSendEventToClient // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerSendEACMessage(struct TArray<char> eacMessage); // Function Scavenger.S_PlayerController.ServerSendEACMessage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRunConsoleCommandOnAllServers(struct FString Command); // Function Scavenger.S_PlayerController.ServerRunConsoleCommandOnAllServers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestTryReplicatedAction(uint32_t ReplicationKey, struct FS_ActionPayload ActionPayload); // Function Scavenger.S_PlayerController.ServerRequestTryReplicatedAction // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestTeleportToVehicle(int32_t Param); // Function Scavenger.S_PlayerController.ServerRequestTeleportToVehicle // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestTeleportTeammate(int32_t teammateNumber); // Function Scavenger.S_PlayerController.ServerRequestTeleportTeammate // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestSwapWeapon(uint32_t attackRPCCounter, struct FS_SwapWeaponPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestSwapWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestStopReplicatedAction(uint32_t ReplicationKey); // Function Scavenger.S_PlayerController.ServerRequestStopReplicatedAction // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestStopReload(uint32_t attackRPCCounter, struct FS_StopReloadPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestStopReload // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestStopAttack(uint32_t attackRPCCounter, struct FS_StopAttackPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestStopAttack // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestStartReload(uint32_t attackRPCCounter, struct FS_StartReloadPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestStartReload // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestStartAttack(uint32_t attackRPCCounter, struct FS_StartAttackPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestStartAttack // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestSpawnVehicle(struct FTransform SpawnTransform); // Function Scavenger.S_PlayerController.ServerRequestSpawnVehicle // (Net|Native|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestSelectCurrentWeapon(uint32_t attackRPCCounter, enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_PlayerController.ServerRequestSelectCurrentWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestReportPlayerInteractionIssue(); // Function Scavenger.S_PlayerController.ServerRequestReportPlayerInteractionIssue // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestPlayerRestart(); // Function Scavenger.S_PlayerController.ServerRequestPlayerRestart // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestPartyLeaveMatch(bool cancelCountdown); // Function Scavenger.S_PlayerController.ServerRequestPartyLeaveMatch // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestMoveToMapLocation(struct FVector2D Location); // Function Scavenger.S_PlayerController.ServerRequestMoveToMapLocation // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestMoveToCell(struct FString cellName); // Function Scavenger.S_PlayerController.ServerRequestMoveToCell // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestMoveTo(struct FVector Location, bool findGround); // Function Scavenger.S_PlayerController.ServerRequestMoveTo // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestMissingVehicles(struct TArray<struct AActor*> foundActors, struct TArray<struct FVector> foundActorClientLocations); // Function Scavenger.S_PlayerController.ServerRequestMissingVehicles // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestExplodeAtLocation(uint32_t attackRPCCounter, struct FS_DamageParameters damageParameters, float F1, struct UObject* o1, struct FHitResult HitResult, struct FVector v1, bool b1, float F2); // Function Scavenger.S_PlayerController.ServerRequestExplodeAtLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDoAttack(uint32_t attackRPCCounter, struct FS_DoAttackPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestDoAttack // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestDealPointDamageBatch(uint32_t u1, struct FS_DamageParameters damageParameters, enum class ES_TriggerType triggerType, float F1, struct TArray<struct FS_PointDamageRequest> damageRequests); // Function Scavenger.S_PlayerController.ServerRequestDealPointDamageBatch // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestCancelReload(uint32_t attackRPCCounter, struct FS_CancelReloadPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestCancelReload // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestCancelAttack(uint32_t attackRPCCounter, struct FS_CancelAttackPayload Payload); // Function Scavenger.S_PlayerController.ServerRequestCancelAttack // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestAcquireTalent(struct FName talentId); // Function Scavenger.S_PlayerController.ServerRequestAcquireTalent // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRemovedLevelOnclient(struct ULevel* Level); // Function Scavenger.S_PlayerController.ServerRemovedLevelOnclient // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerPlayerBotStopTests(); // Function Scavenger.S_PlayerController.ServerPlayerBotStopTests // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotStopGathering(); // Function Scavenger.S_PlayerController.ServerPlayerBotStopGathering // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotsTestsToggle(struct FName testToActivate); // Function Scavenger.S_PlayerController.ServerPlayerBotsTestsToggle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPlayerBotsGatherAtLocation(struct FVector gatherLocation, bool AndDisperse); // Function Scavenger.S_PlayerController.ServerPlayerBotsGatherAtLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0xffff8008e4a10000
	void ServerPlayerBotGetGrenades(struct FName grenadeName); // Function Scavenger.S_PlayerController.ServerPlayerBotGetGrenades // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerPingItem(struct FS_PingItemInfo pingItemInfo, uint32_t PingReplicationKey); // Function Scavenger.S_PlayerController.ServerPingItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyLoaded(); // Function Scavenger.S_PlayerController.ServerNotifyLoaded // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyClientReticuleInfo(struct FVector_NetQuantize quantisedLoc, uint16_t Yaw, uint16_t Pitch); // Function Scavenger.S_PlayerController.ServerNotifyClientReticuleInfo // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerNotifyBurstDoneToAvoidLimboState(uint32_t attackRPCCounter, enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_PlayerController.ServerNotifyBurstDoneToAvoidLimboState // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerMoveToMatchEnd(); // Function Scavenger.S_PlayerController.ServerMoveToMatchEnd // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerLoadedLevelOnclient(struct ULevel* Level); // Function Scavenger.S_PlayerController.ServerLoadedLevelOnclient // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerLeaveGameEarlyAndRequestReportCard(); // Function Scavenger.S_PlayerController.ServerLeaveGameEarlyAndRequestReportCard // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerExecuteBackendTest(); // Function Scavenger.S_PlayerController.ServerExecuteBackendTest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerDebugRPCTrace(uint32_t ReplicationKey, struct FSpatialLatencyPayload LatencyPayload); // Function Scavenger.S_PlayerController.ServerDebugRPCTrace // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerDebugRPC(uint32_t ReplicationKey); // Function Scavenger.S_PlayerController.ServerDebugRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerConsoleCommand(struct FString Command); // Function Scavenger.S_PlayerController.ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerClearPingItem(uint32_t PingReplicationKey); // Function Scavenger.S_PlayerController.ServerClearPingItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerClearAutoPingItem(uint32_t PingReplicationKey); // Function Scavenger.S_PlayerController.ServerClearAutoPingItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerAcknowledgeReplicatedActionResults(struct TArray<uint32_t> replicationKeys); // Function Scavenger.S_PlayerController.ServerAcknowledgeReplicatedActionResults // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void RollbackPredictiveKill_BP(struct AActor* PredictedKilledActor); // Function Scavenger.S_PlayerController.RollbackPredictiveKill_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void RollbackPredictiveDowned_BP(struct AActor* PredictedKilledActor); // Function Scavenger.S_PlayerController.RollbackPredictiveDowned_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ResetControllerRotationToPawnClampAnglesToDefault(); // Function Scavenger.S_PlayerController.ResetControllerRotationToPawnClampAnglesToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestPlayerRestart(); // Function Scavenger.S_PlayerController.RequestPlayerRestart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestDebugTriggerNearbyAlarms(float Distance); // Function Scavenger.S_PlayerController.RequestDebugTriggerNearbyAlarms // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void RequestDebugResetNearbyEncounters(float Distance); // Function Scavenger.S_PlayerController.RequestDebugResetNearbyEncounters // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void RequestDebugBrainDeadAI(struct AS_AICharacter* aiCharacter, bool brainDead); // Function Scavenger.S_PlayerController.RequestDebugBrainDeadAI // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void RemoveRecipe(struct TSoftObjectPtr<struct US_RecipeData> recipe); // Function Scavenger.S_PlayerController.RemoveRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveMapData(int32_t iconID); // Function Scavenger.S_PlayerController.RemoveMapData // (Final|Native|Public) // @ game+0xffff8008e4a10000
	bool PingItem(struct FS_PingItemInfo pingItemInfo, struct FS_PingItemHandle outPingHandle); // Function Scavenger.S_PlayerController.PingItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_InCinematic(); // Function Scavenger.S_PlayerController.OnRep_InCinematic // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnPredictedActorStateChange(struct US_StatsComponent* Stats, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerController.OnPredictedActorStateChange // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnLocationMusic_BP(enum class ES_LocationType LocationType); // Function Scavenger.S_PlayerController.OnLocationMusic_BP // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnCharacterDied(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_PlayerController.OnCharacterDied // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnAttack(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_PlayerController.OnAttack // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyWeatherStateChanged_BP(struct FS_WeatherState weatherState); // Function Scavenger.S_PlayerController.NotifyWeatherStateChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTerminalByPawn_BP(struct FS_EventParameterVariant TerminatingPawn, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.NotifyTerminalByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTerminalBy_BP(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.NotifyTerminalBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTerminal_BP(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.NotifyTerminal_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTeammateInfoDeleted_BP(int32_t TeammateInfoIndex); // Function Scavenger.S_PlayerController.NotifyTeammateInfoDeleted_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTeammateInfoChanged_BP(int32_t TeammateInfoIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_PlayerController.NotifyTeammateInfoChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTeammateInfoAddedOrChanged_BP(int32_t TeammateInfoIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_PlayerController.NotifyTeammateInfoAddedOrChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTeammateInfoAdded_BP(int32_t TeammateInfoIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_PlayerController.NotifyTeammateInfoAdded_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatsStateChangedByPawn_BP(struct FS_EventParameterVariant ChangeCausingPawn, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.NotifyStatsStateChangedByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatsStateChangedBy_BP(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.NotifyStatsStateChangedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevivedByPawn_BP(struct FS_EventParameterVariant RevivingPawn); // Function Scavenger.S_PlayerController.NotifyRevivedByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevivedBy_BP(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_PlayerController.NotifyRevivedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRevived_BP(struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_PlayerController.NotifyRevived_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectedByPawn_BP(struct FS_EventParameterVariant ResurrectingPawn); // Function Scavenger.S_PlayerController.NotifyResurrectedByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectedBy_BP(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_PlayerController.NotifyResurrectedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrected_BP(struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_PlayerController.NotifyResurrected_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedUplinkBandwidth(); // Function Scavenger.S_PlayerController.NotifyReplicatedUplinkBandwidth // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTeammateInfos(); // Function Scavenger.S_PlayerController.NotifyReplicatedTeammateInfos // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerHeartbeatValue(int32_t lastServerHeartbeatValue); // Function Scavenger.S_PlayerController.NotifyReplicatedServerHeartbeatValue // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedServerHeartbeatResponse(struct FS_ServerHeartbeatResponse lastServerHeartbeatResponse); // Function Scavenger.S_PlayerController.NotifyReplicatedServerHeartbeatResponse // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedReviveState(); // Function Scavenger.S_PlayerController.NotifyReplicatedReviveState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRespawnTimestamp(); // Function Scavenger.S_PlayerController.NotifyReplicatedRespawnTimestamp // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedPlayerRecipePaths(); // Function Scavenger.S_PlayerController.NotifyReplicatedPlayerRecipePaths // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveSubGoalDeltas(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveSubGoalDeltas // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveSubGoalBases(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveSubGoalBases // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveMarkerBases(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveMarkerBases // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveGoalDeltas(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveGoalDeltas // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveGoalBases(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveGoalBases // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveDeltas(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveDeltas // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedObjectiveBases(); // Function Scavenger.S_PlayerController.NotifyReplicatedObjectiveBases // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedKeeperInteractionState(); // Function Scavenger.S_PlayerController.NotifyReplicatedKeeperInteractionState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedInteractionFeedbackState(struct FS_InteractionFeedbackState lastInteractionFeedbackState); // Function Scavenger.S_PlayerController.NotifyReplicatedInteractionFeedbackState // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedInteractableItems(); // Function Scavenger.S_PlayerController.NotifyReplicatedInteractableItems // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedCurrentXP(int32_t previousXp); // Function Scavenger.S_PlayerController.NotifyReplicatedCurrentXP // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedBankingItemType(); // Function Scavenger.S_PlayerController.NotifyReplicatedBankingItemType // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedActionResults(); // Function Scavenger.S_PlayerController.NotifyReplicatedActionResults // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyRelicatedActiveTalentIds(); // Function Scavenger.S_PlayerController.NotifyRelicatedActiveTalentIds // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyPredictiveKill_BP(struct AActor* PredictedKilledActor, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_PlayerController.NotifyPredictiveKill_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPredictiveDowned_BP(struct AActor* PredictedKilledActor, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_PlayerController.NotifyPredictiveDowned_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPossessPawn_BP(struct APawn* possessedPawn); // Function Scavenger.S_PlayerController.NotifyPossessPawn_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingsLoaded(int32_t TeammateInfoIndex); // Function Scavenger.S_PlayerController.NotifyPingsLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyObjectiveUpdated_BP(int32_t UniqueId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_PlayerController.NotifyObjectiveUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalUpdated_BP(int32_t goalUniqueId, int32_t UniqueId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_PlayerController.NotifyObjectiveSubGoalUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalDeleted_BP(int32_t goalUniqueId, int32_t UniqueId); // Function Scavenger.S_PlayerController.NotifyObjectiveSubGoalDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalAdded_BP(int32_t goalUniqueId, struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_PlayerController.NotifyObjectiveSubGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalUpdated_BP(int32_t objectiveUniqueId, int32_t UniqueId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_PlayerController.NotifyObjectiveGoalUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalDeleted_BP(int32_t objectiveUniqueId, int32_t UniqueId); // Function Scavenger.S_PlayerController.NotifyObjectiveGoalDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalAdded_BP(int32_t objectiveUniqueId, struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_PlayerController.NotifyObjectiveGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveDeleted_BP(int32_t UniqueId); // Function Scavenger.S_PlayerController.NotifyObjectiveDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_PlayerController.NotifyObjectiveAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLocationEntered_BP(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_PlayerController.NotifyLocationEntered_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLoadedPlayerRecipesChanged(); // Function Scavenger.S_PlayerController.NotifyLoadedPlayerRecipesChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyLevelUp_BP(int32_t NewExperienceLevel); // Function Scavenger.S_PlayerController.NotifyLevelUp_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledPawn_BP(struct FS_EventParameterVariant KilledActor, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.NotifyKilledPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledInCocoon_BP(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_PlayerController.NotifyKilledInCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledByPawn_BP(struct FS_EventParameterVariant KillingPawn, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.NotifyKilledByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilledBy_BP(struct FS_EventParameterControllerVariant KillingController, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.NotifyKilledBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyKilled_BP(struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_PlayerController.NotifyKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUsed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.NotifyItemUsed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemUnequipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.NotifyItemUnequipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemEquipped_BP(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.NotifyItemEquipped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDropped_BP(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_PlayerController.NotifyItemDropped_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemDestroyed_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.NotifyItemDestroyed_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemAcquired_BP(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.NotifyItemAcquired_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInteracted_BP(struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_PlayerController.NotifyInteracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyFreedFromCocoon_BP(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_PlayerController.NotifyFreedFromCocoon_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracting_BP(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_PlayerController.NotifyExtracting_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyExtracted_BP(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_PlayerController.NotifyExtracted_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDownedByPawn_BP(struct FS_EventParameterVariant DowningPawn, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.NotifyDownedByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDownedBy_BP(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.NotifyDownedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDowned_BP(struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.NotifyDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamagedByPawn_BP(struct FS_EventParameterVariant DamagingPawn, float DamageDealt); // Function Scavenger.S_PlayerController.NotifyDamagedByPawn_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamagedBy_BP(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_PlayerController.NotifyDamagedBy_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDamaged_BP(struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_PlayerController.NotifyDamaged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCocooned_BP(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_PlayerController.NotifyCocooned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyClientLeaveGameAndReturnToMainMenu(float Timeout, bool isEarlyExit); // Function Scavenger.S_PlayerController.NotifyClientLeaveGameAndReturnToMainMenu // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCausedStatsStateChange_BP(struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.NotifyCausedStatsStateChange_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAcquiredTalentsChanged_BP(struct TArray<struct FName> AcquiredTalentIds); // Function Scavenger.S_PlayerController.NotifyAcquiredTalentsChanged_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MuteClient(bool bMute); // Function Scavenger.S_PlayerController.MuteClient // (Final|Exec|Native|Public) // @ game+0xffff8008e4a10000
	void MulticastConsoleCommand(struct FString Command); // Function Scavenger.S_PlayerController.MulticastConsoleCommand // (Net|NetReliableNative|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void LeaveGameEarlyAndRequestReportCard(); // Function Scavenger.S_PlayerController.LeaveGameEarlyAndRequestReportCard // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsWithinPlayerHomeBoundary(); // Function Scavenger.S_PlayerController.IsWithinPlayerHomeBoundary // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsTalentAcquired(struct FName talentId); // Function Scavenger.S_PlayerController.IsTalentAcquired // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsSidelined(); // Function Scavenger.S_PlayerController.IsSidelined // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlayerCharacterFriendly(struct AS_PlayerCharacter* playerCharacter); // Function Scavenger.S_PlayerController.IsPlayerCharacterFriendly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsEliminated(); // Function Scavenger.S_PlayerController.IsEliminated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCharacterAlive(); // Function Scavenger.S_PlayerController.IsCharacterAlive // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBeingRevived(); // Function Scavenger.S_PlayerController.IsBeingRevived // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAtMaxmimumExperienceLevel(); // Function Scavenger.S_PlayerController.IsAtMaxmimumExperienceLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActorUnderReticuleHostile(); // Function Scavenger.S_PlayerController.IsActorUnderReticuleHostile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActorUnderReticuleFriendly(); // Function Scavenger.S_PlayerController.IsActorUnderReticuleFriendly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActorATeammate(struct AActor* Actor); // Function Scavenger.S_PlayerController.IsActorATeammate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleRoamingStormRemove(int32_t StormId); // Function Scavenger.S_PlayerController.HandleRoamingStormRemove // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnStormCategoryChanged(enum class ES_StormCategory newStormCategory); // Function Scavenger.S_PlayerController.HandleOnStormCategoryChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPawnChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_PlayerController.HandleOnPawnChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLocationExited_WithOverrideData(struct FName Name, struct FName Description, enum class ES_LocationType Type, enum class ES_LocationDifficultyTier difficulty, enum class ES_LocationFaction faction); // Function Scavenger.S_PlayerController.HandleOnLocationExited_WithOverrideData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnLocationExited(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_PlayerController.HandleOnLocationExited // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnLocationEntered_WithOverrideData(struct FName Name, struct FName Description, enum class ES_LocationType Type, enum class ES_LocationDifficultyTier difficulty, enum class ES_LocationFaction faction); // Function Scavenger.S_PlayerController.HandleOnLocationEntered_WithOverrideData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnLocationEntered(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_PlayerController.HandleOnLocationEntered // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetXPEarnedThisLevel(); // Function Scavenger.S_PlayerController.GetXPEarnedThisLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetUplinkBandwidthQuotaRatio(); // Function Scavenger.S_PlayerController.GetUplinkBandwidthQuotaRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetUplinkBandwidth(); // Function Scavenger.S_PlayerController.GetUplinkBandwidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalXPThisSession(); // Function Scavenger.S_PlayerController.GetTotalXPThisSession // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalXPThisLevel(); // Function Scavenger.S_PlayerController.GetTotalXPThisLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamIndex(); // Function Scavenger.S_PlayerController.GetTeamIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetStillnessTime(); // Function Scavenger.S_PlayerController.GetStillnessTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetShardsHeld(); // Function Scavenger.S_PlayerController.GetShardsHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetRogueRank(); // Function Scavenger.S_PlayerController.GetRogueRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRespawnTimestamp(); // Function Scavenger.S_PlayerController.GetRespawnTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRespawnTimeRemaining(); // Function Scavenger.S_PlayerController.GetRespawnTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRespawnReceivedTimeSeconds(); // Function Scavenger.S_PlayerController.GetRespawnReceivedTimeSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerSessionRewards(); // Function Scavenger.S_PlayerController.GetPlayerSessionRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct US_RecipeData*> GetPlayerRecipes(); // Function Scavenger.S_PlayerController.GetPlayerRecipes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_PlayerRadarComponent* GetPlayerRadarComponent(); // Function Scavenger.S_PlayerController.GetPlayerRadarComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_PlayerObjective> GetPlayerObjectiveSubGoals(int32_t ParentID); // Function Scavenger.S_PlayerController.GetPlayerObjectiveSubGoals // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_PlayerObjective> GetPlayerObjectives(int32_t objectiveId); // Function Scavenger.S_PlayerController.GetPlayerObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_PlayerObjective> GetPlayerObjectiveGoals(int32_t ParentID); // Function Scavenger.S_PlayerController.GetPlayerObjectiveGoals // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPlayerHomeBoundaryDistance(); // Function Scavenger.S_PlayerController.GetPlayerHomeBoundaryDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerHome* GetPlayerHome(); // Function Scavenger.S_PlayerController.GetPlayerHome // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* GetPlayerCharacter(); // Function Scavenger.S_PlayerController.GetPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPingLocationForActor(enum class ES_PingInfoType PingType, struct AActor* TargetActor, struct FVector PingLocation); // Function Scavenger.S_PlayerController.GetPingLocationForActor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetPercentProgressToNextLevel(); // Function Scavenger.S_PlayerController.GetPercentProgressToNextLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNextTeammateRespawnTimestamp(); // Function Scavenger.S_PlayerController.GetNextTeammateRespawnTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_DeathRecap GetLastReceivedDeathRecap(); // Function Scavenger.S_PlayerController.GetLastReceivedDeathRecap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetLastNamedLocationVolume(); // Function Scavenger.S_PlayerController.GetLastNamedLocationVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_LandscapeDeformer* GetLandscapeDeformer(); // Function Scavenger.S_PlayerController.GetLandscapeDeformer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetInteractionPercentage(); // Function Scavenger.S_PlayerController.GetInteractionPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_InteractionFeedbackState GetInteractionFeedbackState(); // Function Scavenger.S_PlayerController.GetInteractionFeedbackState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_InteractableItem> GetInteractableItems(); // Function Scavenger.S_PlayerController.GetInteractableItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FRotator GetFreeLookRotationOffset(); // Function Scavenger.S_PlayerController.GetFreeLookRotationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetExitVehicleInteractionProgress(); // Function Scavenger.S_PlayerController.GetExitVehicleInteractionProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDetectionDistance(enum class ES_DetectionReason DetectionReason); // Function Scavenger.S_PlayerController.GetDetectionDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_InteractableIconComponent* GetDefaultInteractableIconComponentClass(); // Function Scavenger.S_PlayerController.GetDefaultInteractableIconComponentClass // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetCurrentExperienceLevel(); // Function Scavenger.S_PlayerController.GetCurrentExperienceLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_DebugScreen* GetCurrentDebugScreen(); // Function Scavenger.S_PlayerController.GetCurrentDebugScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_RotationClamp GetControllerRotationToPawnClamp(); // Function Scavenger.S_PlayerController.GetControllerRotationToPawnClamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetBestRespawnLocation(struct TArray<struct AActor*> rezLocationActors, float enemyAcceptableDist, float friendlyAcceptableDist, float enemyDistWeight, float friendlyDistWeight, float minumumAcceptanceCost, int32_t maxRezPointsToTestPerFriendly); // Function Scavenger.S_PlayerController.GetBestRespawnLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ItemData* GetBankingItemType(); // Function Scavenger.S_PlayerController.GetBankingItemType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetActorUnderReticuleTargetingStrength(); // Function Scavenger.S_PlayerController.GetActorUnderReticuleTargetingStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetActorUnderReticuleName(); // Function Scavenger.S_PlayerController.GetActorUnderReticuleName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetActorUnderReticule(); // Function Scavenger.S_PlayerController.GetActorUnderReticule // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetActiveGameplayEffects(struct TArray<struct FS_ActiveGameplayEffect> outActiveGameplayEffects, bool bIncludeEffectsWithoutMetadata, bool bUsePlayerCharacterInsteadOfControlledPawn); // Function Scavenger.S_PlayerController.GetActiveGameplayEffects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* GetAcquiredTarget(); // Function Scavenger.S_PlayerController.GetAcquiredTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetAcquiredTalentIds(); // Function Scavenger.S_PlayerController.GetAcquiredTalentIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAccountLevel(); // Function Scavenger.S_PlayerController.GetAccountLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ForceUpdateCameraSettings(); // Function Scavenger.S_PlayerController.ForceUpdateCameraSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool FindPingItemByHandle(struct FS_PingItemHandle PingHandle, struct FS_PingItemInstance outPingItem); // Function Scavenger.S_PlayerController.FindPingItemByHandle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ExitNamedLocationVolume(struct FString volumeText); // Function Scavenger.S_PlayerController.ExitNamedLocationVolume // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventTerminalBy(struct FS_EventParameterControllerVariant TerminatingController, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.EventTerminalBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventTerminal(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.EventTerminal // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventStatsStateChangedBy(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.EventStatsStateChangedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevivedBy(struct FS_EventParameterControllerVariant revivingController); // Function Scavenger.S_PlayerController.EventRevivedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventRevived(struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_PlayerController.EventRevived // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrectedBy(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_PlayerController.EventResurrectedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventResurrected(struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_PlayerController.EventResurrected // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledInCocoon(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_PlayerController.EventKilledInCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilledBy(struct FS_EventParameterControllerVariant KillingController, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.EventKilledBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventKilled(struct FS_EventParameterVariant KilledActor, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.EventKilled // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUsed(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.EventItemUsed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.EventItemUnequipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.EventItemEquipped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDropped(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_PlayerController.EventItemDropped // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemDestroyed(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.EventItemDestroyed // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventItemAcquired(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.EventItemAcquired // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventInteracted(struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_PlayerController.EventInteracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventFreedFromCocoon(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_PlayerController.EventFreedFromCocoon // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracting(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_PlayerController.EventExtracting // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventExtracted(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_PlayerController.EventExtracted // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDownedBy(struct FS_EventParameterControllerVariant DowningController, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.EventDownedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDowned(struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.EventDowned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamagedBy(struct FS_EventParameterControllerVariant DamagingController, float DamageDealt); // Function Scavenger.S_PlayerController.EventDamagedBy // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventDamaged(struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_PlayerController.EventDamaged // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventCocooned(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_PlayerController.EventCocooned // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EventCausedStatsStateChange(struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.EventCausedStatsStateChange // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void EnterNamedLocationVolume(struct FString volumeText); // Function Scavenger.S_PlayerController.EnterNamedLocationVolume // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EndTTK(struct AActor* DamagedActor); // Function Scavenger.S_PlayerController.EndTTK // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void EnableCinematicCamera(); // Function Scavenger.S_PlayerController.EnableCinematicCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void DoEmote(struct FName emoteNameId); // Function Scavenger.S_PlayerController.DoEmote // (Final|Exec|Native|Protected) // @ game+0xffff8008e4a10000
	void DisableCinematicCamera(); // Function Scavenger.S_PlayerController.DisableCinematicCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void DebugToggleNotAITargetable(); // Function Scavenger.S_PlayerController.DebugToggleNotAITargetable // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void DebugAssignMiscClass(); // Function Scavenger.S_PlayerController.DebugAssignMiscClass // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CrossServerNotifyBrokenMesh(struct UStaticMeshComponent* staticMeshComp); // Function Scavenger.S_PlayerController.CrossServerNotifyBrokenMesh // (Net|NetReliableNative|Event|Public) // @ game+0xffff8008e4a10000
	void ClientToServerHeartbeat(int32_t heartbeatValue); // Function Scavenger.S_PlayerController.ClientToServerHeartbeat // (Final|Net|Native|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ClientSendEACMessage(struct TArray<char> eacMessage); // Function Scavenger.S_PlayerController.ClientSendEACMessage // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientReturnToMainMenuWithReason(enum class ES_ClientErrorCode clientErrorCode); // Function Scavenger.S_PlayerController.ClientReturnToMainMenuWithReason // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientReceiveStartOfMatchRecord(struct FS_StartOfMatchRecord startOfMatchRecord); // Function Scavenger.S_PlayerController.ClientReceiveStartOfMatchRecord // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientReceiveServerTelemetryIds(struct FGuid ServerTelemetrySessionId, struct FGuid MatchID, int32_t ServerMatchIndex, int32_t ServerPlayerIndex); // Function Scavenger.S_PlayerController.ClientReceiveServerTelemetryIds // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0xffff8008e4a10000
	void ClientReceiveReportCard(struct FS_GameReportCardForPlayer playerReportCard); // Function Scavenger.S_PlayerController.ClientReceiveReportCard // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void ClientReceivePreTakeoffScoreSnapshot(struct FS_GameScoreSnapshot scoreSnapshot); // Function Scavenger.S_PlayerController.ClientReceivePreTakeoffScoreSnapshot // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientReceivePostTakeoffScoreSnapshot(struct FS_GameScoreSnapshot scoreSnapshot); // Function Scavenger.S_PlayerController.ClientReceivePostTakeoffScoreSnapshot // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientReceiveEndOfGameRankRecord(struct FS_EndOfGameRankRecord endOfGameRankRecord); // Function Scavenger.S_PlayerController.ClientReceiveEndOfGameRankRecord // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientPlaySound2D(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Scavenger.S_PlayerController.ClientPlaySound2D // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|NetValidate) // @ game+0xffff8008e4a10000
	void ClientPingOverrideEvent(enum class ES_PingInfoType PingType, enum class ES_AutoPingType AutoPingType); // Function Scavenger.S_PlayerController.ClientPingOverrideEvent // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientPartyLeaveMatchRequested(float exitTimestamp, int32_t initiatingPlayerIndex); // Function Scavenger.S_PlayerController.ClientPartyLeaveMatchRequested // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyTerminalBy(struct FS_EventParameterVariant TerminatingPawn, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.ClientNotifyTerminalBy // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyTerminal(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_PlayerController.ClientNotifyTerminal // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyStatsStateChangedBy(struct FS_EventParameterVariant ChangeCausingPawn, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.ClientNotifyStatsStateChangedBy // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyRevivedBy(struct FS_EventParameterVariant RevivingPawn); // Function Scavenger.S_PlayerController.ClientNotifyRevivedBy // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyRevived(struct FS_EventParameterVariant revivedActor); // Function Scavenger.S_PlayerController.ClientNotifyRevived // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyResurrectedBy(struct FS_EventParameterVariant ResurrectingPawn); // Function Scavenger.S_PlayerController.ClientNotifyResurrectedBy // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyResurrected(struct FS_EventParameterVariant resurrectedActor); // Function Scavenger.S_PlayerController.ClientNotifyResurrected // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyMissingVehicles(struct TArray<struct FVector> missingLocations, struct TArray<struct AActor*> outOfSyncActors, struct TArray<struct FVector> outOfSyncActorsServerLocations); // Function Scavenger.S_PlayerController.ClientNotifyMissingVehicles // (Net|Native|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyLevelUp(int32_t NewExperienceLevel); // Function Scavenger.S_PlayerController.ClientNotifyLevelUp // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyKilledInCocoon(struct FS_PlayerKilledInCocoonParameters PlayerKilledInCocoonParameters); // Function Scavenger.S_PlayerController.ClientNotifyKilledInCocoon // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyKilledBy(struct FS_EventParameterVariant KillingPawn, struct FS_DeathRecap DeathRecap); // Function Scavenger.S_PlayerController.ClientNotifyKilledBy // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyKilled(struct FS_EventParameterVariant KilledActor); // Function Scavenger.S_PlayerController.ClientNotifyKilled // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemUsed(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.ClientNotifyItemUsed // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.ClientNotifyItemUnequipped // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.ClientNotifyItemEquipped // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemDropped(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_PlayerController.ClientNotifyItemDropped // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemDestroyed(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.ClientNotifyItemDestroyed // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyItemAcquired(struct FS_ItemState ItemState); // Function Scavenger.S_PlayerController.ClientNotifyItemAcquired // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyInteracted(struct FS_EventParameterVariant InteractableActor, struct FS_EventParameterVariant InteractableComponent, int32_t InteractableIndex, float InteractionPercentage); // Function Scavenger.S_PlayerController.ClientNotifyInteracted // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyFreedFromCocoon(struct FS_PlayerFreedFromCocoonParameters PlayerFreedFromCocoonParameters); // Function Scavenger.S_PlayerController.ClientNotifyFreedFromCocoon // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyExtracting(struct FS_PlayerExtractingParameters PlayerExtractingParameters); // Function Scavenger.S_PlayerController.ClientNotifyExtracting // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyExtracted(struct FS_PlayerExtractedParameters PlayerExtractedParameters); // Function Scavenger.S_PlayerController.ClientNotifyExtracted // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyDownedBy(struct FS_EventParameterVariant DowningPawn, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.ClientNotifyDownedBy // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyDowned(struct FS_EventParameterVariant DownedActor, struct FS_ActorDownedParameters ActorDownedParameters); // Function Scavenger.S_PlayerController.ClientNotifyDowned // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyDamagedBy(struct FS_EventParameterVariant DamagingPawn, float DamageDealt); // Function Scavenger.S_PlayerController.ClientNotifyDamagedBy // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyDamaged(struct FS_EventParameterVariant DamagedActor, float DamageDealt); // Function Scavenger.S_PlayerController.ClientNotifyDamaged // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyCocooned(struct FS_PlayerCocoonedParameters PlayerCocoonedParameters); // Function Scavenger.S_PlayerController.ClientNotifyCocooned // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void ClientNotifyCausedStatsStateChange(struct FS_EventParameterVariant ChangedActor, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerController.ClientNotifyCausedStatsStateChange // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyBrokenMeshes(struct TArray<struct UStaticMeshComponent*> meshArray); // Function Scavenger.S_PlayerController.ClientNotifyBrokenMeshes // (Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyBrokenMesh(struct UStaticMeshComponent* staticMeshComp); // Function Scavenger.S_PlayerController.ClientNotifyBrokenMesh // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientNotifyBeginPlayPostStreaming(); // Function Scavenger.S_PlayerController.ClientNotifyBeginPlayPostStreaming // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientMuteClient(bool bMute); // Function Scavenger.S_PlayerController.ClientMuteClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientEventTrace(struct FName EventName, struct FS_ClientEventParameters eventParameters, struct FSpatialLatencyPayload tracePayload); // Function Scavenger.S_PlayerController.ClientEventTrace // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientEvent(struct FName EventName, struct FS_ClientEventParameters eventParameters); // Function Scavenger.S_PlayerController.ClientEvent // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientDenyDealPointDamage(struct AActor* DamagedActor, struct FS_PointDamageEvent DamageEvent, struct AActor* CauseActor, enum class ES_TriggerType triggerType, struct FS_PointDamageValidation validationData); // Function Scavenger.S_PlayerController.ClientDenyDealPointDamage // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClientDebugRPCTrace(uint32_t ReplicationKey, struct FSpatialLatencyPayload LatencyPayload); // Function Scavenger.S_PlayerController.ClientDebugRPCTrace // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientDebugRPC(uint32_t ReplicationKey); // Function Scavenger.S_PlayerController.ClientDebugRPC // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void ClearRespawnTimestamp(); // Function Scavenger.S_PlayerController.ClearRespawnTimestamp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearPlayerRecipes(); // Function Scavenger.S_PlayerController.ClearPlayerRecipes // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ClearPingItemByHandle(struct FS_PingItemHandle PingHandle); // Function Scavenger.S_PlayerController.ClearPingItemByHandle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ClearPingItem(struct FS_PingItemInstance pingItemInstance); // Function Scavenger.S_PlayerController.ClearPingItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ClearAutoPingItemByHandle(struct FS_PingItemHandle PingHandle); // Function Scavenger.S_PlayerController.ClearAutoPingItemByHandle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CheatSetGodMode(bool Enabled); // Function Scavenger.S_PlayerController.CheatSetGodMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void CheatGrantEarnedResurrectionToken(); // Function Scavenger.S_PlayerController.CheatGrantEarnedResurrectionToken // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void CheatGiveHeavilyArmedLoadout(struct FString Loadout); // Function Scavenger.S_PlayerController.CheatGiveHeavilyArmedLoadout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void CheatApplyXPChange(int32_t xpAmount); // Function Scavenger.S_PlayerController.CheatApplyXPChange // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ChangeRecipe(struct TSoftObjectPtr<struct US_RecipeData> oldRecipe, struct US_RecipeData* newRecipe); // Function Scavenger.S_PlayerController.ChangeRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangePlayerRecipe(struct FName oldRecipeId, struct FName newRecipeId); // Function Scavenger.S_PlayerController.ChangePlayerRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanRequestPlayerRestart(); // Function Scavenger.S_PlayerController.CanRequestPlayerRestart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanExitVehicle(); // Function Scavenger.S_PlayerController.CanExitVehicle // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool CanAcquireTalent(struct FName talentId); // Function Scavenger.S_PlayerController.CanAcquireTalent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void BotRequestSprintStop(); // Function Scavenger.S_PlayerController.BotRequestSprintStop // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BotRequestSprintStart(); // Function Scavenger.S_PlayerController.BotRequestSprintStart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct AActor*> BotFindNearbyActorsOfType(struct AActor* InteractableType, float searchRadius, bool sort); // Function Scavenger.S_PlayerController.BotFindNearbyActorsOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AActor* BotFindBestNearbyLargeWeapon(); // Function Scavenger.S_PlayerController.BotFindBestNearbyLargeWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void BotAttemptInteraction(); // Function Scavenger.S_PlayerController.BotAttemptInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginPlayPostStreaming_BP(); // Function Scavenger.S_PlayerController.BeginPlayPostStreaming_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ApplyXPChange(int32_t change); // Function Scavenger.S_PlayerController.ApplyXPChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyShardChange(int32_t change); // Function Scavenger.S_PlayerController.ApplyShardChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplySessionRewardChange(int32_t change); // Function Scavenger.S_PlayerController.ApplySessionRewardChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyRogueRankChange(int32_t change); // Function Scavenger.S_PlayerController.ApplyRogueRankChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddRecipe(struct US_RecipeData* recipe); // Function Scavenger.S_PlayerController.AddRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerRecipe(struct FName RecipeId); // Function Scavenger.S_PlayerController.AddPlayerRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddOrUpdateMapDataItem(struct FS_MapDisplayData MapData); // Function Scavenger.S_PlayerController.AddOrUpdateMapDataItem // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UserCustomConsoleCommandBindsSave
// Size: 0x78 (Inherited: 0x28)
struct US_UserCustomConsoleCommandBindsSave : USaveGame {
	struct TMap<struct FKey, struct FString> StoredBinds; // 0x28(0x50)
};

// Class Scavenger.S_PlayerControllerMainMenu
// Size: 0xd18 (Inherited: 0xca8)
struct AS_PlayerControllerMainMenu : AS_PlayerControllerBase {
	struct FMulticastInlineDelegate OnPartyInviteSent; // 0xca8(0x10)
	SoftClassProperty FTUEManagerClass; // 0xcb8(0x28)
	struct TArray<enum class EObjectTypeQuery> RotationItemCaptureTypes; // 0xce0(0x10)
	struct US_FTUEManager* m_FTUEManager; // 0xcf0(0x08)
	struct US_FrontEndCharacterManager* m_frontEndCharacterManager; // 0xcf8(0x08)
	struct US_WidgetMatchmaking* m_matchmakingWidget; // 0xd00(0x08)
	char pad_D08[0x10]; // 0xd08(0x10)

	void ServerRequestChangeTeam(int32_t TeamIndex); // Function Scavenger.S_PlayerControllerMainMenu.ServerRequestChangeTeam // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerRequestChangeReadyState(bool IsReady); // Function Scavenger.S_PlayerControllerMainMenu.ServerRequestChangeReadyState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void PollForSystemMessagesAndUserData(); // Function Scavenger.S_PlayerControllerMainMenu.PollForSystemMessagesAndUserData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnPlayerOnlineInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState onlinePlayerState); // Function Scavenger.S_PlayerControllerMainMenu.OnPlayerOnlineInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnLoginSucceed(); // Function Scavenger.S_PlayerControllerMainMenu.OnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyFocusDebugOverlayRequest(bool isFocusDebugOverlayRequested); // Function Scavenger.S_PlayerControllerMainMenu.NotifyFocusDebugOverlayRequest // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleRotateItemAxisY(float AxisValue); // Function Scavenger.S_PlayerControllerMainMenu.HandleRotateItemAxisY // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRotateItemAxisX(float AxisValue); // Function Scavenger.S_PlayerControllerMainMenu.HandleRotateItemAxisX // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleReleaseRotationItem(); // Function Scavenger.S_PlayerControllerMainMenu.HandleReleaseRotationItem // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCaptureRotationItem(); // Function Scavenger.S_PlayerControllerMainMenu.HandleCaptureRotationItem // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_WidgetMatchmaking* GetMatchmakingWidgetFromPlayerController(struct APlayerController* PlayerController); // Function Scavenger.S_PlayerControllerMainMenu.GetMatchmakingWidgetFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_WidgetMatchmaking* GetMatchmakingWidget(); // Function Scavenger.S_PlayerControllerMainMenu.GetMatchmakingWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_FrontEndCharacterManager* GetFrontEndCharacterManagerFromPlayerController(struct APlayerController* PlayerController); // Function Scavenger.S_PlayerControllerMainMenu.GetFrontEndCharacterManagerFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_FrontEndCharacterManager* GetFrontEndCharacterManager(); // Function Scavenger.S_PlayerControllerMainMenu.GetFrontEndCharacterManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ChangeTeam(int32_t TeamIndex); // Function Scavenger.S_PlayerControllerMainMenu.ChangeTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeReadyState(bool IsReady); // Function Scavenger.S_PlayerControllerMainMenu.ChangeReadyState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AttemptToStartFTUEStage(); // Function Scavenger.S_PlayerControllerMainMenu.AttemptToStartFTUEStage // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTeamCount
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_WidgetTeamCount : US_WidgetMinimal {
	struct FDataTableRowHandle RemainingTeamFormatHandle; // 0x4b8(0x10)
	struct US_RichTextBlock* RemainingTeamsRichText; // 0x4c8(0x08)
	char pad_4D0[0x8]; // 0x4d0(0x08)

	void NotifyRemainingTeamsCountChanged(int32_t remainingTeams); // Function Scavenger.S_WidgetTeamCount.NotifyRemainingTeamsCountChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnAnyTeamStateChanged(); // Function Scavenger.S_WidgetTeamCount.HandleOnAnyTeamStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerHome
// Size: 0x338 (Inherited: 0x288)
struct AS_PlayerHome : AActor {
	bool IsPlayerExtraction; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct FS_InteractableData InteractableData; // 0x290(0x90)
	int32_t InteractableTeam; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<struct AS_PlayerController*> m_playerControllerOwners; // 0x328(0x10)

	void RemovePlayerControllerOwner(struct AS_PlayerController* PlayerController); // Function Scavenger.S_PlayerHome.RemovePlayerControllerOwner // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsPlayerControllerOwner(struct AS_PlayerController* PlayerController); // Function Scavenger.S_PlayerHome.IsPlayerControllerOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasNoPlayerControllerOwners(); // Function Scavenger.S_PlayerHome.HasNoPlayerControllerOwners // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearPlayerControllerOwners(); // Function Scavenger.S_PlayerHome.ClearPlayerControllerOwners // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddPlayerControllerOwner(struct AS_PlayerController* PlayerController); // Function Scavenger.S_PlayerHome.AddPlayerControllerOwner // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerInput
// Size: 0x4f0 (Inherited: 0x3a8)
struct US_PlayerInput : UPlayerInput {
	char pad_3A8[0x148]; // 0x3a8(0x148)
};

// Class Scavenger.S_PlayerRadarComponent
// Size: 0x338 (Inherited: 0xb0)
struct US_PlayerRadarComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRadarFoundEnemy; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEnemyInfosChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMapRadarBegin; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMapRadarEnd; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMapSetIconFadeOut; // 0xf0(0x10)
	struct FS_KRADLRadarSettings PlayerRadarSettings; // 0x100(0x28)
	struct TSet<enum class ES_EnemyInfoType> EnemyInfoTypesToShowInStorms; // 0x128(0x50)
	bool bShowAllUnmannedVehicles; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	float PlayerHotzoneRadius; // 0x17c(0x04)
	float PlayerHotzoneOffsetPercent; // 0x180(0x04)
	float CachedStartKRADLTime; // 0x184(0x04)
	float UpdateEnemyInfoTimeSlice; // 0x188(0x04)
	float RingPaddingSize; // 0x18c(0x04)
	bool bFilterRadarBlipFromMovement; // 0x190(0x01)
	bool bFilterRadarBlipFromCrouching; // 0x191(0x01)
	bool bFilterRadarBlipFromShelterState; // 0x192(0x01)
	char pad_193[0x5]; // 0x193(0x05)
	struct TArray<struct FS_KRADLEnemyInfo> m_currentEnemyInfos; // 0x198(0x10)
	struct TMap<int32_t, int32_t> m_enemyIconIDToImmediateIndex; // 0x1a8(0x50)
	struct TArray<struct FS_KRADLEnemyInfo> m_enemyInfos; // 0x1f8(0x10)
	struct TArray<struct FS_KRADLEnemyInfo> m_previousEnemyInfos; // 0x208(0x10)
	struct TArray<struct FS_KRADLRadarSettings> m_radarSettings; // 0x218(0x10)
	struct TArray<struct FS_KRADLRadarSettings> m_previousRadarSettings; // 0x228(0x10)
	struct TMap<int32_t, int32_t> m_enemyIconIDToMapIconID; // 0x238(0x50)
	struct TMap<int32_t, int32_t> m_radarIDToIndex; // 0x288(0x50)
	struct TMap<int32_t, struct FS_KRADLRadarClientData> m_radarIDToClientData; // 0x2d8(0x50)
	char pad_328[0x10]; // 0x328(0x10)

	void UpdateEnemyInfoCopy(struct FS_KRADLEnemyInfo srcEnemyInfo, struct FS_KRADLEnemyInfo inDstEnemyInfo, struct FS_KRADLEnemyInfo outDstEnemyInfo); // Function Scavenger.S_PlayerRadarComponent.UpdateEnemyInfoCopy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveKRADLRadarSettings(int32_t RadarID); // Function Scavenger.S_PlayerRadarComponent.RemoveKRADLRadarSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnSeatExited(struct USC_Seat* Seat); // Function Scavenger.S_PlayerRadarComponent.OnSeatExited // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnSeatEntered(struct USC_Seat* Seat); // Function Scavenger.S_PlayerRadarComponent.OnSeatEntered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool OnAddEnemyInfo(struct FS_KRADLEnemyInfo inEnemyInfo, struct FS_KRADLEnemyInfo outEnemyInfo); // Function Scavenger.S_PlayerRadarComponent.OnAddEnemyInfo // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyReplicatedRadarSettings(); // Function Scavenger.S_PlayerRadarComponent.NotifyReplicatedRadarSettings // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedEnemyInfos(); // Function Scavenger.S_PlayerRadarComponent.NotifyReplicatedEnemyInfos // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyEnemyInfosChanged_BP(struct TArray<struct FS_KRADLEnemyInfo> enemyInfos); // Function Scavenger.S_PlayerRadarComponent.NotifyEnemyInfosChanged_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsVisibleToKRADLScan(); // Function Scavenger.S_PlayerRadarComponent.IsVisibleToKRADLScan // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool InternalOnAddEnemyInfo(struct FS_KRADLEnemyInfo inEnemyInfo, struct FS_KRADLEnemyInfo outEnemyInfo); // Function Scavenger.S_PlayerRadarComponent.InternalOnAddEnemyInfo // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool InternalIsVisibleToKRADLScan(); // Function Scavenger.S_PlayerRadarComponent.InternalIsVisibleToKRADLScan // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterSet(struct AS_PlayerCharacter* playerCharacter); // Function Scavenger.S_PlayerRadarComponent.HandleOnPlayerCharacterSet // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ClientNotifyKRADLBeginScanning(float StartTime); // Function Scavenger.S_PlayerRadarComponent.ClientNotifyKRADLBeginScanning // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0xffff8008e4a10000
	void AddOrUpdateKRADLRadarSettings(struct FS_KRADLRadarSettings EnemyInfo); // Function Scavenger.S_PlayerRadarComponent.AddOrUpdateKRADLRadarSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddEnemyInfoUnchecked(struct FS_KRADLEnemyInfo EnemyInfo); // Function Scavenger.S_PlayerRadarComponent.AddEnemyInfoUnchecked // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddEnemyInfo(struct FS_KRADLEnemyInfo EnemyInfo); // Function Scavenger.S_PlayerRadarComponent.AddEnemyInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerStart
// Size: 0x2d8 (Inherited: 0x2b8)
struct AS_PlayerStart : APlayerStart {
	char pad_2B8[0xc]; // 0x2b8(0x0c)
	int32_t UsableByTeams; // 0x2c4(0x04)
	struct TArray<struct FS_PlayerSpawnPoint> SpawnPoints; // 0x2c8(0x10)

	struct APawn* SpawnDefaultPawnFor(struct AGameModeBase* GameMode, struct AController* Controller, int32_t SpawnIndex); // Function Scavenger.S_PlayerStart.SpawnDefaultPawnFor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Relinquish(); // Function Scavenger.S_PlayerStart.Relinquish // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsNotUseableByAnyTeam(); // Function Scavenger.S_PlayerStart.IsNotUseableByAnyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsClaimedByTeam(int32_t TeamIndex); // Function Scavenger.S_PlayerStart.IsClaimedByTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsClaimed(); // Function Scavenger.S_PlayerStart.IsClaimed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void InitStartSpot(struct AGameModeBase* GameMode, struct AController* Controller); // Function Scavenger.S_PlayerStart.InitStartSpot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetClaimTeam(); // Function Scavenger.S_PlayerStart.GetClaimTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerController* GetClaimPlayer(); // Function Scavenger.S_PlayerStart.GetClaimPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClaimByTeam(int32_t TeamIndex); // Function Scavenger.S_PlayerStart.ClaimByTeam // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClaimByPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_PlayerStart.ClaimByPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanBeUsedByTeam(int32_t TeamIndex); // Function Scavenger.S_PlayerStart.CanBeUsedByTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerStateBase
// Size: 0x3a0 (Inherited: 0x388)
struct AS_PlayerStateBase : APlayerState {
	bool m_isReady; // 0x388(0x01)
	char pad_389[0x3]; // 0x389(0x03)
	int32_t m_teamIndex; // 0x38c(0x04)
	int32_t m_teamSlotIndex; // 0x390(0x04)
	struct FVector2D m_earlyAccessToPlayerSpawnDataForLevelStreaming; // 0x394(0x08)
	bool bIsPlayerGodMode; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)

	void SetTeamSlotIndex(int32_t teamSlotIndex); // Function Scavenger.S_PlayerStateBase.SetTeamSlotIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTeamIndex(int32_t TeamIndex); // Function Scavenger.S_PlayerStateBase.SetTeamIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetReady(bool IsReady); // Function Scavenger.S_PlayerStateBase.SetReady // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerGodMode(bool isGodMode); // Function Scavenger.S_PlayerStateBase.SetPlayerGodMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedTeamIndex(); // Function Scavenger.S_PlayerStateBase.NotifyReplicatedTeamIndex // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedGodMode(); // Function Scavenger.S_PlayerStateBase.NotifyReplicatedGodMode // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsReady(); // Function Scavenger.S_PlayerStateBase.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsPlayerGodMode(); // Function Scavenger.S_PlayerStateBase.IsPlayerGodMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamSlotIndex(); // Function Scavenger.S_PlayerStateBase.GetTeamSlotIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTeamIndex(); // Function Scavenger.S_PlayerStateBase.GetTeamIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerState
// Size: 0x4f0 (Inherited: 0x3a0)
struct AS_PlayerState : AS_PlayerStateBase {
	struct FMulticastInlineDelegate OnPlayerEscaped; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnPlayerDiedOnPlanet; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnXPEarned; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnDamageDone; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnSupportAdded; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnPlayerGameStateChanged; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnPingsUpdated; // 0x400(0x10)
	struct US_PingConfig* PingConfig; // 0x410(0x08)
	char bIsRogue : 1; // 0x418(0x01)
	char pad_418_1 : 7; // 0x418(0x01)
	char pad_419[0x3]; // 0x419(0x03)
	int32_t RogueRank; // 0x41c(0x04)
	float RogueTimer; // 0x420(0x04)
	float RogueTimerMax; // 0x424(0x04)
	int32_t ReputationMatchTotal; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct TArray<struct FS_PingItemInstance> MotherPings; // 0x430(0x10)
	struct FMulticastInlineDelegate OnPlayerMarkedStateChanged; // 0x440(0x10)
	char m_canRestart : 1; // 0x450(0x01)
	char pad_450_1 : 7; // 0x450(0x01)
	char pad_451[0x3]; // 0x451(0x03)
	int32_t m_currentLevel; // 0x454(0x04)
	int32_t m_playerIndex; // 0x458(0x04)
	bool m_bHasEscaped; // 0x45c(0x01)
	bool m_bHasDiedOnPlanet; // 0x45d(0x01)
	bool m_bIsPartyLeader; // 0x45e(0x01)
	char pad_45F[0x1]; // 0x45f(0x01)
	int32_t m_numShardsExtracted; // 0x460(0x04)
	int32_t m_totalXPEarned; // 0x464(0x04)
	int32_t m_totalDamageDone; // 0x468(0x04)
	int32_t m_totalSupportAmount; // 0x46c(0x04)
	enum class ES_StatsState m_aliveState; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct TMap<uint32_t, int32_t> m_pingRepIDToMapIconID; // 0x478(0x50)
	struct TArray<struct FS_PingItemInstance> Pings; // 0x4c8(0x10)
	enum class ES_PlayerGameState m_playerGameState; // 0x4d8(0x01)
	bool m_bPlayerIsMarked; // 0x4d9(0x01)
	char pad_4DA[0x6]; // 0x4da(0x06)
	struct US_ChallengeStatisticsProcessor* StatisticsProcessorClass; // 0x4e0(0x08)
	struct US_ChallengeStatisticsProcessor* m_challengeStatsProcessor; // 0x4e8(0x08)

	void SetRogueRank(int32_t Value); // Function Scavenger.S_PlayerState.SetRogueRank // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerIsMarked(bool bPlayerIsMarked); // Function Scavenger.S_PlayerState.SetPlayerIsMarked // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerIndex(int32_t Index); // Function Scavenger.S_PlayerState.SetPlayerIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPlayerGameState(enum class ES_PlayerGameState PlayerGameState); // Function Scavenger.S_PlayerState.SetPlayerGameState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNumShardsExtracted(int32_t NumShardsExtracted); // Function Scavenger.S_PlayerState.SetNumShardsExtracted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHasEscaped(bool newHasEscaped); // Function Scavenger.S_PlayerState.SetHasEscaped // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHasDiedOnPlanet(bool newHasDiedOnPlanet); // Function Scavenger.S_PlayerState.SetHasDiedOnPlanet // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCanRestart(bool canRestart); // Function Scavenger.S_PlayerState.SetCanRestart // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAliveState(enum class ES_StatsState aliveState); // Function Scavenger.S_PlayerState.SetAliveState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetPlayerLevel(); // Function Scavenger.S_PlayerState.ResetPlayerLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyXPEarnedChangedReplicated(); // Function Scavenger.S_PlayerState.NotifyXPEarnedChangedReplicated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifySupportAmountChangedReplicated(); // Function Scavenger.S_PlayerState.NotifySupportAmountChangedReplicated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedMarkedPlayerState(); // Function Scavenger.S_PlayerState.NotifyReplicatedMarkedPlayerState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedGameState(enum class ES_PlayerGameState oldPlayerGameState); // Function Scavenger.S_PlayerState.NotifyReplicatedGameState // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPlayerExtracted_BP(int32_t NumShardsExtracted); // Function Scavenger.S_PlayerState.NotifyPlayerExtracted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingsLoaded(); // Function Scavenger.S_PlayerState.NotifyPingsLoaded // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyMotherPingsReplicated(); // Function Scavenger.S_PlayerState.NotifyMotherPingsReplicated // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyHasDiedOnPlanetChangedReplicated(); // Function Scavenger.S_PlayerState.NotifyHasDiedOnPlanetChangedReplicated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyDamageDoneChangedReplicated(); // Function Scavenger.S_PlayerState.NotifyDamageDoneChangedReplicated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void IncrementRogueRank(); // Function Scavenger.S_PlayerState.IncrementRogueRank // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleTimerExpiredForPings(uint32_t timerReplicationKey); // Function Scavenger.S_PlayerState.HandleTimerExpiredForPings // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleTimerExpiredForAutoPings(uint32_t timerReplicationKey); // Function Scavenger.S_PlayerState.HandleTimerExpiredForAutoPings // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleStatsStateChangedBy(struct FS_EventParameterControllerVariant ChangeCausingController, enum class ES_StatsState OldState, enum class ES_StatsState NewState, struct FS_ActorStatsStateChangedParameters ActorStatsStateChangedParameters); // Function Scavenger.S_PlayerState.HandleStatsStateChangedBy // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePingedActorDestroyed(struct AActor* Actor); // Function Scavenger.S_PlayerState.HandlePingedActorDestroyed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	int32_t GetTotalXPEarned(); // Function Scavenger.S_PlayerState.GetTotalXPEarned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalSupportAmount(); // Function Scavenger.S_PlayerState.GetTotalSupportAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalDamageDone(); // Function Scavenger.S_PlayerState.GetTotalDamageDone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetRogueRank(); // Function Scavenger.S_PlayerState.GetRogueRank // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetPlayerIsMarked(); // Function Scavenger.S_PlayerState.GetPlayerIsMarked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetPlayerIndex(); // Function Scavenger.S_PlayerState.GetPlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_PlayerGameState GetPlayerGameState(); // Function Scavenger.S_PlayerState.GetPlayerGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_PingItemInstance> GetPingItems(); // Function Scavenger.S_PlayerState.GetPingItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumShardsExtracted(); // Function Scavenger.S_PlayerState.GetNumShardsExtracted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetHasEscaped(); // Function Scavenger.S_PlayerState.GetHasEscaped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetHasDiedOnPlanet(); // Function Scavenger.S_PlayerState.GetHasDiedOnPlanet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetCurrentLevel(); // Function Scavenger.S_PlayerState.GetCurrentLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ChallengeStatisticsProcessor* GetChallengeStatisticsProcessor(); // Function Scavenger.S_PlayerState.GetChallengeStatisticsProcessor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetCanRestart(); // Function Scavenger.S_PlayerState.GetCanRestart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StatsState GetAliveState(); // Function Scavenger.S_PlayerState.GetAliveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddXPEarned(int32_t newXPEarned); // Function Scavenger.S_PlayerState.AddXPEarned // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddSupportAmount(int32_t newSupportAmount); // Function Scavenger.S_PlayerState.AddSupportAmount // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddDamageDone(int32_t newDamageDone); // Function Scavenger.S_PlayerState.AddDamageDone // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddCharacterPoints(enum class ES_CharacterPointType Type, int32_t Value); // Function Scavenger.S_PlayerState.AddCharacterPoints // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerStateMainMenu
// Size: 0x3a0 (Inherited: 0x3a0)
struct AS_PlayerStateMainMenu : AS_PlayerStateBase {
};

// Class Scavenger.S_PlayNonRepCharacterMontage
// Size: 0x68 (Inherited: 0x30)
struct US_PlayNonRepCharacterMontage : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	struct FMulticastInlineDelegate Interrupted; // 0x40(0x10)
	struct AS_CharacterBase* m_character; // 0x50(0x08)
	char pad_58[0x10]; // 0x58(0x10)

	struct US_PlayNonRepCharacterMontage* PlayNonReplicatedCharacterMontage(struct AS_CharacterBase* Character, struct FS_MontageCatalogueIndex MontageIndex); // Function Scavenger.S_PlayNonRepCharacterMontage.PlayNonReplicatedCharacterMontage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayReplicatedCharacterMontage
// Size: 0x68 (Inherited: 0x30)
struct US_PlayReplicatedCharacterMontage : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	struct FMulticastInlineDelegate Interrupted; // 0x40(0x10)
	struct AS_CharacterBase* m_character; // 0x50(0x08)
	char pad_58[0x10]; // 0x58(0x10)

	struct US_PlayReplicatedCharacterMontage* PlayReplicatedCharacterMontage(struct AS_CharacterBase* Character, struct FS_MontageCatalogueIndex MontageIndex); // Function Scavenger.S_PlayReplicatedCharacterMontage.PlayReplicatedCharacterMontage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayRandomReplicatedCharacterMontage
// Size: 0x60 (Inherited: 0x30)
struct US_PlayRandomReplicatedCharacterMontage : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	struct FMulticastInlineDelegate Interrupted; // 0x40(0x10)
	struct AS_CharacterBase* m_character; // 0x50(0x08)
	char pad_58[0x8]; // 0x58(0x08)

	struct US_PlayRandomReplicatedCharacterMontage* PlayRandomReplicatedCharacterMontage(struct AS_CharacterBase* Character, struct FName MontageKey); // Function Scavenger.S_PlayRandomReplicatedCharacterMontage.PlayRandomReplicatedCharacterMontage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PositionHistoryInterface
// Size: 0x28 (Inherited: 0x28)
struct US_PositionHistoryInterface : UInterface {
};

// Class Scavenger.S_PostMatchManager
// Size: 0x408 (Inherited: 0x28)
struct US_PostMatchManager : UObject {
	struct FMulticastInlineDelegate OnPostMatchPhasesEnded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnPostMatchPhasesStarted; // 0x38(0x10)
	struct TArray<struct US_PostMatchPhase*> m_postMatchPhases; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)
	struct FS_GameReportCardForPlayer m_reportCard; // 0x60(0x118)
	struct FS_RewardPresentation m_playerRewards; // 0x178(0x78)
	char pad_1F0[0x48]; // 0x1f0(0x48)
	struct FS_MatchRecord m_matchRecord; // 0x238(0x180)
	struct TMap<enum class ES_PostMatchContext, struct FS_PostMatchPhases> PostMatchPhases; // 0x3b8(0x50)

	void HandleOnUnseenRewardsRefreshed(struct AS_PlayerControllerBase* Controller, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_PostMatchManager.HandleOnUnseenRewardsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCurrentPhaseStarted(struct US_PostMatchPhase* Phase); // Function Scavenger.S_PostMatchManager.HandleOnCurrentPhaseStarted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCurrentPhaseEnded(struct US_PostMatchPhase* Phase); // Function Scavenger.S_PostMatchManager.HandleOnCurrentPhaseEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool ArePhasesRunning(); // Function Scavenger.S_PostMatchManager.ArePhasesRunning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PostMatchUtility
// Size: 0x28 (Inherited: 0x28)
struct US_PostMatchUtility : UBlueprintFunctionLibrary {

	bool PopulateTestReportCard(struct UObject* Context, struct FS_TestPostMatchSummaryScreenParams Params, struct FS_GameReportCardForPlayer outTestReportCard, struct FS_RewardPresentation outAccountRewards); // Function Scavenger.S_PostMatchUtility.PopulateTestReportCard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetScoreCardForTestReportCard(struct UObject* Context, struct FS_TestPostMatchSummaryScreenParams Params, struct FS_GameReportCardForPlayer reportCard, struct FS_GameScoreCardForPlayer Scorecard); // Function Scavenger.S_PostMatchUtility.GetScoreCardForTestReportCard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetScoreCardForReportCard(struct UObject* Context, struct FS_GameReportCardForPlayer reportCard, struct FS_GameScoreCardForPlayer Scorecard); // Function Scavenger.S_PostMatchUtility.GetScoreCardForReportCard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PriorityAudioChannelDef
// Size: 0x48 (Inherited: 0x30)
struct US_PriorityAudioChannelDef : UDataAsset {
	struct TArray<struct US_PriorityAudioChannelDef*> ChannelOverrides; // 0x30(0x10)
	bool OwnedBySpeaker; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.S_PriorityAudioManagerComponent
// Size: 0x1a0 (Inherited: 0xb0)
struct US_PriorityAudioManagerComponent : UActorComponent {
	struct TArray<struct FS_QueuedEventSettings> PriorityQueue; // 0xb0(0x10)
	struct FS_PlayingEventInfo Playing; // 0xc0(0x78)
	int32_t PlayCount; // 0x138(0x04)
	char pad_13C[0x64]; // 0x13c(0x64)

	void TrimPriorityAudioQueue(struct FS_PriorityAudioTrim Trim); // Function Scavenger.S_PriorityAudioManagerComponent.TrimPriorityAudioQueue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QueuePrioritySequence(struct ULevelSequence* Sequence, struct AActor* EventInstigator, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PriorityAudioManagerComponent.QueuePrioritySequence // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QueuePriorityAudioEvent_ByName(struct FString EventName, struct AActor* EventInstigator, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PriorityAudioManagerComponent.QueuePriorityAudioEvent_ByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void QueuePriorityAudioEvent(struct UAkAudioEvent* Event, struct AActor* EventInstigator, struct FS_PriorityAudioSettings PrioritySettings); // Function Scavenger.S_PriorityAudioManagerComponent.QueuePriorityAudioEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UAkComponent* GetPriorityAkComponent(struct AActor* EventInstigator); // Function Scavenger.S_PriorityAudioManagerComponent.GetPriorityAkComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AdvanceToNext(); // Function Scavenger.S_PriorityAudioManagerComponent.AdvanceToNext // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PrivacyManager
// Size: 0xd0 (Inherited: 0x28)
struct US_PrivacyManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMulticastInlineDelegate OnPlayerBlocked; // 0x38(0x10)
	struct FMulticastInlineDelegate OnPlayerUnblocked; // 0x48(0x10)
	struct FMulticastInlineDelegate OnBlocklistRetrieved; // 0x58(0x10)
	char pad_68[0x68]; // 0x68(0x68)

	void UnblockUser(struct FString PlayerId); // Function Scavenger.S_PrivacyManager.UnblockUser // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnblockAll(); // Function Scavenger.S_PrivacyManager.UnblockAll // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RetrieveBlocklist(); // Function Scavenger.S_PrivacyManager.RetrieveBlocklist // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnConnected(); // Function Scavenger.S_PrivacyManager.OnConnected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsPlayerBlocked(struct FString PlayerId); // Function Scavenger.S_PrivacyManager.IsPlayerBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FString> GetAllBlockedPlayers(); // Function Scavenger.S_PrivacyManager.GetAllBlockedPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void BlockUser(struct FString PlayerId); // Function Scavenger.S_PrivacyManager.BlockUser // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ProceduralLandmark
// Size: 0x298 (Inherited: 0x288)
struct AS_ProceduralLandmark : AActor {
	int32_t RandomSeed; // 0x288(0x04)
	struct FRandomStream RandomStream; // 0x28c(0x08)
	int32_t rank; // 0x294(0x04)

	void SnapSceneComponentsToTerrain(struct TArray<struct USceneComponent*> Components, float rayCeilingOffset, float rayFloorOffset); // Function Scavenger.S_ProceduralLandmark.SnapSceneComponentsToTerrain // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SnapLocationToTerrain(struct FVector WorldLocation, float rayCeilingOffset, float rayFloorOffset, bool bSuccess, struct FHitResult HitResult); // Function Scavenger.S_ProceduralLandmark.SnapLocationToTerrain // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void ShuffleArrayWithStream(struct TArray<int32_t> TargetArray, struct FRandomStream Stream); // Function Scavenger.S_ProceduralLandmark.ShuffleArrayWithStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SeparateSceneComponentsBoundingCylinder2D(struct TArray<struct USceneComponent*> Components, float Radius, float Force, int32_t MaxIterations); // Function Scavenger.S_ProceduralLandmark.SeparateSceneComponentsBoundingCylinder2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SeparateSceneComponents2D(struct TArray<struct USceneComponent*> Components, float Radius, float Force, int32_t MaxIterations); // Function Scavenger.S_ProceduralLandmark.SeparateSceneComponents2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetWorldLocationOnCircle(float Radius, float Angle); // Function Scavenger.S_ProceduralLandmark.GetWorldLocationOnCircle // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetSceneComponentBoundingCylinderRadius(struct USceneComponent* comp); // Function Scavenger.S_ProceduralLandmark.GetSceneComponentBoundingCylinderRadius // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetRelativeLocationOnCircle(float Radius, float Angle); // Function Scavenger.S_ProceduralLandmark.GetRelativeLocationOnCircle // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ProfanityFilter
// Size: 0x88 (Inherited: 0x28)
struct US_ProfanityFilter : UObject {
	char pad_28[0x60]; // 0x28(0x60)
};

// Class Scavenger.S_ProjectileObjectPool
// Size: 0xc8 (Inherited: 0x28)
struct US_ProjectileObjectPool : UObject {
	struct TMap<struct UObject*, struct FS_ActorContainer> AvailableObjects; // 0x28(0x50)
	struct TMap<struct UObject*, struct FS_ActorContainer> InUseObjects; // 0x78(0x50)
};

// Class Scavenger.S_PSOBuildHelper
// Size: 0x80 (Inherited: 0x28)
struct US_PSOBuildHelper : UObject {
	struct AS_PlayerController* m_playerController; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Scavenger.S_RadarBlipComponent
// Size: 0x158 (Inherited: 0xb0)
struct US_RadarBlipComponent : UActorComponent {
	bool bAddOnStartUp; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct AActor* RadarBlipActorOverride; // 0xb8(0x08)
	struct FS_KRADLEnemyInfo EnemyInfo; // 0xc0(0x40)
	char pad_100[0x58]; // 0x100(0x58)

	void RemoveRadarBlipForPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_RadarBlipComponent.RemoveRadarBlipForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveRadarBlipForAllPlayers(); // Function Scavenger.S_RadarBlipComponent.RemoveRadarBlipForAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsVisibleToKRADL(); // Function Scavenger.S_RadarBlipComponent.IsVisibleToKRADL // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FVector GetRadarLocation(); // Function Scavenger.S_RadarBlipComponent.GetRadarLocation // (Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct AActor* GetActor(); // Function Scavenger.S_RadarBlipComponent.GetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddRadarBlipToPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_RadarBlipComponent.AddRadarBlipToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddRadarBlipToAllPlayers(); // Function Scavenger.S_RadarBlipComponent.AddRadarBlipToAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_RadarScannerComponent
// Size: 0x188 (Inherited: 0xb0)
struct US_RadarScannerComponent : UActorComponent {
	struct FS_KRADLRadarSettings KRADLRadarSettings; // 0xb0(0x28)
	bool bIsVisibleToAllPlayers; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct TSet<struct AS_PlayerController*> m_enabledPlayers; // 0xe0(0x50)
	struct TSet<struct AS_PlayerController*> m_cachedPlayersToAddTo; // 0x130(0x50)
	char pad_180[0x8]; // 0x180(0x08)

	void UpdateRadarScannerData(); // Function Scavenger.S_RadarScannerComponent.UpdateRadarScannerData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsActive(bool bInIsActive); // Function Scavenger.S_RadarScannerComponent.SetIsActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveRadarScannerForPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_RadarScannerComponent.RemoveRadarScannerForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveRadarScannerForAllPlayers(); // Function Scavenger.S_RadarScannerComponent.RemoveRadarScannerForAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetRadarLocation(); // Function Scavenger.S_RadarScannerComponent.GetRadarLocation // (Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void AddRadarScannerForPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_RadarScannerComponent.AddRadarScannerForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddRadarScannerForAllPlayers(); // Function Scavenger.S_RadarScannerComponent.AddRadarScannerForAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_RagdollManager
// Size: 0x50 (Inherited: 0x28)
struct US_RagdollManager : UObject {
	char pad_28[0x28]; // 0x28(0x28)
};

// Class Scavenger.S_RecentPlayersManager
// Size: 0x38 (Inherited: 0x28)
struct US_RecentPlayersManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Scavenger.S_RecipeData
// Size: 0xc0 (Inherited: 0x40)
struct US_RecipeData : US_OnlineItemData {
	struct FS_RecipeMetadataHandle MetadataHandle; // 0x40(0x20)
	struct FS_ItemState OutputItemState; // 0x60(0x40)
	struct FS_AbilitySet GrantedAbilities; // 0xa0(0x10)
	struct TArray<struct UGameplayEffect*> GrantedEffects; // 0xb0(0x10)

	struct FName GetRecipeId(); // Function Scavenger.S_RecipeData.GetRecipeId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetMetadata_BP(struct FS_RecipeMetadata outRecipeMetadata); // Function Scavenger.S_RecipeData.GetMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_RecipeLoader
// Size: 0xf8 (Inherited: 0x28)
struct US_RecipeLoader : UObject {
	char pad_28[0x78]; // 0x28(0x78)
	struct FS_LoadedRecipes m_loadedRecipes; // 0xa0(0x50)
	struct TWeakObjectPtr<struct US_OnlineServiceManager> m_onlineServiceManager; // 0xf0(0x08)
};

// Class Scavenger.S_RegionVolume
// Size: 0x2c8 (Inherited: 0x2c0)
struct AS_RegionVolume : AS_AreaVolumeBase {
	int32_t RegionID; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
};

// Class Scavenger.S_ReplicatedActor
// Size: 0x288 (Inherited: 0x288)
struct AS_ReplicatedActor : AActor {
};

// Class Scavenger.S_ReplicatedAlwaysRelevantActor
// Size: 0x288 (Inherited: 0x288)
struct AS_ReplicatedAlwaysRelevantActor : AS_ReplicatedActor {
};

// Class Scavenger.S_ReplicationGraph
// Size: 0x620 (Inherited: 0x4f0)
struct US_ReplicationGraph : UReplicationGraph {
	struct TArray<struct UObject*> SpatializedClasses; // 0x4e8(0x10)
	struct TArray<struct UObject*> NonSpatializedChildClasses; // 0x4f8(0x10)
	struct TArray<struct UObject*> AlwaysRelevantClasses; // 0x508(0x10)
	struct UReplicationGraphNode_GridSpatialization2D* GridNode; // 0x518(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x520(0x08)
	char pad_530[0xe0]; // 0x530(0xe0)
	struct AActor* ReplicatedSlukaBPClass; // 0x610(0x08)
	struct AActor* ReplicatedWarlordBPClass; // 0x618(0x08)
};

// Class Scavenger.S_ReplicationGraphNode_AlwaysRelevant_ForConnection
// Size: 0x288 (Inherited: 0x50)
struct US_ReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode {
	char pad_50[0x228]; // 0x50(0x228)
	struct AActor* m_LastPawn; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
};

// Class Scavenger.S_ReplicationGraphNode_PlayerStateFrequencyLimiter
// Size: 0x80 (Inherited: 0x50)
struct US_ReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode {
	char pad_50[0x30]; // 0x50(0x30)
};

// Class Scavenger.S_ReplicationGraphSpatialVolume
// Size: 0x2c8 (Inherited: 0x2c0)
struct AS_ReplicationGraphSpatialVolume : AVolume {
	float GridSize; // 0x2c0(0x04)
	bool bAllowAutomaticResize; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
};

// Class Scavenger.S_ScoringData
// Size: 0x108 (Inherited: 0x30)
struct US_ScoringData : UDataAsset {
	struct FS_GameScoringMultiplier PersonalTimeSurvived; // 0x30(0x0c)
	struct FS_GameScoringMultiplier PersonalLifestreak; // 0x3c(0x0c)
	struct FS_GameScoringMultiplier PersonalDamageDone; // 0x48(0x0c)
	struct FS_GameScoringMultiplier TeamShardsHarvested; // 0x54(0x0c)
	struct FS_GameScoringMultiplier TeamScrapCollected; // 0x60(0x0c)
	struct FS_GameScoringMultiplier TeamExplorersExtracted; // 0x6c(0x0c)
	struct FS_GameScoringMultiplier TeamObjectivesCompleted; // 0x78(0x0c)
	struct FS_GameScoringMultiplier TeamShardsExtracted; // 0x84(0x0c)
	struct FS_GameScoringMultiplier TeamShardsBanked; // 0x90(0x0c)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FS_GameScoringMap TeamPlacement; // 0xa0(0x58)
	struct FS_GameScoringCondition TeamVictory; // 0xf8(0x08)
	struct FS_GameScoringCondition CollectiveObjectiveComplete; // 0x100(0x08)
};

// Class Scavenger.S_RichTextBlockImageDecorator
// Size: 0x48 (Inherited: 0x30)
struct US_RichTextBlockImageDecorator : URichTextBlockImageDecorator {
	struct UDataTable* PlatformOverrideImageSet; // 0x30(0x08)
	struct FDataTableRowHandle PlatformIconRowHandle; // 0x38(0x10)
};

// Class Scavenger.S_RunnerLeapAbility
// Size: 0x3f0 (Inherited: 0x3b8)
struct US_RunnerLeapAbility : US_GameplayAbility {
	float LeapPredictionTime; // 0x3b8(0x04)
	float LeapOvershootDistance; // 0x3bc(0x04)
	float LeapGravityScale; // 0x3c0(0x04)
	float LeapGroundFriction; // 0x3c4(0x04)
	float LeapArcAngle; // 0x3c8(0x04)
	float LeapMinDistance; // 0x3cc(0x04)
	float LeapMaxDistance; // 0x3d0(0x04)
	float LeapMaxHeightDistance; // 0x3d4(0x04)
	float LeapMinVelocity; // 0x3d8(0x04)
	struct FVector StoredTrajectory; // 0x3dc(0x0c)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	struct FVector GetStoredTrajectory(); // Function Scavenger.S_RunnerLeapAbility.GetStoredTrajectory // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetDesiredTrajectory(struct AS_AICharacter* Character, struct FVector OutTrajectory, bool outIsValid); // Function Scavenger.S_RunnerLeapAbility.GetDesiredTrajectory // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SaveGame
// Size: 0x70 (Inherited: 0x28)
struct US_SaveGame : USaveGame {
	struct FText PlayerAccountName; // 0x28(0x18)
	struct FString testAccountId; // 0x40(0x10)
	struct FString PreferredQueueId; // 0x50(0x10)
	struct FDataTableRowHandle preferredGameMode; // 0x60(0x10)
};

// Class Scavenger.S_ScoreboardRecapPhase
// Size: 0x208 (Inherited: 0x58)
struct US_ScoreboardRecapPhase : US_PostMatchPhase {
	SoftClassProperty ScoreboardSubscreen; // 0x58(0x28)
	struct US_WidgetScoreboardRecapSubscreen* m_scoreboardSubscreen; // 0x80(0x08)
	struct FS_MatchRecord m_matchRecord; // 0x88(0x180)

	void HandleOnSubscreenPhaseEnded(); // Function Scavenger.S_ScoreboardRecapPhase.HandleOnSubscreenPhaseEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleGameResolutionWidgetCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_ScoreboardRecapPhase.HandleGameResolutionWidgetCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ScreenInputManager
// Size: 0x58 (Inherited: 0x28)
struct US_ScreenInputManager : UObject {
	struct FMulticastInlineDelegate OnScreenInputChanged; // 0x28(0x10)
	struct UDataTable* m_inputSettingsTable; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)

	void SetInputActionEnabledState(enum class ES_GameInputActionType InputAction, bool IsEnabled); // Function Scavenger.S_ScreenInputManager.SetInputActionEnabledState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnWidgetRemovedFromNavStack(struct US_WidgetMinimal* RemovedWidget, struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_ScreenInputManager.HandleOnWidgetRemovedFromNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnWidgetAddedToNavStack(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_ScreenInputManager.HandleOnWidgetAddedToNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool isUsingGamepad); // Function Scavenger.S_ScreenInputManager.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_ScreenInputManager* GetScreenInputManagerFromGameInstance(struct UGameInstance* GameInstance); // Function Scavenger.S_ScreenInputManager.GetScreenInputManagerFromGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetNavigationInputDataFromWidget(struct US_WidgetMinimal* Widget, struct TArray<struct FS_NavigationInputData> outNavigationInputData); // Function Scavenger.S_ScreenInputManager.GetNavigationInputDataFromWidget // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetNavigationInputDataFromClass(SoftClassProperty WidgetClass, struct TArray<struct FS_NavigationInputData> outNavigationInputData); // Function Scavenger.S_ScreenInputManager.GetNavigationInputDataFromClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SessionRewardsPhase
// Size: 0x218 (Inherited: 0x58)
struct US_SessionRewardsPhase : US_PostMatchPhase {
	SoftClassProperty SessionRewardsWidget; // 0x58(0x28)
	struct US_WidgetOnlineRewardGrants* m_sessionRewardsWidget; // 0x80(0x08)
	struct FS_GameReportCardForPlayer m_reportCard; // 0x88(0x118)
	struct FS_RewardPresentation m_playerRewards; // 0x1a0(0x78)

	void HandleSessionRewardsWidgetCreated(struct US_WidgetMinimal* subscreen); // Function Scavenger.S_SessionRewardsPhase.HandleSessionRewardsWidgetCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnSubscreenStepEnded(); // Function Scavenger.S_SessionRewardsPhase.HandleOnSubscreenStepEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ShelterInterface
// Size: 0x28 (Inherited: 0x28)
struct US_ShelterInterface : UInterface {

	bool IsCameraInShelter(); // Function Scavenger.S_ShelterInterface.IsCameraInShelter // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_ShelterType GetShelterState(); // Function Scavenger.S_ShelterInterface.GetShelterState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_ShelterVolume
// Size: 0x2c8 (Inherited: 0x2c0)
struct AS_ShelterVolume : AS_AreaVolumeBase {
	enum class ES_ShelterType ShelterType; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
};

// Class Scavenger.S_ShelterVolumeComponent
// Size: 0x4f0 (Inherited: 0x4e0)
struct US_ShelterVolumeComponent : US_VolumeComponent {
	enum class ES_ShelterType ShelterType; // 0x4e0(0x01)
	char pad_4E1[0xf]; // 0x4e1(0x0f)
};

// Class Scavenger.S_ShieldComponent
// Size: 0x560 (Inherited: 0x200)
struct US_ShieldComponent : USceneComponent {
	struct FS_ShieldLevelConfig ShieldConfig[0x5]; // 0x1f8(0x118)
	struct FS_ShieldStateConfig ShieldStateConfig[0x7]; // 0x310(0x150)
	float ShieldBreakingStateDuration; // 0x460(0x04)
	float ShieldRechargeCompleteStateDuration; // 0x464(0x04)
	bool ShellEnabled; // 0x468(0x01)
	bool ImpactsEnabled; // 0x469(0x01)
	struct FFloatInterval ImpactDamageInflictedMinMax; // 0x46c(0x08)
	struct FFloatInterval ImpactInitialSizeMinMax; // 0x474(0x08)
	struct FFloatInterval ImpactFinalSizeMinMax; // 0x47c(0x08)
	struct FFloatInterval ImpactTimeToMaxSizeMinMax; // 0x484(0x08)
	struct FFloatInterval ImpactTimeToFadeOutMinMax; // 0x48c(0x08)
	float ImpactOpacityMin; // 0x494(0x04)
	struct UCurveFloat* ShellAlphaCurve; // 0x498(0x08)
	struct TArray<struct FString> ShellParentMaterialsToExclude; // 0x4a0(0x10)
	float ShieldUpDownStateValueLerpTime; // 0x4b0(0x04)
	struct UMaterialParameterCollection* VFXDirectionalDamageMPC; // 0x4b8(0x08)
	struct UMaterialParameterCollection* VFXDirectionalDamageFadeMPC; // 0x4c0(0x08)
	float UpdateRateInSeconds; // 0x4c8(0x04)
	char pad_4CE[0x2]; // 0x4ce(0x02)
	struct FMulticastInlineDelegate OnSetShieldLevel; // 0x4d0(0x10)
	enum class ES_ShieldState ServerShieldState; // 0x4e0(0x01)
	char pad_4E1[0x8]; // 0x4e1(0x08)
	enum class ES_ShieldLevel ShieldLevelBase; // 0x4e9(0x01)
	enum class ES_ShieldLevel ShieldLevel; // 0x4ea(0x01)
	char pad_4EB[0x15]; // 0x4eb(0x15)
	int32_t ShellId; // 0x500(0x04)
	char pad_504[0x5c]; // 0x504(0x5c)

	void StatsComponent_OnShieldRegenStart(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_ShieldComponent.StatsComponent_OnShieldRegenStart // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void StatsComponent_OnShieldRegenEnd(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_ShieldComponent.StatsComponent_OnShieldRegenEnd // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void StatsComponent_OnShieldRebootEnd(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_ShieldComponent.StatsComponent_OnShieldRebootEnd // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void StatsComponent_OnShieldBreak(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_ShieldComponent.StatsComponent_OnShieldBreak // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void SetShieldState(enum class ES_ShieldState NewState); // Function Scavenger.S_ShieldComponent.SetShieldState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetShieldLevelOverride(enum class ES_ShieldLevel NewLevel); // Function Scavenger.S_ShieldComponent.SetShieldLevelOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetShieldLevel(enum class ES_ShieldLevel NewLevel); // Function Scavenger.S_ShieldComponent.SetShieldLevel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetShellMaterial(struct UMaterialInterface* NewShellMaterial); // Function Scavenger.S_ShieldComponent.SetShellMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOvershieldActive(bool Overshield); // Function Scavenger.S_ShieldComponent.SetOvershieldActive // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldState(); // Function Scavenger.S_ShieldComponent.NotifyReplicatedShieldState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldLevel(); // Function Scavenger.S_ShieldComponent.NotifyReplicatedShieldLevel // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsShieldActive(); // Function Scavenger.S_ShieldComponent.IsShieldActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HideVFXOnClient(bool NewHidden); // Function Scavenger.S_ShieldComponent.HideVFXOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_ShieldState GetShieldState(); // Function Scavenger.S_ShieldComponent.GetShieldState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetShieldLevelAudioSwitch(); // Function Scavenger.S_ShieldComponent.GetShieldLevelAudioSwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_ShieldLevel GetShieldLevel(); // Function Scavenger.S_ShieldComponent.GetShieldLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ShieldComponent* GetShieldComponentOfActor(struct AActor* Actor); // Function Scavenger.S_ShieldComponent.GetShieldComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetOvershieldActive(); // Function Scavenger.S_ShieldComponent.GetOvershieldActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EnableShell(bool Enable); // Function Scavenger.S_ShieldComponent.EnableShell // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EnableImpacts(bool Enable); // Function Scavenger.S_ShieldComponent.EnableImpacts // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearShieldLevelOverride(); // Function Scavenger.S_ShieldComponent.ClearShieldLevelOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SkinningManagerComponent
// Size: 0x2c0 (Inherited: 0xb0)
struct US_SkinningManagerComponent : UActorComponent {
	bool EnableSmelting; // 0xb0(0x01)
	bool FreeMasterResources; // 0xb1(0x01)
	char pad_B2[0x6]; // 0xb2(0x06)
	struct UMaterialInterface* SmeltingLiveMaterial; // 0xb8(0x08)
	struct UMaterialInterface* SmeltingLiveMaterial_TwoSided; // 0xc0(0x08)
	struct UMaterialInterface* SmeltingLiveMaterial_Emissive; // 0xc8(0x08)
	struct UMaterialInterface* SmeltingLiveMaterial_Masked; // 0xd0(0x08)
	struct UMaterialInterface* SmeltingLiveMaterial_SnowV2; // 0xd8(0x08)
	struct UMaterialInterface* SmeltingLiveMaterial_SnowV2_TwoSided; // 0xe0(0x08)
	int32_t DiffuseLiveSize; // 0xe8(0x04)
	int32_t NormalLiveSize; // 0xec(0x04)
	int32_t AORMLiveSize; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FString> MaterialsSupportingSnowV2; // 0xf8(0x10)
	struct TMap<int32_t, struct FS_Skin> Skins; // 0x108(0x50)
	char pad_158[0x50]; // 0x158(0x50)
	struct TMap<struct FName, struct UMaterialInterface*> MaterialCache; // 0x1a8(0x50)
	struct TArray<struct FS_SkinMaterial> SmeltedMaterialCache; // 0x1f8(0x10)
	char pad_208[0xa0]; // 0x208(0xa0)
	struct TArray<struct UTextureRenderTarget2D*> RenderTargetPool; // 0x2a8(0x10)
	char pad_2B8[0x8]; // 0x2b8(0x08)

	void SkinSmelt(int32_t SkinId); // Function Scavenger.S_SkinningManagerComponent.SkinSmelt // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinSetMaterialBySlotName(int32_t SkinId, struct FName MaterialSlotName, struct TSoftObjectPtr<struct UMaterialInterface> Material); // Function Scavenger.S_SkinningManagerComponent.SkinSetMaterialBySlotName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinSetMaterialAllSlots(int32_t SkinId, struct TSoftObjectPtr<struct UMaterialInterface> Material); // Function Scavenger.S_SkinningManagerComponent.SkinSetMaterialAllSlots // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SkinSetDirty(int32_t SkinId); // Function Scavenger.S_SkinningManagerComponent.SkinSetDirty // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SkinRemoveSkinFromCompoundSkin(int32_t CompoundSkinId, int32_t SkinId); // Function Scavenger.S_SkinningManagerComponent.SkinRemoveSkinFromCompoundSkin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinRecreateWithNewMesh(int32_t SkinId, struct AActor* BaseObject, struct UMeshComponent* TargetMeshComp); // Function Scavenger.S_SkinningManagerComponent.SkinRecreateWithNewMesh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetVectorParameterBySlotName(int32_t SkinId, struct FName MaterialSlotName, struct FName ParameterName, struct FLinearColor VectorValue, bool bImmediate); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetVectorParameterBySlotName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetVectorParameterAllSlots(int32_t SkinId, struct FName ParameterName, struct FLinearColor VectorValue, bool bImmediate); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetVectorParameterAllSlots // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetTextureParameterBySlotName(int32_t SkinId, struct FName MaterialSlotName, struct FName ParameterName, struct TSoftObjectPtr<struct UTexture2D> TextureValue); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetTextureParameterBySlotName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetTextureParameterAllSlots(int32_t SkinId, struct FName ParameterName, struct TSoftObjectPtr<struct UTexture2D> TextureValue); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetTextureParameterAllSlots // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetScalarParameterBySlotName(int32_t SkinId, struct FName MaterialSlotName, struct FName ParameterName, float ScalarValue, bool bImmediate); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetScalarParameterBySlotName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SkinMaterialSetScalarParameterAllSlots(int32_t SkinId, struct FName ParameterName, float ScalarValue, bool bImmediate); // Function Scavenger.S_SkinningManagerComponent.SkinMaterialSetScalarParameterAllSlots // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SkinGetSkinIdsFromCompoundId(int32_t CompoundId, struct TArray<int32_t> OutSkinIds); // Function Scavenger.S_SkinningManagerComponent.SkinGetSkinIdsFromCompoundId // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t SkinFindIdByMeshComponent(struct UMeshComponent* MeshComponent); // Function Scavenger.S_SkinningManagerComponent.SkinFindIdByMeshComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t SkinFindIdByCompoundIdAndMeshName(int32_t CompoundId, struct FName MeshName); // Function Scavenger.S_SkinningManagerComponent.SkinFindIdByCompoundIdAndMeshName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t SkinFindIdByCompoundIdAndMeshComponent(int32_t CompoundId, struct UMeshComponent* MeshComponent); // Function Scavenger.S_SkinningManagerComponent.SkinFindIdByCompoundIdAndMeshComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SkinDeleteCompoundSkin(int32_t CompoundSkinId); // Function Scavenger.S_SkinningManagerComponent.SkinDeleteCompoundSkin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SkinDeleteByMeshComponent(struct UMeshComponent* MeshComponent); // Function Scavenger.S_SkinningManagerComponent.SkinDeleteByMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SkinDelete(int32_t SkinId); // Function Scavenger.S_SkinningManagerComponent.SkinDelete // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t SkinCreateCompoundSkinFromSkinIds(struct TArray<int32_t> SkinIds); // Function Scavenger.S_SkinningManagerComponent.SkinCreateCompoundSkinFromSkinIds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t SkinCreate(struct AActor* BaseObject, struct UMeshComponent* TargetMeshComp); // Function Scavenger.S_SkinningManagerComponent.SkinCreate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SkyUtilityBPFL
// Size: 0x28 (Inherited: 0x28)
struct US_SkyUtilityBPFL : UBlueprintFunctionLibrary {

	enum class ES_SkyMaterialOverride GetSkyMaterial(); // Function Scavenger.S_SkyUtilityBPFL.GetSkyMaterial // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_Skyvengers
// Size: 0x2c00 (Inherited: 0x288)
struct AS_Skyvengers : AActor {
	float PresetBlendAmount; // 0x288(0x04)
	float ShelteredAmount; // 0x28c(0x04)
	float TimeOfDay; // 0x290(0x04)
	float LastShelterTransitionTime_Native; // 0x294(0x04)
	struct FS_ToDIntervalSettingsNative CurrentCachedPresetSetting; // 0x298(0x1470)
	struct FS_ToDIntervalSettingsNative NextCachedPresetSetting; // 0x1708(0x1470)
	struct US_TimeOfDayAndWeatherComponent* TimeComponent; // 0x2b78(0x08)
	struct UStaticMeshComponent* DomeBuddy; // 0x2b80(0x08)
	struct UStaticMeshComponent* DomeBuddyHalfRes; // 0x2b88(0x08)
	struct UMaterialInstanceDynamic* DomeMID; // 0x2b90(0x08)
	struct UMaterialInstanceDynamic* SkyBasePassMID; // 0x2b98(0x08)
	struct USkyLightComponent* SkyLight; // 0x2ba0(0x08)
	struct UMaterialParameterCollection* MPCAtmospheriocState; // 0x2ba8(0x08)
	struct UMaterialParameterCollection* MPCGlobalMatProps; // 0x2bb0(0x08)
	struct UDirectionalLightComponent* DirectionalLight; // 0x2bb8(0x08)
	struct UExponentialHeightFogComponent* ExponentialHeightFog; // 0x2bc0(0x08)
	struct UPostProcessComponent* PostProcessComponent; // 0x2bc8(0x08)
	float StormAmount; // 0x2bd0(0x04)
	int32_t CurrentPresetIndex; // 0x2bd4(0x04)
	char pad_2BD8[0x4]; // 0x2bd8(0x04)
	float TargetSunIntensity; // 0x2bdc(0x04)
	float TargetSkylightIntensity; // 0x2be0(0x04)
	char pad_2BE4[0x4]; // 0x2be4(0x04)
	struct TArray<struct FS_ToDIntervalDefinitionNative> TimePresetsNative; // 0x2be8(0x10)
	enum class ES_ShelterType CurrentShelterType; // 0x2bf8(0x01)
	enum class ES_ShelterType LastShelterType; // 0x2bf9(0x01)
	char pad_2BFA[0x6]; // 0x2bfa(0x06)

	void UpdateHeldValues(); // Function Scavenger.S_Skyvengers.UpdateHeldValues // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetStormState_Native(); // Function Scavenger.S_Skyvengers.SetStormState_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetStormMask_Native(struct UMaterialParameterCollection* VectorParameterCollection, bool EnableDebug); // Function Scavenger.S_Skyvengers.SetStormMask_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetShelterState_Native(); // Function Scavenger.S_Skyvengers.SetShelterState_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetCurrentIntervalIndex_Native(); // Function Scavenger.S_Skyvengers.SetCurrentIntervalIndex_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_ToDIntervalPropOverride_Vector SelectVectorFromShelter(struct FS_ToDIntervalProp_Vector Value, enum class ES_ShelterType shelterValue, bool inStorm); // Function Scavenger.S_Skyvengers.SelectVectorFromShelter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ToDIntervalPropOverride_Rotator SelectRotatorFromShelter(struct FS_ToDIntervalProp_Rotator Value, enum class ES_ShelterType shelterValue, bool inStorm); // Function Scavenger.S_Skyvengers.SelectRotatorFromShelter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ToDIntervalPropOverride_Float SelectFloatFromShelter(struct FS_ToDIntervalProp_Float Value, enum class ES_ShelterType shelterValue, bool inStorm); // Function Scavenger.S_Skyvengers.SelectFloatFromShelter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_ToDIntervalPropOverride_Color SelectColorFromShelter(struct FS_ToDIntervalProp_Color Value, enum class ES_ShelterType shelterValue, bool inStorm); // Function Scavenger.S_Skyvengers.SelectColorFromShelter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetVectorAtShelterNative(struct FS_ToDIntervalProp_Vector Value, enum class ES_ShelterType shelterValue); // Function Scavenger.S_Skyvengers.GetVectorAtShelterNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FRotator GetRotatorAtShelterNative(struct FS_ToDIntervalProp_Rotator Value, enum class ES_ShelterType shelterValue); // Function Scavenger.S_Skyvengers.GetRotatorAtShelterNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetOverridenVectorNative(struct FS_ToDIntervalProp_Vector Current, struct FS_ToDIntervalProp_Vector Next); // Function Scavenger.S_Skyvengers.GetOverridenVectorNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FRotator GetOverridenRotatorNative(struct FS_ToDIntervalProp_Rotator Current, struct FS_ToDIntervalProp_Rotator Next); // Function Scavenger.S_Skyvengers.GetOverridenRotatorNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetOverridenFloatNative(struct FS_ToDIntervalProp_Float Current, struct FS_ToDIntervalProp_Float Next); // Function Scavenger.S_Skyvengers.GetOverridenFloatNative // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetOverridenColorNative(struct FS_ToDIntervalProp_Color Current, struct FS_ToDIntervalProp_Color Next); // Function Scavenger.S_Skyvengers.GetOverridenColorNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetFloatAtShelterNative(struct FS_ToDIntervalProp_Float Value, enum class ES_ShelterType shelterValue); // Function Scavenger.S_Skyvengers.GetFloatAtShelterNative // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FLinearColor GetColorAtShelterNative(struct FS_ToDIntervalProp_Color Value, enum class ES_ShelterType shelterValue); // Function Scavenger.S_Skyvengers.GetColorAtShelterNative // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubAIClientRenderTargetManager
// Size: 0xe8 (Inherited: 0x98)
struct US_SocialHubAIClientRenderTargetManager : UMorpheusRenderTargetManager {
	char pad_98[0x50]; // 0x98(0x50)
};

// Class Scavenger.S_SocialHubAIClientNetworkLevelPrioritiser
// Size: 0x48 (Inherited: 0x48)
struct US_SocialHubAIClientNetworkLevelPrioritiser : UNetworkLevelPrioritiser {
};

// Class Scavenger.S_SocialHubAIClientConnection
// Size: 0x1738 (Inherited: 0x1738)
struct AS_SocialHubAIClientConnection : AMorpheusClientConnection {
};

// Class Scavenger.S_SocialHubAIClientEntityObject
// Size: 0x400 (Inherited: 0x398)
struct AS_SocialHubAIClientEntityObject : AEntityObject {
	float FindGroundTraceHeight; // 0x398(0x04)
	float FindGroundTraceLength; // 0x39c(0x04)
	float GroundSpawnZOffset; // 0x3a0(0x04)
	int32_t TotalGroundCheckRetries; // 0x3a4(0x04)
	float FractionOfNpcsToAutokill; // 0x3a8(0x04)
	float TimeBeforeNpcAutokill; // 0x3ac(0x04)
	float TimeBetweenForceSpawnCheck; // 0x3b0(0x04)
	struct FVector ForcedSpawnLocation; // 0x3b4(0x0c)
	struct TArray<struct AS_SocialHubNpcEntityObject*> NpcTypes; // 0x3c0(0x10)
	struct TArray<struct AS_SocialHubNpcEntityObject*> Npcs; // 0x3d0(0x10)
	int32_t OriginalSwarmSize; // 0x3e0(0x04)
	char pad_3E4[0x1c]; // 0x3e4(0x1c)

	void ServerReportAIClientAvailable(); // Function Scavenger.S_SocialHubAIClientEntityObject.ServerReportAIClientAvailable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerForceSwarmSpawn(); // Function Scavenger.S_SocialHubAIClientEntityObject.ServerForceSwarmSpawn // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_SocialHubNpcEntityObject*> GetOwnedNpcs(); // Function Scavenger.S_SocialHubAIClientEntityObject.GetOwnedNpcs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubAISpawner
// Size: 0x78 (Inherited: 0x28)
struct US_SocialHubAISpawner : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct AS_SocialHubSingletonObject* SingletonObject; // 0x40(0x08)
	struct TArray<struct AS_SocialHubAIClientEntityObject*> AvailableAIClients; // 0x48(0x10)
	struct TArray<struct AS_SocialHubAIClientEntityObject*> UnavailableAIClients; // 0x58(0x10)
	char pad_68[0x10]; // 0x68(0x10)

	void SpawnAllAvailableNpcsInLargeArea(int32_t npcType, struct FVector areaCentre, float AreaRadius, float swarmRadius); // Function Scavenger.S_SocialHubAISpawner.SpawnAllAvailableNpcsInLargeArea // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestSingleNpcSwarm(int32_t npcType, struct FVector centre, float Radius, bool bFromUnderground); // Function Scavenger.S_SocialHubAISpawner.RequestSingleNpcSwarm // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequestRoughNumberOfNpcs(int32_t numberOfNpcs, int32_t npcType, struct FVector centre, float Radius, bool bFromUnderground); // Function Scavenger.S_SocialHubAISpawner.RequestRoughNumberOfNpcs // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetAIClientSwarmSize(); // Function Scavenger.S_SocialHubAISpawner.GetAIClientSwarmSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubBalancing
// Size: 0x50 (Inherited: 0x28)
struct US_SocialHubBalancing : UObject {
	struct UCurveFloat* MILEDurationModifier; // 0x28(0x08)
	struct UCurveFloat* PhaseDataTargetModifierByPlayerCount; // 0x30(0x08)
	struct UCurveFloat* DataShardModifierByPlayerCount; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)

	float GetTotalModifier(struct UCurveFloat* Curve, struct FString Name); // Function Scavenger.S_SocialHubBalancing.GetTotalModifier // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPhaseDataTargetModifier(); // Function Scavenger.S_SocialHubBalancing.GetPhaseDataTargetModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDataShardModifier(); // Function Scavenger.S_SocialHubBalancing.GetDataShardModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCurveModifier(struct UCurveFloat* Curve, struct FString Name); // Function Scavenger.S_SocialHubBalancing.GetCurveModifier // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubBouncerConnection
// Size: 0x1738 (Inherited: 0x1738)
struct AS_SocialHubBouncerConnection : AMorpheusClientConnection {
};

// Class Scavenger.S_SocialHubBouncerEntityObject
// Size: 0x458 (Inherited: 0x398)
struct AS_SocialHubBouncerEntityObject : AMorpheusActor {
	struct UInstancedStaticMeshComponent* InstancedStaticMeshComponent; // 0x398(0x08)
	bool TrackingPaused; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	float RenderDistance; // 0x3a4(0x04)
	struct AMorpheusActor* SelectedActor; // 0x3a8(0x08)
	enum class ES_BouncerViewMode ViewMode; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	int32_t SelectedIndex; // 0x3b4(0x04)
	char pad_3B8[0xa0]; // 0x3b8(0xa0)

	void ShowActor(struct AMorpheusActor* Actor); // Function Scavenger.S_SocialHubBouncerEntityObject.ShowActor // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SelectActor(struct AMorpheusActor* Actor); // Function Scavenger.S_SocialHubBouncerEntityObject.SelectActor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Select(int32_t Index); // Function Scavenger.S_SocialHubBouncerEntityObject.Select // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HideActor(struct AMorpheusActor* Actor); // Function Scavenger.S_SocialHubBouncerEntityObject.HideActor // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DisconnectOwnerOfActor(struct AMorpheusActor* Actor); // Function Scavenger.S_SocialHubBouncerEntityObject.DisconnectOwnerOfActor // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Deselect(); // Function Scavenger.S_SocialHubBouncerEntityObject.Deselect // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DeleteActor(struct AMorpheusActor* Actor); // Function Scavenger.S_SocialHubBouncerEntityObject.DeleteActor // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubCinematicPlayer
// Size: 0x2f8 (Inherited: 0x288)
struct AS_SocialHubCinematicPlayer : AActor {
	float SkipHoldTime; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FMulticastInlineDelegate OnReset; // 0x290(0x10)
	struct FMulticastInlineDelegate OnFinished; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnSkipUpdate; // 0x2b0(0x10)
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct ALevelSequenceActor* m_sequenceActor; // 0x2d0(0x08)
	char pad_2D8[0x8]; // 0x2d8(0x08)
	struct ULevelSequence* m_outroCinematic; // 0x2e0(0x08)
	char pad_2E8[0x10]; // 0x2e8(0x10)

	void HandleStopSkip(); // Function Scavenger.S_SocialHubCinematicPlayer.HandleStopSkip // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleStartupComplete(); // Function Scavenger.S_SocialHubCinematicPlayer.HandleStartupComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleStartSkip(); // Function Scavenger.S_SocialHubCinematicPlayer.HandleStartSkip // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePhaseLoaded(struct AS_SocialHubPhaseEntityObject* Phase); // Function Scavenger.S_SocialHubCinematicPlayer.HandlePhaseLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCinematicFinished(); // Function Scavenger.S_SocialHubCinematicPlayer.HandleCinematicFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubCrowdAudioComponent
// Size: 0xf0 (Inherited: 0xb0)
struct US_SocialHubCrowdAudioComponent : UActorComponent {
	struct FDelegate AudioStateDelegate; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct US_SocialHubCrowdAudioData* CrowdAudioData; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct AEntityObject* OwningEntityObject; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)

	void SetCrowdAudioData(struct US_SocialHubCrowdAudioData* InCrowdAudioData); // Function Scavenger.S_SocialHubCrowdAudioComponent.SetCrowdAudioData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct AEntityObject* GetOwningEntityObject(); // Function Scavenger.S_SocialHubCrowdAudioComponent.GetOwningEntityObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_SocialHubCrowdAudioData* GetCrowdAudioData(); // Function Scavenger.S_SocialHubCrowdAudioComponent.GetCrowdAudioData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubCrowdAudioData
// Size: 0x58 (Inherited: 0x30)
struct US_SocialHubCrowdAudioData : UDataAsset {
	struct FName CrowdID; // 0x30(0x08)
	float MinimumCrowdMemberDistanceForDirectionalBins; // 0x38(0x04)
	float MaximumCrowdMemberDistanceForDirectionalBins; // 0x3c(0x04)
	float FarThresholdDistance; // 0x40(0x04)
	float MaximumCrowdMemberDistanceForOneShotClusters; // 0x44(0x04)
	float MaxOneShotClusterWidth; // 0x48(0x04)
	float OneShotClusterCreationWindowInSeconds; // 0x4c(0x04)
	int32_t MaxOneShotClustersInCreationForOneShotState; // 0x50(0x04)
	bool IgnoreMaxClusterWidthWhenMaxClustersInCreationReached; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Scavenger.S_SocialHubCrowdAudioStatsCollector
// Size: 0x2a8 (Inherited: 0x288)
struct AS_SocialHubCrowdAudioStatsCollector : AActor {
	struct FMulticastInlineDelegate OnStatsUpdatedEvent; // 0x288(0x10)
	struct TArray<struct FS_CrowdStats> Crowds; // 0x298(0x10)

	struct AS_SocialHubCrowdAudioStatsCollector* TryGetCrowdAudioStatsCollector(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubCrowdAudioStatsCollector.TryGetCrowdAudioStatsCollector // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsCrowdAudioEnabled(); // Function Scavenger.S_SocialHubCrowdAudioStatsCollector.IsCrowdAudioEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_CrowdStats> GetCrowdStats(); // Function Scavenger.S_SocialHubCrowdAudioStatsCollector.GetCrowdStats // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CrowdStatsForDirection CalculateStatsForDirectionFromBins(struct TArray<struct FS_CrowdStatsDirectionalBin> DirectionalBins, float StartHeadingAngleInRadians, float EndHeadingAngleInRadians); // Function Scavenger.S_SocialHubCrowdAudioStatsCollector.CalculateStatsForDirectionFromBins // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubDataBanker
// Size: 0x478 (Inherited: 0x398)
struct AS_SocialHubDataBanker : AMorpheusActor {
	struct FMulticastInlineDelegate OnDataBankUpdated; // 0x398(0x10)
	struct FS_MILEDataBank m_dataBank; // 0x3a8(0x20)
	char pad_3C8[0xb0]; // 0x3c8(0xb0)

	void UploadData(struct AS_SocialHubPlayerEntityObject* playerEntityObject, int32_t Amount); // Function Scavenger.S_SocialHubDataBanker.UploadData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDataTarget(int32_t targetScore); // Function Scavenger.S_SocialHubDataBanker.SetDataTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetBankedPhaseData(); // Function Scavenger.S_SocialHubDataBanker.ResetBankedPhaseData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveDataFromPhaseTotal(int32_t Amount); // Function Scavenger.S_SocialHubDataBanker.RemoveDataFromPhaseTotal // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverrideTotalPhaseData(int32_t dataTotal); // Function Scavenger.S_SocialHubDataBanker.OverrideTotalPhaseData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_DataBank(); // Function Scavenger.S_SocialHubDataBanker.OnRep_DataBank // (Final|Native|Private|Const) // @ game+0xffff8008e4a10000
	bool HasReachedDataTarget(); // Function Scavenger.S_SocialHubDataBanker.HasReachedDataTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalPhaseData(); // Function Scavenger.S_SocialHubDataBanker.GetTotalPhaseData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTotalMILEData(); // Function Scavenger.S_SocialHubDataBanker.GetTotalMILEData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetDataTarget(); // Function Scavenger.S_SocialHubDataBanker.GetDataTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDataPercentForPhase(); // Function Scavenger.S_SocialHubDataBanker.GetDataPercentForPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_MILEDataBank GetDataBank(); // Function Scavenger.S_SocialHubDataBanker.GetDataBank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubDropshipEntityObject
// Size: 0x3d8 (Inherited: 0x398)
struct AS_SocialHubDropshipEntityObject : AEntityObject {
	char pad_398[0x18]; // 0x398(0x18)
	float EventTimeAfterLiftoff; // 0x3b0(0x04)
	bool bShouldUpdateNavmesh; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
	struct AActor* DropshipClass; // 0x3b8(0x08)
	char RocketState; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	float TakeoffStartTime; // 0x3c4(0x04)
	char GangwayLowered : 1; // 0x3c8(0x01)
	char ResetRepNotify : 1; // 0x3c8(0x01)
	char HatchOpenFore : 1; // 0x3c8(0x01)
	char HatchOpenAft : 1; // 0x3c8(0x01)
	char pad_3C8_4 : 4; // 0x3c8(0x01)
	char DropshipState; // 0x3c9(0x01)
	char pad_3CA[0x2]; // 0x3ca(0x02)
	float ServerDescentStartTime; // 0x3cc(0x04)
	float ServerLandingStartTime; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)

	void Takeoff(); // Function Scavenger.S_SocialHubDropshipEntityObject.Takeoff // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetDropshipState(char NewState); // Function Scavenger.S_SocialHubDropshipEntityObject.SetDropshipState // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_TakeoffStartTime(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_TakeoffStartTime // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_ServerLandingStartTime(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_ServerLandingStartTime // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_ServerDescentStartTime(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_ServerDescentStartTime // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_RocketState(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_RocketState // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_ResetRepNotify(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_ResetRepNotify // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_HatchOpenFore(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_HatchOpenFore // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_HatchOpenAft(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_HatchOpenAft // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_GangwayLowered(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_GangwayLowered // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_DropshipState(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnRep_DropshipState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnDropshipStateChangedBP(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnDropshipStateChangedBP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnDropshipActorSpawned(); // Function Scavenger.S_SocialHubDropshipEntityObject.OnDropshipActorSpawned // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct AActor* GetDropshipActor(); // Function Scavenger.S_SocialHubDropshipEntityObject.GetDropshipActor // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubDropshipSpawnPoint
// Size: 0x2b0 (Inherited: 0x2b0)
struct AS_SocialHubDropshipSpawnPoint : ANavigationObjectBase {
};

// Class Scavenger.S_SocialHubEmoteCounter
// Size: 0x2a0 (Inherited: 0x288)
struct AS_SocialHubEmoteCounter : AActor {
	struct UDataTable* m_emoteDataTable; // 0x288(0x08)
	char pad_290[0x10]; // 0x290(0x10)
};

// Class Scavenger.S_SocialHubFormationController
// Size: 0x628 (Inherited: 0x5f0)
struct AS_SocialHubFormationController : APlayerController {
	char pad_5F0[0x38]; // 0x5f0(0x38)
};

// Class Scavenger.S_SocialHubFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_SocialHubFunctionLibrary : UBlueprintFunctionLibrary {

	void StopCharacterSlideAndDodge(struct US_CharacterMovementComponent* MovementComponent); // Function Scavenger.S_SocialHubFunctionLibrary.StopCharacterSlideAndDodge // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterStartupHandler(struct UObject* WorldContextObject, struct FDelegate OnStartupComplete); // Function Scavenger.S_SocialHubFunctionLibrary.RegisterStartupHandler // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_SocialHubTelemetryManager* GetSocialHubTelemetryManager(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetSocialHubTelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_SocialHubSingletonObject* GetSingletonObject(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetSingletonObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetServerWorldTimeSecondsFromWorld(struct UWorld* World); // Function Scavenger.S_SocialHubFunctionLibrary.GetServerWorldTimeSecondsFromWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetServerWorldTimeSeconds(struct AEntityObject* EntityObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetServerWorldTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_SocialHubModularMILEEntityObject* GetModularMILEEntityObject(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetModularMILEEntityObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_SocialHubDataBanker* GetDataBanker(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetDataBanker // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_SocialHubBalancing* GetBalancing(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetBalancing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct AScavengersHubCharacterObject*> GetAllClientAuthoritativeCharacters(struct UObject* WorldContextObject); // Function Scavenger.S_SocialHubFunctionLibrary.GetAllClientAuthoritativeCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EmitGlobalEvent(struct UObject* WorldContextObject, struct FString Name, struct FString argument); // Function Scavenger.S_SocialHubFunctionLibrary.EmitGlobalEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubGameMode
// Size: 0x670 (Inherited: 0x388)
struct AS_SocialHubGameMode : AGameMode {
	struct US_InteractionManagerComponent* InteractionManager; // 0x388(0x08)
	struct TMap<struct FString, struct US_SocialHubBalancing*> BalancingClasses; // 0x390(0x50)
	struct TArray<struct FPlayerTypeInfo> PlayerTypes; // 0x3e0(0x10)
	struct US_SocialHubPlayerComponent* SocialHubPlayerComponentClass; // 0x3f0(0x08)
	struct AMorpheusActor* BouncerClass; // 0x3f8(0x08)
	struct US_SocialHubStreamerComponent* SocialHubStreamerComponentClass; // 0x400(0x08)
	struct AS_SocialHubAIClientEntityObject* AIClientEntityObject; // 0x408(0x08)
	struct AMorpheusMain* MorpheusMainClass; // 0x410(0x08)
	struct UDataTable* EmoteMontageDataTable; // 0x418(0x08)
	float LockedTimeOfDay; // 0x420(0x04)
	int32_t MaximumAttackersPerPlayer; // 0x424(0x04)
	struct TArray<struct FS_PickupTypeData> PickupTypes; // 0x428(0x10)
	struct AS_SocialHubDropshipEntityObject* DropshipEntityObjectClass; // 0x438(0x08)
	struct AS_SocialHubDataBanker* DataBankerClass; // 0x440(0x08)
	float DropshipStartTimeOffset; // 0x448(0x04)
	float DropshipCountdown; // 0x44c(0x04)
	int32_t NumberOfDropshipsToSpawn; // 0x450(0x04)
	int32_t DropshipsPerWave; // 0x454(0x04)
	float MinTimeBetweenIndividualShips; // 0x458(0x04)
	float MaxTimeBetweenIndividualShips; // 0x45c(0x04)
	float TimeBetweenDropshipWaves; // 0x460(0x04)
	float WaveTimeVariance; // 0x464(0x04)
	float TimeBeforeTakeoff; // 0x468(0x04)
	float MaxTakeOffTimeVariance; // 0x46c(0x04)
	struct US_WidgetMinimal* DefaultExtractionWidgetClass; // 0x470(0x08)
	struct US_WidgetMessagePrompt* ConnectionErrorWidgetClass; // 0x478(0x08)
	struct UStaticMesh* LowResCharacterMesh; // 0x480(0x08)
	struct UStaticMesh* LowResGlowStickMesh; // 0x488(0x08)
	struct AScavengersHubIsmActor* LowResGlowStickISM; // 0x490(0x08)
	struct AEntityObject* SingletonEntityObjectClass; // 0x498(0x08)
	struct AS_SocialHubSingletonObject* SingletonObject; // 0x4a0(0x08)
	struct US_SocialHubTelemetryManager* SocialHubTelemetryManager; // 0x4a8(0x08)
	struct AS_SocialHubCinematicPlayer* CinematicPlayer; // 0x4b0(0x08)
	struct AS_SocialHubEmoteCounter* EmoteCounter; // 0x4b8(0x08)
	char pad_4C0[0x10]; // 0x4c0(0x10)
	struct TArray<struct FDataTableRowHandle> ExtractionRewards; // 0x4d0(0x10)
	struct TArray<struct FDataTableRowHandle> ParticipationRewards; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnExplorerCountUpdated; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnTotalAIKilledUpdated; // 0x500(0x10)
	char pad_510[0xd8]; // 0x510(0xd8)
	struct AS_SocialHubModularMILEEntityObject* m_socialHubMILEEntity; // 0x5e8(0x08)
	struct AS_SocialHubDataBanker* m_dataBanker; // 0x5f0(0x08)
	struct US_SocialHubStartupHandlerProcessor* m_startupHandlerProcessor; // 0x5f8(0x08)
	struct US_GameModeRewardProcessor* m_rewardProcessor; // 0x600(0x08)
	struct US_SocialHubSimPlayerLoginHandler* m_simPlayerLoginHandler; // 0x608(0x08)
	char pad_610[0x50]; // 0x610(0x50)
	struct US_SocialHubBalancing* m_balancing; // 0x660(0x08)
	char pad_668[0x8]; // 0x668(0x08)

	void RetryConnectToServer(); // Function Scavenger.S_SocialHubGameMode.RetryConnectToServer // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyNoIntroCinematic(); // Function Scavenger.S_SocialHubGameMode.NotifyNoIntroCinematic // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBeforeIntroCinematic(); // Function Scavenger.S_SocialHubGameMode.NotifyBeforeIntroCinematic // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAfterIntroCinematic(); // Function Scavenger.S_SocialHubGameMode.NotifyAfterIntroCinematic // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleStartupComplete(); // Function Scavenger.S_SocialHubGameMode.HandleStartupComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct AS_SocialHubModularMILEEntityObject* GetSocialHubModularMILEEntity(); // Function Scavenger.S_SocialHubGameMode.GetSocialHubModularMILEEntity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsConnectionWeak(); // Function Scavenger.S_SocialHubGameMode.GetIsConnectionWeak // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_SocialHubDataBanker* GetDataBanker(); // Function Scavenger.S_SocialHubGameMode.GetDataBanker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EmitGlobalEvent(struct FString Name, struct FString argument); // Function Scavenger.S_SocialHubGameMode.EmitGlobalEvent // (Final|Exec|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubGrenadeIDComponent
// Size: 0xc0 (Inherited: 0xb0)
struct US_SocialHubGrenadeIDComponent : UActorComponent {
	struct AEntityObject* SourceEntity; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)
};

// Class Scavenger.S_SocialHubGrenadeDamageComponent
// Size: 0x100 (Inherited: 0xb0)
struct US_SocialHubGrenadeDamageComponent : UActorComponent {
	struct TMap<struct AEntityObject*, struct FGrenadeSetWrapper> PreviousGrenadeDamageTaken; // 0xb0(0x50)
};

// Class Scavenger.S_SocialHubHUD
// Size: 0x600 (Inherited: 0x5e8)
struct AS_SocialHubHUD : AS_HUD {
	struct US_UMGHUD* RegularPlayerHUDClass; // 0x5e8(0x08)
	struct US_UMGHUD* MessengerHUDClass; // 0x5f0(0x08)
	int32_t NumMessengerEmotes; // 0x5f8(0x04)
	int32_t NumPlayerEmotes; // 0x5fc(0x04)

	void ToggleHUD(); // Function Scavenger.S_SocialHubHUD.ToggleHUD // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandlePossessedPawnChanged(struct APawn* Pawn, struct AController* Controller); // Function Scavenger.S_SocialHubHUD.HandlePossessedPawnChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubLandscapeProxySelector
// Size: 0x2a0 (Inherited: 0x288)
struct AS_SocialHubLandscapeProxySelector : AActor {
	float maxDrawDistance; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct AActor* OriginalActor; // 0x290(0x08)
	struct AActor* ProxyActor; // 0x298(0x08)
};

// Class Scavenger.S_SocialHubModularMILEEntityObject
// Size: 0x438 (Inherited: 0x398)
struct AS_SocialHubModularMILEEntityObject : AEntityObject {
	struct UDataTable* MILEPhaseDataTable; // 0x398(0x08)
	struct ULevelSequence* GenericIntroCinematic; // 0x3a0(0x08)
	struct TArray<struct AS_SocialHubPlayerVolume*> GenericSpawnVolumes; // 0x3a8(0x10)
	float GenericRespawnDelay; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct FMulticastInlineDelegate OnActivePhaseStateUpdated; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnPhaseLoaded; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnBeginPhaseUnloading; // 0x3e0(0x10)
	struct AS_SocialHubSingletonObject* m_singletonObject; // 0x3f0(0x08)
	char pad_3F8[0x4]; // 0x3f8(0x04)
	struct FName m_phaseToLoad; // 0x3fc(0x08)
	bool m_isServerReady; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct AS_SocialHubPhaseEntityObject* m_activePhase; // 0x408(0x08)
	char pad_410[0x28]; // 0x410(0x28)

	void RequestSpawn(struct FString accessCode, bool IsSimulatedPlayer); // Function Scavenger.S_SocialHubModularMILEEntityObject.RequestSpawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void OnRep_IsServerReady(); // Function Scavenger.S_SocialHubModularMILEEntityObject.OnRep_IsServerReady // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_ActivePhaseName(); // Function Scavenger.S_SocialHubModularMILEEntityObject.OnRep_ActivePhaseName // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnPhaseSublevelUnloaded(int32_t LoadId); // Function Scavenger.S_SocialHubModularMILEEntityObject.OnPhaseSublevelUnloaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnPhaseSublevelLoaded(int32_t LoadId); // Function Scavenger.S_SocialHubModularMILEEntityObject.OnPhaseSublevelLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyPhaseUnloadingStarted(); // Function Scavenger.S_SocialHubModularMILEEntityObject.NotifyPhaseUnloadingStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseUnloadingFinished(); // Function Scavenger.S_SocialHubModularMILEEntityObject.NotifyPhaseUnloadingFinished // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseLoadingStarted(struct FName phaseName); // Function Scavenger.S_SocialHubModularMILEEntityObject.NotifyPhaseLoadingStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseLoadingFinished(); // Function Scavenger.S_SocialHubModularMILEEntityObject.NotifyPhaseLoadingFinished // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool HasPhase(); // Function Scavenger.S_SocialHubModularMILEEntityObject.HasPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleStartupComplete(); // Function Scavenger.S_SocialHubModularMILEEntityObject.HandleStartupComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePhaseStateUpdated(enum class ES_SocialHubPhaseState State); // Function Scavenger.S_SocialHubModularMILEEntityObject.HandlePhaseStateUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	enum class ES_SocialHubMILEState GetMILEState(); // Function Scavenger.S_SocialHubModularMILEEntityObject.GetMILEState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_SocialHubPhaseEntityObject* GetCurrentPhase(); // Function Scavenger.S_SocialHubModularMILEEntityObject.GetCurrentPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.ScavengersHubNpcBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UScavengersHubNpcBlueprintLibrary : UBlueprintFunctionLibrary {

	struct AScavengersHubCharacterObject* GetClosestPlayer(struct UObject* WorldContext, struct AScavengersHubCharacterObject* CharacterClass, struct FVector From); // Function Scavenger.ScavengersHubNpcBlueprintLibrary.GetClosestPlayer // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubAttemptMeleeAction
// Size: 0x48 (Inherited: 0x30)
struct US_SocialHubAttemptMeleeAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Finished; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)

	struct US_SocialHubAttemptMeleeAction* AttemptMeleeWithNotify(struct AS_SocialHubNpcEntityObject* EntityObject); // Function Scavenger.S_SocialHubAttemptMeleeAction.AttemptMeleeWithNotify // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubNpcEntityObject
// Size: 0x4a8 (Inherited: 0x3b8)
struct AS_SocialHubNpcEntityObject : AScavengersHubCharacterObject {
	struct US_SocialHubGrenadeDamageComponent* GrenadeDamageComponent; // 0x3b8(0x08)
	struct US_SocialHubCrowdAudioComponent* CrowdAudioComponent; // 0x3c0(0x08)
	struct FString HealthLiveConfigName; // 0x3c8(0x10)
	struct FString DamageDealtLiveConfigName; // 0x3d8(0x10)
	float PoiseDamageMultiplier; // 0x3e8(0x04)
	float TimeBetweenTargetUpdates; // 0x3ec(0x04)
	float MaximumChaseDistanceFromHome; // 0x3f0(0x04)
	float MaximumPatrolDistanceFromHome; // 0x3f4(0x04)
	struct UAnimMontage* meleeMontage; // 0x3f8(0x08)
	float DefaultMeleeDamageDealtToPlayers; // 0x400(0x04)
	float TimeBeforeMeleeDamageDealt; // 0x404(0x04)
	float MaximumMeleeHorizontalDistance; // 0x408(0x04)
	float MaximumMeleeVerticalDistance; // 0x40c(0x04)
	float MaximumMeleeAngle; // 0x410(0x04)
	float RunSpeedThresholdSquared; // 0x414(0x04)
	float WalkSpeedThresholdSquared; // 0x418(0x04)
	struct FVector2D HomeLocation; // 0x41c(0x08)
	char pad_424[0x4]; // 0x424(0x04)
	struct APawn* NpcClass; // 0x428(0x08)
	struct UStaticMesh* LowResNpcMesh; // 0x430(0x08)
	struct UStaticMesh* MediumResNpcMesh; // 0x438(0x08)
	uint64_t bSpawningFromGround; // 0x440(0x08)
	char pad_448[0x4]; // 0x448(0x04)
	float Health; // 0x44c(0x04)
	char pad_450[0x4]; // 0x450(0x04)
	float Poise; // 0x454(0x04)
	uint64_t bIsDead; // 0x458(0x08)
	struct AS_SocialHubPlayerEntityObject* CurrentTarget; // 0x460(0x08)
	struct FMulticastInlineDelegate OnTargetChanged; // 0x468(0x10)
	char pad_478[0x18]; // 0x478(0x18)
	struct US_SocialHubAttemptMeleeAction* CurrentMeleeAction; // 0x490(0x08)
	char pad_498[0x10]; // 0x498(0x10)

	void ServerRequestTargetPlayer(struct AS_SocialHubPlayerEntityObject* playerEntityObject); // Function Scavenger.S_SocialHubNpcEntityObject.ServerRequestTargetPlayer // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xffff8008e4a10000
	void ServerNotifyFinishedTargeting(struct AS_SocialHubPlayerEntityObject* playerEntityObject); // Function Scavenger.S_SocialHubNpcEntityObject.ServerNotifyFinishedTargeting // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xffff8008e4a10000
	void PlayerDealtGrenadeDamage(struct AS_SocialHubPlayerEntityObject* playerEntityObject, int32_t grenadeID, float Damage); // Function Scavenger.S_SocialHubNpcEntityObject.PlayerDealtGrenadeDamage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void PlayerDealtDamageAIClient(struct AS_SocialHubPlayerEntityObject* playerEntityObject, float Damage); // Function Scavenger.S_SocialHubNpcEntityObject.PlayerDealtDamageAIClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void OnStatChange(enum class ES_StatType StatType, enum class ES_StatChangeCauseType CauseType, struct AActor* SourceActor, struct AController* InstigatorController, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_SocialHubNpcEntityObject.OnStatChange // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_Poise(); // Function Scavenger.S_SocialHubNpcEntityObject.OnRep_Poise // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_Health(); // Function Scavenger.S_SocialHubNpcEntityObject.OnRep_Health // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_BackgroundIsDead(); // Function Scavenger.S_SocialHubNpcEntityObject.OnRep_BackgroundIsDead // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnPostTakePointDamage(struct AActor* DamagedActor, float DamageAmount, struct FPointDamageEvent PointDamageEvent, struct FHitResult HitResult, struct AActor* CauseActor, bool Critical); // Function Scavenger.S_SocialHubNpcEntityObject.OnPostTakePointDamage // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void MulticastPlayMeleeMontage(); // Function Scavenger.S_SocialHubNpcEntityObject.MulticastPlayMeleeMontage // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0xffff8008e4a10000
	void GetCrowdAudioState(struct US_SocialHubCrowdAudioComponent* Component, struct FName OutLoopingState, struct FName OutOneShotState, float OutOneShotStartTime); // Function Scavenger.S_SocialHubNpcEntityObject.GetCrowdAudioState // (Final|Native|Static|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void DetectAndDamagePlayers(); // Function Scavenger.S_SocialHubNpcEntityObject.DetectAndDamagePlayers // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void DealDamageToAI(struct UDamageType* DamageTypeClass, float Damage); // Function Scavenger.S_SocialHubNpcEntityObject.DealDamageToAI // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientNotifyTargetRequestRejected(struct AS_SocialHubPlayerEntityObject* playerEntityObject, int32_t correctNumberOfAttackers); // Function Scavenger.S_SocialHubNpcEntityObject.ClientNotifyTargetRequestRejected // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0xffff8008e4a10000
	void CancelAnyAttacks(); // Function Scavenger.S_SocialHubNpcEntityObject.CancelAnyAttacks // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubNpcWaveSpawnVolume
// Size: 0x2a0 (Inherited: 0x288)
struct AS_SocialHubNpcWaveSpawnVolume : AActor {
	struct UBoxComponent* BoxComponent; // 0x288(0x08)
	int32_t NumberOfRows; // 0x290(0x04)
	int32_t NumberOfSwarmsPerRow; // 0x294(0x04)
	float TimeBetweenRowSpawns; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Scavenger.S_SocialHubPhaseEntityObject
// Size: 0x478 (Inherited: 0x398)
struct AS_SocialHubPhaseEntityObject : AEntityObject {
	struct FName phaseName; // 0x398(0x08)
	struct FText Description; // 0x3a0(0x18)
	float Duration; // 0x3b8(0x04)
	bool IsTimedPhase; // 0x3bc(0x01)
	char pad_3BD[0x3]; // 0x3bd(0x03)
	struct TArray<struct AS_SocialHubPlayerVolume*> SpawnVolumes; // 0x3c0(0x10)
	struct US_WidgetMinimal* MessengerControlWidget; // 0x3d0(0x08)
	float DefaultRespawnDelay; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct ULevelSequence* IntroCinematic; // 0x3e0(0x08)
	struct TArray<struct FS_SocialHubOutroData> Outros; // 0x3e8(0x10)
	bool IntroCinematicUnlocked; // 0x3f8(0x01)
	char pad_3F9[0x1f]; // 0x3f9(0x1f)
	struct US_MessengerAbilitySet* DefaultAbilitySet; // 0x418(0x08)
	struct TArray<struct FS_SocialHubPhaseAbilityAssignment> MessengerAbilityAssignments; // 0x420(0x10)
	struct FMulticastInlineDelegate OnPhaseUnloading; // 0x430(0x10)
	char pad_440[0x18]; // 0x440(0x18)
	struct AS_SocialHubSingletonObject* m_singletonObject; // 0x458(0x08)
	enum class ES_SocialHubPhaseState m_phaseState; // 0x460(0x01)
	char pad_461[0x1]; // 0x461(0x01)
	bool m_timeExpired; // 0x462(0x01)
	char pad_463[0x1]; // 0x463(0x01)
	float m_phaseEndTime; // 0x464(0x04)
	float m_phaseTimeRemainingOnPause; // 0x468(0x04)
	char pad_46C[0xc]; // 0x46c(0x0c)

	void RespawnPlayerAt(struct FTransform Transform); // Function Scavenger.S_SocialHubPhaseEntityObject.RespawnPlayerAt // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RespawnPlayer(); // Function Scavenger.S_SocialHubPhaseEntityObject.RespawnPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_TimeExpired(); // Function Scavenger.S_SocialHubPhaseEntityObject.OnRep_TimeExpired // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_PhaseState(); // Function Scavenger.S_SocialHubPhaseEntityObject.OnRep_PhaseState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_CinematicUnlocked(); // Function Scavenger.S_SocialHubPhaseEntityObject.OnRep_CinematicUnlocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyPlayerDied(); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPlayerDied // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseTimeOverridden(float SecondsRemaining); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseTimeOverridden // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseTimeExpired(); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseTimeExpired // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseStarted(bool isLateJoiner); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseStarted // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseResumed(); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseResumed // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhasePaused(bool isLateJoiner); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhasePaused // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseLoaded(); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseLoaded // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPhaseEnded(bool isLateJoiner); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyPhaseEnded // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBeginUnloadingPhase(bool isLateJoiner); // Function Scavenger.S_SocialHubPhaseEntityObject.NotifyBeginUnloadingPhase // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastPhaseTimeOverridden(float SecondsRemaining); // Function Scavenger.S_SocialHubPhaseEntityObject.MulticastPhaseTimeOverridden // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xffff8008e4a10000
	bool IsPhaseActive(); // Function Scavenger.S_SocialHubPhaseEntityObject.IsPhaseActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTimeLeftInPhase(); // Function Scavenger.S_SocialHubPhaseEntityObject.GetTimeLeftInPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SocialHubPhaseState GetPhaseState(); // Function Scavenger.S_SocialHubPhaseEntityObject.GetPhaseState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ExtractPlayers(struct TArray<struct AS_SocialHubPlayerEntityObject*> Players, struct FName outroName); // Function Scavenger.S_SocialHubPhaseEntityObject.ExtractPlayers // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ExtractAllPlayers(struct FName outroName); // Function Scavenger.S_SocialHubPhaseEntityObject.ExtractAllPlayers // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EndPhase(); // Function Scavenger.S_SocialHubPhaseEntityObject.EndPhase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPickupBase
// Size: 0x2a0 (Inherited: 0x288)
struct AS_SocialHubPickupBase : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	float ServerPickupRadius; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct UBoxComponent* Trigger; // 0x298(0x08)

	void OnPickupReset_BP(); // Function Scavenger.S_SocialHubPickupBase.OnPickupReset_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPickupConfirmed_BP(struct AS_PlayerCharacter* playerCharacter); // Function Scavenger.S_SocialHubPickupBase.OnPickupConfirmed_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnEntityObjectPostSpawnActor_BP(); // Function Scavenger.S_SocialHubPickupBase.OnEntityObjectPostSpawnActor_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnBeginTriggerOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Scavenger.S_SocialHubPickupBase.OnBeginTriggerOverlap // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	int32_t GetScrapValue(); // Function Scavenger.S_SocialHubPickupBase.GetScrapValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetScaleForItemValue(int32_t ItemValue); // Function Scavenger.S_SocialHubPickupBase.GetScaleForItemValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetDataValue(); // Function Scavenger.S_SocialHubPickupBase.GetDataValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPickupEntityObject
// Size: 0x3a8 (Inherited: 0x398)
struct AS_SocialHubPickupEntityObject : AEntityObject {
	char pad_398[0x8]; // 0x398(0x08)
	uint64_t PackedBackgroundValue; // 0x3a0(0x08)
};

// Class Scavenger.S_SocialHubPickupSpawner
// Size: 0x30 (Inherited: 0x28)
struct US_SocialHubPickupSpawner : UObject {
	struct AS_SocialHubSingletonObject* SingletonObject; // 0x28(0x08)

	void SpawnPickup(int32_t Type, float RespawnTime, struct FTransform Transform); // Function Scavenger.S_SocialHubPickupSpawner.SpawnPickup // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SpawnAllPickups(); // Function Scavenger.S_SocialHubPickupSpawner.SpawnAllPickups // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPickupSpawnPoint
// Size: 0x2c0 (Inherited: 0x2b0)
struct AS_SocialHubPickupSpawnPoint : ANavigationObjectBase {
	int32_t PickupType; // 0x2b0(0x04)
	bool bOverrideRespawnTime; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float RespawnTimeOverride; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
};

// Class Scavenger.S_SocialHubPlayerClassData
// Size: 0x50 (Inherited: 0x30)
struct US_SocialHubPlayerClassData : UDataAsset {
	struct AS_PlayerCharacter* PlayerClass; // 0x30(0x08)
	struct US_PlayerClassData* PlayerClassData; // 0x38(0x08)
	struct UStaticMesh* MediumResCharacterMesh; // 0x40(0x08)
	float ImpostorScaleY; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Scavenger.S_SocialHubPlayerClientConnection
// Size: 0x1738 (Inherited: 0x1738)
struct AS_SocialHubPlayerClientConnection : AMorpheusClientConnection {

	void HandleStartupComplete(); // Function Scavenger.S_SocialHubPlayerClientConnection.HandleStartupComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPlayerComponent
// Size: 0xe8 (Inherited: 0xb0)
struct US_SocialHubPlayerComponent : UActorComponent {
	float PlayerMeleeKnockBackImpulseStrength; // 0xb0(0x04)
	float PlayerMeleeKnockBackImpulsePitch; // 0xb4(0x04)
	struct TWeakObjectPtr<struct AS_SocialHubPlayerEntityObject> playerEntityObject; // 0xb8(0x08)
	struct FMulticastInlineDelegate OnRespawned; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnDamageTaken; // 0xd0(0x10)
	char pad_E0[0x8]; // 0xe0(0x08)

	void Respawn(); // Function Scavenger.S_SocialHubPlayerComponent.Respawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayEndEventMusic(); // Function Scavenger.S_SocialHubPlayerComponent.PlayEndEventMusic // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnScrapScoreUpdated(int32_t NewScrapScore); // Function Scavenger.S_SocialHubPlayerComponent.OnScrapScoreUpdated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnScheduledEventsUpdated(struct TArray<struct FScheduledEvent> ScheduledEvents); // Function Scavenger.S_SocialHubPlayerComponent.OnScheduledEventsUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerMissedDropship(struct AS_SocialHubDropshipEntityObject* Dropship); // Function Scavenger.S_SocialHubPlayerComponent.OnPlayerMissedDropship // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerKilledZombie(struct FVector DeathPosition); // Function Scavenger.S_SocialHubPlayerComponent.OnPlayerKilledZombie // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerExtracted(struct AS_SocialHubDropshipEntityObject* Dropship); // Function Scavenger.S_SocialHubPlayerComponent.OnPlayerExtracted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerDied(); // Function Scavenger.S_SocialHubPlayerComponent.OnPlayerDied // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnDataUpdated(int32_t NewData); // Function Scavenger.S_SocialHubPlayerComponent.OnDataUpdated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnClientAuthorityGained(struct AS_PlayerController* PlayerController); // Function Scavenger.S_SocialHubPlayerComponent.OnClientAuthorityGained // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDied(); // Function Scavenger.S_SocialHubPlayerComponent.NotifyDied // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBeforeRespawn(); // Function Scavenger.S_SocialHubPlayerComponent.NotifyBeforeRespawn // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAfterRespawn(); // Function Scavenger.S_SocialHubPlayerComponent.NotifyAfterRespawn // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsPlayerBasedOnActor(struct AActor* OtherActor); // Function Scavenger.S_SocialHubPlayerComponent.IsPlayerBasedOnActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FixupPlayerInput(struct AS_PlayerController* PlayerController); // Function Scavenger.S_SocialHubPlayerComponent.FixupPlayerInput // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FinishRespawn(); // Function Scavenger.S_SocialHubPlayerComponent.FinishRespawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ExtractToMenu(); // Function Scavenger.S_SocialHubPlayerComponent.ExtractToMenu // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DealDamageToPlayer(struct UDamageType* DamageTypeClass, float Damage); // Function Scavenger.S_SocialHubPlayerComponent.DealDamageToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPlayerEntityObject
// Size: 0x4a8 (Inherited: 0x3b8)
struct AS_SocialHubPlayerEntityObject : AScavengersHubCharacterObject {
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct US_SocialHubGrenadeDamageComponent* GrenadeDamageComponent; // 0x3c0(0x08)
	struct US_SocialHubCrowdAudioComponent* CrowdAudioComponent; // 0x3c8(0x08)
	struct TArray<struct FDataTableRowHandle> AvailableItems; // 0x3d0(0x10)
	struct TArray<struct FDataTableRowHandle> AvailableThrowables; // 0x3e0(0x10)
	uint64_t PlayerClassIndex; // 0x3f0(0x08)
	struct FString PlayerName; // 0x3f8(0x10)
	bool IsKicked; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
	struct FMulticastInlineDelegate PlayerHasBeenKicked; // 0x410(0x10)
	int32_t CurrentScrap; // 0x420(0x04)
	int32_t CurrentData; // 0x424(0x04)
	int32_t PrimaryWeaponIndex; // 0x428(0x04)
	int32_t SecondaryWeaponIndex; // 0x42c(0x04)
	int32_t ThrowableWeaponIndex; // 0x430(0x04)
	enum class ES_WeaponSlot EquippedWeaponSlot; // 0x434(0x01)
	char pad_435[0x3]; // 0x435(0x03)
	int32_t NumberOfAttackers; // 0x438(0x04)
	char pad_43C[0x14]; // 0x43c(0x14)
	bool CanBeTargeted; // 0x450(0x01)
	bool HasBoarded; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	int32_t OutroCinematicIndex; // 0x454(0x04)
	struct TWeakObjectPtr<struct AActor> Banner; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)
	uint64_t CurrentEmote; // 0x468(0x08)
	char pad_470[0x38]; // 0x470(0x38)

	void SetPlayerClassIndexBeforeSpawn(int32_t InPlayerClassIndex); // Function Scavenger.S_SocialHubPlayerEntityObject.SetPlayerClassIndexBeforeSpawn // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOnlinePlayerInfo(struct FString PlayerId, struct FString ClientTelemetrySessionId, int32_t ClientMatchIndex); // Function Scavenger.S_SocialHubPlayerEntityObject.SetOnlinePlayerInfo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xffff8008e4a10000
	void SetCurrentData(int32_t NewData); // Function Scavenger.S_SocialHubPlayerEntityObject.SetCurrentData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerTryPickup(struct AS_SocialHubPickupEntityObject* PickupEntityObject); // Function Scavenger.S_SocialHubPlayerEntityObject.ServerTryPickup // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerHandleMeleeHit(struct AEntityObject* HitEntityObject, float Damage); // Function Scavenger.S_SocialHubPlayerEntityObject.ServerHandleMeleeHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	bool RequestTargetPlayer(); // Function Scavenger.S_SocialHubPlayerEntityObject.RequestTargetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayerDamagedNpc(struct AS_SocialHubNpcEntityObject* NPC, float Damage); // Function Scavenger.S_SocialHubPlayerEntityObject.PlayerDamagedNpc // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void OnWeaponSlotChanged(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* OldValue, struct AS_WeaponBase* NewValue); // Function Scavenger.S_SocialHubPlayerEntityObject.OnWeaponSlotChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_ThrowableWeaponIndex(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_ThrowableWeaponIndex // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_SecondaryWeaponIndex(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_SecondaryWeaponIndex // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_PrimaryWeaponIndex(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_PrimaryWeaponIndex // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_PlayerName(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_PlayerName // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_OutroCinematicIndex(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_OutroCinematicIndex // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_IsKicked(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_IsKicked // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_EquippedWeaponSlot(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_EquippedWeaponSlot // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_CurrentScrap(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_CurrentScrap // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_CurrentEmote(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_CurrentEmote // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_CurrentData(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnRep_CurrentData // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnPreDealDamageEvent(struct AActor* DamagedActor, float UnmodifiedDamageAmount, float ArmorDamageAmount, float HealthDamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, char DamageModifiersApplied, bool Critical); // Function Scavenger.S_SocialHubPlayerEntityObject.OnPreDealDamageEvent // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnPositionSnapped_BP(struct FVector NewPosition, int32_t CurrentLodLevel); // Function Scavenger.S_SocialHubPlayerEntityObject.OnPositionSnapped_BP // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnPlayerDowned(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_SocialHubPlayerEntityObject.OnPlayerDowned // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnMantle(struct FVector StartPos, int32_t primitiveID, struct FVector initialRelativeLedgeLocation, struct FTransform initialLedgeTransform, struct FVector ledgeNormal, int32_t mantleIdx, bool fenceMantle, bool crouchToFit, int32_t ConditionalMontageIdx); // Function Scavenger.S_SocialHubPlayerEntityObject.OnMantle // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void OnCurrentlySelectedWeaponSlotChanged(enum class ES_WeaponSlot previousWeaponSlot, enum class ES_WeaponSlot currentWeaponSlot); // Function Scavenger.S_SocialHubPlayerEntityObject.OnCurrentlySelectedWeaponSlotChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnBackgroundPositionSnapped(struct FVector NewPosition); // Function Scavenger.S_SocialHubPlayerEntityObject.OnBackgroundPositionSnapped // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void OnAuthoritativeClientEmoteEnd(); // Function Scavenger.S_SocialHubPlayerEntityObject.OnAuthoritativeClientEmoteEnd // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnAttackEvent(enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_SocialHubPlayerEntityObject.OnAttackEvent // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void MulticastSpawnThrowable(int32_t ThrowableIndex, int32_t grenadeID, struct FVector Position, struct FVector Velocity); // Function Scavenger.S_SocialHubPlayerEntityObject.MulticastSpawnThrowable // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0xffff8008e4a10000
	void MulticastDoAttack(); // Function Scavenger.S_SocialHubPlayerEntityObject.MulticastDoAttack // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void MulticastConfirmPickup(struct AS_SocialHubPickupEntityObject* PickupEntityObject); // Function Scavenger.S_SocialHubPlayerEntityObject.MulticastConfirmPickup // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void InternalHandleMeleeHit(struct AEntityObject* EntityObject, struct FVector SourceLocation); // Function Scavenger.S_SocialHubPlayerEntityObject.InternalHandleMeleeHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	struct FString GetPlayerID(); // Function Scavenger.S_SocialHubPlayerEntityObject.GetPlayerID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsAlive(); // Function Scavenger.S_SocialHubPlayerEntityObject.GetIsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetCrowdAudioState(struct US_SocialHubCrowdAudioComponent* Component, struct FName OutLoopingState, struct FName OutOneShotState, float OutOneShotStartTime); // Function Scavenger.S_SocialHubPlayerEntityObject.GetCrowdAudioState // (Final|Native|Static|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void FinishTargetingPlayer(); // Function Scavenger.S_SocialHubPlayerEntityObject.FinishTargetingPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FinishRespawn(); // Function Scavenger.S_SocialHubPlayerEntityObject.FinishRespawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Die(); // Function Scavenger.S_SocialHubPlayerEntityObject.Die // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientTakeGrenadeDamage(struct AS_SocialHubPlayerEntityObject* sourcePlayer, int32_t grenadeID, float Damage); // Function Scavenger.S_SocialHubPlayerEntityObject.ClientTakeGrenadeDamage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientRejectPickup(struct AS_SocialHubPickupEntityObject* PickupEntityObject); // Function Scavenger.S_SocialHubPlayerEntityObject.ClientRejectPickup // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientReceiveServerTelemetryIds(struct FGuid ServerTelemetrySessionId, struct FGuid MatchID, int32_t ServerMatchIndex, int32_t ServerPlayerIndex); // Function Scavenger.S_SocialHubPlayerEntityObject.ClientReceiveServerTelemetryIds // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0xffff8008e4a10000
	void ClientReceiveReportCard(struct FS_GameReportCardForPlayer playerReportCard); // Function Scavenger.S_SocialHubPlayerEntityObject.ClientReceiveReportCard // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
	void ClientKnockBackFromMelee(struct FVector SourcePosition); // Function Scavenger.S_SocialHubPlayerEntityObject.ClientKnockBackFromMelee // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0xffff8008e4a10000
	bool AreGrenadesEnabled(); // Function Scavenger.S_SocialHubPlayerEntityObject.AreGrenadesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void AIClientNotifyKilledByPlayer(struct AS_SocialHubNpcEntityObject* NPC, struct FVector DeathPosition); // Function Scavenger.S_SocialHubPlayerEntityObject.AIClientNotifyKilledByPlayer // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0xffff8008e4a10000
	void AIClientDealDamageToPlayer(struct AS_SocialHubNpcEntityObject* NPC, float Damage); // Function Scavenger.S_SocialHubPlayerEntityObject.AIClientDealDamageToPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPlayerVolume
// Size: 0x2a0 (Inherited: 0x288)
struct AS_SocialHubPlayerVolume : AActor {
	struct TArray<int32_t> PhasesAvailable; // 0x288(0x10)
	struct UBoxComponent* BoxComponent; // 0x298(0x08)

	struct FTransform FindRandomPoint(); // Function Scavenger.S_SocialHubPlayerVolume.FindRandomPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubPlayerStartVolume
// Size: 0x2a0 (Inherited: 0x2a0)
struct AS_SocialHubPlayerStartVolume : AS_SocialHubPlayerVolume {
};

// Class Scavenger.S_SocialHubDropshipRespawnVolume
// Size: 0x2a0 (Inherited: 0x2a0)
struct AS_SocialHubDropshipRespawnVolume : AS_SocialHubPlayerVolume {
};

// Class Scavenger.S_SocialHubScriptedMotionComponent
// Size: 0x180 (Inherited: 0xb0)
struct US_SocialHubScriptedMotionComponent : UActorComponent {
	char pad_B0[0x60]; // 0xb0(0x60)
	struct TArray<struct FS_ScriptedRotation> ScriptedRotations; // 0x110(0x10)
	struct TArray<struct FS_ScriptedOscillation> ScriptedOscillations; // 0x120(0x10)
	bool bOscillateScale; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	struct FVector ScriptedTargetScale; // 0x134(0x0c)
	float ScriptedScaleSpeed; // 0x140(0x04)
	float ScriptedScaleTimeOffset; // 0x144(0x04)
	bool bRunScriptedPattern; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float ScriptedPatternSpeed; // 0x14c(0x04)
	struct UCurveFloat* ScriptedPatternCurve; // 0x150(0x08)
	float ScriptedPatternTimeOffset; // 0x158(0x04)
	bool bUseSplineYaw; // 0x15c(0x01)
	bool bUseSplinePitch; // 0x15d(0x01)
	bool bUseSplineRoll; // 0x15e(0x01)
	bool StartPaused; // 0x15f(0x01)
	float ResumeTime; // 0x160(0x04)
	struct TWeakObjectPtr<struct USplineComponent> ScriptedPatternSpline; // 0x164(0x08)
	char pad_16C[0x14]; // 0x16c(0x14)
};

// Class Scavenger.S_SocialHubServerConnection
// Size: 0x1728 (Inherited: 0x1728)
struct AS_SocialHubServerConnection : AMorpheusServerConnection {
};

// Class Scavenger.S_SocialHubSettings
// Size: 0x50 (Inherited: 0x38)
struct US_SocialHubSettings : UDeveloperSettings {
	bool PlayIntroSequences; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FString LocalAccessCode; // 0x40(0x10)
};

// Class Scavenger.S_SocialHubSimPlayerLoginHandler
// Size: 0xc0 (Inherited: 0x28)
struct US_SocialHubSimPlayerLoginHandler : UObject {
	struct UWorld* m_world; // 0x28(0x08)
	struct US_OnlineServiceManager* m_onlineServiceManager; // 0x30(0x08)
	char pad_38[0x88]; // 0x38(0x88)
};

// Class Scavenger.S_SocialHubSimulatedPlayerConnection
// Size: 0x1738 (Inherited: 0x1738)
struct AS_SocialHubSimulatedPlayerConnection : AMorpheusClientConnection {

	void HandleStartupComplete(); // Function Scavenger.S_SocialHubSimulatedPlayerConnection.HandleStartupComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubSingletonObject
// Size: 0x4b8 (Inherited: 0x398)
struct AS_SocialHubSingletonObject : AEntityObject {
	struct US_SocialHubPickupSpawner* PickupSpawner; // 0x398(0x08)
	struct US_SocialHubAISpawner* AISpawner; // 0x3a0(0x08)
	float ServerWorldTime; // 0x3a8(0x04)
	enum class EAIAttackPattern AIAttackPattern; // 0x3ac(0x01)
	enum class ESimPlayerPattern SimPlayerPattern; // 0x3ad(0x01)
	char pad_3AE[0x2]; // 0x3ae(0x02)
	float PlatformStartTime; // 0x3b0(0x04)
	float PlatformStopTime; // 0x3b4(0x04)
	float PlatformTimeOffset; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct TArray<struct FScheduledEvent> ScheduledEvents; // 0x3c0(0x10)
	char pad_3D0[0x10]; // 0x3d0(0x10)
	struct TArray<struct AS_SocialHubDropshipSpawnPoint*> AvailableDropshipSpawns; // 0x3e0(0x10)
	struct TMap<struct AS_SocialHubDropshipEntityObject*, struct AS_SocialHubDropshipSpawnPoint*> UsedDropshipSpawns; // 0x3f0(0x50)
	struct TMap<struct AS_SocialHubDropshipEntityObject*, struct FBoardedPlayersWrapper> BoardedPlayers; // 0x440(0x50)
	int32_t m_outroCinematicIndex; // 0x490(0x04)
	uint32_t m_ExplorerCount; // 0x494(0x04)
	uint32_t m_SimulatedExplorerCount; // 0x498(0x04)
	uint32_t m_TotalAIKilled; // 0x49c(0x04)
	struct TArray<struct UPrimitiveComponent*> MovingPlatformComponents; // 0x4a0(0x10)
	char pad_4B0[0x8]; // 0x4b0(0x08)

	void SpawnNextDropshipWave(); // Function Scavenger.S_SocialHubSingletonObject.SpawnNextDropshipWave // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void SpawnBouncer(struct FString accessCode); // Function Scavenger.S_SocialHubSingletonObject.SpawnBouncer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void SpawnAIClientEntityObject(); // Function Scavenger.S_SocialHubSingletonObject.SpawnAIClientEntityObject // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerCollectPlayerKillReward(struct AS_SocialHubPlayerEntityObject* Player, int32_t Data); // Function Scavenger.S_SocialHubSingletonObject.ServerCollectPlayerKillReward // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RewardAllPlayers(struct TArray<struct FName> rewardNames); // Function Scavenger.S_SocialHubSingletonObject.RewardAllPlayers // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayEndEventMusic(); // Function Scavenger.S_SocialHubSingletonObject.PlayEndEventMusic // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void OnRep_TotalAIKilled(); // Function Scavenger.S_SocialHubSingletonObject.OnRep_TotalAIKilled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_ServerWorldTime(); // Function Scavenger.S_SocialHubSingletonObject.OnRep_ServerWorldTime // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_ScheduledEvents(); // Function Scavenger.S_SocialHubSingletonObject.OnRep_ScheduledEvents // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_OutroCinematicIndex(); // Function Scavenger.S_SocialHubSingletonObject.OnRep_OutroCinematicIndex // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnRep_ExplorerCount(); // Function Scavenger.S_SocialHubSingletonObject.OnRep_ExplorerCount // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDropshipTakeoff(struct AS_SocialHubDropshipEntityObject* DropshipEntity, bool IsLastDropship); // Function Scavenger.S_SocialHubSingletonObject.HandleDropshipTakeoff // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void BeginSpawningDropships(); // Function Scavenger.S_SocialHubSingletonObject.BeginSpawningDropships // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubStartupHandlerProcessor
// Size: 0x30 (Inherited: 0x28)
struct US_SocialHubStartupHandlerProcessor : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Scavenger.S_SocialHubStreamerComponent
// Size: 0xb8 (Inherited: 0xb0)
struct US_SocialHubStreamerComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)

	void SetPrimitiveCachedDrawDistance(struct UPrimitiveComponent* Primitive, float NewDrawDistance); // Function Scavenger.S_SocialHubStreamerComponent.SetPrimitiveCachedDrawDistance // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDebugCameraLength(struct US_SpringArmComponent* CameraSpringArm, float Length, float OffsetHeight); // Function Scavenger.S_SocialHubStreamerComponent.SetDebugCameraLength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ForceRefreshCameraSettings(struct US_SpringArmComponent* CameraSpringArm); // Function Scavenger.S_SocialHubStreamerComponent.ForceRefreshCameraSettings // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubStreamerEntityObject
// Size: 0x5f0 (Inherited: 0x4a8)
struct AS_SocialHubStreamerEntityObject : AS_SocialHubPlayerEntityObject {
	struct TArray<float> WorldSizes; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnWorldSizeChanged; // 0x4b8(0x10)
	struct AS_StreamerMenu* StreamerMenu; // 0x4c8(0x08)
	struct AS_StreamerInputActor* InputActorClass; // 0x4d0(0x08)
	struct US_MessengerAbilitySet* DefaultAbilitySet; // 0x4d8(0x08)
	char pad_4E0[0x28]; // 0x4e0(0x28)
	struct UDataTable* AnimationVariableDataTable; // 0x508(0x08)
	struct UDataTable* AdditionalEmoteTable; // 0x510(0x08)
	char pad_518[0x30]; // 0x518(0x30)
	int32_t WorldSizeLevel; // 0x548(0x04)
	float WorldSize; // 0x54c(0x04)
	bool bCharacterHidden; // 0x550(0x01)
	char pad_551[0x7]; // 0x551(0x07)
	struct US_StreamerMenuDefinition* MenuDefinition; // 0x558(0x08)
	struct FTimerHandle AudioStatusHandle; // 0x560(0x08)
	struct US_SocialHubVoiceEmitterComponent* VoiceEmitterComponent; // 0x568(0x08)
	struct US_SocialHubVoiceInputDeviceComponent* VoiceInputDeviceComponent; // 0x570(0x08)
	bool VoiceAudioPlaybackEnabled; // 0x578(0x01)
	bool PushToTalkEnabled; // 0x579(0x01)
	char pad_57A[0x6]; // 0x57a(0x06)
	struct AS_StreamerInputActor* m_inputActor; // 0x580(0x08)
	struct US_MessengerAbilitySet* m_phaseAbilities; // 0x588(0x08)
	struct TMap<struct FName, struct AS_StreamerAbility*> AbilityMap; // 0x590(0x50)
	struct UDataTable* m_OverrideMontagePlayrateTable; // 0x5e0(0x08)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	void ServerSetWorldSizeLevel(int32_t NewWorldSizeLevel); // Function Scavenger.S_SocialHubStreamerEntityObject.ServerSetWorldSizeLevel // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerRequestInitialAvailableAIClients(); // Function Scavenger.S_SocialHubStreamerEntityObject.ServerRequestInitialAvailableAIClients // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xffff8008e4a10000
	void ServerEmitGlobalEvent(struct FString Name, struct FString argument); // Function Scavenger.S_SocialHubStreamerEntityObject.ServerEmitGlobalEvent // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerActivateAbility(struct FString Name); // Function Scavenger.S_SocialHubStreamerEntityObject.ServerActivateAbility // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnWorldSizeLevelChanged(float inWorldSize); // Function Scavenger.S_SocialHubStreamerEntityObject.OnWorldSizeLevelChanged // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnVoip(struct TArray<char> VoiceData); // Function Scavenger.S_SocialHubStreamerEntityObject.OnVoip // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void OnRep_WorldSize(); // Function Scavenger.S_SocialHubStreamerEntityObject.OnRep_WorldSize // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyStreamerAbilityActivated(); // Function Scavenger.S_SocialHubStreamerEntityObject.NotifyStreamerAbilityActivated // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MulticastStreamerAbilityActivated(struct AS_StreamerAbility* Ability); // Function Scavenger.S_SocialHubStreamerEntityObject.MulticastStreamerAbilityActivated // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0xffff8008e4a10000
	void HandlePhaseLoaded(struct AS_SocialHubPhaseEntityObject* Phase); // Function Scavenger.S_SocialHubStreamerEntityObject.HandlePhaseLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleBeginPhaseUnloading(struct AS_SocialHubPhaseEntityObject* Phase); // Function Scavenger.S_SocialHubStreamerEntityObject.HandleBeginPhaseUnloading // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetWorldSize(); // Function Scavenger.S_SocialHubStreamerEntityObject.GetWorldSize // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetMaxWorldSize(); // Function Scavenger.S_SocialHubStreamerEntityObject.GetMaxWorldSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_StreamerInputActor* GetInputActor(); // Function Scavenger.S_SocialHubStreamerEntityObject.GetInputActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDesiredMontagePlayrate(struct UAnimMontage* inMontage, float inDefaultPlayrate); // Function Scavenger.S_SocialHubStreamerEntityObject.GetDesiredMontagePlayrate // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetCurrentWorldSizeLevel(); // Function Scavenger.S_SocialHubStreamerEntityObject.GetCurrentWorldSizeLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FixupWeaponScale(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_SocialHubStreamerEntityObject.FixupWeaponScale // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ClientUpdateAvailableAIClients(int32_t availableClients, int32_t totalNpcs, int32_t unavailableClients); // Function Scavenger.S_SocialHubStreamerEntityObject.ClientUpdateAvailableAIClients // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xffff8008e4a10000
	void ClientActivateAbility(struct FString Name); // Function Scavenger.S_SocialHubStreamerEntityObject.ClientActivateAbility // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubTelemetryManager
// Size: 0x38 (Inherited: 0x28)
struct US_SocialHubTelemetryManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)

	void SendTelemetrySuccess(struct UObject* WorldContext, struct FName Name); // Function Scavenger.S_SocialHubTelemetryManager.SendTelemetrySuccess // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendTelemetryFailWithin(struct UObject* WorldContext, struct FName Name, float Timeout); // Function Scavenger.S_SocialHubTelemetryManager.SendTelemetryFailWithin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubVoiceEmitterComponent
// Size: 0x460 (Inherited: 0x430)
struct US_SocialHubVoiceEmitterComponent : UAkAudioInputComponent {
	struct FTimerHandle AudioStatusHandle; // 0x430(0x08)
	char pad_438[0x28]; // 0x438(0x28)
};

// Class Scavenger.S_SocialHubVoiceInputDeviceComponent
// Size: 0x130 (Inherited: 0xb0)
struct US_SocialHubVoiceInputDeviceComponent : UActorComponent {
	char pad_B0[0x80]; // 0xb0(0x80)

	void OnAudioSettingsChanged(struct FS_UserAudioSettings OldSettings, struct FS_UserAudioSettings NewSettings); // Function Scavenger.S_SocialHubVoiceInputDeviceComponent.OnAudioSettingsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubWidgetCount
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_SocialHubWidgetCount : US_WidgetMinimal {
	enum class ES_SocialHubWidgetCountType SocialHubPlayerCountType; // 0x4b8(0x01)
	char pad_4B9[0x7]; // 0x4b9(0x07)
	struct UTexture2D* Icon; // 0x4c0(0x08)
	struct US_RichTextBlock* CountRichText; // 0x4c8(0x08)
	struct UImage* IconWidget; // 0x4d0(0x08)

	void OnExplorerCountUpdate(int32_t ExplorerCount, int32_t SimulatedExplorerCount); // Function Scavenger.S_SocialHubWidgetCount.OnExplorerCountUpdate // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnAIClientsUpdated(int32_t availableClients, int32_t totalNpcs, int32_t unavailableClients); // Function Scavenger.S_SocialHubWidgetCount.OnAIClientsUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubWidgetMessengerAbilityButton
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_SocialHubWidgetMessengerAbilityButton : US_WidgetMinimal {
	struct UImage* Icon; // 0x4b8(0x08)
	struct US_RichTextBlock* KeyBinding; // 0x4c0(0x08)
	struct US_RichTextBlock* Tooltip; // 0x4c8(0x08)
	struct US_WidgetCountdown* Cooldown; // 0x4d0(0x08)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	struct AS_StreamerAbility* m_ability; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)

	void ShowTooltip(bool Enable); // Function Scavenger.S_SocialHubWidgetMessengerAbilityButton.ShowTooltip // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStateChanged(enum class ES_SocialHubAbilityButtonState State); // Function Scavenger.S_SocialHubWidgetMessengerAbilityButton.NotifyStateChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleCooldownFinished(struct AS_StreamerAbility* Ability); // Function Scavenger.S_SocialHubWidgetMessengerAbilityButton.HandleCooldownFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAbilityFinished(struct AS_StreamerAbility* Ability); // Function Scavenger.S_SocialHubWidgetMessengerAbilityButton.HandleAbilityFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAbilityActivated(struct AS_StreamerAbility* Ability); // Function Scavenger.S_SocialHubWidgetMessengerAbilityButton.HandleAbilityActivated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubWidgetMessengerAbilityHotbar
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_SocialHubWidgetMessengerAbilityHotbar : US_WidgetMinimal {
	struct US_SocialHubWidgetMessengerAbilityButton* ButtonClass; // 0x4b8(0x08)
	struct UPanelWidget* Panel; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	void HandleToggleTooltips(); // Function Scavenger.S_SocialHubWidgetMessengerAbilityHotbar.HandleToggleTooltips // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialHubWidgetMessengerDefaultAbilityHotbar
// Size: 0x4d0 (Inherited: 0x4d0)
struct US_SocialHubWidgetMessengerDefaultAbilityHotbar : US_SocialHubWidgetMessengerAbilityHotbar {
};

// Class Scavenger.S_SocialHubWidgetMessengerPhaseAbilityHotbar
// Size: 0x4d0 (Inherited: 0x4d0)
struct US_SocialHubWidgetMessengerPhaseAbilityHotbar : US_SocialHubWidgetMessengerAbilityHotbar {
};

// Class Scavenger.S_SocialHubWidgetMessengerMenu
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_SocialHubWidgetMessengerMenu : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void ToggleMenu(); // Function Scavenger.S_SocialHubWidgetMessengerMenu.ToggleMenu // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyVisibleChanged(bool IsVisible); // Function Scavenger.S_SocialHubWidgetMessengerMenu.NotifyVisibleChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialManager
// Size: 0x320 (Inherited: 0x28)
struct US_SocialManager : UObject {
	struct FMulticastInlineDelegate OnConnected; // 0x28(0x10)
	struct FMulticastInlineDelegate OnDisconnected; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDisconnectedRetriesExhausted; // 0x48(0x10)
	struct FMulticastInlineDelegate OnPlayerSearchResultsReceived; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDisplayNameCached; // 0x68(0x10)
	struct FMulticastInlineDelegate OnPresenceUpdate; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPresenceLostForPlayer; // 0x88(0x10)
	struct FMulticastInlineDelegate OnPartyRehydrationRequestReceived; // 0x98(0x10)
	char pad_A8[0x48]; // 0xa8(0x48)
	struct US_TextChatManager* m_textChatManager; // 0xf0(0x08)
	struct US_FriendsManager* m_friendsManager; // 0xf8(0x08)
	struct US_PrivacyManager* m_privacyManager; // 0x100(0x08)
	struct US_RecentPlayersManager* m_recentPlayersManager; // 0x108(0x08)
	char pad_110[0x210]; // 0x110(0x210)

	bool StartPlayerSearch(struct FString SearchString, struct FString searchId); // Function Scavenger.S_SocialManager.StartPlayerSearch // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsValidProfileId(struct FString profileId); // Function Scavenger.S_SocialManager.IsValidProfileId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleTextChatControlCommand(struct FString profileId, enum class ES_TextChatControlCommand controlCommand, struct TArray<struct FString> arguments); // Function Scavenger.S_SocialManager.HandleTextChatControlCommand // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	struct US_TextChatManager* GetTextChatManager(); // Function Scavenger.S_SocialManager.GetTextChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_RecentPlayersManager* GetRecentPlayersManager(); // Function Scavenger.S_SocialManager.GetRecentPlayersManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetProfileIdFromJid(struct FString playerJid); // Function Scavenger.S_SocialManager.GetProfileIdFromJid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_PrivacyManager* GetPrivacyManager(); // Function Scavenger.S_SocialManager.GetPrivacyManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetPlayerIdFromProfileId(struct FString profileId); // Function Scavenger.S_SocialManager.GetPlayerIdFromProfileId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetPlayerIdFromJid(struct FString playerJid); // Function Scavenger.S_SocialManager.GetPlayerIdFromJid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetPlatformUserName(struct ULocalPlayer* LocalPlayer); // Function Scavenger.S_SocialManager.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FS_PlatformInformation GetPlatformInformationFromJid(struct FString playerJid); // Function Scavenger.S_SocialManager.GetPlatformInformationFromJid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetJidStringFromProfileId(struct FString PlayerId); // Function Scavenger.S_SocialManager.GetJidStringFromProfileId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetJidStringFromPlayerId(struct FString PlayerId); // Function Scavenger.S_SocialManager.GetJidStringFromPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_FriendsManager* GetFriendsManager(); // Function Scavenger.S_SocialManager.GetFriendsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetDisplayNameFromPlayerId(struct FString PlayerId); // Function Scavenger.S_SocialManager.GetDisplayNameFromPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SocialConnectionState GetConnectionState(); // Function Scavenger.S_SocialManager.GetConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_PlayerPresenceStatus GetCachedPresenceFromPlayerId(struct FString PlayerId); // Function Scavenger.S_SocialManager.GetCachedPresenceFromPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SpawnManagerComponent
// Size: 0x1c0 (Inherited: 0xb0)
struct US_SpawnManagerComponent : UActorComponent {
	int32_t MaxActiveAIActorsInOneLevel; // 0xb0(0x04)
	char pad_B4[0xdc]; // 0xb4(0xdc)
	struct TArray<struct AS_Spawner*> m_spawners; // 0x190(0x10)
	struct TArray<struct AS_Spawner*> m_ActiveSpawners; // 0x1a0(0x10)
	char pad_1B0[0x10]; // 0x1b0(0x10)

	void ServerUpdateActiveAICount(int32_t Count); // Function Scavenger.S_SpawnManagerComponent.ServerUpdateActiveAICount // (Net|Native|Event|Public) // @ game+0xffff8008e4a10000
	struct US_SpawnManagerComponent* GetSpawnManagerComponentOfActor(struct AActor* Actor); // Function Scavenger.S_SpawnManagerComponent.GetSpawnManagerComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SpectatorController
// Size: 0x5f0 (Inherited: 0x5f0)
struct AS_SpectatorController : APlayerController {
};

// Class Scavenger.S_SplineMeshComponent
// Size: 0x580 (Inherited: 0x580)
struct US_SplineMeshComponent : USplineMeshComponent {
	bool CollideWithVehicles; // 0x578(0x01)
};

// Class Scavenger.S_SpottingComponent
// Size: 0xe0 (Inherited: 0xb0)
struct US_SpottingComponent : UActorComponent {
	struct TArray<struct FS_SpottingInstance> m_SpottingInstances; // 0xb0(0x10)
	char pad_C0[0x20]; // 0xc0(0x20)

	void TransferSpottingData(struct APawn* NewPawn); // Function Scavenger.S_SpottingComponent.TransferSpottingData // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void SpotActorForTeam(struct FS_SpottingInstance SpottingInstance, float Duration); // Function Scavenger.S_SpottingComponent.SpotActorForTeam // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_SpottingInstances(); // Function Scavenger.S_SpottingComponent.OnRep_SpottingInstances // (Final|Native|Public) // @ game+0xffff8008e4a10000
	float GetSpottedCriticalModifier(struct AActor* AttackingActor); // Function Scavenger.S_SpottingComponent.GetSpottedCriticalModifier // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SpringArmComponent
// Size: 0x3550 (Inherited: 0x280)
struct US_SpringArmComponent : USpringArmComponent {
	char pad_280[0x47]; // 0x280(0x47)
	bool AffectedByRecoil; // 0x2c7(0x01)
	struct FVector CameraCollisionSafePointOffset; // 0x2c8(0x0c)
	float CameraDistanceToCapsuleWhenToHideCharacter; // 0x2d4(0x04)
	char pad_2D8[0x8]; // 0x2d8(0x08)
	struct FS_CameraArmSettings m_settings[0x16]; // 0x2e0(0x1fa0)
	char pad_2280[0x30]; // 0x2280(0x30)
	struct TArray<struct FS_BlendRule> m_camBlendRules; // 0x22b0(0x10)
	float m_minDistanceToOwnerForAimKeep; // 0x22c0(0x04)
	float m_maxYawAngleForAimKeep; // 0x22c4(0x04)
	float m_maxPitchAngleForAimKeep; // 0x22c8(0x04)
	bool m_bForceDisableCameraLag; // 0x22cc(0x01)
	char pad_22CD[0x3]; // 0x22cd(0x03)
	struct UDataTable* CameraSettingsDataTable; // 0x22d0(0x08)
	struct UDataTable* CameraBlendRulesDataTable; // 0x22d8(0x08)
	struct UDataTable* CameraSettingsOverridesDataTable; // 0x22e0(0x08)
	char pad_22E8[0x1268]; // 0x22e8(0x1268)

	void SetScavHubGlobalOverride(struct FS_CameraSettingOverride cameraOverrides); // Function Scavenger.S_SpringArmComponent.SetScavHubGlobalOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDisableCameraLag(bool disable); // Function Scavenger.S_SpringArmComponent.SetDisableCameraLag // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAddedFOVAngle(float addAngle); // Function Scavenger.S_SpringArmComponent.SetAddedFOVAngle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActiveSetting(enum class ES_CameraSettings Setting); // Function Scavenger.S_SpringArmComponent.SetActiveSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverwriteDebugSetting(struct FS_CameraArmSettings Setting); // Function Scavenger.S_SpringArmComponent.OverwriteDebugSetting // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitSettingsFromDataTableAndResolveInheritance(); // Function Scavenger.S_SpringArmComponent.InitSettingsFromDataTableAndResolveInheritance // (Final|Native|Public) // @ game+0xffff8008e4a10000
	float GetCurrentArmLength(); // Function Scavenger.S_SpringArmComponent.GetCurrentArmLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_CameraSettings GetActiveSetting(); // Function Scavenger.S_SpringArmComponent.GetActiveSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearTemporaryOverride(enum class ES_CameraSettings cameraSetting); // Function Scavenger.S_SpringArmComponent.ClearTemporaryOverride // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ApplyTemporaryOverride(enum class ES_CameraSettings cameraSetting, struct FS_CameraSettingOverride cameraOverrides); // Function Scavenger.S_SpringArmComponent.ApplyTemporaryOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StatChangeVolume
// Size: 0x290 (Inherited: 0x288)
struct AS_StatChangeVolume : AActor {
	struct US_StatChangeVolumeComponent* StatChangeVolumeComponent; // 0x288(0x08)
};

// Class Scavenger.S_StatChangePhysicsVolume
// Size: 0x340 (Inherited: 0x2d0)
struct AS_StatChangePhysicsVolume : APhysicsVolume {
	struct TMap<struct TWeakObjectPtr<struct US_StatsComponent>, struct FS_StoredStatState> m_statsComponentsOfOverlappingActors; // 0x2d0(0x50)
	struct FS_StatChangeParameters Parameters; // 0x320(0x1c)
	char pad_33C[0x4]; // 0x33c(0x04)
};

// Class Scavenger.S_StatChangeVolumeComponent
// Size: 0x590 (Inherited: 0x4e0)
struct US_StatChangeVolumeComponent : US_VolumeComponent {
	bool bEnabled; // 0x4e0(0x01)
	char pad_4E1[0x7]; // 0x4e1(0x07)
	struct FMulticastInlineDelegate OnActorStatChangeStart; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnActorStatChangeEnd; // 0x4f8(0x10)
	bool ApplyToFriendly; // 0x508(0x01)
	bool ApplyToNeutral; // 0x509(0x01)
	bool ApplyToHostile; // 0x50a(0x01)
	bool ApplyOnlyToCharacters; // 0x50b(0x01)
	bool ApplyOnlyToPlayers; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	struct FS_StatChangeParameters Parameters; // 0x510(0x1c)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct TArray<struct FS_StatChangeParameters> ExtraParameters; // 0x530(0x10)
	struct TMap<struct TWeakObjectPtr<struct US_StatsComponent>, struct FS_StoredStatState> m_statsComponentsOfOverlappingActors; // 0x540(0x50)

	float GetStateChangePerSecond(); // Function Scavenger.S_StatChangeVolumeComponent.GetStateChangePerSecond // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StatType GetStatChangeType(); // Function Scavenger.S_StatChangeVolumeComponent.GetStatChangeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StatsComponent
// Size: 0x380 (Inherited: 0xb0)
struct US_StatsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnBoneHit; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnDied; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnDowned; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPredictivelyDowned; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPredictivelyKilled; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnRevived; // 0x100(0x10)
	struct FMulticastInlineDelegate OnRollbackPredictivelyDowned; // 0x110(0x10)
	struct FMulticastInlineDelegate OnRollbackPredictivelyKilled; // 0x120(0x10)
	struct FMulticastInlineDelegate OnSimpleStatChange; // 0x130(0x10)
	struct FMulticastInlineDelegate OnSimpleTakeDamage; // 0x140(0x10)
	struct FMulticastInlineDelegate OnStatChange; // 0x150(0x10)
	struct FMulticastInlineDelegate OnStateChange; // 0x160(0x10)
	struct FMulticastInlineDelegate OnStatMaximumChange; // 0x170(0x10)
	struct FMulticastInlineDelegate OnTerminal; // 0x180(0x10)
	struct FMulticastInlineDelegate OnCocooned; // 0x190(0x10)
	struct FMulticastInlineDelegate OnFreedFromCocoon; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnKilledInCocoon; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnExtracting; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnExtracted; // 0x1d0(0x10)
	enum class ES_StatsState m_state; // 0x1e0(0x01)
	char pad_1E1[0x47]; // 0x1e1(0x47)
	struct TArray<struct FS_DamageDealtPerPlayer> m_damageDealtPerPlayerPerState; // 0x228(0x10)
	char pad_238[0x50]; // 0x238(0x50)
	struct AController* m_lastDamageInstigatorController; // 0x288(0x08)
	struct APawn* m_lastDamageInstigatorPawn; // 0x290(0x08)
	char pad_298[0x3c]; // 0x298(0x3c)
	enum class ES_StatChangeCauseType m_lastDamageChangeCauseType; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct FS_Stat m_statArmor; // 0x2d8(0x0c)
	struct FS_Stat m_statHealth; // 0x2e4(0x0c)
	char bSupportsDownedState : 1; // 0x2f0(0x01)
	char pad_2F0_1 : 7; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UGameplayEffect* DownedGameplayEffectClass; // 0x2f8(0x08)
	float DownedStateDuration; // 0x300(0x04)
	float DownedStateInvulnerabilityTime; // 0x304(0x04)
	float RevivedHealth; // 0x308(0x04)
	char bSupportsTerminalState : 1; // 0x30c(0x01)
	char pad_30C_1 : 7; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	float TimeInTerminalState; // 0x310(0x04)
	float TimeInDeadState; // 0x314(0x04)
	struct FS_InitialStatData InitialArmor; // 0x318(0x08)
	struct FS_InitialStatData InitialHealth; // 0x320(0x08)
	float PredictedDamageExpirationTime; // 0x328(0x04)
	char pad_32C[0x1c]; // 0x32c(0x1c)
	struct TArray<struct FS_PredictedDamageInfo> m_predictedDamageInfo; // 0x348(0x10)
	struct TArray<struct FS_DamagePredictionID> m_serverProcessedPredictedDamageIDs; // 0x358(0x10)
	char pad_368[0x8]; // 0x368(0x08)
	struct TArray<struct FS_DamageOverTimeState> m_damageOverTimeState; // 0x370(0x10)

	void SetMaximumStatValue(enum class ES_StatType StatType, float Value); // Function Scavenger.S_StatsComponent.SetMaximumStatValue // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RollbackPredictivelyKilled_BP(struct AController* PredictiveInstigator); // Function Scavenger.S_StatsComponent.RollbackPredictivelyKilled_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void RollbackPredictivelyDowned_BP(struct AController* PredictiveInstigator); // Function Scavenger.S_StatsComponent.RollbackPredictivelyDowned_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void Revive(struct AController* revivingController); // Function Scavenger.S_StatsComponent.Revive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveDamageOverTimeCount(enum class ES_DamageOverTimeType DamageOverTimeType, float damageToRemove); // Function Scavenger.S_StatsComponent.RemoveDamageOverTimeCount // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatHealth(struct FS_Stat oldStat); // Function Scavenger.S_StatsComponent.NotifyReplicatedStatHealth // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedState(enum class ES_StatsState OldState); // Function Scavenger.S_StatsComponent.NotifyReplicatedState // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatArmor(struct FS_Stat oldStat); // Function Scavenger.S_StatsComponent.NotifyReplicatedStatArmor // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyPredictivelyKilled_BP(struct AController* PredictiveInstigator, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_StatsComponent.NotifyPredictivelyKilled_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPredictivelyDowned_BP(struct AController* PredictiveInstigator, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_StatsComponent.NotifyPredictivelyDowned_BP // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGameplayEvent(enum class ES_StatsGameplayEvent GameplayEvent); // Function Scavenger.S_StatsComponent.NotifyGameplayEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsDead(); // Function Scavenger.S_StatsComponent.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAlive(); // Function Scavenger.S_StatsComponent.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActuallyDead(); // Function Scavenger.S_StatsComponent.IsActuallyDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsActuallyAlive(); // Function Scavenger.S_StatsComponent.IsActuallyAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTotalDamageDoneByPlayer(struct AS_PlayerController* PlayerController); // Function Scavenger.S_StatsComponent.GetTotalDamageDoneByPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetSupportsTerminalState(); // Function Scavenger.S_StatsComponent.GetSupportsTerminalState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetSupportsDownedState(); // Function Scavenger.S_StatsComponent.GetSupportsDownedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_StatsComponent* GetStatsComponentOfActor(struct AActor* Actor); // Function Scavenger.S_StatsComponent.GetStatsComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetPerPlayerDamageByState_BP(enum class ES_StatsState State, struct TArray<struct FS_PerPlayerDamage> outPerPlayerDamage, float DamageWithinTime); // Function Scavenger.S_StatsComponent.GetPerPlayerDamageByState_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPerPlayerDamage_BP(struct TArray<struct FS_PerPlayerDamage> outPerPlayerDamage, float DamageWithinTime); // Function Scavenger.S_StatsComponent.GetPerPlayerDamage_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaximumStatValue(enum class ES_StatType StatType); // Function Scavenger.S_StatsComponent.GetMaximumStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetInitialStatValue(enum class ES_StatType StatType); // Function Scavenger.S_StatsComponent.GetInitialStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDamageOverTimeDamagePerTick(enum class ES_DamageOverTimeType DamageOverTimeType); // Function Scavenger.S_StatsComponent.GetDamageOverTimeDamagePerTick // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDamageOverTimeCount(enum class ES_DamageOverTimeType DamageOverTimeType); // Function Scavenger.S_StatsComponent.GetDamageOverTimeCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCurrentStatValue(enum class ES_StatType StatType); // Function Scavenger.S_StatsComponent.GetCurrentStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCurrentStatPercentage(enum class ES_StatType StatType); // Function Scavenger.S_StatsComponent.GetCurrentStatPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCurrentStateTimer(); // Function Scavenger.S_StatsComponent.GetCurrentStateTimer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StatsState GetCurrentState(); // Function Scavenger.S_StatsComponent.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ChangeCurrentStatValue(enum class ES_StatType StatType, enum class ES_StatChangeCauseType CauseType, struct AActor* SourceActor, struct AController* InstigatorController, float change); // Function Scavenger.S_StatsComponent.ChangeCurrentStatValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CanBeRevived(); // Function Scavenger.S_StatsComponent.CanBeRevived // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_AIStatsComponent
// Size: 0x390 (Inherited: 0x380)
struct US_AIStatsComponent : US_StatsComponent {
	char pad_380[0x10]; // 0x380(0x10)

	struct US_AIStatsComponent* GetAIStatsComponentOfActor(struct AActor* Actor); // Function Scavenger.S_AIStatsComponent.GetAIStatsComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_PlayerStatsComponent
// Size: 0x4b8 (Inherited: 0x390)
struct US_PlayerStatsComponent : US_AIStatsComponent {
	struct FMulticastInlineDelegate OnExhaustionStateChange; // 0x390(0x10)
	struct FMulticastInlineDelegate OnShieldBreak; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnShieldRebootEnd; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnShieldRegenStart; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnShieldRegenEnd; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnShieldDamaged; // 0x3e0(0x10)
	enum class ES_StatsShieldState m_shieldState; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	struct FS_Stat m_statCold; // 0x3f4(0x0c)
	struct FS_Stat m_statExhaustion; // 0x400(0x0c)
	struct FS_Stat m_statHealthRecoveryLimit; // 0x40c(0x0c)
	struct FS_Stat m_statHunger; // 0x418(0x0c)
	struct FS_Stat m_statRadiation; // 0x424(0x0c)
	struct FS_Stat m_statShield; // 0x430(0x0c)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct TArray<struct FS_DerivedStatChange> DerivedStatChanges; // 0x440(0x10)
	struct UGameplayEffect* ExhaustedGameplayEffectClass; // 0x450(0x08)
	struct FName ExhaustedTagName; // 0x458(0x08)
	struct TArray<struct FS_InitialCondition> InitialConditions; // 0x460(0x10)
	float RevivedCold; // 0x470(0x04)
	float RevivedRadiation; // 0x474(0x04)
	char pad_478[0x1c]; // 0x478(0x1c)
	enum class ES_ExhaustionState m_exhaustionState; // 0x494(0x01)
	char pad_495[0x23]; // 0x495(0x23)

	bool TryToPayStaminaCost(float staminaCost); // Function Scavenger.S_PlayerStatsComponent.TryToPayStaminaCost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StunHealthRegen(); // Function Scavenger.S_PlayerStatsComponent.StunHealthRegen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerRequestExhaustionUntil(float serverTimeInSeconds); // Function Scavenger.S_PlayerStatsComponent.ServerRequestExhaustionUntil // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ResetRegenAndReboot(); // Function Scavenger.S_PlayerStatsComponent.ResetRegenAndReboot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveCondition(int32_t conditionHandle); // Function Scavenger.S_PlayerStatsComponent.RemoveCondition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatShield(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatShield // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatRadiation(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatRadiation // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatHunger(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatHunger // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatHealthRecoveryLimit(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatHealthRecoveryLimit // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatExhaustion(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatExhaustion // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedStatCold(struct FS_Stat oldStat); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedStatCold // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedShieldState(enum class ES_StatsShieldState OldState); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedShieldState // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyReplicatedExhaustionState(); // Function Scavenger.S_PlayerStatsComponent.NotifyReplicatedExhaustionState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool IsExhausted(); // Function Scavenger.S_PlayerStatsComponent.IsExhausted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void IncrementInvulnerabilityCounter(); // Function Scavenger.S_PlayerStatsComponent.IncrementInvulnerabilityCounter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleShieldLevelSet(enum class ES_ShieldLevel newShieldLevel); // Function Scavenger.S_PlayerStatsComponent.HandleShieldLevelSet // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	struct US_PlayerStatsComponent* GetPlayerStatsComponentOfActor(struct AActor* Actor); // Function Scavenger.S_PlayerStatsComponent.GetPlayerStatsComponentOfActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int64_t GetInvulnerabilityCounter(); // Function Scavenger.S_PlayerStatsComponent.GetInvulnerabilityCounter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DecrementInvulnerabilityCounter(); // Function Scavenger.S_PlayerStatsComponent.DecrementInvulnerabilityCounter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t AddIntervalCondition(enum class ES_StatType StatType, enum class ES_StatChangeCauseType CauseType, float IntervalBetweenTicksInSeconds, float ChangePerTick, int32_t numberOfTicks); // Function Scavenger.S_PlayerStatsComponent.AddIntervalCondition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t AddContinuousCondition(enum class ES_StatType StatType, enum class ES_StatChangeCauseType CauseType, float ChangePerSecond, float DurationInSeconds); // Function Scavenger.S_PlayerStatsComponent.AddContinuousCondition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StormGameplayData
// Size: 0x1f8 (Inherited: 0x30)
struct US_StormGameplayData : UPrimaryDataAsset {
	bool InitialStorms; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FVector> StormStartLocations_Native; // 0x38(0x10)
	struct FBox2D StormBounds; // 0x48(0x14)
	float PlayspaceBuffer; // 0x5c(0x04)
	struct FFloatRange TurbulanceRange; // 0x60(0x10)
	int32_t NumberOfLightningStorms; // 0x70(0x04)
	float LightningCheckFrequency; // 0x74(0x04)
	float LightningTightness; // 0x78(0x04)
	struct FLinearColor Cat1StormTint; // 0x7c(0x10)
	int32_t Cat1_LightningOdds; // 0x8c(0x04)
	struct FFloatRange Cat1RadiusRange; // 0x90(0x10)
	struct FFloatRange Cat1SpeedRange; // 0xa0(0x10)
	int32_t Cat1_S_StormsPerWave; // 0xb0(0x04)
	float Cat1_S_WaveInterval; // 0xb4(0x04)
	float Cat1_S_StormBrosBuffer; // 0xb8(0x04)
	int32_t Cat1_StormsCap; // 0xbc(0x04)
	struct FLinearColor Cat2StormTint; // 0xc0(0x10)
	int32_t Cat2_LightningOdds; // 0xd0(0x04)
	struct FFloatRange Cat2RadiusRange; // 0xd4(0x10)
	struct FFloatRange Cat2SpeedRange; // 0xe4(0x10)
	int32_t Cat2_S_StormsPerWave; // 0xf4(0x04)
	float Cat2_S_WaveInterval; // 0xf8(0x04)
	float Cat2_S_StormBrosBuffer; // 0xfc(0x04)
	int32_t Cat2_StormsCap; // 0x100(0x04)
	struct FLinearColor Cat3StormTint; // 0x104(0x10)
	int32_t Cat3_LightningOdds; // 0x114(0x04)
	struct FFloatRange Cat3RadiusRange; // 0x118(0x10)
	struct FFloatRange Cat3SpeedRange; // 0x128(0x10)
	int32_t Cat3_S_StormsPerWave; // 0x138(0x04)
	float Cat3_S_WaveInterval; // 0x13c(0x04)
	float Cat3_S_StormBrosBuffer; // 0x140(0x04)
	int32_t Cat3_StormsCap; // 0x144(0x04)
	struct FLinearColor Cat4StormTint; // 0x148(0x10)
	int32_t Cat4_LightningOdds; // 0x158(0x04)
	struct FFloatRange Cat4RadiusRange; // 0x15c(0x10)
	struct FFloatRange Cat4SpeedRange; // 0x16c(0x10)
	int32_t Cat4_S_StormsPerWave; // 0x17c(0x04)
	float Cat4_S_WaveInterval; // 0x180(0x04)
	float Cat4_S_StormBrosBuffer; // 0x184(0x04)
	int32_t Cat4_StormsCap; // 0x188(0x04)
	struct FLinearColor Cat5StormTint; // 0x18c(0x10)
	int32_t Cat5_LightningOdds; // 0x19c(0x04)
	struct FFloatRange Cat5RadiusRange; // 0x1a0(0x10)
	struct FFloatRange Cat5SpeedRange; // 0x1b0(0x10)
	int32_t Cat5_S_StormsPerWave; // 0x1c0(0x04)
	float Cat5_S_WaveInterval; // 0x1c4(0x04)
	float Cat5_S_StormBrosBuffer; // 0x1c8(0x04)
	int32_t Cat5_StormsCap; // 0x1cc(0x04)
	int32_t S_WavesTilOriginShift; // 0x1d0(0x04)
	float Cluster_2ndStormScale; // 0x1d4(0x04)
	float Cluster_3rdStormScale; // 0x1d8(0x04)
	float Cluster_2ndStormSpacing; // 0x1dc(0x04)
	float Cluster_3rdStormSpacing; // 0x1e0(0x04)
	float Cluster_RotationalNoise; // 0x1e4(0x04)
	float Circle_FirstCircleRadius; // 0x1e8(0x04)
	float Circle_DropshipSafeRadius; // 0x1ec(0x04)
	float Circle_ShrinkDuration; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
};

// Class Scavenger.S_StormGameplaySystem
// Size: 0x378 (Inherited: 0x288)
struct AS_StormGameplaySystem : AActor {
	float JitterDelay; // 0x288(0x04)
	bool InitialDormancy; // 0x28c(0x01)
	bool CheatActive; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	float Radius; // 0x290(0x04)
	struct FBox2D PlaySpace; // 0x294(0x14)
	int32_t CurrentLightningOdds; // 0x2a8(0x04)
	struct FLinearColor CurrentStormTint; // 0x2ac(0x10)
	struct FFloatRange CurrentSizeBounds; // 0x2bc(0x10)
	struct FFloatRange CurrentSpeedBounds; // 0x2cc(0x10)
	bool CAT5; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	float S_SpawnBound_NorthY; // 0x2e0(0x04)
	float S_SpawnBound_SouthY; // 0x2e4(0x04)
	float S_SpawnBound_EastX; // 0x2e8(0x04)
	float S_SpawnBound_WestX; // 0x2ec(0x04)
	int32_t S_OriginDirectionInt; // 0x2f0(0x04)
	float S_EWX_Length; // 0x2f4(0x04)
	float S_NSY_Length; // 0x2f8(0x04)
	float S_Z; // 0x2fc(0x04)
	enum class ES_CompassDirection S_OriginCompassDirection; // 0x300(0x01)
	char pad_301[0x3]; // 0x301(0x03)
	float S_CardinalBuffer; // 0x304(0x04)
	float S_DiagonalBuffer; // 0x308(0x04)
	float S_GlobalTurbulance; // 0x30c(0x04)
	struct FBox2D S_Cullbox; // 0x310(0x14)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<struct FVector> S_MostRecentOrigins; // 0x328(0x10)
	int32_t S_StormsPerWave; // 0x338(0x04)
	float S_StormBrosBufferDistance; // 0x33c(0x04)
	float S_SecondsBetweenWaves; // 0x340(0x04)
	int32_t S_WavesFromThisOrigin; // 0x344(0x04)
	struct TArray<struct FS_StormData> StormsBySize_Native; // 0x348(0x10)
	float LightningTightness; // 0x358(0x04)
	float LightningCheckFrequency; // 0x35c(0x04)
	int32_t NumberOfLightningStorms; // 0x360(0x04)
	int32_t StormsCap; // 0x364(0x04)
	struct TArray<struct FVector> CircleParams; // 0x368(0x10)

	void Sweep_MakeOriginVector_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_MakeOriginVector_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_MakeDestinationVector_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_MakeDestinationVector_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_Make2DPlaySpace_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_Make2DPlaySpace_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_GetRandomY_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_GetRandomY_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_GetRandomXY_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_GetRandomXY_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_GetRandomX_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_GetRandomX_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Sweep_CullWaywardStorms_Native(); // Function Scavenger.S_StormGameplaySystem.Sweep_CullWaywardStorms_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetCenterOfPlayspace_Native(); // Function Scavenger.S_StormGameplaySystem.GetCenterOfPlayspace_Native // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StormMeshComponent
// Size: 0x4f0 (Inherited: 0x4e0)
struct US_StormMeshComponent : UStaticMeshComponent {
	char pad_4E0[0x10]; // 0x4e0(0x10)
};

// Class Scavenger.S_StormShellActor
// Size: 0x2a0 (Inherited: 0x288)
struct AS_StormShellActor : AActor {
	struct USceneComponent* BaseNull; // 0x288(0x08)
	struct UMaterialInterface* MaterialInstance; // 0x290(0x08)
	struct UMaterialInstanceDynamic* m_stormShellDynamicMaterialInstance; // 0x298(0x08)

	void HideShell(bool bHide); // Function Scavenger.S_StormShellActor.HideShell // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StormWindSourceComponent
// Size: 0x250 (Inherited: 0x220)
struct US_StormWindSourceComponent : UWindDirectionalSourceComponent {
	char pad_220[0x30]; // 0x220(0x30)
};

// Class Scavenger.S_StreamerAbilityCostCalculator
// Size: 0x28 (Inherited: 0x28)
struct US_StreamerAbilityCostCalculator : UObject {

	int32_t CalculateCost(int32_t BaseCharge); // Function Scavenger.S_StreamerAbilityCostCalculator.CalculateCost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StreamerAbility
// Size: 0x448 (Inherited: 0x398)
struct AS_StreamerAbility : AEntityObject {
	struct FText Title; // 0x398(0x18)
	bool IsEnabled; // 0x3b0(0x01)
	enum class ES_StreamerAbilityUnlockType UnlockType; // 0x3b1(0x01)
	char pad_3B2[0x2]; // 0x3b2(0x02)
	int32_t UnlockBaseCharge; // 0x3b4(0x04)
	struct FMulticastInlineDelegate OnUnlocked; // 0x3b8(0x10)
	enum class ES_StreamerAbilityRunType RunOn; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	int32_t ActivationBaseCharge; // 0x3cc(0x04)
	float Duration; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct FMulticastInlineDelegate OnAbilityActivated; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnAbilityFinished; // 0x3e8(0x10)
	float Cooldown; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct FMulticastInlineDelegate OnCooldownFinished; // 0x400(0x10)
	struct AS_SocialHubStreamerEntityObject* StreamerEntityObject; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)
	struct AS_StreamerInputActor* StreamerInputActor; // 0x420(0x08)
	struct US_StreamerAbilityCostCalculator* m_costCalculator; // 0x428(0x08)
	char pad_430[0x18]; // 0x430(0x18)

	void WaitForSync(float SyncServerTime, struct FDelegate OnSyncFinished); // Function Scavenger.S_StreamerAbility.WaitForSync // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Update(int32_t CurrentCharge); // Function Scavenger.S_StreamerAbility.Update // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Unlock(); // Function Scavenger.S_StreamerAbility.Unlock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PrepareSynchronization(float SyncServerTime); // Function Scavenger.S_StreamerAbility.PrepareSynchronization // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_StreamerEntityObject(); // Function Scavenger.S_StreamerAbility.OnRep_StreamerEntityObject // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyActivated(); // Function Scavenger.S_StreamerAbility.NotifyActivated // (Native|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsUnlocked(); // Function Scavenger.S_StreamerAbility.IsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAuthoritativeFor(struct AS_SocialHubStreamerEntityObject* Streamer); // Function Scavenger.S_StreamerAbility.IsAuthoritativeFor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleFinished(); // Function Scavenger.S_StreamerAbility.HandleFinished // (Native|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleCooldownFinished(); // Function Scavenger.S_StreamerAbility.HandleCooldownFinished // (Native|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleAnimNotify(struct FName NotifyName); // Function Scavenger.S_StreamerAbility.HandleAnimNotify // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleActivate(); // Function Scavenger.S_StreamerAbility.HandleActivate // (Native|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct USkeletalMeshComponent* GetStreamerMeshComponent(); // Function Scavenger.S_StreamerAbility.GetStreamerMeshComponent // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct AS_StreamerInputActor* GetStreamerInputActor(); // Function Scavenger.S_StreamerAbility.GetStreamerInputActor // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetRemainingDuration(); // Function Scavenger.S_StreamerAbility.GetRemainingDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRemainingCooldown(); // Function Scavenger.S_StreamerAbility.GetRemainingCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDuration(); // Function Scavenger.S_StreamerAbility.GetDuration // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetDescription(); // Function Scavenger.S_StreamerAbility.GetDescription // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void FinishAbility(); // Function Scavenger.S_StreamerAbility.FinishAbility // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t CalculateUnlockCost(); // Function Scavenger.S_StreamerAbility.CalculateUnlockCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t CalculateActivationCost(); // Function Scavenger.S_StreamerAbility.CalculateActivationCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StreamerAbilityGiveWeapons
// Size: 0x448 (Inherited: 0x448)
struct AS_StreamerAbilityGiveWeapons : AS_StreamerAbility {
};

// Class Scavenger.S_StreamerAbilityRefreshGrenades
// Size: 0x448 (Inherited: 0x448)
struct AS_StreamerAbilityRefreshGrenades : AS_StreamerAbility {
};

// Class Scavenger.S_StreamerAbilitySpawnNpcMexicanWave
// Size: 0x448 (Inherited: 0x448)
struct AS_StreamerAbilitySpawnNpcMexicanWave : AS_StreamerAbility {
};

// Class Scavenger.S_StreamerInputActor
// Size: 0x370 (Inherited: 0x288)
struct AS_StreamerInputActor : AActor {
	struct AS_SocialHubStreamerEntityObject* EntityObject; // 0x288(0x08)
	char pad_290[0x30]; // 0x290(0x30)
	struct APlayerController* m_playerController; // 0x2c0(0x08)
	char pad_2C8[0xa8]; // 0x2c8(0xa8)

	void StopListenForMouseClick(); // Function Scavenger.S_StreamerInputActor.StopListenForMouseClick // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StopListenForAttack(); // Function Scavenger.S_StreamerInputActor.StopListenForAttack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartListenForMouseClick(struct APlayerController* PlayerController, struct FDelegate onClick); // Function Scavenger.S_StreamerInputActor.StartListenForMouseClick // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartListenForAttack(struct APlayerController* PlayerController, struct FDelegate OnAttack); // Function Scavenger.S_StreamerInputActor.StartListenForAttack // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PushToTalk(bool KeyPressed); // Function Scavenger.S_StreamerInputActor.PushToTalk // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleToggleTooltips(); // Function Scavenger.S_StreamerInputActor.HandleToggleTooltips // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleToggleMenu(); // Function Scavenger.S_StreamerInputActor.HandleToggleMenu // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleClicked(); // Function Scavenger.S_StreamerInputActor.HandleClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAttacked(); // Function Scavenger.S_StreamerInputActor.HandleAttacked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void BindInput(struct APlayerController* PlayerController); // Function Scavenger.S_StreamerInputActor.BindInput // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ActivatePhaseAbility(int32_t Index); // Function Scavenger.S_StreamerInputActor.ActivatePhaseAbility // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ActivateDefaultAbility(int32_t Index); // Function Scavenger.S_StreamerInputActor.ActivateDefaultAbility // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_StreamerMenuDefinitionEntry
// Size: 0x60 (Inherited: 0x28)
struct US_StreamerMenuDefinitionEntry : UObject {
	struct FName Name; // 0x28(0x08)
	struct AS_StreamerAbility* AbilityClass; // 0x30(0x08)
	struct AS_StreamerAbility* AbilityInstance; // 0x38(0x08)
	struct FString GlobalEvent; // 0x40(0x10)
	struct TArray<struct US_StreamerMenuDefinitionEntry*> Children; // 0x50(0x10)
};

// Class Scavenger.S_StreamerMenuDefinition
// Size: 0x40 (Inherited: 0x30)
struct US_StreamerMenuDefinition : UDataAsset {
	struct TArray<struct US_StreamerMenuDefinitionEntry*> Entries; // 0x30(0x10)
};

// Class Scavenger.S_StreamerMenu
// Size: 0x2e8 (Inherited: 0x288)
struct AS_StreamerMenu : AActor {
	char pad_288[0x48]; // 0x288(0x48)
	struct US_StreamerMenuDefinition* MenuDefinition; // 0x2d0(0x08)
	struct TArray<struct US_StreamerMenuDefinitionEntry*> MenuStack; // 0x2d8(0x10)

	void ToggleMenu(); // Function Scavenger.S_StreamerMenu.ToggleMenu // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SelectEntry(int32_t Index); // Function Scavenger.S_StreamerMenu.SelectEntry // (Final|Native|Public) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_StreamerMenuEntry> GetCurrentEntries(); // Function Scavenger.S_StreamerMenu.GetCurrentEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SubtitleSystem
// Size: 0x100 (Inherited: 0x28)
struct US_SubtitleSystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnMarkerStart; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMarkerEnd; // 0x40(0x10)
	char pad_50[0xb0]; // 0x50(0xb0)

	void UnregisterSpeakerName(struct UAkComponent* AkComponent); // Function Scavenger.S_SubtitleSystem.UnregisterSpeakerName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterSpeakerName(struct UAkComponent* AkComponent, struct FString SpeakerName); // Function Scavenger.S_SubtitleSystem.RegisterSpeakerName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TargetInfoSettings
// Size: 0x48 (Inherited: 0x30)
struct US_TargetInfoSettings : UDataAsset {
	float MinAcquisitionDistance; // 0x30(0x04)
	float MinAcquisitionTime; // 0x34(0x04)
	float MaxAcquisitionTime; // 0x38(0x04)
	float MaxAcquisitionDistance; // 0x3c(0x04)
	float ADSAcquisitionTime; // 0x40(0x04)
	float HoldTargetTime; // 0x44(0x04)
};

// Class Scavenger.S_TeammateInfoDelegateProxy
// Size: 0x38 (Inherited: 0x28)
struct US_TeammateInfoDelegateProxy : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct US_TeammateInfoManager* m_teammateInfoManager; // 0x30(0x08)

	void HandleStormCategoryChanged(enum class ES_StormCategory StormCategory); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleStormCategoryChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleStatsStateChange(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleStatsStateChange // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleStatsSimpleStatChange(enum class ES_StatType StatType, float OldValue, float Delta, float NewValue); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleStatsSimpleStatChange // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleStatsMaximumChange(enum class ES_StatType StatType, float OldValue, float NewValue); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleStatsMaximumChange // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSetShieldLevel(enum class ES_ShieldLevel ShieldLevel); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleSetShieldLevel // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSetPlayerState(struct AS_PlayerState* oldPlayerState, struct AS_PlayerState* newPlayerState); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleSetPlayerState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePlayerClassChanged(struct US_PlayerClassData* PlayerClassData); // Function Scavenger.S_TeammateInfoDelegateProxy.HandlePlayerClassChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePingsUpdated(); // Function Scavenger.S_TeammateInfoDelegateProxy.HandlePingsUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInventoryRemoved(struct FS_ItemState OldItemState); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleInventoryRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleInventoryChanged(struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleInventoryChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleInventoryAdded(struct FS_ItemState NewItemState); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleInventoryAdded // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleCurrentXPChanged(int32_t Xp); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleCurrentXPChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleChangedPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_TeammateInfoDelegateProxy.HandleChangedPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TeammateInfoManager
// Size: 0x170 (Inherited: 0x28)
struct US_TeammateInfoManager : UObject {
	struct TMap<struct AS_PlayerController*, struct FS_TeammateData> m_mapOfPlayerControllerToTeammateData; // 0x28(0x50)
	struct TMap<struct AS_PlayerState*, struct FS_TeamPlayer> m_mapOfPlayerStateToTeamPlayer; // 0x78(0x50)
	struct TMap<int32_t, struct FS_TeamData> m_mapOfTeamIndexToTeamData; // 0xc8(0x50)
	char pad_118[0x8]; // 0x118(0x08)
	struct TArray<struct AS_PlayerController*> m_orderedPlayerControllers; // 0x120(0x10)
	struct US_ItemData* m_pointItemData; // 0x130(0x08)
	char pad_138[0x30]; // 0x138(0x30)
	struct US_ItemData* m_resurrectionTokenItemData; // 0x168(0x08)

	void HandlePlayerTeamChanged(struct AS_PlayerStateBase* PlayerState, int32_t TeamIndex); // Function Scavenger.S_TeammateInfoManager.HandlePlayerTeamChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePlayerControllerLogout(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_TeammateInfoManager.HandlePlayerControllerLogout // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerControllerLogin(struct FS_EventParameterControllerVariant PlayerController); // Function Scavenger.S_TeammateInfoManager.HandlePlayerControllerLogin // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TelemetryManager
// Size: 0x3a8 (Inherited: 0x28)
struct US_TelemetryManager : UObject {
	char pad_28[0x48]; // 0x28(0x48)
	struct US_OnlineServiceManager* m_onlineServiceManager; // 0x70(0x08)
	char pad_78[0x330]; // 0x78(0x330)

	void ReportTutorialMatchPhaseChange(struct FString DojoStateMachineId, struct FString previousPhase, struct FString newPhase, float timeInPreviousPhase); // Function Scavenger.S_TelemetryManager.ReportTutorialMatchPhaseChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportTutorialExit(bool bWasCompleted); // Function Scavenger.S_TelemetryManager.ReportTutorialExit // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportInMatchClientFeatureUsage(enum class ES_InMatchClientInputFeature featureType); // Function Scavenger.S_TelemetryManager.ReportInMatchClientFeatureUsage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportHarvestCompleted(struct AActor* shardActor, struct FString EncounterName, struct FString EncounterType, struct AS_PlayerController* initiatingPlayer, int32_t initiatingPlayerStartLevel, enum class ES_HarvestResult HarvestResult, float timeToHarvestCompletion, int32_t shardYield); // Function Scavenger.S_TelemetryManager.ReportHarvestCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ReportDropshipArrival(struct FVector ArrivalLocation); // Function Scavenger.S_TelemetryManager.ReportDropshipArrival // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterTeamEliminated(struct FString MatchID, int32_t TeamId); // Function Scavenger.S_TelemetryManager.RegisterTeamEliminated // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterServerDebugLog(struct FString Tag, struct FString Text); // Function Scavenger.S_TelemetryManager.RegisterServerDebugLog // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterPlayerJoiningTutorial(struct AS_PlayerController* joiningPlayerController); // Function Scavenger.S_TelemetryManager.RegisterPlayerJoiningTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterMatchEnd(struct FString MatchID, enum class ES_MatchEndReason matchEndReason); // Function Scavenger.S_TelemetryManager.RegisterMatchEnd // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RecordPingMeasurement(float Ping); // Function Scavenger.S_TelemetryManager.RecordPingMeasurement // (Final|Native|Public) // @ game+0xffff8008e4a10000
	struct FString GetTelemetrySessionId(); // Function Scavenger.S_TelemetryManager.GetTelemetrySessionId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_TelemetryManager* GetTelemetryManagerFromGameInstance(struct UGameInstance* GameInstance); // Function Scavenger.S_TelemetryManager.GetTelemetryManagerFromGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetMatchIndexForMatchId(struct FString MatchID); // Function Scavenger.S_TelemetryManager.GetMatchIndexForMatchId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetCurrentMatchId(); // Function Scavenger.S_TelemetryManager.GetCurrentMatchId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EnqueueDetailedRatingReportEvent(struct FS_DetailedRatingReport_Temp Event); // Function Scavenger.S_TelemetryManager.EnqueueDetailedRatingReportEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EnqueueDetailedFeedbackReportEvent(struct FS_DetailedFeedbackReport_Temp Event); // Function Scavenger.S_TelemetryManager.EnqueueDetailedFeedbackReportEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EnqueueBugReportEvent(struct FS_BugReport_Temp Event); // Function Scavenger.S_TelemetryManager.EnqueueBugReportEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TextChatManager
// Size: 0x2590 (Inherited: 0x28)
struct US_TextChatManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMulticastInlineDelegate OnTextChatRoomJoined; // 0x38(0x10)
	struct FMulticastInlineDelegate OnTextChatMessageReceived; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTextChatRoomExited; // 0x58(0x10)
	struct FMulticastInlineDelegate OnControlCommandReceived; // 0x68(0x10)
	char pad_78[0x8]; // 0x78(0x08)
	struct US_ProfanityFilter* m_profanityFilter; // 0x80(0x08)
	char pad_88[0x2508]; // 0x88(0x2508)

	bool SendRoomMessage(enum class ES_TextChatMessageTarget Target, struct FString Message); // Function Scavenger.S_TextChatManager.SendRoomMessage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendPrivateMessage(struct FString PlayerId, struct FString Message); // Function Scavenger.S_TextChatManager.SendPrivateMessage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendControlCommand(struct FString PlayerId, enum class ES_TextChatControlCommand controlCommand, struct TArray<struct FString> arguments); // Function Scavenger.S_TextChatManager.SendControlCommand // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnLoginComplete(); // Function Scavenger.S_TextChatManager.OnLoginComplete // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnDisplayNameCached(struct FString PlayerId, struct FString DisplayName); // Function Scavenger.S_TextChatManager.OnDisplayNameCached // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnDisconnectedRetriesExhausted(enum class ES_SocialDisconnectReason disconnectReason, struct FString ErrorDetails); // Function Scavenger.S_TextChatManager.OnDisconnectedRetriesExhausted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void LeaveRoom(enum class ES_TextChatMessageTarget roomType); // Function Scavenger.S_TextChatManager.LeaveRoom // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsConnected(); // Function Scavenger.S_TextChatManager.IsConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<enum class ES_TextChatMessageTarget> GetJoinedRooms(); // Function Scavenger.S_TextChatManager.GetJoinedRooms // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TimeOfDayAndWeatherComponent
// Size: 0xda0 (Inherited: 0x200)
struct US_TimeOfDayAndWeatherComponent : USceneComponent {
	struct FS_BorderStormData BorderStormData; // 0x1f8(0x80)
	struct FS_CollapsingStormData CollapsingStormData; // 0x278(0x88)
	struct UTexture2D* BorderStormDisplacementMap; // 0x300(0x08)
	struct TArray<struct FS_StormData> RoamingStorms; // 0x308(0x10)
	struct FMulticastInlineDelegate OnRoamingStormRemove; // 0x318(0x10)
	enum class ES_StormCAT CurrentStormCAT; // 0x328(0x01)
	struct FMulticastInlineDelegate OnDefaultTimeOfDayOffsetChanged; // 0x330(0x10)
	struct FMulticastInlineDelegate OnIsTimeOfDayLockedChanged; // 0x340(0x10)
	struct FMulticastInlineDelegate OnTimeOfDayTick; // 0x350(0x10)
	struct AActor* m_weatherAnchor; // 0x360(0x08)
	char pad_369[0x3]; // 0x369(0x03)
	float LengthOfDayInSeconds; // 0x36c(0x04)
	float DefaultTimeOfDayOffset; // 0x370(0x04)
	bool IsTimeOfDayLocked; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	float NightStartTime; // 0x378(0x04)
	float NightEndTime; // 0x37c(0x04)
	struct UCurveFloat* AmbientTemperatureCurve; // 0x380(0x08)
	float FullShelterAmbientTemperatureScalar; // 0x388(0x04)
	float CraterShelterAmbientTemperatureScalar; // 0x38c(0x04)
	float PartialShelterAmbientTemperatureScalar; // 0x390(0x04)
	float AbilitiesShelterAmbientTemperatureScalar; // 0x394(0x04)
	float m_windDirection; // 0x398(0x04)
	float m_windSpeed; // 0x39c(0x04)
	bool m_bForceInStorm; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	int32_t MaxRoamingStormsAtATime; // 0x3a4(0x04)
	float StormMinRadiusSmall; // 0x3a8(0x04)
	float StormMaxRadiusSmall; // 0x3ac(0x04)
	float StormMinRadiusMedium; // 0x3b0(0x04)
	float StormMaxRadiusMedium; // 0x3b4(0x04)
	float StormMinRadiusLarge; // 0x3b8(0x04)
	float StormMaxRadiusLarge; // 0x3bc(0x04)
	float StormRayLengthForSkyBlending; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct UStaticMesh* StormMeshOccluderSmall; // 0x3c8(0x08)
	struct UStaticMesh* StormMeshOccluderMedium; // 0x3d0(0x08)
	struct UStaticMesh* StormMeshOccluderLarge; // 0x3d8(0x08)
	struct UMaterialInterface* StormMaterialOccluderSmall; // 0x3e0(0x08)
	struct UMaterialInterface* StormMaterialOccluderMedium; // 0x3e8(0x08)
	struct UMaterialInterface* StormMaterialOccluderLarge; // 0x3f0(0x08)
	struct UStaticMesh* StormMeshFunnelInnerTopSmall; // 0x3f8(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleTopSmall; // 0x400(0x08)
	struct UStaticMesh* StormMeshFunnelOuterTopSmall; // 0x408(0x08)
	struct UStaticMesh* StormMeshFunnelInnerBottomSmall; // 0x410(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleBottomSmall; // 0x418(0x08)
	struct UStaticMesh* StormMeshFunnelOuterBottomSmall; // 0x420(0x08)
	struct UStaticMesh* StormMeshMistInnerSmall; // 0x428(0x08)
	struct UStaticMesh* StormMeshMistOuterSmall; // 0x430(0x08)
	struct UStaticMesh* StormMeshFinProfileLeftSmall; // 0x438(0x08)
	struct UStaticMesh* StormMeshFinProfileRightSmall; // 0x440(0x08)
	struct UMaterialInterface* StormMaterialInnerSmall; // 0x448(0x08)
	struct UMaterialInterface* StormMaterialMiddleSmall; // 0x450(0x08)
	struct UMaterialInterface* StormMaterialOuterSmall; // 0x458(0x08)
	struct UMaterialInterface* StormMaterialMistInnerSmall; // 0x460(0x08)
	struct UMaterialInterface* StormMaterialMistOuterSmall; // 0x468(0x08)
	struct UMaterialInterface* StormMaterialFinProfileLeftSmall; // 0x470(0x08)
	struct UMaterialInterface* StormMaterialFinProfileRightSmall; // 0x478(0x08)
	struct UParticleSystem* StormParticleSystemDebrisSmall; // 0x480(0x08)
	struct UParticleSystem* StormParticleSystemBurstSmall; // 0x488(0x08)
	float StormBurstMinDelaySmall; // 0x490(0x04)
	float StormBurstMaxDelaySmall; // 0x494(0x04)
	float StormParticleSystemRadiusScaleSmall; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT1LightningColorsSmall; // 0x4a0(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT2LightningColorsSmall; // 0x4b0(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT3LightningColorsSmall; // 0x4c0(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT4LightningColorsSmall; // 0x4d0(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT5LightningColorsSmall; // 0x4e0(0x10)
	float StormLightningConfinementHalfAngleDegreesSmall; // 0x4f0(0x04)
	struct FLinearColor StormEmissiveBrightSmall; // 0x4f4(0x10)
	struct FLinearColor StormEmissiveDeepSmall; // 0x504(0x10)
	struct FLinearColor StormEmissiveHexSmall; // 0x514(0x10)
	char pad_524[0x4]; // 0x524(0x04)
	struct UParticleSystem* StormParticleSystemPreambleSmall; // 0x528(0x08)
	struct UParticleSystem* StormParticleSystemGrowthSmall; // 0x530(0x08)
	struct UParticleSystem* StormParticleSystemShrinkSmall; // 0x538(0x08)
	float StormSkyMaskGrowthDurationSmall; // 0x540(0x04)
	float StormPreambleDurationSmall; // 0x544(0x04)
	float StormGrowthDurationSmall; // 0x548(0x04)
	float StormShrinkDurationSmall; // 0x54c(0x04)
	float StormPostambleDurationSmall; // 0x550(0x04)
	float StormSkyMaskShrinkDurationSmall; // 0x554(0x04)
	struct UStaticMesh* StormMeshFunnelInnerTopMedium; // 0x558(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleTopMedium; // 0x560(0x08)
	struct UStaticMesh* StormMeshFunnelOuterTopMedium; // 0x568(0x08)
	struct UStaticMesh* StormMeshFunnelInnerBottomMedium; // 0x570(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleBottomMedium; // 0x578(0x08)
	struct UStaticMesh* StormMeshFunnelOuterBottomMedium; // 0x580(0x08)
	struct UStaticMesh* StormMeshMistInnerMedium; // 0x588(0x08)
	struct UStaticMesh* StormMeshMistOuterMedium; // 0x590(0x08)
	struct UStaticMesh* StormMeshFinProfileLeftMedium; // 0x598(0x08)
	struct UStaticMesh* StormMeshFinProfileRightMedium; // 0x5a0(0x08)
	struct UMaterialInterface* StormMaterialInnerMedium; // 0x5a8(0x08)
	struct UMaterialInterface* StormMaterialMiddleMedium; // 0x5b0(0x08)
	struct UMaterialInterface* StormMaterialOuterMedium; // 0x5b8(0x08)
	struct UMaterialInterface* StormMaterialMistInnerMedium; // 0x5c0(0x08)
	struct UMaterialInterface* StormMaterialMistOuterMedium; // 0x5c8(0x08)
	struct UMaterialInterface* StormMaterialFinProfileLeftMedium; // 0x5d0(0x08)
	struct UMaterialInterface* StormMaterialFinProfileRightMedium; // 0x5d8(0x08)
	struct UParticleSystem* StormParticleSystemDebrisMedium; // 0x5e0(0x08)
	struct UParticleSystem* StormParticleSystemBurstMedium; // 0x5e8(0x08)
	float StormBurstMinDelayMedium; // 0x5f0(0x04)
	float StormBurstMaxDelayMedium; // 0x5f4(0x04)
	float StormParticleSystemRadiusScaleMedium; // 0x5f8(0x04)
	char pad_5FC[0x4]; // 0x5fc(0x04)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT1LightningColorsMedium; // 0x600(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT2LightningColorsMedium; // 0x610(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT3LightningColorsMedium; // 0x620(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT4LightningColorsMedium; // 0x630(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT5LightningColorsMedium; // 0x640(0x10)
	float StormLightningConfinementHalfAngleDegreesMedium; // 0x650(0x04)
	struct FLinearColor StormEmissiveBrightMedium; // 0x654(0x10)
	struct FLinearColor StormEmissiveDeepMedium; // 0x664(0x10)
	struct FLinearColor StormEmissiveHexMedium; // 0x674(0x10)
	char pad_684[0x4]; // 0x684(0x04)
	struct UParticleSystem* StormParticleSystemPreambleMedium; // 0x688(0x08)
	struct UParticleSystem* StormParticleSystemGrowthMedium; // 0x690(0x08)
	struct UParticleSystem* StormParticleSystemShrinkMedium; // 0x698(0x08)
	float StormSkyMaskGrowthDurationMedium; // 0x6a0(0x04)
	float StormPreambleDurationMedium; // 0x6a4(0x04)
	float StormGrowthDurationMedium; // 0x6a8(0x04)
	float StormShrinkDurationMedium; // 0x6ac(0x04)
	float StormPostambleDurationMedium; // 0x6b0(0x04)
	float StormSkyMaskShrinkDurationMedium; // 0x6b4(0x04)
	struct UStaticMesh* StormMeshFunnelInnerTopLarge; // 0x6b8(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleTopLarge; // 0x6c0(0x08)
	struct UStaticMesh* StormMeshFunnelOuterTopLarge; // 0x6c8(0x08)
	struct UStaticMesh* StormMeshFunnelInnerBottomLarge; // 0x6d0(0x08)
	struct UStaticMesh* StormMeshFunnelMiddleBottomLarge; // 0x6d8(0x08)
	struct UStaticMesh* StormMeshFunnelOuterBottomLarge; // 0x6e0(0x08)
	struct UStaticMesh* StormMeshMistInnerLarge; // 0x6e8(0x08)
	struct UStaticMesh* StormMeshMistOuterLarge; // 0x6f0(0x08)
	struct UStaticMesh* StormMeshFinProfileLeftLarge; // 0x6f8(0x08)
	struct UStaticMesh* StormMeshFinProfileRightLarge; // 0x700(0x08)
	struct UMaterialInterface* StormMaterialInnerLarge; // 0x708(0x08)
	struct UMaterialInterface* StormMaterialMiddleLarge; // 0x710(0x08)
	struct UMaterialInterface* StormMaterialOuterLarge; // 0x718(0x08)
	struct UMaterialInterface* StormMaterialMistInnerLarge; // 0x720(0x08)
	struct UMaterialInterface* StormMaterialMistOuterLarge; // 0x728(0x08)
	struct UMaterialInterface* StormMaterialFinProfileLeftLarge; // 0x730(0x08)
	struct UMaterialInterface* StormMaterialFinProfileRightLarge; // 0x738(0x08)
	struct UParticleSystem* StormParticleSystemDebrisLarge; // 0x740(0x08)
	struct UParticleSystem* StormParticleSystemBurstLarge; // 0x748(0x08)
	float StormBurstMinDelayLarge; // 0x750(0x04)
	float StormBurstMaxDelayLarge; // 0x754(0x04)
	float StormParticleSystemRadiusScaleLarge; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT1LightningColorsLarge; // 0x760(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT2LightningColorsLarge; // 0x770(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT3LightningColorsLarge; // 0x780(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT4LightningColorsLarge; // 0x790(0x10)
	struct TArray<struct UParticleSystem*> StormParticleSystemCAT5LightningColorsLarge; // 0x7a0(0x10)
	float StormLightningConfinementHalfAngleDegreesLarge; // 0x7b0(0x04)
	struct FLinearColor StormEmissiveBrightLarge; // 0x7b4(0x10)
	struct FLinearColor StormEmissiveDeepLarge; // 0x7c4(0x10)
	struct FLinearColor StormEmissiveHexLarge; // 0x7d4(0x10)
	char pad_7E4[0x4]; // 0x7e4(0x04)
	struct UParticleSystem* StormParticleSystemPreambleLarge; // 0x7e8(0x08)
	struct UParticleSystem* StormParticleSystemGrowthLarge; // 0x7f0(0x08)
	struct UParticleSystem* StormParticleSystemShrinkLarge; // 0x7f8(0x08)
	float StormSkyMaskGrowthDurationLarge; // 0x800(0x04)
	float StormPreambleDurationLarge; // 0x804(0x04)
	float StormGrowthDurationLarge; // 0x808(0x04)
	float StormShrinkDurationLarge; // 0x80c(0x04)
	float StormPostambleDurationLarge; // 0x810(0x04)
	float StormSkyMaskShrinkDurationLarge; // 0x814(0x04)
	struct UMaterialInterface* RoamingStormPostProcessMaterial; // 0x818(0x08)
	struct UMaterialInstanceDynamic* RoamingStormPostProcessMaterialInst; // 0x820(0x08)
	struct UPostProcessComponent* RoamingStormPostProcessComponent; // 0x828(0x08)
	struct FVector RoamingStormInsideOutlineColor; // 0x830(0x0c)
	struct FVector RoamingStormOutsideOutlineColor; // 0x83c(0x0c)
	float RoamingStormInsideOutsideOutlineColorTransitionDuration; // 0x848(0x04)
	float RoamingStormOutlineStrokeSize; // 0x84c(0x04)
	float RoamingStormOutlineCullThreshold; // 0x850(0x04)
	float RoamingStormOutlineFadeThreshold; // 0x854(0x04)
	float RoamingStormTerrainZOffset; // 0x858(0x04)
	float RoamingStormSkyMaskMergeDistFactorSmall; // 0x85c(0x04)
	float RoamingStormSkyMaskMergeDistFactorMedium; // 0x860(0x04)
	float RoamingStormSkyMaskMergeDistFactorLarge; // 0x864(0x04)
	float BorderStormXExtent; // 0x868(0x04)
	float BorderStormYExtent; // 0x86c(0x04)
	float BorderStormHeight; // 0x870(0x04)
	float BorderStormThickness; // 0x874(0x04)
	int32_t BorderStormDisplacementMapResolution; // 0x878(0x04)
	float CollapsingStormInitialRadius; // 0x87c(0x04)
	float CollapsingStormInitialHeight; // 0x880(0x04)
	float CollapsingStormOuterOffset; // 0x884(0x04)
	float CollapsingStormOccluderHeight; // 0x888(0x04)
	float CollapsingStormOccluderOffset; // 0x88c(0x04)
	float StormOutOfBoundsRadius; // 0x890(0x04)
	float CollapsingStormPercentageOfRadiusToEnableStorminess; // 0x894(0x04)
	float NoShelterBorderStormTemperatureDecay; // 0x898(0x04)
	float NoShelterCollapsingStormTemperatureDecay; // 0x89c(0x04)
	float PartialShelterCollapsingStormTemperatureDecay; // 0x8a0(0x04)
	float CraterShelterCollapsingStormTemperatureDecay; // 0x8a4(0x04)
	float FullShelterCollapsingStormTemperatureDecay; // 0x8a8(0x04)
	float AbilitiesShelterCollapsingStormTemperatureDecay; // 0x8ac(0x04)
	float NoShelterStormTemperatureDecay; // 0x8b0(0x04)
	float PartialShelterStormTemperatureDecay; // 0x8b4(0x04)
	float CraterShelterStormTemperatureDecay; // 0x8b8(0x04)
	float FullShelterStormTemperatureDecay; // 0x8bc(0x04)
	float AbilitiesShelterStormTemperatureDecay; // 0x8c0(0x04)
	float SnowAccumulationRateCAT1; // 0x8c4(0x04)
	float SnowDissipationRateCAT1; // 0x8c8(0x04)
	float SnowMaxAccumulationCAT1; // 0x8cc(0x04)
	float SnowAccumulationRateCAT2; // 0x8d0(0x04)
	float SnowDissipationRateCAT2; // 0x8d4(0x04)
	float SnowMaxAccumulationCAT2; // 0x8d8(0x04)
	float SnowAccumulationRateCAT3; // 0x8dc(0x04)
	float SnowDissipationRateCAT3; // 0x8e0(0x04)
	float SnowMaxAccumulationCAT3; // 0x8e4(0x04)
	float SnowAccumulationRateCAT4; // 0x8e8(0x04)
	float SnowDissipationRateCAT4; // 0x8ec(0x04)
	float SnowMaxAccumulationCAT4; // 0x8f0(0x04)
	float SnowAccumulationRateCAT5; // 0x8f4(0x04)
	float SnowDissipationRateCAT5; // 0x8f8(0x04)
	float SnowMaxAccumulationCAT5; // 0x8fc(0x04)
	bool EnableBorderStorm; // 0x900(0x01)
	bool EnableCollapsingStorm; // 0x901(0x01)
	bool EnableRoamingStormRendering; // 0x902(0x01)
	bool EnableBorderStormRendering; // 0x903(0x01)
	bool EnableCollapsingStormRendering; // 0x904(0x01)
	bool EnableCollapsingStormOccluders; // 0x905(0x01)
	bool EnableStormPostProcessing; // 0x906(0x01)
	bool EnableBorderStormOutline; // 0x907(0x01)
	bool EnableCollapsingStormOutline; // 0x908(0x01)
	bool EnableRoamingStormOutline; // 0x909(0x01)
	bool EnableRoamingStormOccluders; // 0x90a(0x01)
	bool EnableInStormQualitySettings; // 0x90b(0x01)
	struct FS_InStormQualitySettings InStormQualitySettings; // 0x90c(0x14)
	float StormHeightSmall; // 0x920(0x04)
	float StormHeightMedium; // 0x924(0x04)
	float StormHeightLarge; // 0x928(0x04)
	float StormMistHeightSmall; // 0x92c(0x04)
	float StormMistHeightMedium; // 0x930(0x04)
	float StormMistHeightLarge; // 0x934(0x04)
	float StormMistZOffset; // 0x938(0x04)
	struct FFloatInterval StormCAT1LightningDelay; // 0x93c(0x08)
	struct FInt32Interval StormCAT1LightningNumEffects; // 0x944(0x08)
	struct FFloatInterval StormCAT2LightningDelay; // 0x94c(0x08)
	struct FInt32Interval StormCAT2LightningNumEffects; // 0x954(0x08)
	struct FFloatInterval StormCAT3LightningDelay; // 0x95c(0x08)
	struct FInt32Interval StormCAT3LightningNumEffects; // 0x964(0x08)
	struct FFloatInterval StormCAT4LightningDelay; // 0x96c(0x08)
	struct FInt32Interval StormCAT4LightningNumEffects; // 0x974(0x08)
	struct FFloatInterval StormCAT5LightningDelay; // 0x97c(0x08)
	struct FInt32Interval StormCAT5LightningNumEffects; // 0x984(0x08)
	float StormLightningPopcornMaxDelay; // 0x98c(0x04)
	struct UAkAudioEvent* StormCAT1LightningAkEvent; // 0x990(0x08)
	struct UAkAudioEvent* StormCAT2LightningAkEvent; // 0x998(0x08)
	struct UAkAudioEvent* StormCAT3LightningAkEvent; // 0x9a0(0x08)
	struct UAkAudioEvent* StormCAT4LightningAkEvent; // 0x9a8(0x08)
	struct UAkAudioEvent* StormCAT5LightningAkEvent; // 0x9b0(0x08)
	struct UAkAudioEvent* StormCATLightningAkEventLUT[0x5]; // 0x9b8(0x28)
	char pad_9E0[0x68]; // 0x9e0(0x68)
	struct TMap<int32_t, struct FS_StormClientData> StormClientData; // 0xa48(0x50)
	struct UStaticMeshComponent* BorderStormStaticMeshComponents[0x4]; // 0xa98(0x20)
	struct UStaticMesh* BorderStormStaticMeshPosX; // 0xab8(0x08)
	struct UStaticMesh* BorderStormStaticMeshNegX; // 0xac0(0x08)
	struct UStaticMesh* BorderStormStaticMeshPosY; // 0xac8(0x08)
	struct UStaticMesh* BorderStormStaticMeshNegY; // 0xad0(0x08)
	struct UPostProcessComponent* PostProcessComponentBorderStorm; // 0xad8(0x08)
	struct UMaterialInterface* PostProcessMaterialBorderStorm; // 0xae0(0x08)
	struct FVector BorderStormOutlineColor; // 0xae8(0x0c)
	float BorderStormOutlineEdgeFalloff; // 0xaf4(0x04)
	float BorderStormOutlineFadeThreshold; // 0xaf8(0x04)
	char pad_AFC[0x4]; // 0xafc(0x04)
	struct UMaterialInstanceDynamic* PostProcessMaterialInstBorderStorm; // 0xb00(0x08)
	struct TArray<struct FS_CollapsingStormSegment> CollapsingStormSegments; // 0xb08(0x10)
	struct TArray<struct FS_CollapsingStormOccluderSegment> CollapsingStormOccluderSegments; // 0xb18(0x10)
	struct UStaticMesh* CollapsingStormStaticMesh; // 0xb28(0x08)
	struct UMaterialInterface* CollapsingStormMaterial; // 0xb30(0x08)
	struct UMaterialInterface* CollapsingStormOccluderMaterial; // 0xb38(0x08)
	int32_t CollapsingStormMaxSegments; // 0xb40(0x04)
	int32_t CollapsingStormMaxOccluderSegments; // 0xb44(0x04)
	struct FVector CollapsingStormSafeOutlineColor; // 0xb48(0x0c)
	struct FVector CollapsingStormDangerOutlineColor; // 0xb54(0x0c)
	float CollapsingStormSafeDangerOutlineColorTransitionDuration; // 0xb60(0x04)
	float CollapsingStormOutlineStrokeSize; // 0xb64(0x04)
	float CollapsingStormOutlineCullThreshold; // 0xb68(0x04)
	float CollapsingStormOutlineFadeThreshold; // 0xb6c(0x04)
	struct FLinearColor CollapsingStormEmissiveBright; // 0xb70(0x10)
	struct FLinearColor CollapsingStormEmissiveDeep; // 0xb80(0x10)
	struct FLinearColor CollapsingStormEmissiveHex; // 0xb90(0x10)
	struct FLinearColor CollapsingStormEmissiveHexDetail; // 0xba0(0x10)
	struct UParticleSystem* CollapsingStormAmbientParticleSystem; // 0xbb0(0x08)
	struct UParticleSystem* CollapsingStormRollingParticleSystem; // 0xbb8(0x08)
	struct TArray<struct UParticleSystem*> CollapsingStormParticleSystemCAT1LightningColors; // 0xbc0(0x10)
	struct TArray<struct UParticleSystem*> CollapsingStormParticleSystemCAT2LightningColors; // 0xbd0(0x10)
	struct TArray<struct UParticleSystem*> CollapsingStormParticleSystemCAT3LightningColors; // 0xbe0(0x10)
	struct TArray<struct UParticleSystem*> CollapsingStormParticleSystemCAT4LightningColors; // 0xbf0(0x10)
	struct TArray<struct UParticleSystem*> CollapsingStormParticleSystemCAT5LightningColors; // 0xc00(0x10)
	struct FFloatInterval CollapsingStormCAT1LightningDelay; // 0xc10(0x08)
	struct FInt32Interval CollapsingStormCAT1LightningNumEffects; // 0xc18(0x08)
	struct FFloatInterval CollapsingStormCAT2LightningDelay; // 0xc20(0x08)
	struct FInt32Interval CollapsingStormCAT2LightningNumEffects; // 0xc28(0x08)
	struct FFloatInterval CollapsingStormCAT3LightningDelay; // 0xc30(0x08)
	struct FInt32Interval CollapsingStormCAT3LightningNumEffects; // 0xc38(0x08)
	struct FFloatInterval CollapsingStormCAT4LightningDelay; // 0xc40(0x08)
	struct FInt32Interval CollapsingStormCAT4LightningNumEffects; // 0xc48(0x08)
	struct FFloatInterval CollapsingStormCAT5LightningDelay; // 0xc50(0x08)
	struct FInt32Interval CollapsingStormCAT5LightningNumEffects; // 0xc58(0x08)
	float CollapsingStormLightningPopcornMaxDelay; // 0xc60(0x04)
	float CollapsingStormPercentChanceOfLightning; // 0xc64(0x04)
	float CollapsingStormHologramEnableDistanceThreshold; // 0xc68(0x04)
	float CollapsingStormOccluderEnableDistanceThreshold; // 0xc6c(0x04)
	char pad_C70[0x38]; // 0xc70(0x38)
	struct UMaterialParameterCollection* WindMPC; // 0xca8(0x08)
	struct UMaterialParameterCollection* TerrainWindMPC; // 0xcb0(0x08)
	struct FVector2D MaxGlobalWindSpeedStrength; // 0xcb8(0x08)
	struct FVector2D MaxStormWindSpeedStrength; // 0xcc0(0x08)
	struct FVector2D MaxGlobalTreeWindSpeedStrength; // 0xcc8(0x08)
	struct FVector2D MaxStormTreeWindSpeedStrength; // 0xcd0(0x08)
	struct UPostProcessComponent* PostProcessComponentRoamingStorm; // 0xcd8(0x08)
	struct FMulticastInlineDelegate Cheat_SetStormCategory; // 0xce0(0x10)
	char pad_CF0[0x10]; // 0xcf0(0x10)
	struct US_StormWindSourceComponent* StormWindSourceComponent; // 0xd00(0x08)
	struct US_GlobalWindSourceComponent* GlobalWindSourceComponent; // 0xd08(0x08)
	char pad_D10[0x8]; // 0xd10(0x08)
	struct FMulticastInlineDelegate OnWindUpdate; // 0xd18(0x10)
	struct FMulticastInlineDelegate OnDayNightTransition; // 0xd28(0x10)
	char pad_D38[0x68]; // 0xd38(0x68)

	void SetWindSpeed(float Speed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetWindSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetWindDirection(float Direction); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetWindDirection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTimeOfDay(float newTimeOfDay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetTimeOfDay // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPartialShelterStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetPartialShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPartialShelterCollapsingStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetPartialShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNoShelterStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNoShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNoShelterCollapsingStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNoShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNoShelterBorderStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNoShelterBorderStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNightStartTime(float NewNightStartTime); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNightStartTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNightStartEndTime(float NewNightStartTime, float NewNightEndTime); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNightStartEndTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNightEndTime(float NewNightEndTime); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetNightEndTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxStormWindStrength(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxStormWindStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxStormWindSpeed(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxStormWindSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxStormTreeWindStrength(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxStormTreeWindStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxStormTreeWindSpeed(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxStormTreeWindSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxGlobalWindStrength(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxGlobalWindStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxGlobalWindSpeed(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxGlobalWindSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxGlobalTreeWindStrength(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxGlobalTreeWindStrength // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxGlobalTreeWindSpeed(float NewMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetMaxGlobalTreeWindSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLengthOfDayInSeconds(float NewLengthOfDayInSeconds); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetLengthOfDayInSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFullShelterStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetFullShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFullShelterCollapsingStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetFullShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetForceInStorm(bool isForced); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetForceInStorm // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDefaultTimeOfDayOffset(float NewTimeOfDayOffset); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetDefaultTimeOfDayOffset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentStormCAT(enum class ES_StormCAT StormCAT); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetCurrentStormCAT // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCraterShelterStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetCraterShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCraterShelterCollapsingStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetCraterShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCollapsingStormRadius(float NewRadius); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetCollapsingStormRadius // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCollapsingStormLocation(struct FVector NewLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetCollapsingStormLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBorderStormLocation(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetBorderStormLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBorderStormExtents(float XExtent, float YExtent); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetBorderStormExtents // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAbilitiesShelterCollapsingStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetAbilitiesShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAbilitesShelterStormTemperatureDecay(float NewDecay); // Function Scavenger.S_TimeOfDayAndWeatherComponent.SetAbilitesShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RoamingStormSpawn(struct FVector Location, struct FVector MovementDirection, float Radius, float GroundSpeed, float RotationalSpeed, float Turbulence, struct FLinearColor Tint, int32_t OutStormId); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormSpawn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormSetOutlineStrokeSizeById(int32_t StormId, float OutlineStrokeSize); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormSetOutlineStrokeSizeById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormSetOutlineColorById(int32_t StormId, struct FVector OutlineColor); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormSetOutlineColorById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormGetStormIdsSortedNearToFar(struct FVector Location, struct TArray<int32_t> OutStormIds); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetStormIdsSortedNearToFar // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RoamingStormGetStormIdsSortedLargestToSmallest(struct FVector Location, struct TArray<int32_t> OutStormIds); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetStormIdsSortedLargestToSmallest // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RoamingStormGetStormIdsSortedByPriority(struct FVector Location, struct TArray<int32_t> OutStormIds); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetStormIdsSortedByPriority // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RoamingStormGetStormIds(struct TArray<int32_t> OutStormIds); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetStormIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RoamingStormGetStormDataForSkyBlending(struct FVector Location, int32_t MaxStormsSupported, struct TArray<int32_t> OutStormIds, struct TArray<struct FVector> OutStormLocations, struct TArray<struct FVector> OutStormSizeInfo); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetStormDataForSkyBlending // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RoamingStormGetSizeById(int32_t StormId, enum class ES_StormSize OutSize); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetSizeById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool RoamingStormGetRotationalSpeedById(int32_t StormId, float OutGroundSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetRotationalSpeedById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool RoamingStormGetRadiusById(int32_t StormId, float OutRadius); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetRadiusById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t RoamingStormGetNumStorms(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetNumStorms // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector RoamingStormGetNormalizedBiasedDirectionFromStartLocation(struct FVector StartLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetNormalizedBiasedDirectionFromStartLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool RoamingStormGetMovementDirectionById(int32_t StormId, struct FVector OutMovementDirection); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetMovementDirectionById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool RoamingStormGetLocationById(int32_t StormId, struct FVector OutLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetLocationById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool RoamingStormGetGroundSpeedById(int32_t StormId, float OutGroundSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormGetGroundSpeedById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void RoamingStormDestroyById(int32_t StormId); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormDestroyById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormDestroyAllStorms(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormDestroyAllStorms // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginTintTransitionById(int32_t StormId, struct FLinearColor TargetTint, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginTintTransitionById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginRotationalSpeedTransitionById(int32_t StormId, float TargetRotationalSpeed, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginRotationalSpeedTransitionById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginRadiusTransitionById(int32_t StormId, float TargetRadius, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginRadiusTransitionById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginOutlineStrokeSizeTransitionById(int32_t StormId, float TargetStrokeSize, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginOutlineStrokeSizeTransitionById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginOutlineColorTransitionById(int32_t StormId, struct FVector TargetColor, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginOutlineColorTransitionById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginGroundSpeedTransitionById(int32_t StormId, float TargetGroundSpeed, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginGroundSpeedTransitionById // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RoamingStormBeginDirectionTransitionById(int32_t StormId, struct FVector TargetDirection, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.RoamingStormBeginDirectionTransitionById // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_RoamingStorms(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.OnRep_RoamingStorms // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_CollapsingStorm(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.OnRep_CollapsingStorm // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedIsTimeOfDayLocked(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.NotifyReplicatedIsTimeOfDayLocked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedDefaultTimeOfDayOffset(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.NotifyReplicatedDefaultTimeOfDayOffset // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void LockTimeOfDay(bool LockIt); // Function Scavenger.S_TimeOfDayAndWeatherComponent.LockTimeOfDay // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsNighttime(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsNighttime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLookAtLocationOccludedByAnyStorm(struct FVector CameraLocation, struct FVector LookAtLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLookAtLocationOccludedByAnyStorm // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInStorm(struct FVector testLocation, struct FS_StormData stormData); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInStorm // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInCollapsingStormPath(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInCollapsingStormPath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInCollapsingStorm(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInCollapsingStorm // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInCircle2D(struct FVector testLocation, struct FVector circleLocation, float circleRadius, float radiusScaleModifier, float radiusConstantModifier); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInCircle2D // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInBorderStorm(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInBorderStorm // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StormCategory IsLocationInAnyStormCategory(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInAnyStormCategory // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocationInAnyStorm(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsLocationInAnyStorm // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCollapsingStormRenderingEnabled(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsCollapsingStormRenderingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCollapsingStormEnabled(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsCollapsingStormEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsCollapsingStormCurrentlyCollapsing(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsCollapsingStormCurrentlyCollapsing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBorderStormRenderingEnabled(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsBorderStormRenderingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBorderStormEnabled(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.IsBorderStormEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetWindVector(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetWindValuesNormalized(struct FVector OutDirection, float OutSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindValuesNormalized // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetWindValuesAtLocationNormalized(struct FVector Location, struct FVector OutDirection, float OutSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindValuesAtLocationNormalized // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetWindValuesAtLocation(struct FVector Location, struct FVector OutDirection, float OutSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindValuesAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetWindValues(struct FVector OutDirection, float OutSpeed); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindValues // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetWindSpeedAtLocationNormalized(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindSpeedAtLocationNormalized // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetWindSpeedAtLocation(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindSpeedAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetWindSpeed(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetWindDirectionAtLocation(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindDirectionAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetWindDirection(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWindDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetWind(float Direction, float Force); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetWind // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTimeOfDay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetTimeOfDay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetStormWindSpeedAndStrengthAtLocation(struct FVector Location, float OutSpeed, float OutStrength); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetStormWindSpeedAndStrengthAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetStormWindDirectionAtLocation(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetStormWindDirectionAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetStorminessAtLocation(struct FVector Location); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetStorminessAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetSnowCoverageRates(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetSnowCoverageRates // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetRandomValidStormSpawn(struct FBox2D LevelBounds, float stormRadius, float minimumDistanceFromAnyPlayer); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetRandomValidStormSpawn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetPartialShelterStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetPartialShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetPartialShelterCollapsingStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetPartialShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNoShelterStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNoShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNoShelterCollapsingStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNoShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNoShelterBorderStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNoShelterBorderStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNightStartTime(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNightStartTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetNightStartEndTime(float OutNightStartTime, float OutNightEndTime); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNightStartEndTime // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNightEndTime(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetNightEndTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetMinMaxGroundSpeedForAllRoamingStorms(float OutMin, float OutMax); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMinMaxGroundSpeedForAllRoamingStorms // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxStormWindStrength(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxStormWindStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxStormWindSpeed(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxStormWindSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxStormTreeWindStrength(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxStormTreeWindStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxStormTreeWindSpeed(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxStormTreeWindSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxSnowAccumulation(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxSnowAccumulation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxGlobalWindStrength(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxGlobalWindStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxGlobalWindSpeed(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxGlobalWindSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxGlobalTreeWindStrength(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxGlobalTreeWindStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxGlobalTreeWindSpeed(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetMaxGlobalTreeWindSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetLengthOfDayInSeconds(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetLengthOfDayInSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetIntermediateCollapsingStormDataFromBeginEndLocations(struct FS_CollapsingStormIncludeLocation BeginData, struct FS_CollapsingStormIncludeLocation EndData, struct TArray<float> IntermediateRadii, struct TArray<struct FVector> OutIntermediateData); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetIntermediateCollapsingStormDataFromBeginEndLocations // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void GetGlobalWindSpeedAndStrength(float OutSpeed, float OutStrength); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetGlobalWindSpeedAndStrength // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetFullShelterStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetFullShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetFullShelterCollapsingStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetFullShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetForceInStorm(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetForceInStorm // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetDistanceSquaredToClosestStorm(struct FVector testLocation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetDistanceSquaredToClosestStorm // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetDefaultTimeOfDayOffset(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetDefaultTimeOfDayOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_StormCAT GetCurrentStormCAT(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCurrentStormCAT // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCraterShelterStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCraterShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCraterShelterCollapsingStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCraterShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCollapsingStormRadius(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetCollapsingStormOutlineColor(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormOutlineColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCollapsingStormNextRadius(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormNextRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetCollapsingStormNextLocation(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormNextLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetCollapsingStormLocation(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetCollapsingStormDataFromIncludeLocations(struct TArray<struct FS_CollapsingStormIncludeLocation> IncludeLocations, struct FVector OutCenter, float OutRadius, float MaxVariation); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetCollapsingStormDataFromIncludeLocations // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector GetBorderStormLocation(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetBorderStormLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetBorderStormExtents(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetBorderStormExtents // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAbilitiesShelterStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetAbilitiesShelterStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAbilitiesShelterCollapsingStormTemperatureDecay(); // Function Scavenger.S_TimeOfDayAndWeatherComponent.GetAbilitiesShelterCollapsingStormTemperatureDecay // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float DistanceSquaredToStorm(struct FVector testLocation, struct FS_StormData stormData); // Function Scavenger.S_TimeOfDayAndWeatherComponent.DistanceSquaredToStorm // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CollapsingStormEnableRendering(bool Enable); // Function Scavenger.S_TimeOfDayAndWeatherComponent.CollapsingStormEnableRendering // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void CollapsingStormEnableOutline(bool Enable); // Function Scavenger.S_TimeOfDayAndWeatherComponent.CollapsingStormEnableOutline // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginCollapsingStormRadiusTransition(float NewRadius, float TransitionDuration, float MaxTransitionInMetersPerSecond); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginCollapsingStormRadiusTransition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginCollapsingStormRadiusScaleTransition(float RadiusScale, float TransitionDuration, float MaxTransitionInMetersPerSecond); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginCollapsingStormRadiusScaleTransition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginCollapsingStormLocationTransition(struct FVector NewLocation, float TransitionDuration, float MaxTransitionInMetersPerSecond); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginCollapsingStormLocationTransition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginCollapsingStormLocationAndRadiusTransition(struct FVector NewLocation, float NewRadius, float TransitionDuration, float MaxTransitionInMetersPerSecond); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginCollapsingStormLocationAndRadiusTransition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginBorderStormLocationTransition(struct FVector NewLocation, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginBorderStormLocationTransition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginBorderStormExtentsUniformScaleTransition(float ExtentUniformScale, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginBorderStormExtentsUniformScaleTransition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginBorderStormExtentsTransition(float NewXExtent, float NewYExtent, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginBorderStormExtentsTransition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginBorderStormExtentsScaleTransition(float XExtentScale, float YExtentScale, float TransitionDuration); // Function Scavenger.S_TimeOfDayAndWeatherComponent.BeginBorderStormExtentsScaleTransition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TinkeringVisMeshComponent
// Size: 0x4f0 (Inherited: 0x4e0)
struct US_TinkeringVisMeshComponent : UStaticMeshComponent {
	char pad_4E0[0x10]; // 0x4e0(0x10)
};

// Class Scavenger.S_TinkeringVisualization
// Size: 0x2b0 (Inherited: 0x288)
struct AS_TinkeringVisualization : AActor {
	struct US_TinkeringVisMeshComponent* TinkeringMeshComponent; // 0x288(0x08)
	float DefaultScalar; // 0x290(0x04)
	struct FLinearColor DefaultColor; // 0x294(0x10)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct UTexture* DefaultTexture; // 0x2a8(0x08)

	void UpdateMaterials(); // Function Scavenger.S_TinkeringVisualization.UpdateMaterials // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void TransferProperties(struct UMaterialInterface* SourceSectionMat, struct FString SourceSectionName, struct UMaterialInstanceDynamic* TargetTinkerMat); // Function Scavenger.S_TinkeringVisualization.TransferProperties // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTinkerVector(struct FLinearColor VectorProperty, struct FString PropertyName, struct UMaterialInstanceDynamic* TargetTinkerMat); // Function Scavenger.S_TinkeringVisualization.SetTinkerVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTinkerTexture(struct UTexture* TextureProperty, struct FString PropertyName, struct UMaterialInstanceDynamic* TargetTinkerMat); // Function Scavenger.S_TinkeringVisualization.SetTinkerTexture // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTinkerScalar(float ScalarProperty, struct FString PropertyName, struct UMaterialInstanceDynamic* TargetTinkerMat); // Function Scavenger.S_TinkeringVisualization.SetTinkerScalar // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TinkeringUtilFunctions
// Size: 0x28 (Inherited: 0x28)
struct US_TinkeringUtilFunctions : UBlueprintFunctionLibrary {

	void UpdateCosmeticMaterialSlotName(struct UDataTable* CosmeticDT, struct FName TargetCosmetic, struct FName OldMaterialName, struct FName NewMaterialName); // Function Scavenger.S_TinkeringUtilFunctions.UpdateCosmeticMaterialSlotName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SortFNameArray(struct TArray<struct FName> Names, struct TArray<struct FString> OutStrings); // Function Scavenger.S_TinkeringUtilFunctions.SortFNameArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTinkerPackData(struct UDataTable* TinkerDT, struct FName PackName, struct TMap<struct FName, struct FName> Data); // Function Scavenger.S_TinkeringUtilFunctions.SetTinkerPackData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ReplaceTinkerMatUsage(struct UDataTable* TinkerDT, struct FString RowName, struct FString SlotName, struct FString NewMaterial); // Function Scavenger.S_TinkeringUtilFunctions.ReplaceTinkerMatUsage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RenameSubmaterial(struct UDataTable* SubmaterialDT, struct UDataTable* TinkerDT, struct UMaterialInstance* MaterialRef, struct FString OldName, struct FString NewName); // Function Scavenger.S_TinkeringUtilFunctions.RenameSubmaterial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveTinkerPackFromCosmetic(struct UDataTable* TinkerDT, struct UDataTable* CosmeticDT, struct FName TargetPack, struct FName TargetCosmetic); // Function Scavenger.S_TinkeringUtilFunctions.RemoveTinkerPackFromCosmetic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FixSlotNames(struct UDataTable* CosmeticDT); // Function Scavenger.S_TinkeringUtilFunctions.FixSlotNames // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DeleteTinkerPack(struct UDataTable* TinkerDT, struct UDataTable* CosmeticDT, struct FName TargetPack); // Function Scavenger.S_TinkeringUtilFunctions.DeleteTinkerPack // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CreateTinkerPack(struct UDataTable* TinkerDT, struct FName NewPackName); // Function Scavenger.S_TinkeringUtilFunctions.CreateTinkerPack // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddTinkerPackToCosmetic(struct UDataTable* TinkerDT, struct UDataTable* CosmeticDT, struct FName TargetPack, struct FName TargetCosmetic); // Function Scavenger.S_TinkeringUtilFunctions.AddTinkerPackToCosmetic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UIAudioSystem
// Size: 0x30 (Inherited: 0x28)
struct US_UIAudioSystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void TriggerUIEvent(struct UAkAudioEvent* AkEvent); // Function Scavenger.S_UIAudioSystem.TriggerUIEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PushUIMenuOpen(struct FString menuName); // Function Scavenger.S_UIAudioSystem.PushUIMenuOpen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PopUIMenuOpen(struct FString menuName); // Function Scavenger.S_UIAudioSystem.PopUIMenuOpen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_TierIdentificationAsset
// Size: 0x50 (Inherited: 0x30)
struct US_TierIdentificationAsset : UDataAsset {
	struct TArray<struct FS_NewTierIdentification> RankedTiers; // 0x30(0x10)
	struct TArray<struct FS_NewTierIdentification> RankedTiersForPlayers; // 0x40(0x10)
};

// Class Scavenger.S_SquadIndicatorColorsAsset
// Size: 0x40 (Inherited: 0x30)
struct US_SquadIndicatorColorsAsset : UDataAsset {
	struct TArray<struct FLinearColor> SquadIndicatorColors; // 0x30(0x10)
};

// Class Scavenger.S_UMGCommonKey
// Size: 0x550 (Inherited: 0x4b8)
struct US_UMGCommonKey : US_WidgetMinimal {
	struct FText ButtonTextKey; // 0x4b8(0x18)
	struct UDataTable* DisplayTextStyleSet; // 0x4d0(0x08)
	struct FText DisplayTextRichTextLabel; // 0x4d8(0x18)
	struct FText DisplayText; // 0x4f0(0x18)
	bool OverrideKeySize; // 0x508(0x01)
	char pad_509[0x3]; // 0x509(0x03)
	struct FVector2D SizeOverride; // 0x50c(0x08)
	char pad_514[0x4]; // 0x514(0x04)
	struct US_RichTextBlock* KeyImage; // 0x518(0x08)
	struct USizeBox* CommonKeySizeBox; // 0x520(0x08)
	char pad_528[0x28]; // 0x528(0x28)

	void SetLabelForAction(enum class ES_GameInputActionType ActionType, enum class ES_InputActionFlag InputActionFlag, enum class ES_InputPriorityFlag inputPriorityFlag, enum class ES_InputDeviceFlag inputDeviceFlag, struct FString Tag, struct FText labelDisplayText); // Function Scavenger.S_UMGCommonKey.SetLabelForAction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLabel(struct FText KeyboardAndMouseLabel, struct FText GamepadLabel, bool bUsingGamepad, struct FText labelDisplayText); // Function Scavenger.S_UMGCommonKey.SetLabel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleUserInputSettingsChanged(struct FS_UserInputSettings OldSettings, struct FS_UserInputSettings NewSettings); // Function Scavenger.S_UMGCommonKey.HandleUserInputSettingsChanged // (Final|Native|Public|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGContentArea
// Size: 0x150 (Inherited: 0x128)
struct US_UMGContentArea : UContentWidget {
	struct FVector2D ContentAreaSize; // 0x128(0x08)
	char pad_130[0x20]; // 0x130(0x20)
};

// Class Scavenger.S_EffectContainerWidget
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_EffectContainerWidget : US_WidgetMinimal {
	struct URetainerBox* EffectRetainerBox; // 0x4b8(0x08)
	struct UCanvasPanel* EffectCanvasPanel; // 0x4c0(0x08)
	bool bAlwaysUpdate; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)

	void RemoveWidgetFromContainer(struct UUserWidget* Widget); // Function Scavenger.S_EffectContainerWidget.RemoveWidgetFromContainer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddWidgetToContainer(struct UUserWidget* Widget); // Function Scavenger.S_EffectContainerWidget.AddWidgetToContainer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGCinematicCameraHUD
// Size: 0x640 (Inherited: 0x640)
struct US_UMGCinematicCameraHUD : US_UMGHUD {
};

// Class Scavenger.S_UMGHUDSplashScreen
// Size: 0x640 (Inherited: 0x640)
struct US_UMGHUDSplashScreen : US_UMGHUD {

	void HandleTransition(struct US_GameTransitionManager* TransitionManager, enum class ES_GameLocation Location); // Function Scavenger.S_UMGHUDSplashScreen.HandleTransition // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleEulaResult(bool wasAccepted); // Function Scavenger.S_UMGHUDSplashScreen.HandleEulaResult // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGHUDSession
// Size: 0x6e0 (Inherited: 0x640)
struct US_UMGHUDSession : US_UMGHUD {
	struct AS_PlayerController* m_scavPlayerController; // 0x640(0x08)
	struct FS_SpawnableWidget PlayerCountWidget; // 0x648(0x30)
	struct FS_SpawnableWidget TeamStatusTrayWidget; // 0x678(0x30)
	struct US_EffectContainerWidget* ParabolaEffectContainerClass; // 0x6a8(0x08)
	struct AS_HUD* m_baseHud; // 0x6b0(0x08)
	char pad_6B8[0x8]; // 0x6b8(0x08)
	struct US_WidgetTeamStatusTray* m_teamStatusTray; // 0x6c0(0x08)
	struct US_WidgetMinimal* m_playerCount; // 0x6c8(0x08)
	struct US_EffectContainerWidget* m_parabolaEffectContainer; // 0x6d0(0x08)
	char pad_6D8[0x8]; // 0x6d8(0x08)

	struct US_WidgetTeamStatusTray* GetTeamStatusTray(); // Function Scavenger.S_UMGHUDSession.GetTeamStatusTray // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetPlayerCountWidget(); // Function Scavenger.S_UMGHUDSession.GetPlayerCountWidget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerController* GetPlayerController(); // Function Scavenger.S_UMGHUDSession.GetPlayerController // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_CharacterMovementComponent* GetPlayerCharacterMovementComponent(); // Function Scavenger.S_UMGHUDSession.GetPlayerCharacterMovementComponent // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerCharacter* GetPlayerCharacter(); // Function Scavenger.S_UMGHUDSession.GetPlayerCharacter // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGHUDInGame
// Size: 0xff0 (Inherited: 0x6e0)
struct US_UMGHUDInGame : US_UMGHUDSession {
	float ReticleOverEnemyBoundsScoreThreshold; // 0x6e0(0x04)
	float TargetBoundingSphere; // 0x6e4(0x04)
	float NotUnderReticleTimeout; // 0x6e8(0x04)
	char pad_6EC[0x4]; // 0x6ec(0x04)
	struct TArray<struct FS_TeamMiniscoreboardStatus> TeamMiniScoreboardStatusArray; // 0x6f0(0x10)
	struct FName MessageFeedName; // 0x700(0x08)
	struct FName GameLobbyDetailsName; // 0x708(0x08)
	int32_t m_currentExperienceLevel; // 0x710(0x04)
	int32_t m_currentXP; // 0x714(0x04)
	int32_t m_maximumXP; // 0x718(0x04)
	float m_percentageXP; // 0x71c(0x04)
	bool m_hasStats; // 0x720(0x01)
	char pad_721[0x3]; // 0x721(0x03)
	int32_t m_currentHealth; // 0x724(0x04)
	int32_t m_maximumHealth; // 0x728(0x04)
	float m_percentageHealth; // 0x72c(0x04)
	struct FText GameStatusText; // 0x730(0x18)
	struct FText GameTimerText; // 0x748(0x18)
	struct FText MessageFeedLine1Text; // 0x760(0x18)
	struct FText MessageFeedLine2Text; // 0x778(0x18)
	struct FText MessageFeedLine3Text; // 0x790(0x18)
	struct FText MessageFeedLine4Text; // 0x7a8(0x18)
	struct FText MessageFeedLine5Text; // 0x7c0(0x18)
	struct FText MessageFeedLine6Text; // 0x7d8(0x18)
	struct FText MessageFeedLine7Text; // 0x7f0(0x18)
	struct FText MessageFeedLine8Text; // 0x808(0x18)
	struct FText MessageFeedLine9Text; // 0x820(0x18)
	struct FText MessageFeedLine10Text; // 0x838(0x18)
	struct TArray<struct FText> MessageFeedLines; // 0x850(0x10)
	float StatusMessageFadeTime; // 0x860(0x04)
	float ImportantMessageFadeTime; // 0x864(0x04)
	struct US_WidgetMinimal* MiniMapClass; // 0x868(0x08)
	struct US_WidgetMinimal* GameProgressClass; // 0x870(0x08)
	struct FS_SpawnableWidget EquipmentTrayWidget; // 0x878(0x30)
	struct US_WidgetMinimal* CompassClass; // 0x8a8(0x08)
	struct US_WidgetMinimal* RadialCompassClass; // 0x8b0(0x08)
	struct US_WidgetMinimal* DebugInfoClass; // 0x8b8(0x08)
	struct US_HUDAllyIcon* AllyIconWidgetClass; // 0x8c0(0x08)
	int32_t MaximumNumberOfAllyIconWidgets; // 0x8c8(0x04)
	char pad_8CC[0x4]; // 0x8cc(0x04)
	struct US_HUDGrenadeIndicator* GrenadeIndicatorClass; // 0x8d0(0x08)
	int32_t MaximumNumberOfGrenadeIndicatorWidgets; // 0x8d8(0x04)
	char pad_8DC[0x4]; // 0x8dc(0x04)
	struct FS_SpawnableWidget XpBarWidget; // 0x8e0(0x30)
	struct FS_SpawnableWidget StormCategoryWidget; // 0x910(0x30)
	struct US_WidgetMinimal* InteractClass; // 0x940(0x08)
	struct FS_SpawnableWidget VehicleTrayWidget; // 0x948(0x30)
	struct US_WidgetMinimal* StormCategoryClass; // 0x978(0x08)
	struct FS_SpawnableWidget TimedInteractionPanelWidget; // 0x980(0x30)
	struct FS_SpawnableWidget LastPlayerStandingWidget; // 0x9b0(0x30)
	struct FS_SpawnableWidget GameStatusWidget; // 0x9e0(0x30)
	struct US_WidgetMinimal* MessageFeedLineClass; // 0xa10(0x08)
	struct US_HUDDamageNumber* DamageNumberClass; // 0xa18(0x08)
	int32_t MaximumCountOfDamageNumbers; // 0xa20(0x04)
	char pad_A24[0x4]; // 0xa24(0x04)
	struct US_HUDTargetInfo* TargetInfoClass; // 0xa28(0x08)
	int32_t MaxTargetInfoWidgetCount; // 0xa30(0x04)
	char pad_A34[0x4]; // 0xa34(0x04)
	struct US_HUDPingItem* PingLocationWidgetClass; // 0xa38(0x08)
	struct US_WidgetHitMarker* HitMarkerWidgetClass; // 0xa40(0x08)
	struct US_WidgetInteractableIcon* InteractableIconClass; // 0xa48(0x08)
	struct FS_SpawnableWidget DownedWidget; // 0xa50(0x30)
	struct FS_SpawnableWidget DataUplinkWidget; // 0xa80(0x30)
	struct FS_SpawnableWidget LevelUpWidget; // 0xab0(0x30)
	struct US_WidgetCraftingNotificationPanel* CraftingCompleteClass; // 0xae0(0x08)
	struct FS_SpawnableWidget InventoryToastWidget; // 0xae8(0x30)
	struct FS_SpawnableWidget InStormWarningWidget; // 0xb18(0x30)
	struct FS_SpawnableWidget LocationToastWidget; // 0xb48(0x30)
	struct FS_SpawnableWidget MarkedWarningToast; // 0xb78(0x30)
	struct US_WidgetMinimal* DirectionalDamageClass; // 0xba8(0x08)
	struct US_WidgetMinimal* ShotBlockedClass; // 0xbb0(0x08)
	struct FS_SpawnableWidget SprintReticleWidget; // 0xbb8(0x30)
	struct UCanvasPanel* CANVAS_Main; // 0xbe8(0x08)
	struct UVerticalBox* GameLobbyDetails; // 0xbf0(0x08)
	struct US_WidgetGutter* m_pingGutter; // 0xbf8(0x08)
	struct US_WidgetGutter* m_outerPingGutter; // 0xc00(0x08)
	char bSpawnRegularCompass : 1; // 0xc08(0x01)
	char pad_C08_1 : 7; // 0xc08(0x01)
	char pad_C09[0x7]; // 0xc09(0x07)
	struct TArray<struct US_HUDDamageNumber*> m_damageNumberWidgetArray; // 0xc10(0x10)
	char pad_C20[0x8]; // 0xc20(0x08)
	struct TArray<struct US_HUDTargetInfo*> m_targetInfoWidgets; // 0xc28(0x10)
	struct TArray<struct US_HUDAllyIcon*> m_allyIconWidgets; // 0xc38(0x10)
	struct TArray<struct US_HUDGrenadeIndicator*> m_GrenadeIndicators; // 0xc48(0x10)
	struct US_WidgetInventory* m_widgetInventory; // 0xc58(0x08)
	struct TArray<struct US_HUDPingItem*> m_widgetPingItems; // 0xc60(0x10)
	struct TArray<struct US_HUDPingBase*> m_widgetPingWaypoints; // 0xc70(0x10)
	struct TArray<struct US_WidgetInteractableIcon*> m_widgetInteractableIcons; // 0xc80(0x10)
	char pad_C90[0x260]; // 0xc90(0x260)
	struct US_WidgetMinimal* m_miniMap; // 0xef0(0x08)
	struct US_WidgetMinimal* m_gameProgress; // 0xef8(0x08)
	struct US_WidgetMinimal* M_Compass; // 0xf00(0x08)
	struct US_WidgetMinimal* M_RadialCompass; // 0xf08(0x08)
	struct US_WidgetMinimal* m_interact; // 0xf10(0x08)
	struct US_WidgetMinimal* m_debugInfo; // 0xf18(0x08)
	struct US_WidgetVehicleTray* m_vehicleTray; // 0xf20(0x08)
	struct US_WidgetMinimal* m_stormCategory; // 0xf28(0x08)
	struct US_WidgetTimedInteraction* m_timedInteraction; // 0xf30(0x08)
	struct US_WidgetMinimal* m_lastPlayerStanding; // 0xf38(0x08)
	struct US_WidgetMinimal* m_gameStatus; // 0xf40(0x08)
	struct US_WidgetDataUplinkInteraction* m_dataUplink; // 0xf48(0x08)
	struct US_WidgetMinimal* m_levelUpToast; // 0xf50(0x08)
	struct US_WidgetCraftingNotificationPanel* m_craftingCompleteToast; // 0xf58(0x08)
	struct US_WidgetMinimal* m_inventoryToast; // 0xf60(0x08)
	struct US_WidgetStormWarning* m_inStormWarningToast; // 0xf68(0x08)
	struct US_WidgetMinimal* m_locationToast; // 0xf70(0x08)
	struct US_WidgetMinimal* m_markedWarningToast; // 0xf78(0x08)
	struct UVerticalBox* m_cachedMessageFeedWidget; // 0xf80(0x08)
	struct US_HUDReticule* m_currentReticle; // 0xf88(0x08)
	struct US_HUDReticule* m_sprintReticle; // 0xf90(0x08)
	struct US_WidgetHitMarker* m_hitMarker; // 0xf98(0x08)
	struct US_WidgetWeaponSight* m_currentSight; // 0xfa0(0x08)
	struct TArray<struct AActor*> m_predictiveKillActors; // 0xfa8(0x10)
	char pad_FB8[0x10]; // 0xfb8(0x10)
	struct AS_PlayerCharacter* m_currentPlayerCharacter; // 0xfc8(0x08)
	struct US_WidgetMinimal* m_xpBar; // 0xfd0(0x08)
	struct US_WidgetMinimal* m_downed; // 0xfd8(0x08)
	char pad_FE0[0x10]; // 0xfe0(0x10)

	void RemoveInteractableIconWidget(struct US_WidgetInteractableIcon* widgetInteractableIcon); // Function Scavenger.S_UMGHUDInGame.RemoveInteractableIconWidget // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnStateChangedInternal(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_UMGHUDInGame.OnStateChangedInternal // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnShelterStateChanged(enum class ES_ShelterType newShelterState); // Function Scavenger.S_UMGHUDInGame.OnShelterStateChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnSeatExited(struct USC_Seat* Seat); // Function Scavenger.S_UMGHUDInGame.OnSeatExited // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnSeatEntered(struct USC_Seat* Seat); // Function Scavenger.S_UMGHUDInGame.OnSeatEntered // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void NotifyOnDisplayLocationToast_BP(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_UMGHUDInGame.NotifyOnDisplayLocationToast_BP // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleResurrection(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_UMGHUDInGame.HandleResurrection // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnTogglePerfStats(bool bPerfStatsEnabled); // Function Scavenger.S_UMGHUDInGame.HandleOnTogglePerfStats // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTerminal(struct FS_EventParameterVariant TerminalActor, struct FS_ActorTerminalParameters ActorTerminalParameters); // Function Scavenger.S_UMGHUDInGame.HandleOnTerminal // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnStormEntered(enum class ES_StormCategory StormCategory); // Function Scavenger.S_UMGHUDInGame.HandleOnStormEntered // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnPredictiveKill(struct AActor* PredictedKilledActor, float DamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, bool bIsCritical); // Function Scavenger.S_UMGHUDInGame.HandleOnPredictiveKill // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPreDealDamage(struct AActor* DamagedActor, float UnmodifiedDamageAmount, float ArmorDamageAmount, float HealthDamageAmount, struct FDamageEvent DamageEvent, struct AActor* CauseActor, char DamageModifiersApplied, bool isCritical); // Function Scavenger.S_UMGHUDInGame.HandleOnPreDealDamage // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerMarkedStateChanged(bool bPlayerIsMarked); // Function Scavenger.S_UMGHUDInGame.HandleOnPlayerMarkedStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterSet(struct AS_PlayerCharacter* newPlayerCharacter); // Function Scavenger.S_UMGHUDInGame.HandleOnPlayerCharacterSet // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPawnChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_UMGHUDInGame.HandleOnPawnChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnAttackEvent(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_UMGHUDInGame.HandleOnAttackEvent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_WidgetTimedInteraction* GetTimedInteractionWidget(); // Function Scavenger.S_UMGHUDInGame.GetTimedInteractionWidget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_HUDMessage GetStatusMessage(int32_t Index); // Function Scavenger.S_UMGHUDInGame.GetStatusMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetPlayerScoreText(int32_t Index); // Function Scavenger.S_UMGHUDInGame.GetPlayerScoreText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetPlayerNameText(int32_t Index); // Function Scavenger.S_UMGHUDInGame.GetPlayerNameText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetInteractableIcon* GetOrCreateInteractableIconWidget(); // Function Scavenger.S_UMGHUDInGame.GetOrCreateInteractableIconWidget // (Final|Native|Public) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfTeams(); // Function Scavenger.S_UMGHUDInGame.GetNumberOfTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfStatusMessages(); // Function Scavenger.S_UMGHUDInGame.GetNumberOfStatusMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfPlayers(); // Function Scavenger.S_UMGHUDInGame.GetNumberOfPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetNumberOfImportantMessages(); // Function Scavenger.S_UMGHUDInGame.GetNumberOfImportantMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct UVerticalBox* GetMessageFeed(); // Function Scavenger.S_UMGHUDInGame.GetMessageFeed // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetLocationToastWidget(); // Function Scavenger.S_UMGHUDInGame.GetLocationToastWidget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_HUDMessage GetImportantMessage(int32_t Index); // Function Scavenger.S_UMGHUDInGame.GetImportantMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetGameProgressWidget(); // Function Scavenger.S_UMGHUDInGame.GetGameProgressWidget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetMinimal* GetCompassWidget(); // Function Scavenger.S_UMGHUDInGame.GetCompassWidget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DisplayLocationToast(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_UMGHUDInGame.DisplayLocationToast // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGHUDMainMenu
// Size: 0x780 (Inherited: 0x640)
struct US_UMGHUDMainMenu : US_UMGHUD {
	SoftClassProperty NameplateClass; // 0x640(0x28)
	struct FVector2D NameplateOffset; // 0x668(0x08)
	struct TArray<SoftClassProperty> MainMenuSubscreens; // 0x670(0x10)
	struct FVector2D AccountScreenMatchTimerPosition; // 0x680(0x08)
	SoftClassProperty AccountScreenClass; // 0x688(0x28)
	struct US_WidgetMatchmaking* MatchmakingWidget; // 0x6b0(0x08)
	struct US_WidgetCurrencyPanel* CurrencyPanel; // 0x6b8(0x08)
	struct US_WidgetScreenInputDisplay* ScreenInputDisplay; // 0x6c0(0x08)
	struct UContentWidget* HeaderBorder; // 0x6c8(0x08)
	struct UContentWidget* FooterBorder; // 0x6d0(0x08)
	struct UImage* ScavengersLogo; // 0x6d8(0x08)
	struct US_WidgetSocialPartyTray* SocialPartyTray; // 0x6e0(0x08)
	struct US_WidgetNavBar* MainMenuNavBar; // 0x6e8(0x08)
	struct UPanelWidget* MatchTimerPanel; // 0x6f0(0x08)
	char pad_6F8[0x18]; // 0x6f8(0x18)
	struct TMap<struct AS_FrontEndCharacter*, struct US_WidgetLobbyNameplate*> m_frontEndCharacterNameplates; // 0x710(0x50)
	struct FTimerHandle m_seasonsTimer; // 0x760(0x08)
	char pad_768[0x10]; // 0x768(0x10)
	struct US_WidgetAccountScreen* m_accountScreen; // 0x778(0x08)

	void ValidateFeatureFlagForNavBarButtons(); // Function Scavenger.S_UMGHUDMainMenu.ValidateFeatureFlagForNavBarButtons // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ShowAccountScreen(bool bShouldShow); // Function Scavenger.S_UMGHUDMainMenu.ShowAccountScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNameplatesType(enum class ES_NameplateType nameplateType); // Function Scavenger.S_UMGHUDMainMenu.SetNameplatesType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNameplatesEnabled(bool bNameplateIsEnabled); // Function Scavenger.S_UMGHUDMainMenu.SetNameplatesEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuSocialPartyTrayVisibility(struct UObject* Context, bool bSocialPartyTrayIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuSocialPartyTrayVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuScreenInputDisplayVisibility(struct UObject* Context, bool bScreenInputDisplayIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuScreenInputDisplayVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuScavengersLogoVisibility(struct UObject* Context, bool bScavengersLogoIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuScavengersLogoVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuNavBarVisibility(struct UObject* Context, bool bNavBarIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuNavBarVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuNavBarLockedState(struct UObject* Context, bool bNavBarIsLocked); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuNavBarLockedState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuHeaderBorderVisibility(struct UObject* Context, bool bHeaderBorderIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuHeaderBorderVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuFooterBorderVisibility(struct UObject* Context, bool bFooterBorderIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuFooterBorderVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMainMenuCurrencyPanelVisibility(struct UObject* Context, bool bCurrencyPanelIsVisible); // Function Scavenger.S_UMGHUDMainMenu.SetMainMenuCurrencyPanelVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetToDefaultSubscreen(); // Function Scavenger.S_UMGHUDMainMenu.ResetToDefaultSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestSocialScreen(enum class ES_FriendListTabs tabToShow); // Function Scavenger.S_UMGHUDMainMenu.RequestSocialScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPartyPlayerStateChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_UMGHUDMainMenu.HandleOnPartyPlayerStateChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerLeftMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_UMGHUDMainMenu.HandleOnOtherPlayerLeftMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerJoinedMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_UMGHUDMainMenu.HandleOnOtherPlayerJoinedMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnNavbarInteraction(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_UMGHUDMainMenu.HandleOnNavbarInteraction // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAccountScreenCreated(struct US_WidgetMinimal* NewWidget); // Function Scavenger.S_UMGHUDMainMenu.HandleOnAccountScreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetScreenIndexByClass(SoftClassProperty subscreenClassToFind); // Function Scavenger.S_UMGHUDMainMenu.GetScreenIndexByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool GetMainMenuNavBarLockedState(struct UObject* Context); // Function Scavenger.S_UMGHUDMainMenu.GetMainMenuNavBarLockedState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct US_WidgetAccountScreen* GetAccountScreen(); // Function Scavenger.S_UMGHUDMainMenu.GetAccountScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DisableNavBarButtons(); // Function Scavenger.S_UMGHUDMainMenu.DisableNavBarButtons // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CycleToSubscreen(int32_t subscreenIndex, bool bPopTopOfNavStack); // Function Scavenger.S_UMGHUDMainMenu.CycleToSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClearNavStackAndCycleToSubscreen(int32_t subscreenIndex); // Function Scavenger.S_UMGHUDMainMenu.ClearNavStackAndCycleToSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeMainMenuOverlayWidgetVisibilities(struct UObject* Context, bool bNavBarIsVisible, bool bCurrencyPanelIsVisible, bool bScreenInputDisplayIsVisible, bool bHeaderBorderIsVisible, bool bFooterBorderIsVisible, bool bSocialPartyTrayIsVisible, bool bScavengersLogoIsVisible); // Function Scavenger.S_UMGHUDMainMenu.ChangeMainMenuOverlayWidgetVisibilities // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeAllMainMenuOverlayWidgetVisibilities(struct UObject* Context, bool bIsVisible); // Function Scavenger.S_UMGHUDMainMenu.ChangeAllMainMenuOverlayWidgetVisibilities // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGHUDSocialHub
// Size: 0xff0 (Inherited: 0xff0)
struct US_UMGHUDSocialHub : US_UMGHUDInGame {
};

// Class Scavenger.S_UMGHUDSocialHubMessenger
// Size: 0x1020 (Inherited: 0xff0)
struct US_UMGHUDSocialHubMessenger : US_UMGHUDInGame {
	struct FS_SpawnableWidget HotbarContainerWidget; // 0xff0(0x30)
};

// Class Scavenger.S_UMGInGameGameplayMenu
// Size: 0x6d0 (Inherited: 0x6a8)
struct US_UMGInGameGameplayMenu : US_UMGInGameMenuBase {
	struct US_UMGInGameRadialMenuSelectWeapon* SelectWeaponMenuClass; // 0x6a8(0x08)
	struct TArray<struct FName> AllowedSpectatorPages; // 0x6b0(0x10)
	char pad_6C0[0x10]; // 0x6c0(0x10)

	void HandlePopupClosed(); // Function Scavenger.S_UMGInGameGameplayMenu.HandlePopupClosed // (Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGInGamePauseMenu
// Size: 0x6a8 (Inherited: 0x6a8)
struct US_UMGInGamePauseMenu : US_UMGInGameMenuBase {
};

// Class Scavenger.S_UMGInGameRadialMenuEmote
// Size: 0x6f8 (Inherited: 0x6c8)
struct US_UMGInGameRadialMenuEmote : US_UMGInGameRadialMenu {
	struct FMulticastInlineDelegate EmoteSelectedDelegate; // 0x6c8(0x10)
	struct US_WidgetRadialEmoteItem* EmoteItemClass; // 0x6d8(0x08)
	struct FDataTableRowHandle EmoteNameTextFormatHandle; // 0x6e0(0x10)
	int8_t MaxEmotesShown; // 0x6f0(0x01)
	char pad_6F1[0x7]; // 0x6f1(0x07)

	void OnRadialPanelSelectionIndexChanged(int32_t OldSelection, int32_t NewSelection); // Function Scavenger.S_UMGInGameRadialMenuEmote.OnRadialPanelSelectionIndexChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGInGameRadialMenuSelectWeapon
// Size: 0x6e0 (Inherited: 0x6c8)
struct US_UMGInGameRadialMenuSelectWeapon : US_UMGInGameRadialMenu {
	struct FMulticastInlineDelegate OnRadialItemWeaponSelected; // 0x6c8(0x10)
	struct US_WidgetRadialEquippedItem* RadialItemClass; // 0x6d8(0x08)
};

// Class Scavenger.S_UMGLinearPanel
// Size: 0x160 (Inherited: 0x128)
struct US_UMGLinearPanel : UPanelWidget {
	float MaximumDesiredWidth; // 0x128(0x04)
	struct FVector2D MinimumDesiredSize; // 0x12c(0x08)
	struct FMargin SlotPadding; // 0x134(0x10)
	struct FVector2D SlotSpacing; // 0x144(0x08)
	char pad_14C[0x14]; // 0x14c(0x14)

	void SetSlotSpacing(struct FVector2D inSlotSpacing); // Function Scavenger.S_UMGLinearPanel.SetSlotSpacing // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSlotPadding(struct FMargin inSlotPadding); // Function Scavenger.S_UMGLinearPanel.SetSlotPadding // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMinimumDesiredSize(struct FVector2D inMinimumDesiredSize); // Function Scavenger.S_UMGLinearPanel.SetMinimumDesiredSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaximumDesiredWidth(float inMaximumDesiredWidth); // Function Scavenger.S_UMGLinearPanel.SetMaximumDesiredWidth // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_UMGLinearPanelSlot* AddChildToLinearPanel(struct UWidget* child); // Function Scavenger.S_UMGLinearPanel.AddChildToLinearPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGLinearPanelSlot
// Size: 0x48 (Inherited: 0x38)
struct US_UMGLinearPanelSlot : UPanelSlot {
	enum class EHorizontalAlignment HorizontalAlignment; // 0x38(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x39(0x01)
	char pad_3A[0xe]; // 0x3a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment inVerticalAlignment); // Function Scavenger.S_UMGLinearPanelSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHorizontalAlignment(enum class EHorizontalAlignment inHorizontalAlignment); // Function Scavenger.S_UMGLinearPanelSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGMouseCursor
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_UMGMouseCursor : US_WidgetMinimal {

	void NotifyCursorReleased_BP(); // Function Scavenger.S_UMGMouseCursor.NotifyCursorReleased_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCursorPressed_BP(); // Function Scavenger.S_UMGMouseCursor.NotifyCursorPressed_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCursorInputTypeChanged_BP(bool bIsUsingGamepadInput); // Function Scavenger.S_UMGMouseCursor.NotifyCursorInputTypeChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCursorHoverOut_BP(); // Function Scavenger.S_UMGMouseCursor.NotifyCursorHoverOut_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCursorHoverIn_BP(); // Function Scavenger.S_UMGMouseCursor.NotifyCursorHoverIn_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandlePersisentTypeChanged(bool bIsGamepadInput); // Function Scavenger.S_UMGMouseCursor.HandlePersisentTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleNewPlayerController(); // Function Scavenger.S_UMGMouseCursor.HandleNewPlayerController // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAnyVisibleWidgetHoverOut(); // Function Scavenger.S_UMGMouseCursor.HandleAnyVisibleWidgetHoverOut // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAnyVisibleWidgetHoverIn(); // Function Scavenger.S_UMGMouseCursor.HandleAnyVisibleWidgetHoverIn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAnyMouseButtonUp(); // Function Scavenger.S_UMGMouseCursor.HandleAnyMouseButtonUp // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAnyMouseButtonDown(); // Function Scavenger.S_UMGMouseCursor.HandleAnyMouseButtonDown // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GetIsVirtualCursorEnabled_ByFeatureFlag(); // Function Scavenger.S_UMGMouseCursor.GetIsVirtualCursorEnabled_ByFeatureFlag // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGProgressBar
// Size: 0x558 (Inherited: 0x320)
struct US_UMGProgressBar : UProgressBar {
	struct FMulticastInlineDelegate OnBarFull; // 0x320(0x10)
	struct FMulticastInlineDelegate OnBarEmpty; // 0x330(0x10)
	struct FMulticastInlineDelegate OnBarUpdated; // 0x340(0x10)
	struct FMulticastInlineDelegate OnProgressTimerStarted; // 0x350(0x10)
	struct FMulticastInlineDelegate OnProgressTimerCompleted; // 0x360(0x10)
	struct US_WidgetMinimal* parentWidget; // 0x370(0x08)
	char pad_378[0x38]; // 0x378(0x38)
	struct APlayerController* m_playerController; // 0x3b0(0x08)
	char pad_3B8[0x1a0]; // 0x3b8(0x1a0)

	struct FTimerHandle UpdateProgressBarWithTimer(struct AS_PlayerControllerBase* PlayerController, float timerRate, float Target, float tickTime, enum class EEasingFunc easingFunction, float BlendExp, int32_t step); // Function Scavenger.S_UMGProgressBar.UpdateProgressBarWithTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateProgressBar(float InPercent); // Function Scavenger.S_UMGProgressBar.UpdateProgressBar // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetStyle(struct FProgressBarStyle newStyle, bool overwriteDefaultStyle); // Function Scavenger.S_UMGProgressBar.SetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetProgressBarData(struct FS_ProgressBarData progressBarData); // Function Scavenger.S_UMGProgressBar.SetProgressBarData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ProgressBarIsFull(); // Function Scavenger.S_UMGProgressBar.ProgressBarIsFull // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool ProgressBarIsEmpty(); // Function Scavenger.S_UMGProgressBar.ProgressBarIsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetPercentInRange(float Min, float Max); // Function Scavenger.S_UMGProgressBar.GetPercentInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	float GetPercent(); // Function Scavenger.S_UMGProgressBar.GetPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FProgressBarStyle GetDefaultStyle(); // Function Scavenger.S_UMGProgressBar.GetDefaultStyle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ForceEndProgressBarTimer(); // Function Scavenger.S_UMGProgressBar.ForceEndProgressBarTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGProgressBarHandle
// Size: 0x500 (Inherited: 0x500)
struct US_UMGProgressBarHandle : USlider {
};

// Class Scavenger.S_RichTextBlock
// Size: 0x6c0 (Inherited: 0x690)
struct US_RichTextBlock : URichTextBlock {
	struct UDataTable* KeyToRichTextMetadataTable; // 0x690(0x08)
	struct UDataTable* NameToRichImageFormat; // 0x698(0x08)
	bool bDisplayPlatformIconWithDisplayName; // 0x6a0(0x01)
	char pad_6A1[0x7]; // 0x6a1(0x07)
	struct FDataTableRowHandle PlatformIconFormatRowHandle; // 0x6a8(0x10)
	struct FVector2D DecoratorSizeOverride; // 0x6b8(0x08)

	void SetWrapTextAtValue(float wrapTextAtValue); // Function Scavenger.S_RichTextBlock.SetWrapTextAtValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetWrappingPolicy(enum class ETextWrappingPolicy newPolicy); // Function Scavenger.S_RichTextBlock.SetWrappingPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTextWithWrapperByOnlinePlatform(struct FText InText, enum class ES_OnlinePlatformType onlinePlatformType); // Function Scavenger.S_RichTextBlock.SetTextWithWrapperByOnlinePlatform // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTextWithWrapperByDefaultPlatform(struct FText InText, enum class ES_Platform PlatformType); // Function Scavenger.S_RichTextBlock.SetTextWithWrapperByDefaultPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetRichTextFormatByName(struct FString ID, struct FString Tag); // Function Scavenger.S_RichTextBlock.SetRichTextFormatByName // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UDataTable* GetTextStyleSet(); // Function Scavenger.S_RichTextBlock.GetTextStyleSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetRichTextIdFromActionType(enum class ES_GameInputActionType ActionType, enum class ES_InputActionFlag InputActionFlag, enum class ES_InputPriorityFlag inputPriorityFlag, enum class ES_InputDeviceFlag inputDeviceFlag, struct FString Tag); // Function Scavenger.S_RichTextBlock.GetRichTextIdFromActionType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FText GetIconIdentifier(struct FName KeyName, struct FString Tag); // Function Scavenger.S_RichTextBlock.GetIconIdentifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGScavengerButton
// Size: 0x1088 (Inherited: 0x440)
struct US_UMGScavengerButton : UButton {
	struct FS_ButtonStateStyle ButtonStyle; // 0x440(0xc48)

	void SetButtonStyle(struct FS_ButtonStateStyle InStyle); // Function Scavenger.S_UMGScavengerButton.SetButtonStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FKeyEvent GetLastKeyEvent(); // Function Scavenger.S_UMGScavengerButton.GetLastKeyEvent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCommonScavengerButton
// Size: 0x8188 (Inherited: 0x4b8)
struct US_WidgetCommonScavengerButton : US_WidgetMinimal {
	bool Override_WidthOverride; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	float WidthOverride; // 0x4bc(0x04)
	bool Override_HeightOverride; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	float HeightOverride; // 0x4c4(0x04)
	struct FWidgetTransform ButtonTransform; // 0x4c8(0x1c)
	enum class ES_ButtonType ButtonType; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)
	struct FS_ButtonStateStyle ButtonStyles[0x5]; // 0x4e8(0x3d68)
	struct FText buttonText; // 0x4250(0x18)
	enum class ETextTransformPolicy TransformPolicy; // 0x4268(0x01)
	enum class ETextJustify Justification; // 0x4269(0x01)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x426a(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x426b(0x01)
	struct FMargin TextPadding; // 0x426c(0x10)
	struct FAnchors TextAnchors; // 0x427c(0x10)
	enum class ETextWrappingPolicy WrappingPolicy; // 0x428c(0x01)
	bool AutoWrapText; // 0x428d(0x01)
	char pad_428E[0x2]; // 0x428e(0x02)
	float WrapTextAt; // 0x4290(0x04)
	struct FName ButtonID; // 0x4294(0x08)
	struct FName RichTextBoxID; // 0x429c(0x08)
	struct FName SizeBoxID; // 0x42a4(0x08)
	enum class ES_ButtonInteractionState InteractionState; // 0x42ac(0x01)
	char pad_42AD[0x3]; // 0x42ad(0x03)
	struct FMulticastInlineDelegate DispatchOnClicked; // 0x42b0(0x10)
	struct FMulticastInlineDelegate DispatchOnReleased; // 0x42c0(0x10)
	struct FMulticastInlineDelegate DispatchOnHovered; // 0x42d0(0x10)
	struct FMulticastInlineDelegate DispatchOnUnhovered; // 0x42e0(0x10)
	struct FMulticastInlineDelegate DispatchOnRightClicked; // 0x42f0(0x10)
	struct FMulticastInlineDelegate DispatchOnActiveClicked; // 0x4300(0x10)
	struct FMulticastInlineDelegate DispatchOnActiveReleased; // 0x4310(0x10)
	struct FMulticastInlineDelegate DispatchOnActiveHovered; // 0x4320(0x10)
	struct FMulticastInlineDelegate DispatchOnActiveUnhovered; // 0x4330(0x10)
	struct FMulticastInlineDelegate DispatchOnActiveRightClicked; // 0x4340(0x10)
	struct FMulticastInlineDelegate DispatchOnInactiveClicked; // 0x4350(0x10)
	struct FMulticastInlineDelegate DispatchOnInactiveReleased; // 0x4360(0x10)
	struct FMulticastInlineDelegate DispatchOnInactiveHovered; // 0x4370(0x10)
	struct FMulticastInlineDelegate DispatchOnInactiveUnhovered; // 0x4380(0x10)
	struct FMulticastInlineDelegate DispatchOnInactiveRightClicked; // 0x4390(0x10)
	struct FMulticastInlineDelegate OnButtonStateChanged; // 0x43a0(0x10)
	struct FMulticastInlineDelegate OnInteractionStateChanged; // 0x43b0(0x10)
	struct FMulticastInlineDelegate OnSelectedButtonClicked; // 0x43c0(0x10)
	struct US_UMGScavengerButton* ButtonBody; // 0x43d0(0x08)
	struct US_RichTextBlock* RichText; // 0x43d8(0x08)
	struct USizeBox* SizeBox; // 0x43e0(0x08)
	struct UBorder* ButtonBorder; // 0x43e8(0x08)
	struct UImage* ButtonImageBrush; // 0x43f0(0x08)
	struct UImage* ButtonImageFocused; // 0x43f8(0x08)
	enum class ES_ButtonFocusSupport SupportsFocusState; // 0x4400(0x01)
	char pad_4401[0x7]; // 0x4401(0x07)
	struct TArray<struct FString> FeatureFlags; // 0x4408(0x10)
	char pad_4418[0x3d70]; // 0x4418(0x3d70)

	void UpdateButtonStyle(); // Function Scavenger.S_WidgetCommonScavengerButton.UpdateButtonStyle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleButtonStyle(); // Function Scavenger.S_WidgetCommonScavengerButton.ToggleButtonStyle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ShouldShowButton(); // Function Scavenger.S_WidgetCommonScavengerButton.ShouldShowButton // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SetIsButtonSelected(bool bIsNowSelected); // Function Scavenger.S_WidgetCommonScavengerButton.SetIsButtonSelected // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInteractionStyleHoveredRichTextKey(enum class ES_ButtonInteractionState interactionStateToChange, struct FText newDefaultKey); // Function Scavenger.S_WidgetCommonScavengerButton.SetInteractionStyleHoveredRichTextKey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInteractionStyleDefaultRichTextKey(enum class ES_ButtonInteractionState interactionStateToChange, struct FText newDefaultKey); // Function Scavenger.S_WidgetCommonScavengerButton.SetInteractionStyleDefaultRichTextKey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFocusConfiguration(bool InForceFocusEnabled); // Function Scavenger.S_WidgetCommonScavengerButton.SetFocusConfiguration // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetButtonText(struct FText newText); // Function Scavenger.S_WidgetCommonScavengerButton.SetButtonText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetButtonSize(struct FVector2D Size); // Function Scavenger.S_WidgetCommonScavengerButton.SetButtonSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetButtonInteractionState(enum class ES_ButtonInteractionState newInteractionState); // Function Scavenger.S_WidgetCommonScavengerButton.SetButtonInteractionState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetInteractionStateStyles(); // Function Scavenger.S_WidgetCommonScavengerButton.ResetInteractionStateStyles // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverrideInteractionStateStyle(enum class ES_ButtonInteractionState interactionStateToChange, struct FS_ButtonStateStyle newStyle); // Function Scavenger.S_WidgetCommonScavengerButton.OverrideInteractionStateStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyInteractionStateChanged_BP(enum class ES_ButtonInteractionState OldState, enum class ES_ButtonInteractionState NewState); // Function Scavenger.S_WidgetCommonScavengerButton.NotifyInteractionStateChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsButtonType(enum class ES_ButtonType Type); // Function Scavenger.S_WidgetCommonScavengerButton.IsButtonType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasValidFocusableState(); // Function Scavenger.S_WidgetCommonScavengerButton.HasValidFocusableState // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void HandleOnButtonUnhovered(); // Function Scavenger.S_WidgetCommonScavengerButton.HandleOnButtonUnhovered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnButtonRightClicked(); // Function Scavenger.S_WidgetCommonScavengerButton.HandleOnButtonRightClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnButtonReleased(); // Function Scavenger.S_WidgetCommonScavengerButton.HandleOnButtonReleased // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnButtonHovered(); // Function Scavenger.S_WidgetCommonScavengerButton.HandleOnButtonHovered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnButtonClicked(); // Function Scavenger.S_WidgetCommonScavengerButton.HandleOnButtonClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool GetIsButtonSelected(); // Function Scavenger.S_WidgetCommonScavengerButton.GetIsButtonSelected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_ButtonInteractionState GetDesiredState(); // Function Scavenger.S_WidgetCommonScavengerButton.GetDesiredState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ForceSelected(bool bIsNowSelected); // Function Scavenger.S_WidgetCommonScavengerButton.ForceSelected // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGWidgetSwitcher
// Size: 0x1b0 (Inherited: 0x140)
struct US_UMGWidgetSwitcher : UWidgetSwitcher {
	bool bCollapseHiddenWidgets; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct FMulticastInlineDelegate OnActiveWidgetChanged; // 0x148(0x10)
	char pad_158[0x8]; // 0x158(0x08)
	struct TMap<struct UPanelSlot*, enum class ESlateVisibility> m_slotVisibility; // 0x160(0x50)

	void NotifyActiveWidgetChanged(struct UWidget* LastWidget, struct UWidget* NewWidget, int32_t NewWidgetIndex); // Function Scavenger.S_UMGWidgetSwitcher.NotifyActiveWidgetChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct UPanelSlot* AddChildToWidgetSwitcher(struct UWidget* child); // Function Scavenger.S_UMGWidgetSwitcher.AddChildToWidgetSwitcher // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UMGWidgetSwitcherItem
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_UMGWidgetSwitcherItem : US_WidgetMinimal {

	void NotifyWidgetReceivedWidgetSwitcherFocus(); // Function Scavenger.S_UMGWidgetSwitcherItem.NotifyWidgetReceivedWidgetSwitcherFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetLostWidgetSwitcherFocus(); // Function Scavenger.S_UMGWidgetSwitcherItem.NotifyWidgetLostWidgetSwitcherFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_UnseenObjectBadgeManager
// Size: 0xf8 (Inherited: 0x28)
struct US_UnseenObjectBadgeManager : UObject {
	struct FMulticastInlineDelegate OnUnseenIdsChanged; // 0x28(0x10)
	char pad_38[0xc0]; // 0x38(0xc0)

	void HandleOnPlayerUnseenRewardsRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_UnseenObjectBadgeManager.HandleOnPlayerUnseenRewardsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_UnseenObjectBadgeManager.HandleOnPlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryChanged(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_UnseenObjectBadgeManager.HandleOnPlayerInventoryChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	struct US_UnseenObjectBadgeManager* GetUnseenObjectBadgeManagerFromGameInstance(struct UGameInstance* GameInstance); // Function Scavenger.S_UnseenObjectBadgeManager.GetUnseenObjectBadgeManagerFromGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool ConfigIsValidForUnseenId(struct FName unseenId, struct FS_UnseenObjectBadgeConfig Config); // Function Scavenger.S_UnseenObjectBadgeManager.ConfigIsValidForUnseenId // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenIdsOfOnlineResourceType(enum class ES_OnlineResourceType onlineResourceType); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenIdsOfOnlineResourceType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenIdsOfOnlineResearchProjectType(enum class ES_OnlineResearchProjectType researchProjectType); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenIdsOfOnlineResearchProjectType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenIdsOfOnlineItemMetadataType(enum class ES_OnlineItemMetadataType onlineItemType); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenIdsOfOnlineItemMetadataType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenIdsOfLoadoutSlotType(enum class ES_LoadoutSlotType loadoutSlotType); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenIdsOfLoadoutSlotType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenIdsOfCosmeticType(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenIdsOfCosmeticType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AcknowledgeUnseenId(struct FName ID); // Function Scavenger.S_UnseenObjectBadgeManager.AcknowledgeUnseenId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_DefaultUserSettings
// Size: 0x1e8 (Inherited: 0x30)
struct US_DefaultUserSettings : UDataAsset {
	struct FS_UserSettings Settings; // 0x30(0x1b8)
};

// Class Scavenger.S_UserSettingsSave
// Size: 0x1e0 (Inherited: 0x28)
struct US_UserSettingsSave : USaveGame {
	struct FS_UserSettings StoredSettings; // 0x28(0x1b8)
};

// Class Scavenger.S_ActorTaggingUtility
// Size: 0x28 (Inherited: 0x28)
struct US_ActorTaggingUtility : UObject {

	void TagActorsOfClass(struct AActor* rootActor, struct FName Tag, struct FString ClassName, struct TArray<struct AActor*> outTaggedActors, bool removeTagIfNoMatch); // Function Scavenger.S_ActorTaggingUtility.TagActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_BuildTypeUtility
// Size: 0x28 (Inherited: 0x28)
struct US_BuildTypeUtility : UBlueprintFunctionLibrary {

	bool IsTestBuild(); // Function Scavenger.S_BuildTypeUtility.IsTestBuild // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsShippingBuild(); // Function Scavenger.S_BuildTypeUtility.IsShippingBuild // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsRetailBuild(); // Function Scavenger.S_BuildTypeUtility.IsRetailBuild // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsDevelopmentBuild(); // Function Scavenger.S_BuildTypeUtility.IsDevelopmentBuild // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsDebugBuild(); // Function Scavenger.S_BuildTypeUtility.IsDebugBuild // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_VehicleAudioComponent
// Size: 0x178 (Inherited: 0xb0)
struct US_VehicleAudioComponent : UActorComponent {
	struct UAkAudioEvent* StartAndLoopEvent; // 0xb0(0x08)
	struct UAkAudioEvent* LoopEvent; // 0xb8(0x08)
	struct UAkAudioEvent* StopEvent; // 0xc0(0x08)
	double LowPassSpeedUp; // 0xc8(0x08)
	double LowPasspeedDown; // 0xd0(0x08)
	double LowPassSlopeUp; // 0xd8(0x08)
	double LowPassSlopeDown; // 0xe0(0x08)
	double LowPassIsOnGround; // 0xe8(0x08)
	double StartTime; // 0xf0(0x08)
	struct TArray<struct FS_VehicleEmitterDef> EmitterDefs; // 0xf8(0x10)
	struct TArray<struct UAkComponent*> EmitterComponents; // 0x108(0x10)
	struct UAkComponent* AkComponent; // 0x118(0x08)
	char pad_120[0x58]; // 0x120(0x58)

	void SetVehicleInputData(float YawSpeed, float throttle, float desiredHeading, float ModelRelDesiredHeading, float strafe, float boost, float HoverForceMultiplier); // Function Scavenger.S_VehicleAudioComponent.SetVehicleInputData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_SetStartTimeChanged(); // Function Scavenger.S_VehicleAudioComponent.OnRep_SetStartTimeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_VehiclePawn
// Size: 0x7c0 (Inherited: 0x498)
struct AS_VehiclePawn : AS_PawnBase {
	char pad_498[0x38]; // 0x498(0x38)
	struct APlayerState* m_playerState; // 0x4d0(0x08)
	struct FScavengerTeamID m_teamInfo; // 0x4d8(0x01)
	char pad_4D9[0x108]; // 0x4d9(0x108)
	enum class ES_CameraSettings m_activeSpringArmSetting; // 0x5e1(0x01)
	char pad_5E2[0x6]; // 0x5e2(0x06)
	struct FMulticastInlineDelegate OnVehicleSpringArmActiveSettingChanged; // 0x5e8(0x10)
	float LookSensitivity; // 0x5f8(0x04)
	float FreeLookSensitivity; // 0x5fc(0x04)
	struct FVector InertiaScale; // 0x600(0x0c)
	struct FVector InertiaOverride; // 0x60c(0x0c)
	struct UPrimitiveComponent* MainChassis; // 0x618(0x08)
	struct USmoothSync* SmoothSyncComponent; // 0x620(0x08)
	struct US_SpringArmComponent* m_springArm; // 0x628(0x08)
	struct UCameraComponent* m_camera; // 0x630(0x08)
	struct UAkComponent* AkComponent; // 0x638(0x08)
	struct US_VehicleAudioComponent* VehicleAudioComp; // 0x640(0x08)
	struct US_SpottingComponent* m_spottingComponent; // 0x648(0x08)
	struct UDataTable* StrongImpacts; // 0x650(0x08)
	struct UDataTable* MediumImpacts; // 0x658(0x08)
	struct UDataTable* LightImpacts; // 0x660(0x08)
	float LightToMediumAudioImpactThreshold; // 0x668(0x04)
	float MediumToHeavyAudioImpactThreshold; // 0x66c(0x04)
	struct FFloatInterval AudioImpactTimeDebounceRange; // 0x670(0x08)
	float AudioImpactMagnitudeDebounce; // 0x678(0x04)
	char pad_67C[0xc]; // 0x67c(0x0c)
	struct US_AbilitySystemComponent* AbilitySystemComponent; // 0x688(0x08)
	struct US_AttributeSetVehicle* AttributeSetVehicle; // 0x690(0x08)
	bool DelaySimulationForStreaming; // 0x698(0x01)
	bool SafeguardForOutOfWorld; // 0x699(0x01)
	char pad_69A[0x2]; // 0x69a(0x02)
	float BottomPlaneOffset; // 0x69c(0x04)
	float FrontPlaneOffset; // 0x6a0(0x04)
	float DriverlessStaticFriction; // 0x6a4(0x04)
	float DriverlessDynamicFriction; // 0x6a8(0x04)
	bool bRejectCollisionDamageBelowSoftCollisionPlane; // 0x6ac(0x01)
	char pad_6AD[0x3]; // 0x6ad(0x03)
	struct UDataTable* AttributeInitializationDataTable; // 0x6b0(0x08)
	struct FS_AbilitySet InitialAbilities; // 0x6b8(0x10)
	struct TArray<struct UGameplayEffect*> InitialGameplayEffects; // 0x6c8(0x10)
	struct US_StatsComponent* m_statsComponent; // 0x6d8(0x08)
	char pad_6E0[0x8]; // 0x6e0(0x08)
	enum class ES_ShelterType ShelterState; // 0x6e8(0x01)
	char pad_6E9[0x7]; // 0x6e9(0x07)
	struct FS_ShelterInterfaceData ShelterData; // 0x6f0(0x98)
	char pad_788[0x4]; // 0x788(0x04)
	float WornMaxHealthFraction; // 0x78c(0x04)
	float CriticalMaxHealthFraction; // 0x790(0x04)
	float WreckMaxHealthFraction; // 0x794(0x04)
	enum class ES_VehicleDamageState CurrentDamageState; // 0x798(0x01)
	char pad_799[0x7]; // 0x799(0x07)
	struct FMulticastInlineDelegate OnDamageStateChanged; // 0x7a0(0x10)
	struct US_ManagedSoundBankComponent* m_managedSoundBankComponent; // 0x7b0(0x08)
	char pad_7B8[0x8]; // 0x7b8(0x08)

	void Turn(float Val); // Function Scavenger.S_VehiclePawn.Turn // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInertiaScale(struct FVector Scale); // Function Scavenger.S_VehiclePawn.SetInertiaScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetAffectNavMeshEnabled(bool Enabled, struct UShapeComponent* navBlocker); // Function Scavenger.S_VehiclePawn.SetAffectNavMeshEnabled // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void ServerRequestExitVehicle(); // Function Scavenger.S_VehiclePawn.ServerRequestExitVehicle // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void ServerChangeActiveSpringArmSetting(enum class ES_CameraSettings activeSetting); // Function Scavenger.S_VehiclePawn.ServerChangeActiveSpringArmSetting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void OnSimpleStatChange(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_VehiclePawn.OnSimpleStatChange // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRepActiveVehicleSpringArmSetting(); // Function Scavenger.S_VehiclePawn.OnRepActiveVehicleSpringArmSetting // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnRep_ShelterState(); // Function Scavenger.S_VehiclePawn.OnRep_ShelterState // (Native|Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnRep_DamageState(); // Function Scavenger.S_VehiclePawn.OnRep_DamageState // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnKylesHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function Scavenger.S_VehiclePawn.OnKylesHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void OnDriverExit(struct APawn* Pawn); // Function Scavenger.S_VehiclePawn.OnDriverExit // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnDriverEnter(struct APawn* Pawn); // Function Scavenger.S_VehiclePawn.OnDriverEnter // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnComponentHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function Scavenger.S_VehiclePawn.OnComponentHitCallback // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void MulticastHandleImpactAudio(struct AActor* HitActor, enum class EPhysicalSurface HitSurface, float HitMagnitude, struct FHitResult HitResult); // Function Scavenger.S_VehiclePawn.MulticastHandleImpactAudio // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xffff8008e4a10000
	void LookUp(float Val); // Function Scavenger.S_VehiclePawn.LookUp // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_ManagedSoundBankComponent* GetManagedSoundBankComponent(); // Function Scavenger.S_VehiclePawn.GetManagedSoundBankComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct APawn* GetDriver(); // Function Scavenger.S_VehiclePawn.GetDriver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct APlayerState* GetCachedPlayerState(); // Function Scavenger.S_VehiclePawn.GetCachedPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_AbilitySystemComponent* GetAbilitySystemComponent_BP(); // Function Scavenger.S_VehiclePawn.GetAbilitySystemComponent_BP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FreeLookToggle(); // Function Scavenger.S_VehiclePawn.FreeLookToggle // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FreeLookEnable(); // Function Scavenger.S_VehiclePawn.FreeLookEnable // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FreeLookDisable(); // Function Scavenger.S_VehiclePawn.FreeLookDisable // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ExitVehicle(); // Function Scavenger.S_VehiclePawn.ExitVehicle // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AllowEnterSeat(struct USC_Seat* Seat, struct APawn* wantToEnterPawn); // Function Scavenger.S_VehiclePawn.AllowEnterSeat // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_VFXManagerComponent
// Size: 0x290 (Inherited: 0xb0)
struct US_VFXManagerComponent : UActorComponent {
	struct TArray<struct FS_EffectShell> Shells; // 0xb0(0x10)
	struct TMap<int32_t, struct FS_EffectShellClient> ClientShells; // 0xc0(0x50)
	struct TArray<struct FS_EffectPostProcess> Effects; // 0x110(0x10)
	struct TMap<int32_t, struct FS_EffectPostProcessClient> ClientEffects; // 0x120(0x50)
	struct UCurveLinearColor* GlobalEffectsCurve; // 0x170(0x08)
	float GlobalEffectsShellSpawnFadeDurationInSeconds; // 0x178(0x04)
	float GlobalEffectsShellDestroyFadeDurationInSeconds; // 0x17c(0x04)
	float GlobalEffectsEffectSpawnFadeDurationInSeconds; // 0x180(0x04)
	float GlobalEffectsEffectDestroyFadeDurationInSeconds; // 0x184(0x04)
	struct TArray<struct FString> GlobalShellComponentsToExcludeByName; // 0x188(0x10)
	struct TArray<struct FString> GlobalShellMeshesToExcludeByName; // 0x198(0x10)
	struct TArray<struct FS_EffectParameter> EffectParameters; // 0x1a8(0x10)
	struct TArray<struct FS_EffectMaterialAnimation> EffectAnimations; // 0x1b8(0x10)
	char pad_1C8[0x8]; // 0x1c8(0x08)
	struct TMap<struct FName, struct UMaterialInterface*> MaterialCache; // 0x1d0(0x50)
	struct TMap<struct FName, struct UStaticMesh*> StaticMeshCache; // 0x220(0x50)
	char pad_270[0x8]; // 0x270(0x08)
	struct UMaterialParameterCollection* VFXDirectionalDamageMPC; // 0x278(0x08)
	struct UMaterialParameterCollection* VFXDirectionalDamageFadeMPC; // 0x280(0x08)
	struct UMaterialParameterCollection* VFXPostProcessMPC; // 0x288(0x08)

	int32_t ShellSpawnWithMeshFiltersClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MeshFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithMeshFiltersClientOnly // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithMeshFilters(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MeshFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithMeshFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithMaterialFiltersClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithMaterialFiltersClientOnly // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithMaterialFilters(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithMaterialFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithFiltersClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters, struct TArray<struct FString> MeshFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithFiltersClientOnly // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnWithFilters(struct AActor* BaseObject, struct UMaterialInterface* Material, struct TArray<struct FString> MaterialFilters, struct TArray<struct FString> MeshFilters, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnWithFilters // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawnClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawnClientOnly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t ShellSpawn(struct AActor* BaseObject, struct UMaterialInterface* Material, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.ShellSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetMeshFilterMatchTypeFromId(int32_t ShellId, enum class ES_FilterIfMatch FilterType); // Function Scavenger.S_VFXManagerComponent.ShellSetMeshFilterMatchTypeFromId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetMeshFilterMatchType(enum class ES_FilterIfMatch FilterType); // Function Scavenger.S_VFXManagerComponent.ShellSetMeshFilterMatchType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetMaterialFilterMatchTypeFromId(int32_t ShellId, enum class ES_FilterIfMatch FilterType); // Function Scavenger.S_VFXManagerComponent.ShellSetMaterialFilterMatchTypeFromId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetMaterialFilterMatchType(enum class ES_FilterIfMatch FilterType); // Function Scavenger.S_VFXManagerComponent.ShellSetMaterialFilterMatchType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetHiddenOnClient(int32_t ShellId, bool NewHidden); // Function Scavenger.S_VFXManagerComponent.ShellSetHiddenOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellSetAllHiddenOnActor(struct AActor* BaseObject, bool NewHidden); // Function Scavenger.S_VFXManagerComponent.ShellSetAllHiddenOnActor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellMaterialSetVectorParameter(int32_t ShellId, struct FName ParameterName, struct FLinearColor ParameterValue); // Function Scavenger.S_VFXManagerComponent.ShellMaterialSetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellMaterialSetScalarParameter(int32_t ShellId, struct FName ParameterName, float ParameterValue); // Function Scavenger.S_VFXManagerComponent.ShellMaterialSetScalarParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellMaterialAnimateVectorParameter(int32_t ShellId, struct FName ParameterName, struct UCurveLinearColor* LinearColorCurve, float AnimationDuration, enum class ES_AnimationDuration AnimDurationType); // Function Scavenger.S_VFXManagerComponent.ShellMaterialAnimateVectorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellMaterialAnimateScalarParameter(int32_t ShellId, struct FName ParameterName, struct UCurveFloat* FloatCurve, float AnimationDuration, enum class ES_AnimationDuration AnimDurationType); // Function Scavenger.S_VFXManagerComponent.ShellMaterialAnimateScalarParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellDestroyClientOnly(int32_t ShellId); // Function Scavenger.S_VFXManagerComponent.ShellDestroyClientOnly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShellDestroy(int32_t ShellId); // Function Scavenger.S_VFXManagerComponent.ShellDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResetAnimationsForEffectId(int32_t EffectId); // Function Scavenger.S_VFXManagerComponent.ResetAnimationsForEffectId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t PostProcessEffectSpawnClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectSpawnClientOnly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t PostProcessEffectSpawn(struct AActor* BaseObject, struct UMaterialInterface* Material, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t PostProcessEffectMeshSpawnClientOnly(struct AActor* BaseObject, struct UMaterialInterface* Material, struct UStaticMesh* StaticMesh, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMeshSpawnClientOnly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t PostProcessEffectMeshSpawn(struct AActor* BaseObject, struct UMaterialInterface* Material, struct UStaticMesh* StaticMesh, bool bFadeInOut); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMeshSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectMaterialSetVectorParameter(int32_t EffectId, struct FName ParameterName, struct FLinearColor ParameterValue); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMaterialSetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectMaterialSetScalarParameter(int32_t EffectId, struct FName ParameterName, float ParameterValue); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMaterialSetScalarParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectMaterialAnimateVectorParameter(int32_t EffectId, struct FName ParameterName, struct UCurveLinearColor* LinearColorCurve, float AnimationDuration, enum class ES_AnimationDuration AnimationDurationType); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMaterialAnimateVectorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectMaterialAnimateScalarParameter(int32_t EffectId, struct FName ParameterName, struct UCurveFloat* FloatCurve, float AnimationDuration, enum class ES_AnimationDuration AnimationDurationType); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectMaterialAnimateScalarParameter // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectDestroyClientOnly(int32_t EffectId); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectDestroyClientOnly // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PostProcessEffectDestroy(int32_t EffectId); // Function Scavenger.S_VFXManagerComponent.PostProcessEffectDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_Shell(); // Function Scavenger.S_VFXManagerComponent.OnRep_Shell // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_PostProcessEffect(); // Function Scavenger.S_VFXManagerComponent.OnRep_PostProcessEffect // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_EffectParameters(); // Function Scavenger.S_VFXManagerComponent.OnRep_EffectParameters // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRep_EffectAnimations(); // Function Scavenger.S_VFXManagerComponent.OnRep_EffectAnimations // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ClientShellSetNewMaterial(int32_t ShellId, struct UMaterialInterface* NewShellMaterial); // Function Scavenger.S_VFXManagerComponent.ClientShellSetNewMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_VirtualCursorManager
// Size: 0x78 (Inherited: 0x28)
struct US_VirtualCursorManager : UObject {
	char pad_28[0x50]; // 0x28(0x50)
};

// Class Scavenger.S_VoiceChatManager
// Size: 0x2f8 (Inherited: 0x28)
struct US_VoiceChatManager : UObject {
	char pad_28[0x270]; // 0x28(0x270)
	struct FMulticastInlineDelegate OnPlayerAdded; // 0x298(0x10)
	struct FMulticastInlineDelegate OnPlayerRemoved; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnPlayerTalkingUpdated; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnPlayerMuteUpdated; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnAudioDevicesChanged; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnSelfMuteUpdated; // 0x2e8(0x10)

	bool VoiceChatAllowed(); // Function Scavenger.S_VoiceChatManager.VoiceChatAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void UpdatePrivilegeStatus(enum class ES_UserPrivilege privilege, enum class ES_UserPrivilegeResult Result); // Function Scavenger.S_VoiceChatManager.UpdatePrivilegeStatus // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void UnmuteSelf(); // Function Scavenger.S_VoiceChatManager.UnmuteSelf // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnmutePlayer(struct FString Player); // Function Scavenger.S_VoiceChatManager.UnmutePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UnmuteAllOthers(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.UnmuteAllOthers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleSelfMute(); // Function Scavenger.S_VoiceChatManager.ToggleSelfMute // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool ToggleMutePlayer(struct FString Player); // Function Scavenger.S_VoiceChatManager.ToggleMutePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUsePushToTalk(bool UsePushToTalk); // Function Scavenger.S_VoiceChatManager.SetUsePushToTalk // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSquadJoinPreference(enum class ES_SquadJoinPreference Preference); // Function Scavenger.S_VoiceChatManager.SetSquadJoinPreference // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOutputVolume(float Volume); // Function Scavenger.S_VoiceChatManager.SetOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOutputDevice(struct FString OutputDevice); // Function Scavenger.S_VoiceChatManager.SetOutputDevice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInputVolume(float Volume); // Function Scavenger.S_VoiceChatManager.SetInputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInputDevice(struct FString InputDevice); // Function Scavenger.S_VoiceChatManager.SetInputDevice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveVoiceChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.RemoveVoiceChannel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnPlayerUnblocked(struct FString PlayerId); // Function Scavenger.S_VoiceChatManager.OnPlayerUnblocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnPlayerBlocked(struct FString PlayerId); // Function Scavenger.S_VoiceChatManager.OnPlayerBlocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnBlocklistRetrieved(struct TArray<struct FString> playerIds); // Function Scavenger.S_VoiceChatManager.OnBlocklistRetrieved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void MuteSelf(); // Function Scavenger.S_VoiceChatManager.MuteSelf // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MutePlayer(struct FString Player); // Function Scavenger.S_VoiceChatManager.MutePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void MuteAllOthers(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.MuteAllOthers // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LeaveChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.LeaveChannel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void JoinChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.JoinChannel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsPlayerTalking(struct FString Player); // Function Scavenger.S_VoiceChatManager.IsPlayerTalking // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsPlayerMuted(struct FString Player); // Function Scavenger.S_VoiceChatManager.IsPlayerMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsOutputMuted(); // Function Scavenger.S_VoiceChatManager.IsOutputMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInputMuted(); // Function Scavenger.S_VoiceChatManager.IsInputMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasVoiceChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.HasVoiceChannel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasJoinedChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.HasJoinedChannel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FString> GetUsersInChannel(enum class ES_VoiceChannelCategory Category); // Function Scavenger.S_VoiceChatManager.GetUsersInChannel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetUsePushToTalk(); // Function Scavenger.S_VoiceChatManager.GetUsePushToTalk // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_SquadJoinPreference GetSquadJoinPreference(); // Function Scavenger.S_VoiceChatManager.GetSquadJoinPreference // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetSelfMuteState(); // Function Scavenger.S_VoiceChatManager.GetSelfMuteState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetPlayerName(); // Function Scavenger.S_VoiceChatManager.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetOutputVolume(); // Function Scavenger.S_VoiceChatManager.GetOutputVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FString> GetOutputDevices(); // Function Scavenger.S_VoiceChatManager.GetOutputDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetOutputDevice(); // Function Scavenger.S_VoiceChatManager.GetOutputDevice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetInputVolume(); // Function Scavenger.S_VoiceChatManager.GetInputVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FString> GetInputDevices(); // Function Scavenger.S_VoiceChatManager.GetInputDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetInputDevice(); // Function Scavenger.S_VoiceChatManager.GetInputDevice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetChannelName(enum class ES_VoiceChannelCategory Category, struct FString outName); // Function Scavenger.S_VoiceChatManager.GetChannelName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AddVoiceChannel(enum class ES_VoiceChannelCategory Category, struct FString ChannelName, enum class ES_DisconnectBehavior DisconnectBehavior, bool IsEchoChannel); // Function Scavenger.S_VoiceChatManager.AddVoiceChannel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponAnimInstance
// Size: 0x370 (Inherited: 0x370)
struct US_WeaponAnimInstance : US_AnimInstance {

	struct UAnimMontage* SelectAttackEventMontage(struct TArray<struct UAnimMontage*> MontageVariations, enum class ES_WeaponMontageEvent attackEvent, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponAnimInstance.SelectAttackEventMontage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponAttachment
// Size: 0x3c0 (Inherited: 0x288)
struct AS_WeaponAttachment : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	struct AS_WeaponBase* m_owningWeapon; // 0x290(0x08)
	struct FName attachmentSocketName; // 0x298(0x08)
	struct TArray<struct FName> WeaponTuningRanks; // 0x2a0(0x10)
	char pad_2B0[0xa8]; // 0x2b0(0xa8)
	struct TMap<enum class ES_WeaponModifier, struct FS_PerModifierSettings> WeaponModifiers; // 0x358(0x50)
	char bOverrideLeftHandGripType : 1; // 0x3a8(0x01)
	char pad_3A8_1 : 7; // 0x3a8(0x01)
	char pad_3A9[0x3]; // 0x3a9(0x03)
	enum class ES_WeaponGripType OverrideLeftHandGripType; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
	char bOverrideRightHandGripType : 1; // 0x3b0(0x01)
	char pad_3B0_1 : 7; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	enum class ES_WeaponGripType OverrideRightHandGripType; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
	struct UDataTable* Impacts; // 0x3b8(0x08)

	void UnregisterModifiers_BP(struct AS_WeaponBase* weapon); // Function Scavenger.S_WeaponAttachment.UnregisterModifiers_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void RegisterModifiers_BP(struct AS_WeaponBase* weapon); // Function Scavenger.S_WeaponAttachment.RegisterModifiers_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetOwningWeapon(); // Function Scavenger.S_WeaponAttachment.GetOwningWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetModifiedValue_BP(enum class ES_WeaponModifier modifierType, float originalValue, enum class ES_CameraSettings CameraSettings, enum class ES_TriggerType triggerType, float outModifiedValue); // Function Scavenger.S_WeaponAttachment.GetModifiedValue_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FName GetAttachmentSocketName(); // Function Scavenger.S_WeaponAttachment.GetAttachmentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CalculateModifiers_BP(enum class ES_WeaponModifier modifierType, float originalValue, enum class ES_CameraSettings CameraSettings, enum class ES_TriggerType triggerType, float outModifiedValue, float outMultiplier); // Function Scavenger.S_WeaponAttachment.CalculateModifiers_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponAttachmentAnimInstance
// Size: 0x370 (Inherited: 0x370)
struct US_WeaponAttachmentAnimInstance : US_AnimInstance {

	struct UAnimMontage* SelectAttackEventMontage(struct TArray<struct UAnimMontage*> MontageVariations, enum class ES_WeaponMontageEvent attackEvent); // Function Scavenger.S_WeaponAttachmentAnimInstance.SelectAttackEventMontage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponAttachmentSight
// Size: 0x3e8 (Inherited: 0x3c0)
struct AS_WeaponAttachmentSight : AS_WeaponAttachment {
	bool bFirstPersonADS; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	struct FVector CameraRelativeIfFirstPersonADSLocation; // 0x3c4(0x0c)
	bool bAllowReloadDuringADS; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float Magnification; // 0x3d4(0x04)
	bool ScaleSensitivityToMagnification; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float SensitivityScale; // 0x3dc(0x04)
	struct US_WidgetWeaponSight* SightClass; // 0x3e0(0x08)
};

// Class Scavenger.S_WeaponTriggerableAttachment
// Size: 0x5c8 (Inherited: 0x3c0)
struct AS_WeaponTriggerableAttachment : AS_WeaponAttachment {
	float RagdollImpulseScalar; // 0x3c0(0x04)
	float FlinchScalar; // 0x3c4(0x04)
	struct FMulticastInlineDelegate OnAttackEventDelegate; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnPostDealDamage; // 0x3e8(0x10)
	struct FS_AttackConfiguration AttackConfiguration; // 0x3f8(0x90)
	struct FS_RecoilImpulseSettings3D RecoilImpulses[0x4]; // 0x488(0x130)
	enum class ES_TriggerableWeaponAttachmentClass AttachmentClass; // 0x5b8(0x01)
	char pad_5B9[0x7]; // 0x5b9(0x07)
	struct FS_DryFireSound DryFireSound; // 0x5c0(0x08)

	void OnAttackEvent_BP(enum class ES_AttackEvent attackEvent); // Function Scavenger.S_WeaponTriggerableAttachment.OnAttackEvent_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	enum class ES_TriggerType GetTriggerType(); // Function Scavenger.S_WeaponTriggerableAttachment.GetTriggerType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_RecoilImpulseSettings3D GetRecoilImpulseSettings(enum class ES_RecoilSettings activeSetting); // Function Scavenger.S_WeaponTriggerableAttachment.GetRecoilImpulseSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_AttackConfiguration GetAttackConfiguration(); // Function Scavenger.S_WeaponTriggerableAttachment.GetAttackConfiguration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponBarrelAttachment
// Size: 0x600 (Inherited: 0x5c8)
struct AS_WeaponBarrelAttachment : AS_WeaponTriggerableAttachment {
	float MaximumRange; // 0x5c8(0x04)
	struct FName MuzzleSocketName; // 0x5cc(0x08)
	bool MuzzleSocketSitsOnPawn; // 0x5d4(0x01)
	bool DisplayShotBlock; // 0x5d5(0x01)
	char pad_5D6[0x2]; // 0x5d6(0x02)
	struct FS_WhizBySound WhizBySound; // 0x5d8(0x28)
};

// Class Scavenger.S_WeaponBase
// Size: 0xf68 (Inherited: 0x448)
struct AS_WeaponBase : AS_ItemBase {
	char pad_448[0x150]; // 0x448(0x150)
	struct FS_ProjectileSpawnPointInfo ProjectileSpawnPointOffset[0x4]; // 0x598(0xc0)
	struct FS_WeaponSpread SpreadSettings; // 0x658(0x248)
	bool bOverrideAimAssistDefaults; // 0x8a0(0x01)
	char pad_8A1[0x3]; // 0x8a1(0x03)
	struct FS_WeaponAimAssistSettings AimAssistSettings; // 0x8a4(0x5c)
	struct FS_WeaponCriticalSettings CriticalSettings; // 0x900(0x28)
	struct AS_WeaponMeleeAttachment* OffHandMeleeAttachment; // 0x928(0x08)
	enum class ES_AIRange PreferredRange; // 0x930(0x01)
	char pad_931[0x3]; // 0x931(0x03)
	float MinEffectiveRange; // 0x934(0x04)
	float MaxEffectiveRange; // 0x938(0x04)
	float WeaponThreatLevel; // 0x93c(0x04)
	struct USC_SkeletalMeshComponent* Mesh; // 0x940(0x08)
	struct UStaticMeshComponent* GrayBoxMesh; // 0x948(0x08)
	bool UseGrayBoxMeshAsLOD; // 0x950(0x01)
	char pad_951[0x3]; // 0x951(0x03)
	float StowRate; // 0x954(0x04)
	float ReadyRate; // 0x958(0x04)
	float ReloadDuration; // 0x95c(0x04)
	struct FS_WeaponMoveSpeedMultipliers MovementSpeedMultipliers; // 0x960(0x18)
	float SprintExitDelayBeforeAttack; // 0x978(0x04)
	float AttackExitDelayBeforeSprint; // 0x97c(0x04)
	bool bDevFlagUseCommandManager; // 0x980(0x01)
	enum class ES_ProjectileWindupFiringType PlayerWindupFiringType; // 0x981(0x01)
	enum class ES_ProjectileWindupFiringType AIWindupFiringType; // 0x982(0x01)
	char pad_983[0x1]; // 0x983(0x01)
	float WindupDuration; // 0x984(0x04)
	float WindupForcedReleaseTimer; // 0x988(0x04)
	bool VelocityBasedPrefersHighArc; // 0x98c(0x01)
	char pad_98D[0x3]; // 0x98d(0x03)
	int32_t VelocityBasedMaxTryCount; // 0x990(0x04)
	int32_t ArcBasedMaxTryCount; // 0x994(0x04)
	struct UCurveFloat* WindupDamageMultiCurve; // 0x998(0x08)
	struct UCurveFloat* WindupSpreadCurve; // 0x9a0(0x08)
	struct UCurveFloat* WindupVelocityCurve; // 0x9a8(0x08)
	float WindupVelocityMax; // 0x9b0(0x04)
	float WindupVelocityMin; // 0x9b4(0x04)
	struct UCurveFloat* AIWindupVelocityCurve; // 0x9b8(0x08)
	float AIWindupVelocityMax; // 0x9c0(0x04)
	float AIWindupVelocityMin; // 0x9c4(0x04)
	struct UCurveFloat* WindupArcCurve; // 0x9c8(0x08)
	struct UCurveFloat* WindupAimPitchCurve; // 0x9d0(0x08)
	float PlayerBlockDoAttackTimer; // 0x9d8(0x04)
	float AIBlockDoAttackTimer; // 0x9dc(0x04)
	char pad_9E0[0x20]; // 0x9e0(0x20)
	struct UDataTable* Impacts; // 0xa00(0x08)
	struct FS_WhizBySound WhizBySound; // 0xa08(0x28)
	struct FS_DryFireSound DryFireSound; // 0xa30(0x08)
	struct FS_RecoilWeaponSettings RecoilWeaponSettings; // 0xa38(0x2c)
	char pad_A64[0x4]; // 0xa64(0x04)
	struct FMulticastInlineDelegate OnAttackEvent; // 0xa68(0x10)
	struct FMulticastInlineDelegate OnPreDealDamage; // 0xa78(0x10)
	struct FMulticastInlineDelegate OnPostDealDamage; // 0xa88(0x10)
	bool UsesReticuleHitForAimOffset; // 0xa98(0x01)
	char pad_A99[0x3]; // 0xa99(0x03)
	char bCanBeDropped : 1; // 0xa9c(0x01)
	char bHideWhenStowed : 1; // 0xa9c(0x01)
	char bUseSecondaryFireInADS : 1; // 0xa9c(0x01)
	char pad_A9C_3 : 5; // 0xa9c(0x01)
	char pad_A9D[0x3]; // 0xa9d(0x03)
	struct AS_WeaponTriggerableAttachment* TriggerableAttachmentClasses[0x6]; // 0xaa0(0x30)
	struct AS_WeaponAttachmentSight* AttachmentSight; // 0xad0(0x08)
	struct TArray<struct AS_WeaponAttachment*> AdditionalAttachmentClasses; // 0xad8(0x10)
	struct UCurveFloat* AimoffsetPitchModifier; // 0xae8(0x08)
	struct UCurveFloat* AimoffsetYawModifier; // 0xaf0(0x08)
	struct US_HUDReticule* ReticuleClass; // 0xaf8(0x08)
	struct TMap<enum class ES_MeleeSoundStrength, struct FS_MeleeSound> MeleeSounds; // 0xb00(0x50)
	struct TMap<enum class ES_ReloadSound, struct FS_ReloadSound> ReloadSounds; // 0xb50(0x50)
	struct UParticleSystem* MeleeParticleSystemTemplate; // 0xba0(0x08)
	struct TArray<struct FS_AttackEventReaction> WeaponEventReactions; // 0xba8(0x10)
	enum class ES_WeaponClass WeaponClass; // 0xbb8(0x01)
	enum class ES_CosmeticWeaponClass CosmeticWeaponClass; // 0xbb9(0x01)
	char pad_BBA[0x2]; // 0xbba(0x02)
	struct FName WeaponTypeName; // 0xbbc(0x08)
	struct FName DefaultStowedSocketName; // 0xbc4(0x08)
	struct FName SecondaryStowedSocketName; // 0xbcc(0x08)
	char pad_BD4[0x4]; // 0xbd4(0x04)
	struct FMulticastInlineDelegate OnDealCriticalDamage; // 0xbd8(0x10)
	enum class ES_WeaponGripType LeftHandGripType; // 0xbe8(0x01)
	enum class ES_WeaponGripType RightHandGripType; // 0xbe9(0x01)
	char pad_BEA[0x6]; // 0xbea(0x06)
	struct US_WeaponMontagePackage* AttackMontages; // 0xbf0(0x08)
	struct TArray<struct AS_WeaponAttachment*> m_additionalAttachments; // 0xbf8(0x10)
	struct TArray<struct FS_TrackedParticleSystemComponent> m_trackedParticleSystemComponents; // 0xc08(0x10)
	struct TArray<struct FS_TrackedAudioComponent> m_trackedAudioComponents; // 0xc18(0x10)
	char pad_C28[0x56]; // 0xc28(0x56)
	enum class ES_EquipmentSlot m_equipmentSlot; // 0xc7e(0x01)
	char pad_C7F[0x31]; // 0xc7f(0x31)
	bool m_bServerAllowsCriticalDamage; // 0xcb0(0x01)
	char pad_CB1[0x7]; // 0xcb1(0x07)
	enum class ES_WeaponSlot m_weaponSlot; // 0xcb8(0x01)
	char pad_CB9[0x7]; // 0xcb9(0x07)
	struct AS_WeaponTriggerableAttachment* m_triggerableAttachments[0x6]; // 0xcc0(0x30)
	struct AS_WeaponAttachmentSight* m_attachmentSight; // 0xcf0(0x08)
	char pad_CF8[0x30]; // 0xcf8(0x30)
	struct TMap<enum class ES_WeaponModifier, struct FS_WeaponAttachmentArrayContainer> m_weaponModifierTypeToRegisteredAttachments; // 0xd28(0x50)
	struct FS_RandStateWithHistory m_repRandState; // 0xd78(0x1a0)
	char pad_F18[0x18]; // 0xf18(0x18)
	char m_sonicVariant; // 0xf30(0x01)
	char pad_F31[0x1f]; // 0xf31(0x1f)
	struct US_ManagedSoundBankComponent* m_managedSoundBankComponent; // 0xf50(0x08)
	struct UAnimMontage* m_currentPlayingAttackMontage; // 0xf58(0x08)
	char pad_F60[0x8]; // 0xf60(0x08)

	void UnregisterAttachmentModifier(enum class ES_WeaponModifier modifierType, struct AS_WeaponAttachment* attachment); // Function Scavenger.S_WeaponBase.UnregisterAttachmentModifier // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct UAnimMontage* SelectAttackMontageVariant(struct TArray<struct UAnimMontage*> MontageVariations, enum class ES_WeaponMontageEvent attackEvent, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.SelectAttackMontageVariant // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ResetAILeadVector(enum class ES_TriggerType Trigger); // Function Scavenger.S_WeaponBase.ResetAILeadVector // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveNonTriggerableWeaponAttachment(struct AS_WeaponAttachment* weaponAttachment); // Function Scavenger.S_WeaponBase.RemoveNonTriggerableWeaponAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterAttachmentModifier(enum class ES_WeaponModifier modifierType, struct AS_WeaponAttachment* attachment); // Function Scavenger.S_WeaponBase.RegisterAttachmentModifier // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRep_AllowCritDamage(); // Function Scavenger.S_WeaponBase.OnRep_AllowCritDamage // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnCriticalDamage(float RandRoll, float normalDamage, struct FHitResult HitResult, struct AActor* DamagedActor, struct AS_CharacterBase* causeCharacter, enum class ES_TriggerType triggerType, float CriticalDamage); // Function Scavenger.S_WeaponBase.OnCriticalDamage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnAttackEvent_BP(enum class ES_TriggerType triggerType, enum class ES_AttackEvent attackEvent); // Function Scavenger.S_WeaponBase.OnAttackEvent_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRandStateReplicated(); // Function Scavenger.S_WeaponBase.NotifyRandStateReplicated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsMeleeWeapon(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.IsMeleeWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void IsCriticalDamage(float RandRoll, struct FHitResult HitResult, struct AActor* DamagedActor, struct AS_CharacterBase* causeCharacter, enum class ES_TriggerType triggerType, bool CriticalHit); // Function Scavenger.S_WeaponBase.IsCriticalDamage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAnySlotReloading(); // Function Scavenger.S_WeaponBase.IsAnySlotReloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HasSightWidgetClass(); // Function Scavenger.S_WeaponBase.HasSightWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetWindupFraction(); // Function Scavenger.S_WeaponBase.GetWindupFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetWeaponTypeName(); // Function Scavenger.S_WeaponBase.GetWeaponTypeName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TScriptInterface<None> GetWeaponSystemOwner_BP(); // Function Scavenger.S_WeaponBase.GetWeaponSystemOwner_BP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WeaponSystem* GetWeaponSystemComponent(); // Function Scavenger.S_WeaponBase.GetWeaponSystemComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlot GetWeaponSlot(); // Function Scavenger.S_WeaponBase.GetWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponGripType GetWeaponRightHandGripType(); // Function Scavenger.S_WeaponBase.GetWeaponRightHandGripType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_HUDReticule* GetWeaponReticleClass(); // Function Scavenger.S_WeaponBase.GetWeaponReticleClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponGripType GetWeaponLeftHandGripType(); // Function Scavenger.S_WeaponBase.GetWeaponLeftHandGripType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponGripType GetWeaponGripType(); // Function Scavenger.S_WeaponBase.GetWeaponGripType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponClass GetWeaponClass(); // Function Scavenger.S_WeaponBase.GetWeaponClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponAttachmentSight* GetWeaponAttachmentSight(); // Function Scavenger.S_WeaponBase.GetWeaponAttachmentSight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetUsesAmmo(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetUsesAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponTriggerableAttachment* GetTriggerableWeaponAttachment(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetTriggerableWeaponAttachment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSprintExitDelayBeforeAttack(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetSprintExitDelayBeforeAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSpreadMovementPenalty(); // Function Scavenger.S_WeaponBase.GetSpreadMovementPenalty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSpreadAngleValue(bool bIsADSActive, bool bUseMovementPenalty); // Function Scavenger.S_WeaponBase.GetSpreadAngleValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSpreadAngle(); // Function Scavenger.S_WeaponBase.GetSpreadAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FTransform GetSocketTransformInWorldSpace(struct FName SocketName, bool bPreferAttachments); // Function Scavenger.S_WeaponBase.GetSocketTransformInWorldSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRawSpreadAngle(); // Function Scavenger.S_WeaponBase.GetRawSpreadAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_WeaponAttachment*> GetNonTriggerableWeaponAttachments(); // Function Scavenger.S_WeaponBase.GetNonTriggerableWeaponAttachments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMinSpreadAngleNonADS(); // Function Scavenger.S_WeaponBase.GetMinSpreadAngleNonADS // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMinSpreadAngleADS(); // Function Scavenger.S_WeaponBase.GetMinSpreadAngleADS // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMinSpreadAngle(); // Function Scavenger.S_WeaponBase.GetMinSpreadAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxSpreadAngleNonADS(); // Function Scavenger.S_WeaponBase.GetMaxSpreadAngleNonADS // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxSpreadAngleADS(); // Function Scavenger.S_WeaponBase.GetMaxSpreadAngleADS // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMaxSpreadAngle(); // Function Scavenger.S_WeaponBase.GetMaxSpreadAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetMaximumLoadedAmmoCount(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetMaximumLoadedAmmoCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_ManagedSoundBankComponent* GetManagedSoundBankComponent(); // Function Scavenger.S_WeaponBase.GetManagedSoundBankComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetMagnification(); // Function Scavenger.S_WeaponBase.GetMagnification // (Final|Native|Public|Const) // @ game+0xffff8008e4a10000
	enum class ES_EquipmentSlot GetEquipmentSlot(); // Function Scavenger.S_WeaponBase.GetEquipmentSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetDoesBurstAttack(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetDoesBurstAttack // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_WeaponTriggerableAttachment*> GetDefaultTriggerableAttachmentClasses(struct AS_WeaponBase* WeaponClass); // Function Scavenger.S_WeaponBase.GetDefaultTriggerableAttachmentClasses // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetCurrentLoadedAmmoCount(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetCurrentLoadedAmmoCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCriticalChance(); // Function Scavenger.S_WeaponBase.GetCriticalChance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_CosmeticWeaponClass GetCosmeticWeaponClass(); // Function Scavenger.S_WeaponBase.GetCosmeticWeaponClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBloomPercentage(); // Function Scavenger.S_WeaponBase.GetBloomPercentage // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttackExitDelayBeforeSprint(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetAttackExitDelayBeforeSprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_AmmoType GetAmmoType(enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponBase.GetAmmoType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_WeaponAttachment*> GetAllWeaponAttachments(); // Function Scavenger.S_WeaponBase.GetAllWeaponAttachments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct AS_WeaponAttachment*> GetAllWeaponAttachmentClasses(); // Function Scavenger.S_WeaponBase.GetAllWeaponAttachmentClasses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetADSSensitivity(); // Function Scavenger.S_WeaponBase.GetADSSensitivity // (Final|Native|Public|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponAttachment* FindWeaponAttachmentOnSocket(struct FName SocketName); // Function Scavenger.S_WeaponBase.FindWeaponAttachmentOnSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponAttachment* FindAttachmentByClass(SoftClassProperty AttachmentClass); // Function Scavenger.S_WeaponBase.FindAttachmentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearAllWeaponAttachments(); // Function Scavenger.S_WeaponBase.ClearAllWeaponAttachments // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AS_WeaponBase_OnWalkChangedCallback(bool IsWalkOn); // Function Scavenger.S_WeaponBase.AS_WeaponBase_OnWalkChangedCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void AS_WeaponBase_OnSprintChangedCallback(bool IsSprintOn); // Function Scavenger.S_WeaponBase.AS_WeaponBase_OnSprintChangedCallback // (Final|Native|Public) // @ game+0xffff8008e4a10000
	struct AS_WeaponAttachment* AddNonTriggerableWeaponAttachment(struct AS_WeaponAttachment* weaponAttachmentClass); // Function Scavenger.S_WeaponBase.AddNonTriggerableWeaponAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct US_WeaponFunctionLibrary : UBlueprintFunctionLibrary {

	void LogWeaponMessage(struct AS_WeaponBase* weapon, enum class ES_TriggerType triggerType, struct FString Message); // Function Scavenger.S_WeaponFunctionLibrary.LogWeaponMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LogCharacterWeaponTriggerMessage(struct AS_CharacterBase* Character, enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, struct FString Message); // Function Scavenger.S_WeaponFunctionLibrary.LogCharacterWeaponTriggerMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LogCharacterWeaponMessage(struct AS_CharacterBase* Character, enum class ES_WeaponSlot weaponSlot, struct FString Message); // Function Scavenger.S_WeaponFunctionLibrary.LogCharacterWeaponMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponGrenade
// Size: 0xf88 (Inherited: 0xf68)
struct AS_WeaponGrenade : AS_WeaponBase {
	struct UStaticMesh* SplineStaticMesh; // 0xf68(0x08)
	struct UMaterialInterface* AimingArcSplineMaterial; // 0xf70(0x08)
	float AimingArcStepSize; // 0xf78(0x04)
	float MaximumAmountOfAimingArcSteps; // 0xf7c(0x04)
	char pad_F80[0x8]; // 0xf80(0x08)
};

// Class Scavenger.S_WeaponGrenadeLog
// Size: 0x28 (Inherited: 0x28)
struct US_WeaponGrenadeLog : UBlueprintFunctionLibrary {

	void LogGrenadeMessageInBlueprint(struct AS_WeaponGrenade* grenadeWeapon, enum class ES_TriggerType triggerType, struct FString Message); // Function Scavenger.S_WeaponGrenadeLog.LogGrenadeMessageInBlueprint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponHitscanAttachment
// Size: 0x608 (Inherited: 0x600)
struct AS_WeaponHitscanAttachment : AS_WeaponBarrelAttachment {
	float OffsetFromReticuleOnError; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)
};

// Class Scavenger.S_WeaponMagazineAttachment
// Size: 0x3c8 (Inherited: 0x3c0)
struct AS_WeaponMagazineAttachment : AS_WeaponAttachment {
	float ReloadDuration; // 0x3c0(0x04)
	bool AllowFireOutOfReload; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
};

// Class Scavenger.S_WeaponMeleeAttachment
// Size: 0x610 (Inherited: 0x5c8)
struct AS_WeaponMeleeAttachment : AS_WeaponTriggerableAttachment {
	float DamageAmountOnNonCharacters; // 0x5c8(0x04)
	float ImpulseMultiplier; // 0x5cc(0x04)
	float ImpulseMultiplierAI; // 0x5d0(0x04)
	float CharacterImpulseMultiplier; // 0x5d4(0x04)
	float CharacterImpulseMultiplierAI; // 0x5d8(0x04)
	struct FVector ImpulseUpBias; // 0x5dc(0x0c)
	float IdealMeleeRange; // 0x5e8(0x04)
	char pad_5EC[0xc]; // 0x5ec(0x0c)
	struct TArray<struct AActor*> m_AttackLifetimeUniqueActors; // 0x5f8(0x10)
	char pad_608[0x8]; // 0x608(0x08)
};

// Class Scavenger.S_WeaponProjectileAttachment
// Size: 0x648 (Inherited: 0x600)
struct AS_WeaponProjectileAttachment : AS_WeaponBarrelAttachment {
	struct AS_ProjectileBase* ProjectileClass; // 0x600(0x08)
	float OffsetFromReticuleOnError; // 0x608(0x04)
	struct FName UnFiredProjectileSocketName; // 0x60c(0x08)
	char pad_614[0x4]; // 0x614(0x04)
	struct AS_ProjectileBase* m_lastSpawnedProjectile; // 0x618(0x08)
	char pad_620[0x28]; // 0x620(0x28)
};

// Class Scavenger.S_WeaponScopeAttachment
// Size: 0x3c0 (Inherited: 0x3c0)
struct AS_WeaponScopeAttachment : AS_WeaponAttachment {
};

// Class Scavenger.S_WeaponShotgunAttachment
// Size: 0x640 (Inherited: 0x600)
struct AS_WeaponShotgunAttachment : AS_WeaponBarrelAttachment {
	int32_t PelletsPerShot; // 0x600(0x04)
	float SpreadConeHalfAngle; // 0x604(0x04)
	float SpreadRandMedian; // 0x608(0x04)
	float MaxRange; // 0x60c(0x04)
	enum class ECollisionChannel ClientCollisionChannel; // 0x610(0x01)
	enum class ECollisionChannel ServerCollisionChannel; // 0x611(0x01)
	char pad_612[0x2e]; // 0x612(0x2e)

	void OnImpactWithLandscape(struct FHitResult ImpactResult, float SnowDepth); // Function Scavenger.S_WeaponShotgunAttachment.OnImpactWithLandscape // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponSystem
// Size: 0x1d00 (Inherited: 0xb0)
struct US_WeaponSystem : UActorComponent {
	char pad_B0[0x48]; // 0xb0(0x48)
	struct FName ReadiedWeaponDefaultAttachSocketName; // 0xf8(0x08)
	char bDisableWeaponAttachmentBlending : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct TMap<enum class ES_MeleeSoundStrength, struct FS_MeleeSound> MeleeSoundOverrides; // 0x108(0x50)
	bool AllowDroppingWeapons; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float WeaponAttackingFailsafeTimeInSeconds; // 0x15c(0x04)
	float WeaponReadyingFailsafeTimeInSeconds; // 0x160(0x04)
	float WeaponReloadingFailsafeTimeInSeconds; // 0x164(0x04)
	float WeaponStowingFailsafeTimeInSeconds; // 0x168(0x04)
	float m_minimumTimeBetweenTriggerPulls; // 0x16c(0x04)
	struct AS_WeaponBase* ActionSystemWeapon; // 0x170(0x08)
	struct AS_WeaponBase* UnarmedWeaponClass; // 0x178(0x08)
	struct AS_WeaponGrenade* GrenadeWeaponClass; // 0x180(0x08)
	struct FMulticastInlineDelegate OnWeaponSlotChanged; // 0x188(0x10)
	struct FMulticastInlineDelegate OnWeaponSlotStateChanged; // 0x198(0x10)
	struct FMulticastInlineDelegate OnCurrentlySelectedWeaponSlotChanged; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnAttackEvent; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnCurrentWeaponHideShowStateChanged; // 0x1c8(0x10)
	char pad_1D8[0xa8]; // 0x1d8(0xa8)
	struct TMap<uint32_t, struct FS_AttackDataQueue> m_remoteStartAttackIDDataQueues; // 0x280(0x50)
	char pad_2D0[0x158]; // 0x2d0(0x158)
	struct FS_WeaponState m_weaponStates[0x5]; // 0x428(0x1680)
	char pad_1AA8[0x20]; // 0x1aa8(0x20)
	struct FS_WeaponSlotData m_weapons[0x5]; // 0x1ac8(0x50)
	struct FS_WeaponSlotData m_lastWeapons[0x5]; // 0x1b18(0x50)
	char pad_1B68[0x2]; // 0x1b68(0x02)
	enum class ES_WeaponSlot m_currentlySelectedWeaponSlot; // 0x1b6a(0x01)
	enum class ES_WeaponSlot lastAttacksWeaponSlot; // 0x1b6b(0x01)
	enum class ES_WeaponSlot m_switchToSelectedWeaponSlot; // 0x1b6c(0x01)
	enum class ES_WeaponSlot m_holsteredWeaponSlot; // 0x1b6d(0x01)
	enum class ES_WeaponSlot m_prevWeaponSlot; // 0x1b6e(0x01)
	char pad_1B6F[0x1]; // 0x1b6f(0x01)
	struct FS_AttackArray m_attackDataForClients; // 0x1b70(0x28)
	struct TMap<struct FS_ActionHandle, struct FS_AttackDataQueue> m_mapOfActionHandleToAttackDataQueue; // 0x1b98(0x50)
	char pad_1BE8[0x98]; // 0x1be8(0x98)
	struct AS_WeaponGrenade* m_grenadeWeaponThrowable; // 0x1c80(0x08)
	char pad_1C88[0x8]; // 0x1c88(0x08)
	struct TArray<struct FS_AttackEventMontageInfo> m_attackMontageInfo; // 0x1c90(0x10)
	char pad_1CA0[0x60]; // 0x1ca0(0x60)

	bool TrySelectCurrentWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.TrySelectCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TryReloadCancel(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryReloadCancel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_TryActionResult TryReloadAction(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, bool bIsExplicit); // Function Scavenger.S_WeaponSystem.TryReloadAction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TryReload(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryReload // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TryAttackRelease(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryAttackRelease // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TryAttackPress(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryAttackPress // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TryAttackCancel(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryAttackCancel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_TryActionResult TryAttackAction(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.TryAttackAction // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ToggleHolsterWeapon(); // Function Scavenger.S_WeaponSystem.ToggleHolsterWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ThrewGrenade(); // Function Scavenger.S_WeaponSystem.ThrewGrenade // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowCurrentWeapon(); // Function Scavenger.S_WeaponSystem.ShowCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SelectCurrentWeaponAndHolster(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.SelectCurrentWeaponAndHolster // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SelectCurrentWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.SelectCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnReplicatedSwitchToSelectedWeaponSlot(enum class ES_WeaponSlot lastWeaponSlot); // Function Scavenger.S_WeaponSystem.OnReplicatedSwitchToSelectedWeaponSlot // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnReplicatedCurrentlySelectedWeaponSlot(enum class ES_WeaponSlot lastWeaponSlot); // Function Scavenger.S_WeaponSystem.OnReplicatedCurrentlySelectedWeaponSlot // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnOwnerMontageFinished(struct UAnimMontage* Montage, bool bInterrupted, int32_t montageInstanceID); // Function Scavenger.S_WeaponSystem.OnOwnerMontageFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedWeapons(); // Function Scavenger.S_WeaponSystem.NotifyReplicatedWeapons // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyReplicatedAttackData(); // Function Scavenger.S_WeaponSystem.NotifyReplicatedAttackData // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool IsTriggerHeld(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType Trigger); // Function Scavenger.S_WeaponSystem.IsTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsThrowingGrenade(); // Function Scavenger.S_WeaponSystem.IsThrowingGrenade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsGrenadeSlotted(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.IsGrenadeSlotted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAttacking(); // Function Scavenger.S_WeaponSystem.IsAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HideCurrentWeapon(); // Function Scavenger.S_WeaponSystem.HideCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool HasAnyWeaponEquipped(); // Function Scavenger.S_WeaponSystem.HasAnyWeaponEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlotState GetWeaponSlotState(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.GetWeaponSlotState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetWeaponBySlot(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.GetWeaponBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTimeSinceLastAttack(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.GetTimeSinceLastAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetSwitchingToWeaponSlot(enum class ES_WeaponSlot OutSlot); // Function Scavenger.S_WeaponSystem.GetSwitchingToWeaponSlot // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetSprintExitAttackDelay(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.GetSprintExitAttackDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetSlotByWeapon(enum class ES_WeaponSlot OutSlot, struct AS_WeaponBase* weapon); // Function Scavenger.S_WeaponSystem.GetSlotByWeapon // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPreviousWeaponSlot(enum class ES_WeaponSlot OutSlot); // Function Scavenger.S_WeaponSystem.GetPreviousWeaponSlot // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetHolsteredWeaponSlot(enum class ES_WeaponSlot OutSlot); // Function Scavenger.S_WeaponSystem.GetHolsteredWeaponSlot // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_WeaponSlot GetCurrentWeaponSlot(); // Function Scavenger.S_WeaponSystem.GetCurrentWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_WeaponBase* GetCurrentWeapon(); // Function Scavenger.S_WeaponSystem.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetAttackExitSprintDelay(enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType); // Function Scavenger.S_WeaponSystem.GetAttackExitSprintDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DropEquippedWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.DropEquippedWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DropAllEquippedWeapons(); // Function Scavenger.S_WeaponSystem.DropAllEquippedWeapons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DestroyAllEquippedWeapons(); // Function Scavenger.S_WeaponSystem.DestroyAllEquippedWeapons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool CycleCurrentWeapon(enum class ES_CycleDirection cycleDirection); // Function Scavenger.S_WeaponSystem.CycleCurrentWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientDenySelectCurrentWeapon(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WeaponSystem.ClientDenySelectCurrentWeapon // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponSystemLog
// Size: 0x28 (Inherited: 0x28)
struct US_WeaponSystemLog : UBlueprintFunctionLibrary {

	void LogWeaponMessage(struct AS_WeaponBase* weapon, enum class ES_TriggerType triggerType, struct FString Message); // Function Scavenger.S_WeaponSystemLog.LogWeaponMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LogSystemMessage(struct US_WeaponSystem* WeaponSystem, enum class ES_WeaponSlot weaponSlot, struct FString Message); // Function Scavenger.S_WeaponSystemLog.LogSystemMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LogSystemAndWeaponMessage(struct US_WeaponSystem* WeaponSystem, enum class ES_WeaponSlot weaponSlot, enum class ES_TriggerType triggerType, struct FString Message); // Function Scavenger.S_WeaponSystemLog.LogSystemAndWeaponMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeaponSystemOwner
// Size: 0x28 (Inherited: 0x28)
struct US_WeaponSystemOwner : UInterface {

	bool IsPlayerControlled(); // Function Scavenger.S_WeaponSystemOwner.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBotControlled(); // Function Scavenger.S_WeaponSystemOwner.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsAlive(); // Function Scavenger.S_WeaponSystemOwner.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WeaponSystem* GetWeaponSystemComponent(); // Function Scavenger.S_WeaponSystemOwner.GetWeaponSystemComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetTimeSinceSprint(); // Function Scavenger.S_WeaponSystemOwner.GetTimeSinceSprint // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool AreWeaponsLocallyControlled(); // Function Scavenger.S_WeaponSystemOwner.AreWeaponsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WeatherAudioSystem
// Size: 0xe0 (Inherited: 0x28)
struct US_WeatherAudioSystem : UObject {
	struct TArray<struct UAkAudioEvent*> StormPointSourceEvents; // 0x28(0x10)
	struct TArray<struct UAkAudioEvent*> OuterStormPointSourceEvents; // 0x38(0x10)
	double StormPointSourceAudibleDistance; // 0x48(0x08)
	struct UAkAudioEvent* EnterStormEvent; // 0x50(0x08)
	struct UAkAudioEvent* ExitStormEvent; // 0x58(0x08)
	struct UAkAudioEvent* StartBaseAmbiEvent; // 0x60(0x08)
	struct UAkAudioEvent* StopBaseAmbiEvent; // 0x68(0x08)
	float ClosestStormDistance; // 0x70(0x04)
	float PrevSentStormDistance; // 0x74(0x04)
	char pad_78[0x8]; // 0x78(0x08)
	struct TArray<struct FS_PlayingStormSound> RoamingStormSounds; // 0x80(0x10)
	struct FS_PlayingStormSound OuterStormSound; // 0x90(0x20)
	struct UAkComponent* PlayingGlobalStorm; // 0xb0(0x08)
	struct UAkComponent* PlayingBaseAmbis; // 0xb8(0x08)
	int32_t MaxStormsCreatePerTick; // 0xc0(0x04)
	char pad_C4[0x1c]; // 0xc4(0x1c)
};

// Class Scavenger.S_WidgetAbility
// Size: 0x510 (Inherited: 0x4c8)
struct US_WidgetAbility : US_PingableWidget {
	struct UImage* AbilityIcon; // 0x4c8(0x08)
	struct US_UMGCommonKey* AbilityKey; // 0x4d0(0x08)
	struct US_RichTextBlock* ChargeTimer; // 0x4d8(0x08)
	struct US_WidgetCommonProgressBar* AbilityFill; // 0x4e0(0x08)
	struct UImage* SupportIcon; // 0x4e8(0x08)
	struct FDataTableRowHandle ChargeHandle; // 0x4f0(0x10)
	char pad_500[0x10]; // 0x500(0x10)

	void NotifyAbilityReady(bool bInitializing); // Function Scavenger.S_WidgetAbility.NotifyAbilityReady // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAbilityEnteredCooldown(); // Function Scavenger.S_WidgetAbility.NotifyAbilityEnteredCooldown // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAbilityActivateFailed(); // Function Scavenger.S_WidgetAbility.NotifyAbilityActivateFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAbilityActivated(); // Function Scavenger.S_WidgetAbility.NotifyAbilityActivated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandlePlayerClassChanged(struct US_PlayerClassData* ClassData); // Function Scavenger.S_WidgetAbility.HandlePlayerClassChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterSet(struct AS_PlayerCharacter* NewCharacter); // Function Scavenger.S_WidgetAbility.HandleOnPlayerCharacterSet // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool usingGamepad); // Function Scavenger.S_WidgetAbility.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAbilityActivated(struct FGameplayAbilitySpecHandle GameplayAbilitySpecHandle, struct UGameplayAbility* GameplayAbility); // Function Scavenger.S_WidgetAbility.HandleOnAbilityActivated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAccountCheatsExplorerView
// Size: 0x538 (Inherited: 0x4b8)
struct US_WidgetAccountCheatsExplorerView : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnExplorerNameButtonPressed; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnExplorerLevelsButtonPressed; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnExplorerItemsButtonPressed; // 0x4d8(0x10)
	struct US_WidgetCommonScavengerButton* ExplorerNameButton; // 0x4e8(0x08)
	struct US_WidgetCommonScavengerButton* ExplorerLevelsButton; // 0x4f0(0x08)
	struct US_WidgetCommonScavengerButton* ExplorerItemsButton; // 0x4f8(0x08)
	char pad_500[0x38]; // 0x500(0x38)

	void HandleExplorerButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsExplorerView.HandleExplorerButtonClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAccountCheatsPage
// Size: 0x528 (Inherited: 0x4b8)
struct US_WidgetAccountCheatsPage : US_WidgetMinimal {
	struct US_WidgetAccountCheatsExplorerView* ExplorerViewWidget; // 0x4b8(0x08)
	struct US_RichTextBlock* AccountCheatsLabel; // 0x4c0(0x08)
	struct US_WidgetCommonScavengerButton* ResearchTiersButton; // 0x4c8(0x08)
	struct US_WidgetCommonScavengerButton* LoadoutItemsButton; // 0x4d0(0x08)
	struct US_WidgetCommonScavengerButton* WildcardsButton; // 0x4d8(0x08)
	struct US_WidgetCommonScavengerButton* ThrowablesButton; // 0x4e0(0x08)
	struct US_WidgetCommonScavengerButton* AllCharactersButton; // 0x4e8(0x08)
	struct US_WidgetCommonScavengerButton* CosmeticsButton; // 0x4f0(0x08)
	struct US_WidgetCommonScavengerButton* ResourcesButton; // 0x4f8(0x08)
	struct US_WidgetCommonScavengerButton* SalvageItemsButton; // 0x500(0x08)
	struct US_WidgetCommonScavengerButton* CurrencyButton; // 0x508(0x08)
	struct US_WidgetCommonScavengerButton* AccountResetButton; // 0x510(0x08)
	struct UVerticalBox* ExplorerViewPanel; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)

	void HandleWildcardsClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleWildcardsClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleThrowablesClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleThrowablesClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSalvageItemsButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleSalvageItemsButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleResourcesButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleResourcesButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleResearchTiersClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleResearchTiersClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLoadoutItemsClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleLoadoutItemsClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleExplorerNameButtonPressed(struct FName ClassId); // Function Scavenger.S_WidgetAccountCheatsPage.HandleExplorerNameButtonPressed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleExplorerLevelsButtonPressed(struct FName ClassId); // Function Scavenger.S_WidgetAccountCheatsPage.HandleExplorerLevelsButtonPressed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleExplorerItemsButtonPressed(struct FName ClassId); // Function Scavenger.S_WidgetAccountCheatsPage.HandleExplorerItemsButtonPressed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCurrencyButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleCurrencyButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCosmeticsClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleCosmeticsClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAllCharactersClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleAllCharactersClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAccountStateRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetAccountCheatsPage.HandleAccountStateRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleAccountResetButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetAccountCheatsPage.HandleAccountResetButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCustomizationBase
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetCustomizationBase : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnCosmeticTypeSelected; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnCosmeticItemSelected; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnSubmaterialSlotSelected; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnSubmaterialSlotAndIndexSelected; // 0x4e8(0x10)
	char pad_4F8[0x10]; // 0x4f8(0x10)

	void UnequipCosmeticItem(struct FName cosmeticId); // Function Scavenger.S_WidgetCustomizationBase.UnequipCosmeticItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PreviewCosmeticItem(struct FName cosmeticId); // Function Scavenger.S_WidgetCustomizationBase.PreviewCosmeticItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool PlayerOwnsItemId(struct FName ItemId); // Function Scavenger.S_WidgetCustomizationBase.PlayerOwnsItemId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void NotifyInitializedFromCosmeticTypeAndOwningId(enum class ES_CosmeticType CosmeticType, struct FName owningOnlineItemId); // Function Scavenger.S_WidgetCustomizationBase.NotifyInitializedFromCosmeticTypeAndOwningId // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitializedFromCosmeticType(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetCustomizationBase.NotifyInitializedFromCosmeticType // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitializedFromCosmeticItem(struct FS_CosmeticItemMetadata CosmeticItemMetadata); // Function Scavenger.S_WidgetCustomizationBase.NotifyInitializedFromCosmeticItem // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitFromCosmeticTypeAndViewingItemId(enum class ES_CosmeticType CosmeticType, struct FName viewingOnlineItemId); // Function Scavenger.S_WidgetCustomizationBase.InitFromCosmeticTypeAndViewingItemId // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitFromCosmeticType(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetCustomizationBase.InitFromCosmeticType // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitFromCosmeticItem(struct FName cosmeticItemMetadataId, struct FS_CosmeticItemMetadata CosmeticItemMetadata); // Function Scavenger.S_WidgetCustomizationBase.InitFromCosmeticItem // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetPurchasedCosmeticItems(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetCustomizationBase.GetPurchasedCosmeticItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_CustomizationStagingObject GetCustomizationStagingObjectFromPlayerController(); // Function Scavenger.S_WidgetCustomizationBase.GetCustomizationStagingObjectFromPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TArray<struct FName> GetCurrentlySelectedCosmeticItemIds(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetCustomizationBase.GetCurrentlySelectedCosmeticItemIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FName GetCurrentlySelectedCosmeticItemIdForLoadoutSlot(enum class ES_CosmeticLoadoutSlotType CosmeticType); // Function Scavenger.S_WidgetCustomizationBase.GetCurrentlySelectedCosmeticItemIdForLoadoutSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void EquipCosmeticItemToLoadoutSlot(struct FName cosmeticId, enum class ES_CosmeticLoadoutSlotType CosmeticLoadoutSlotType); // Function Scavenger.S_WidgetCustomizationBase.EquipCosmeticItemToLoadoutSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EquipCosmeticItem(struct FName cosmeticId); // Function Scavenger.S_WidgetCustomizationBase.EquipCosmeticItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCustomizationOptionScreen
// Size: 0x708 (Inherited: 0x508)
struct US_WidgetCustomizationOptionScreen : US_WidgetCustomizationBase {
	SoftClassProperty CosmeticCardClasses[0xb]; // 0x508(0x1b8)
	float UnhoverBufferTime; // 0x6c0(0x04)
	enum class ES_CosmeticType DefaultCosmeticType; // 0x6c4(0x01)
	char pad_6C5[0x3]; // 0x6c5(0x03)
	struct US_UMGLinearPanel* CosmeticPanel; // 0x6c8(0x08)
	struct US_WidgetCustomizationOptionInfo* OptionInfo; // 0x6d0(0x08)
	char pad_6D8[0x30]; // 0x6d8(0x30)

	void HandleOnCustomizationOptionItemUnhovered(struct FName ItemId); // Function Scavenger.S_WidgetCustomizationOptionScreen.HandleOnCustomizationOptionItemUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCustomizationOptionItemHovered(struct FName ItemId); // Function Scavenger.S_WidgetCustomizationOptionScreen.HandleOnCustomizationOptionItemHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCustomizationOptionItemClicked(struct FName ItemId); // Function Scavenger.S_WidgetCustomizationOptionScreen.HandleOnCustomizationOptionItemClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_WidgetCustomizationOptionScreen.HandleOnCosmeticLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCosmeticCardClassLoaded(); // Function Scavenger.S_WidgetCustomizationOptionScreen.HandleCosmeticCardClassLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAccountCustomizationScreen
// Size: 0x718 (Inherited: 0x708)
struct US_WidgetAccountCustomizationScreen : US_WidgetCustomizationOptionScreen {
	struct US_WidgetCosmeticTitle* TitlePreview; // 0x708(0x08)
	char pad_710[0x8]; // 0x710(0x08)

	void HandleOnAccountCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_WidgetAccountCustomizationScreen.HandleOnAccountCosmeticLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPhaseSubscreen
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetPhaseSubscreen : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnSubscreenStepStarted; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnSubscreenStepEnded; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnMoveToNextStepRequestMade; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnBypassCurrentStepRequestMade; // 0x4e8(0x10)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x4f8(0x08)
	char pad_500[0x8]; // 0x500(0x08)

	void SetStepIsRunning(bool stepIsRunning); // Function Scavenger.S_WidgetPhaseSubscreen.SetStepIsRunning // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RunStep(); // Function Scavenger.S_WidgetPhaseSubscreen.RunStep // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySubscreenStepStarted(); // Function Scavenger.S_WidgetPhaseSubscreen.NotifySubscreenStepStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySubscreenStepEnded(); // Function Scavenger.S_WidgetPhaseSubscreen.NotifySubscreenStepEnded // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void MoveToNextStep(); // Function Scavenger.S_WidgetPhaseSubscreen.MoveToNextStep // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsStepRunning(); // Function Scavenger.S_WidgetPhaseSubscreen.IsStepRunning // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnButtonOverlayActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPhaseSubscreen.HandleOnButtonOverlayActiveClicked // (Native|Protected) // @ game+0xffff8008e4a10000
	void EndStep(); // Function Scavenger.S_WidgetPhaseSubscreen.EndStep // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAccountProgressionSubscreen
// Size: 0x8c0 (Inherited: 0x508)
struct US_WidgetAccountProgressionSubscreen : US_WidgetPhaseSubscreen {
	float InitialDelay; // 0x508(0x04)
	float ProgressTimerRate; // 0x50c(0x04)
	enum class EEasingFunc ProgressTimerEase; // 0x510(0x01)
	char pad_511[0x7]; // 0x511(0x07)
	struct TArray<struct FDataTableRowHandle> DisplayedStats; // 0x518(0x10)
	struct TArray<struct FDataTableRowHandle> BaseStatHandles; // 0x528(0x10)
	struct TArray<struct FDataTableRowHandle> BoostStatHandles; // 0x538(0x10)
	int32_t XpTickInterval; // 0x548(0x04)
	float ForceEndStepDelay; // 0x54c(0x04)
	int32_t MinEarnedStatRows; // 0x550(0x04)
	int32_t MinBoostStatRows; // 0x554(0x04)
	struct US_WidgetPostMatchStatRow* StatRowClass; // 0x558(0x08)
	struct FSlateBrush StatSpacerBrush; // 0x560(0x88)
	struct FDataTableRowHandle EarnedExpFormatHandle; // 0x5e8(0x10)
	struct FDataTableRowHandle TotalExpFormatHandle; // 0x5f8(0x10)
	struct FDataTableRowHandle BoostExpFormatHandle; // 0x608(0x10)
	struct FDataTableRowHandle EarnedExpHeaderFormatHandle; // 0x618(0x10)
	struct FDataTableRowHandle TotalExpHeaderFormatHandle; // 0x628(0x10)
	struct FDataTableRowHandle CurrentLevelFormatHandle; // 0x638(0x10)
	struct FDataTableRowHandle NextLevelFormatHandle; // 0x648(0x10)
	struct FDataTableRowHandle XpCountFormatHandle; // 0x658(0x10)
	struct FDataTableRowHandle ExplorerNameFormatHandle; // 0x668(0x10)
	struct US_RichTextBlock* earnedExp; // 0x678(0x08)
	struct US_RichTextBlock* CurrentLevel; // 0x680(0x08)
	struct US_RichTextBlock* NextLevel; // 0x688(0x08)
	struct US_RichTextBlock* XpCount; // 0x690(0x08)
	struct US_RichTextBlock* ContributorEvent; // 0x698(0x08)
	struct US_WidgetCommonProgressBar* AccountProgressBar; // 0x6a0(0x08)
	struct US_RichTextBlock* ExplorerName; // 0x6a8(0x08)
	struct US_UMGLinearPanel* EarnedStatsPanel; // 0x6b0(0x08)
	struct UPanelWidget* BoostDisplay; // 0x6b8(0x08)
	struct US_UMGLinearPanel* BoostStatsPanel; // 0x6c0(0x08)
	struct US_RichTextBlock* TotalExp; // 0x6c8(0x08)
	struct US_RichTextBlock* BoostExp; // 0x6d0(0x08)
	struct US_RichTextBlock* EarnedExpHeader; // 0x6d8(0x08)
	struct FS_RewardPresentationProgressBarFill m_currentStepFill; // 0x6e0(0x40)
	char pad_720[0x10]; // 0x720(0x10)
	struct FS_RewardPresentation m_rewards; // 0x730(0x78)
	struct FS_GameReportCardForPlayer m_reportCard; // 0x7a8(0x118)

	void NotifyXpTickIntervalHit(); // Function Scavenger.S_WidgetAccountProgressionSubscreen.NotifyXpTickIntervalHit // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnProgressTimerCompleted(); // Function Scavenger.S_WidgetAccountProgressionSubscreen.HandleOnProgressTimerCompleted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnBarUpdated(float CurrentPercentage); // Function Scavenger.S_WidgetAccountProgressionSubscreen.HandleOnBarUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAccountScreen
// Size: 0x6c0 (Inherited: 0x640)
struct US_WidgetAccountScreen : US_UMGHUD {
	struct TArray<SoftClassProperty> AccountSubscreens; // 0x640(0x10)
	struct TMap<int32_t, enum class ES_CosmeticType> AccountCosmeticIndices; // 0x650(0x50)
	struct US_WidgetNavBar* AccountNavBar; // 0x6a0(0x08)
	char pad_6A8[0x18]; // 0x6a8(0x18)

	void SetNavBarLockedState(bool bNavBarIsLocked); // Function Scavenger.S_WidgetAccountScreen.SetNavBarLockedState // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void ResetToDefaultSubscreen(); // Function Scavenger.S_WidgetAccountScreen.ResetToDefaultSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RebaseAndCycleToSubscreen(int32_t Index); // Function Scavenger.S_WidgetAccountScreen.RebaseAndCycleToSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnSubscreenCreated(struct US_WidgetMinimal* NewWidget); // Function Scavenger.S_WidgetAccountScreen.HandleOnSubscreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnNavbarInteraction(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetAccountScreen.HandleOnNavbarInteraction // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GetNavBarLockedState(); // Function Scavenger.S_WidgetAccountScreen.GetNavBarLockedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CycleToSubscreen(int32_t subscreenIndex, bool bPopTopOfNavStack); // Function Scavenger.S_WidgetAccountScreen.CycleToSubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetQuantityCounter
// Size: 0x5f0 (Inherited: 0x4b8)
struct US_WidgetQuantityCounter : US_WidgetMinimal {
	bool UseCombinedFormat; // 0x4b8(0x01)
	bool UseTotalCountInsteadOfStackCount; // 0x4b9(0x01)
	bool UseMaxCapacityCountInsteadOfTotalCount; // 0x4ba(0x01)
	char pad_4BB[0x5]; // 0x4bb(0x05)
	struct FDataTableRowHandle CombinedQuantityHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle CurrentQuantityHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle TotalQuantityHandle; // 0x4e0(0x10)
	struct FDataTableRowHandle AmmoIconHandle; // 0x4f0(0x10)
	struct TMap<enum class ES_AmmoType, struct FText> AmmoIconKeys; // 0x500(0x50)
	struct US_RichTextBlock* CombinedQuantityRichTextBlock; // 0x550(0x08)
	struct US_RichTextBlock* CurrentQuantityRichTextBlock; // 0x558(0x08)
	struct US_RichTextBlock* TotalQuantityRichTextBlock; // 0x560(0x08)
	struct US_RichTextBlock* AmmoIconRichTextBlock; // 0x568(0x08)
	struct UWidgetSwitcher* DisplaySwitcher; // 0x570(0x08)
	char pad_578[0x28]; // 0x578(0x28)
	struct FS_ItemState m_itemState; // 0x5a0(0x40)
	char pad_5E0[0x10]; // 0x5e0(0x10)

	void SetSpecificEquipmentSlot(enum class ES_EquipmentSlot specificEquipmentSlot); // Function Scavenger.S_WidgetQuantityCounter.SetSpecificEquipmentSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFromItemState(struct FS_ItemState ItemState, struct FName ItemId); // Function Scavenger.S_WidgetQuantityCounter.SetFromItemState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyQuantityTextChanged_BP(); // Function Scavenger.S_WidgetQuantityCounter.NotifyQuantityTextChanged_BP // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleWeaponSlotChanged(enum class ES_WeaponSlot weaponSlot, struct AS_WeaponBase* OldValue, struct AS_WeaponBase* NewValue); // Function Scavenger.S_WidgetQuantityCounter.HandleWeaponSlotChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInventoryChanged(); // Function Scavenger.S_WidgetQuantityCounter.HandleInventoryChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetQuantityCounter.HandleEquipmentItemUnequipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetQuantityCounter.HandleEquipmentItemEquipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemChanged(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetQuantityCounter.HandleEquipmentItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryDragDrop
// Size: 0x850 (Inherited: 0x4b8)
struct US_WidgetInventoryDragDrop : US_WidgetMinimal {
	char bSupportsDrag : 1; // 0x4b8(0x01)
	char bSupportsDrop : 1; // 0x4b8(0x01)
	char pad_4B8_2 : 6; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	enum class ES_InventoryScreenArea InventoryScreenArea; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	struct US_WidgetInventoryDragVisual* DragVisualClass; // 0x4c0(0x08)
	struct US_WidgetInventoryTooltip* TooltipClass; // 0x4c8(0x08)
	char pad_4D0[0x10]; // 0x4d0(0x10)
	struct FS_ItemState m_itemState; // 0x4e0(0x40)
	struct FS_ItemMetadata m_itemMetadata; // 0x520(0x320)
	char pad_840[0x10]; // 0x840(0x10)

	void SetSourceId(int32_t sourceId); // Function Scavenger.S_WidgetInventoryDragDrop.SetSourceId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemState(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetInventoryDragDrop.SetItemState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemMetadata(struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryDragDrop.SetItemMetadata // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyDrop(enum class ES_InventoryScreenArea targetAreaType, int32_t TargetId); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDrop // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragStopped(); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragStopped // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragStarted(); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragItemLeave(); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragItemLeave // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragItemEnter(bool bIsValidForDrop, enum class ES_InventoryScreenArea SourceType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragItemEnter // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragItemDropRejected(); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragItemDropRejected // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragItemDropAccepted(enum class ES_InventoryScreenArea sourceAreaType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragItemDropAccepted // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragCancelled(); // Function Scavenger.S_WidgetInventoryDragDrop.NotifyDragCancelled // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct US_WidgetTooltip* InternalGetTooltipWidget(); // Function Scavenger.S_WidgetInventoryDragDrop.InternalGetTooltipWidget // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleUIActionPressed(enum class ES_UIAction ActionType); // Function Scavenger.S_WidgetInventoryDragDrop.HandleUIActionPressed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandlePinged(struct US_WidgetInventoryDragDrop* PingedWidget); // Function Scavenger.S_WidgetInventoryDragDrop.HandlePinged // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleDrop(struct UDragDropOperation* DragDropOperation); // Function Scavenger.S_WidgetInventoryDragDrop.HandleDrop // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleDragCancelled(struct UDragDropOperation* DragDropOperation); // Function Scavenger.S_WidgetInventoryDragDrop.HandleDragCancelled // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	struct US_WidgetInventoryScreen* GetWidgetInventoryScreen(); // Function Scavenger.S_WidgetInventoryDragDrop.GetWidgetInventoryScreen // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetSourceId(); // Function Scavenger.S_WidgetInventoryDragDrop.GetSourceId // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_InventoryScreenArea GetSourceArea(); // Function Scavenger.S_WidgetInventoryDragDrop.GetSourceArea // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGenericInventoryScreenItem
// Size: 0x878 (Inherited: 0x850)
struct US_WidgetGenericInventoryScreenItem : US_WidgetInventoryDragDrop {
	struct USizeBox* InventoryItemSizeBox; // 0x850(0x08)
	struct UWidgetSwitcher* ItemStateSwitcher; // 0x858(0x08)
	struct UImage* InventoryItemIcon; // 0x860(0x08)
	int32_t EmptyStateSwitcherIndex; // 0x868(0x04)
	int32_t ActiveStateSwitcherIndex; // 0x86c(0x04)
	char pad_870[0x8]; // 0x870(0x08)

	void SetInventoryItemToEmptyState(); // Function Scavenger.S_WidgetGenericInventoryScreenItem.SetInventoryItemToEmptyState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInventoryItemToActiveState(); // Function Scavenger.S_WidgetGenericInventoryScreenItem.SetInventoryItemToActiveState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInventoryItemIcon(struct FS_ItemMetadata newItemMetadata); // Function Scavenger.S_WidgetGenericInventoryScreenItem.SetInventoryItemIcon // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyItemChanged(struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetGenericInventoryScreenItem.NotifyItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen, int32_t Index, struct FS_ItemState NewItemState, struct FS_ItemMetadata newItemMetadata); // Function Scavenger.S_WidgetGenericInventoryScreenItem.NotifyInitialized // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void GetItemState_BP(struct FS_ItemState outItemState); // Function Scavenger.S_WidgetGenericInventoryScreenItem.GetItemState_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetItemMetadata_BP(struct FS_ItemMetadata outItemMetadata); // Function Scavenger.S_WidgetGenericInventoryScreenItem.GetItemMetadata_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryItem
// Size: 0xba0 (Inherited: 0x878)
struct US_WidgetInventoryItem : US_WidgetGenericInventoryScreenItem {
	struct FName ItemMetadataId; // 0x878(0x08)
	char pad_880[0x320]; // 0x880(0x320)

	void NotifyItemRemoved(); // Function Scavenger.S_WidgetInventoryItem.NotifyItemRemoved // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	enum class ES_InventoryCategory GetInventoryCategory(); // Function Scavenger.S_WidgetInventoryItem.GetInventoryCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAmmoItem
// Size: 0xba8 (Inherited: 0xba0)
struct US_WidgetAmmoItem : US_WidgetInventoryItem {
	char pad_BA0[0x8]; // 0xba0(0x08)

	void NotifyPinged(enum class ES_InventoryCategory InventoryCategory); // Function Scavenger.S_WidgetAmmoItem.NotifyPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBeingUsedByBothSlots(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetAmmoItem.NotifyBeingUsedByBothSlots // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAmmoStoppedBeingUsedByWeaponSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetAmmoItem.NotifyAmmoStoppedBeingUsedByWeaponSlot // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAmmoIsUsedByWeaponSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetAmmoItem.NotifyAmmoIsUsedByWeaponSlot // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsBeingUsedByBothSlots(); // Function Scavenger.S_WidgetAmmoItem.IsBeingUsedByBothSlots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGenericInventoryScreenPanel
// Size: 0x860 (Inherited: 0x850)
struct US_WidgetGenericInventoryScreenPanel : US_WidgetInventoryDragDrop {
	struct UPanelWidget* PanelContent; // 0x850(0x08)
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x858(0x08)

	void RebuildWidgetAppearance(float itemWidth, float panelHeight, float spacerHeight, int32_t numberOfSpacers, int32_t numberOfInventoryItems); // Function Scavenger.S_WidgetGenericInventoryScreenPanel.RebuildWidgetAppearance // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen); // Function Scavenger.S_WidgetGenericInventoryScreenPanel.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct US_WidgetInventoryScreen* GetInventoryScreen(); // Function Scavenger.S_WidgetGenericInventoryScreenPanel.GetInventoryScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryItemsPanel
// Size: 0x900 (Inherited: 0x860)
struct US_WidgetInventoryItemsPanel : US_WidgetGenericInventoryScreenPanel {
	struct TMap<enum class ES_InventoryCategory, struct US_WidgetInventoryItem*> m_mapOfInventoryCategoryToWidgetInventoryItem; // 0x860(0x50)
	struct TMap<enum class ES_InventoryCategory, struct FName> MapOfInventoryCategoryToWidgetInventoryName; // 0x8b0(0x50)

	void NotifyItemRemoved(int32_t Index, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInventoryItemsPanel.NotifyItemRemoved // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemChanged(int32_t Index, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryItemsPanel.NotifyItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAmmoPanel
// Size: 0x908 (Inherited: 0x900)
struct US_WidgetAmmoPanel : US_WidgetInventoryItemsPanel {
	char pad_900[0x8]; // 0x900(0x08)
};

// Class Scavenger.S_WidgetAnimation
// Size: 0x80 (Inherited: 0x28)
struct US_WidgetAnimation : UObject {
	struct US_WidgetMinimal* TargetBaseWidget; // 0x28(0x08)
	struct FVector2D TimelineLength; // 0x30(0x08)
	struct TArray<struct FS_WidgetAnimationData> WidgetAnimationData; // 0x38(0x10)
	enum class EUMGSequencePlayMode m_playMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FVector m_vectorProperty; // 0x4c(0x0c)
	char pad_58[0x28]; // 0x58(0x28)

	void StepAnimation(float DeltaTime); // Function Scavenger.S_WidgetAnimation.StepAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetToTime(float Time); // Function Scavenger.S_WidgetAnimation.SetToTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayTo(float StartTime, float EndTime, int32_t NumLoops, enum class EUMGSequencePlayMode PlayMode, float InPlaybackSpeed); // Function Scavenger.S_WidgetAnimation.PlayTo // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Play(); // Function Scavenger.S_WidgetAnimation.Play // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Pause(); // Function Scavenger.S_WidgetAnimation.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitializeFromTarget(struct US_WidgetMinimal* targetWidget); // Function Scavenger.S_WidgetAnimation.InitializeFromTarget // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetArmorContainer
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetArmorContainer : US_WidgetMinimal {
	struct TArray<struct FS_ArmorThreshold> ArmorThresholds; // 0x4b8(0x10)
	float EmptyShieldOpacity; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct UHorizontalBox* ArmorContainer; // 0x4d0(0x08)
	struct US_WidgetArmorShield* m_currentArmorShield; // 0x4d8(0x08)
	char pad_4E0[0x18]; // 0x4e0(0x18)
};

// Class Scavenger.S_WidgetArmorShield
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetArmorShield : US_WidgetMinimal {
	struct UImage* ShieldIcon; // 0x4b8(0x08)
	struct UWidgetAnimation* ArmorHit; // 0x4c0(0x08)
};

// Class Scavenger.S_WidgetCarouselBase
// Size: 0x510 (Inherited: 0x4b8)
struct US_WidgetCarouselBase : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnConsumeCycleInput; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnReleaseCycleInput; // 0x4c8(0x10)
	bool bAutoStartRefresh; // 0x4d8(0x01)
	char pad_4D9[0x3]; // 0x4d9(0x03)
	float DefaultRefreshRate; // 0x4dc(0x04)
	bool bAlwaysConsumesCycleInput; // 0x4e0(0x01)
	char pad_4E1[0x7]; // 0x4e1(0x07)
	struct US_UMGWidgetSwitcher* CarouselSwitcher; // 0x4e8(0x08)
	struct US_WidgetCommonScavengerButton* ActivateButton; // 0x4f0(0x08)
	struct US_WidgetNavBar* NavBar; // 0x4f8(0x08)
	char pad_500[0x10]; // 0x500(0x10)

	void StopCarouselRefresh(bool resetToStart); // Function Scavenger.S_WidgetCarouselBase.StopCarouselRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FTimerHandle StartCarouselRefresh(float refreshRate); // Function Scavenger.S_WidgetCarouselBase.StartCarouselRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ResumeCarouselRefresh(); // Function Scavenger.S_WidgetCarouselBase.ResumeCarouselRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveCarouselItemAtIndex(int32_t Index); // Function Scavenger.S_WidgetCarouselBase.RemoveCarouselItemAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RefreshCarousel(); // Function Scavenger.S_WidgetCarouselBase.RefreshCarousel // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void PauseCarouselRefresh(); // Function Scavenger.S_WidgetCarouselBase.PauseCarouselRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverrideCarouselRefreshWithIndex(int32_t Index); // Function Scavenger.S_WidgetCarouselBase.OverrideCarouselRefreshWithIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyWidgetReceivedCarouselFocus(int32_t activeIndex); // Function Scavenger.S_WidgetCarouselBase.NotifyWidgetReceivedCarouselFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetActivatedInCarousel(int32_t activeIndex); // Function Scavenger.S_WidgetCarouselBase.NotifyWidgetActivatedInCarousel // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCarouselPopulated(); // Function Scavenger.S_WidgetCarouselBase.NotifyCarouselPopulated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnActiveUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCarouselBase.HandleOnActiveUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCarouselBase.HandleOnActiveHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCarouselBase.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool CarouselHasBeenPopulated(); // Function Scavenger.S_WidgetCarouselBase.CarouselHasBeenPopulated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCarousel
// Size: 0x548 (Inherited: 0x510)
struct US_WidgetCarousel : US_WidgetCarouselBase {
	struct TArray<struct FDataTableRowHandle> CarouselMetadataHandles; // 0x510(0x10)
	struct UDataTable* CarouselMetadataTable; // 0x520(0x08)
	struct FName OnlineCarouselId; // 0x528(0x08)
	struct US_WidgetCarousel* ExpandedDetailCarouselClass; // 0x530(0x08)
	char pad_538[0x10]; // 0x538(0x10)

	void HandleOnTryExpandCarousel(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCarousel.HandleOnTryExpandCarousel // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnOnlineTitleDataRefreshed(); // Function Scavenger.S_WidgetCarousel.HandleOnOnlineTitleDataRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCarouselItemBase
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetCarouselItemBase : US_UMGWidgetSwitcherItem {

	void NotifyWidgetReceivedCarouselFocus(); // Function Scavenger.S_WidgetCarouselItemBase.NotifyWidgetReceivedCarouselFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetInitialized(); // Function Scavenger.S_WidgetCarouselItemBase.NotifyWidgetInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetAddedToCarousel(); // Function Scavenger.S_WidgetCarouselItemBase.NotifyWidgetAddedToCarousel // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetActivatedInCarousel(); // Function Scavenger.S_WidgetCarouselItemBase.NotifyWidgetActivatedInCarousel // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ActivateCarouselItem(); // Function Scavenger.S_WidgetCarouselItemBase.ActivateCarouselItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCarouselItem
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetCarouselItem : US_WidgetCarouselItemBase {
	struct UImage* Image; // 0x4b8(0x08)
	struct US_RichTextBlock* Title; // 0x4c0(0x08)
	struct US_RichTextBlock* Subtitle; // 0x4c8(0x08)

	void NotifyWidgetInitializedWithMetadata(struct FS_CarouselMetadata CarouselMetadata); // Function Scavenger.S_WidgetCarouselItem.NotifyWidgetInitializedWithMetadata // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitializeCarouselItem(struct FS_CarouselMetadata CarouselMetadata); // Function Scavenger.S_WidgetCarouselItem.InitializeCarouselItem // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCenterFilledLinearPanel
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetCenterFilledLinearPanel : US_WidgetMinimal {
	float MaxPanelWidth; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct UVerticalBox* VerticalPanel; // 0x4c0(0x08)
	struct UHorizontalBox* m_currentRow; // 0x4c8(0x08)

	bool RemoveChildFromCenterFilledLinearPanel(struct UWidget* child); // Function Scavenger.S_WidgetCenterFilledLinearPanel.RemoveChildFromCenterFilledLinearPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddChildToCenterFilledLinearPanel(struct UWidget* child); // Function Scavenger.S_WidgetCenterFilledLinearPanel.AddChildToCenterFilledLinearPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetChallenge
// Size: 0x568 (Inherited: 0x4b8)
struct US_WidgetChallenge : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	SoftClassProperty DefaultChallengeRewardClass; // 0x4c8(0x28)
	struct UHorizontalBox* RewardWidgetList; // 0x4f0(0x08)
	struct US_WidgetCommonProgressBar* ProgressBar; // 0x4f8(0x08)
	struct US_WidgetCommonScavengerButton* ClaimRewardButton; // 0x500(0x08)
	struct FDataTableRowHandle ChallengeIncompleteTextFormat; // 0x508(0x10)
	struct FDataTableRowHandle ChallengeCompleteTextFormat; // 0x518(0x10)
	struct US_RichTextBlock* ChallengeNameText; // 0x528(0x08)
	enum class ES_ChallengeWidgetState widgetState; // 0x530(0x01)
	bool HasRunChallengeCompleteAnimation; // 0x531(0x01)
	char pad_532[0x2]; // 0x532(0x02)
	int32_t challengeProgress; // 0x534(0x04)
	char pad_538[0x30]; // 0x538(0x30)

	void OnRewardClaimedSuccess(struct FS_OnlinePlayerInventoryDelta rewardData, struct FS_OnlineServiceManagerPlayerState updatedState); // Function Scavenger.S_WidgetChallenge.OnRewardClaimedSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnClaimChallengeResponse(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetChallenge.OnClaimChallengeResponse // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyRewardClaimed(); // Function Scavenger.S_WidgetChallenge.NotifyRewardClaimed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyParentRemovedFromNavStack(); // Function Scavenger.S_WidgetChallenge.NotifyParentRemovedFromNavStack // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyClaimChallengeFailed(); // Function Scavenger.S_WidgetChallenge.NotifyClaimChallengeFailed // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChallengeWidgetRefreshed(); // Function Scavenger.S_WidgetChallenge.NotifyChallengeWidgetRefreshed // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChallengeProgressUpdated(); // Function Scavenger.S_WidgetChallenge.NotifyChallengeProgressUpdated // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChallengeDataReceived(struct FName ChallengeDefinitionId, int32_t challengeProgress, int32_t challengeTarget); // Function Scavenger.S_WidgetChallenge.NotifyChallengeDataReceived // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChallengeComplete(); // Function Scavenger.S_WidgetChallenge.NotifyChallengeComplete // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleRewardAssetLoaded(); // Function Scavenger.S_WidgetChallenge.HandleRewardAssetLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void ClaimReward(); // Function Scavenger.S_WidgetChallenge.ClaimReward // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetChallengeCarousel
// Size: 0x5a0 (Inherited: 0x510)
struct US_WidgetChallengeCarousel : US_WidgetCarouselBase {
	SoftClassProperty ChallengeListClass; // 0x510(0x28)
	struct UTextBlock* SlotHeaderText; // 0x538(0x08)
	struct US_WidgetCommonScavengerButton* CollectRewardsButton; // 0x540(0x08)
	struct TMap<enum class ES_ChallengeTab, struct US_WidgetChallengeList*> m_challengeTabToChallengeList; // 0x548(0x50)
	char pad_598[0x8]; // 0x598(0x08)

	void UpdateSelectedIndex(struct US_WidgetCommonScavengerButton* Button, int32_t activeIndex); // Function Scavenger.S_WidgetChallengeCarousel.UpdateSelectedIndex // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SetupChallengeCarousel(); // Function Scavenger.S_WidgetChallengeCarousel.SetupChallengeCarousel // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void OnChallengeSetToComplete(); // Function Scavenger.S_WidgetChallengeCarousel.OnChallengeSetToComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CollectRewards(); // Function Scavenger.S_WidgetChallengeCarousel.CollectRewards // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetChallengeList
// Size: 0x568 (Inherited: 0x4b8)
struct US_WidgetChallengeList : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	SoftClassProperty DefaultChallengeWidgetClass; // 0x4c8(0x28)
	struct UDataTable* ChallengeDataTable; // 0x4f0(0x08)
	struct UVerticalBox* WidgetDisplay; // 0x4f8(0x08)
	struct UWidgetSwitcher* PanelSwitcher; // 0x500(0x08)
	char NumObjectivesSupported; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct TMap<struct FString, struct US_WidgetChallenge*> m_ChallengeIDToChallengeWidget; // 0x510(0x50)
	char pad_560[0x8]; // 0x560(0x08)

	void SetupChallengeWidget(); // Function Scavenger.S_WidgetChallengeList.SetupChallengeWidget // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void RemoveChallenge(); // Function Scavenger.S_WidgetChallengeList.RemoveChallenge // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRewardClaimedForChallenge(struct FString ChallengeID); // Function Scavenger.S_WidgetChallengeList.OnRewardClaimedForChallenge // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnChallengeWidgetClassLoaded(); // Function Scavenger.S_WidgetChallengeList.OnChallengeWidgetClassLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnChallengeDataRefreshed(struct AS_PlayerControllerBase* Controller, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetChallengeList.OnChallengeDataRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void NotifyWidgetShown(); // Function Scavenger.S_WidgetChallengeList.NotifyWidgetShown // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyWidgetHidden(); // Function Scavenger.S_WidgetChallengeList.NotifyWidgetHidden // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetChallengeReward
// Size: 0x530 (Inherited: 0x4b8)
struct US_WidgetChallengeReward : US_WidgetMinimal {
	char pad_4B8[0x78]; // 0x4b8(0x78)

	void SetupWidgetUI(int32_t itemQuantity, struct UTexture2D* Icon); // Function Scavenger.S_WidgetChallengeReward.SetupWidgetUI // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnItemDataLoaded(); // Function Scavenger.S_WidgetChallengeReward.OnItemDataLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCharacterCard
// Size: 0x590 (Inherited: 0x4b8)
struct US_WidgetCharacterCard : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnCharacterCardClicked; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnCharacterCardInactiveClicked; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnCharacterCardHovered; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnCharacterCardUnhovered; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnCharacterCardRightClicked; // 0x4f8(0x10)
	struct UMaterialInterface* RetainerBoxMaterial; // 0x508(0x08)
	struct FDataTableRowHandle NameFormatHandle; // 0x510(0x10)
	struct FDataTableRowHandle LevelFormatHandle; // 0x520(0x10)
	struct UImage* Portrait; // 0x530(0x08)
	struct UOverlay* LockedCharacter; // 0x538(0x08)
	struct UOverlay* RankBadge; // 0x540(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x548(0x08)
	struct UImage* SelectedBadge; // 0x550(0x08)
	struct US_WidgetCommonProgressBar* XPBar; // 0x558(0x08)
	struct US_RichTextBlock* Name; // 0x560(0x08)
	struct US_RichTextBlock* Level; // 0x568(0x08)
	struct URetainerBox* PortraitRetainerBox; // 0x570(0x08)
	char pad_578[0x8]; // 0x578(0x08)
	struct UMaterialInstanceDynamic* m_retainerBoxMaterial; // 0x580(0x08)
	char pad_588[0x8]; // 0x588(0x08)

	void UpdateCardData(); // Function Scavenger.S_WidgetCharacterCard.UpdateCardData // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetClassId(struct FName ClassId); // Function Scavenger.S_WidgetCharacterCard.SetClassId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPlayerClassSetToCardsClassId(); // Function Scavenger.S_WidgetCharacterCard.NotifyPlayerClassSetToCardsClassId // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyClassIdChanged(struct FName oldClassId, struct FName newClassId); // Function Scavenger.S_WidgetCharacterCard.NotifyClassIdChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterChanged(struct AS_PlayerControllerBase* PlayerController, struct US_PlayerClassData* ClassData); // Function Scavenger.S_WidgetCharacterCard.HandleOnPlayerCharacterChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInactiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCharacterCard.HandleOnInactiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCharacterCard.HandleOnActiveUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveRightClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCharacterCard.HandleOnActiveRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCharacterCard.HandleOnActiveHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCharacterCard.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct FName GetClassId(); // Function Scavenger.S_WidgetCharacterCard.GetClassId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCircularFill
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetCircularFill : US_WidgetMinimal {
	struct FLinearColor FillColor; // 0x4b8(0x10)
	struct FLinearColor BackgroundFillColor; // 0x4c8(0x10)
	struct UMaterialInterface* FillMaterial; // 0x4d8(0x08)
	bool HasBackground; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	float StartingPercent; // 0x4e4(0x04)
	float StartingBackgroundPercent; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct UImage* BackgroundFill; // 0x4f0(0x08)
	struct UImage* FillImage; // 0x4f8(0x08)
	char pad_500[0x8]; // 0x500(0x08)
	struct UMaterialInstanceDynamic* m_fillMaterial; // 0x508(0x08)
	struct UMaterialInstanceDynamic* m_backgroundFillMaterial; // 0x510(0x08)

	void SetPercentComplete(float percentageComplete); // Function Scavenger.S_WidgetCircularFill.SetPercentComplete // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBackgroundPercentComplete(float percentageComplete); // Function Scavenger.S_WidgetCircularFill.SetBackgroundPercentComplete // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyProgressComplete_BP(float percentageComplete); // Function Scavenger.S_WidgetCircularFill.NotifyProgressComplete_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyProgressChanged_BP(float percentageComplete); // Function Scavenger.S_WidgetCircularFill.NotifyProgressChanged_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	float GetPercentComplete(); // Function Scavenger.S_WidgetCircularFill.GetPercentComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ChangeFillColor(struct FLinearColor newFillColor); // Function Scavenger.S_WidgetCircularFill.ChangeFillColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeBackgroundFillColor(struct FLinearColor newBackgroundFillColor); // Function Scavenger.S_WidgetCircularFill.ChangeBackgroundFillColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchOptionScreen
// Size: 0x688 (Inherited: 0x4b8)
struct US_WidgetResearchOptionScreen : US_WidgetMinimal {
	struct US_WidgetStationSelector* StationSelectionWidget; // 0x4b8(0x08)
	struct US_WidgetResearchQuantitySelector* QuantitySelectionWidget; // 0x4c0(0x08)
	struct TArray<struct FDataTableRowHandle> SupportedSortModes; // 0x4c8(0x10)
	struct US_UMGCommonKey* InputLabelClass; // 0x4d8(0x08)
	struct US_WidgetResearchOptionInfo* ItemInfo; // 0x4e0(0x08)
	struct US_WidgetProjectDefinitionPanel* ResearchDefinitionPanel; // 0x4e8(0x08)
	struct US_WidgetCommonScavengerButton* SortModeButton; // 0x4f0(0x08)
	char pad_4F8[0x88]; // 0x4f8(0x88)
	struct FS_OnlineResearchProjectDefinition m_researchProjectDefinition; // 0x580(0x80)
	struct FS_OnlineItemMetadata m_onlineItemMetadata; // 0x600(0x88)

	void SetProjectType(enum class ES_OnlineResearchProjectType projectType); // Function Scavenger.S_WidgetResearchOptionScreen.SetProjectType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyResearchItemHovered(struct FS_OnlineItemMetadata itemMetadata, struct FS_OnlineResearchProjectDefinition researchProjectDefinition); // Function Scavenger.S_WidgetResearchOptionScreen.NotifyResearchItemHovered // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitializeResearchOptionScreen(); // Function Scavenger.S_WidgetResearchOptionScreen.InitializeResearchOptionScreen // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSortModeButtonOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchOptionScreen.HandleSortModeButtonOnActiveClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnTrackedResearchProjectsChanged(struct TArray<struct FS_TrackedResearchProject> TrackedResearchProjects); // Function Scavenger.S_WidgetResearchOptionScreen.HandleOnTrackedResearchProjectsChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnResearchOptionItemHovered(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetResearchOptionScreen.HandleOnResearchOptionItemHovered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnResearchOptionItemClicked(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetResearchOptionScreen.HandleOnResearchOptionItemClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchOptionScreen.HandleOnPlayerInventoryRefreshed // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRecipeResearch
// Size: 0x6f8 (Inherited: 0x688)
struct US_WidgetRecipeResearch : US_WidgetResearchOptionScreen {
	struct FS_FilteredResearchOptions m_currentRecipeOptions; // 0x688(0x60)
	struct US_WidgetRecipeResearchRow* ResearchOptions; // 0x6e8(0x08)
	char pad_6F0[0x8]; // 0x6f0(0x08)
};

// Class Scavenger.S_WidgetClassItemResearchScreen
// Size: 0x708 (Inherited: 0x6f8)
struct US_WidgetClassItemResearchScreen : US_WidgetRecipeResearch {
	struct US_WidgetNavBar* ClassIdNavBar; // 0x6f8(0x08)
	char pad_700[0x8]; // 0x700(0x08)

	void NotifyCurrentClassIdChanged(struct FName oldId, struct FName newId); // Function Scavenger.S_WidgetClassItemResearchScreen.NotifyCurrentClassIdChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnClassIdNavBarButtonActiveClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetClassItemResearchScreen.HandleOnClassIdNavBarButtonActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CycleExplorerSelection(enum class ES_NavBarCycleDirection Direction, enum class ES_NavBarCycleMode cycleMode); // Function Scavenger.S_WidgetClassItemResearchScreen.CycleExplorerSelection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCommonProgressBar
// Size: 0x5c8 (Inherited: 0x4b8)
struct US_WidgetCommonProgressBar : US_WidgetMinimal {
	struct TArray<struct FS_ProgressBarData> ProgressBarLayers; // 0x4b8(0x10)
	bool Override_HasHandle; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)
	struct FS_ProgressBarHandleData HandleData; // 0x4d0(0x98)
	struct UOverlay* BarContainer; // 0x568(0x08)
	struct US_WidgetCommonProgressBarHandle* m_handle; // 0x570(0x08)
	char pad_578[0x50]; // 0x578(0x50)

	struct FTimerHandle UpdateProgressBarWithTimerByName(struct FName LayerName, float timerRate, float Target, float tickTime, enum class EEasingFunc easingFunction, float BlendExp, int32_t step); // Function Scavenger.S_WidgetCommonProgressBar.UpdateProgressBarWithTimerByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FTimerHandle UpdateProgressBarWithTimer(int32_t LayerIndex, float timerRate, float Target, float tickTime, enum class EEasingFunc easingFunction, float BlendExp, int32_t step); // Function Scavenger.S_WidgetCommonProgressBar.UpdateProgressBarWithTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerVisibilityByName(struct FName LayerName, enum class ESlateVisibility newVisibility, bool shouldSetHandleVisibility); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerVisibilityByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerVisibility(int32_t LayerIndex, enum class ESlateVisibility newVisibility, bool shouldSetHandleVisibility); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerStyleByName(struct FName LayerName, struct FProgressBarStyle ProgressBarStyle, bool overwriteDefaultStyle); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerStyleByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerStyle(int32_t LayerIndex, struct FProgressBarStyle ProgressBarStyle, bool overwriteDefaultStyle); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerMarqueeSpeedScalarByName(struct FName LayerName, float Scalar); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerMarqueeSpeedScalarByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerMarqueeSpeedScalar(int32_t LayerIndex, float Scalar); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerMarqueeSpeedScalar // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerMarqueeActiveByName(struct FName LayerName, bool IsActive); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerMarqueeActiveByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerMarqueeActive(int32_t LayerIndex, bool IsActive); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerMarqueeActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerFillColorByName(struct FName LayerName, struct FLinearColor FillColor); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerFillColorByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerFillColor(int32_t LayerIndex, struct FLinearColor FillColor); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerFillColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerExactBarValueByName(struct FName LayerName, float percentage, bool shouldSetHandleValue); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerExactBarValueByName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetLayerExactBarValue(int32_t LayerIndex, float percentage, bool shouldSetHandleValue); // Function Scavenger.S_WidgetCommonProgressBar.SetLayerExactBarValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHandleVisibility(enum class ESlateVisibility newVisibility); // Function Scavenger.S_WidgetCommonProgressBar.SetHandleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHandleValue(float NewValue); // Function Scavenger.S_WidgetCommonProgressBar.SetHandleValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHandleData(struct FS_ProgressBarHandleData newHandle); // Function Scavenger.S_WidgetCommonProgressBar.SetHandleData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyHandleValueChanged_BP(float NewValue); // Function Scavenger.S_WidgetCommonProgressBar.NotifyHandleValueChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct US_UMGProgressBar* GetProgressBarFromLayersByName(struct FName LayerName); // Function Scavenger.S_WidgetCommonProgressBar.GetProgressBarFromLayersByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_UMGProgressBar* GetProgressBarFromLayers(int32_t LayerIndex); // Function Scavenger.S_WidgetCommonProgressBar.GetProgressBarFromLayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetLayerValueByName(struct FName LayerName); // Function Scavenger.S_WidgetCommonProgressBar.GetLayerValueByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetLayerValue(int32_t LayerIndex); // Function Scavenger.S_WidgetCommonProgressBar.GetLayerValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCommonProgressBarHandle
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetCommonProgressBarHandle : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnHandleValueChanged; // 0x4b8(0x10)
	struct US_UMGProgressBarHandle* Handle; // 0x4c8(0x08)

	void SetHandleValue(float Value); // Function Scavenger.S_WidgetCommonProgressBarHandle.SetHandleValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHandleOrientation(enum class EOrientation newOrientation); // Function Scavenger.S_WidgetCommonProgressBarHandle.SetHandleOrientation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyHandleValueChanged_BP(float NewValue); // Function Scavenger.S_WidgetCommonProgressBarHandle.NotifyHandleValueChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCompass
// Size: 0x648 (Inherited: 0x4b8)
struct US_WidgetCompass : US_WidgetMinimal {
	float IconRenderDistance; // 0x4b8(0x04)
	enum class ES_CompassMode CompassMode; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	struct US_WidgetMapIcon* WidgetIconClass; // 0x4c0(0x08)
	struct UCanvasPanel* CompassRotatePanel; // 0x4c8(0x08)
	struct URetainerBox* CompassRotateRetainerBox; // 0x4d0(0x08)
	struct US_RichTextBlock* CompassText; // 0x4d8(0x08)
	struct UImage* CompassImage; // 0x4e0(0x08)
	struct US_RichTextBlock* IntercardinalDirectionText; // 0x4e8(0x08)
	struct FVector2D IconOffsetPosition; // 0x4f0(0x08)
	float AngleThreshold; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct FDataTableRowHandle CompassAngleHandle; // 0x500(0x10)
	float CompassLerpSpeed; // 0x510(0x04)
	bool EnableCompassLerp; // 0x514(0x01)
	char pad_515[0x3]; // 0x515(0x03)
	struct TArray<struct FText> IntercardinalDirections; // 0x518(0x10)
	struct US_WidgetMapIcon* m_mapIconWidgets[0x14]; // 0x528(0xa0)
	struct APlayerCameraManager* m_cachedCamera; // 0x5c8(0x08)
	char pad_5D0[0x78]; // 0x5d0(0x78)

	float WorldToCompassPosition(struct FVector WorldPosition); // Function Scavenger.S_WidgetCompass.WorldToCompassPosition // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RotateCompass(); // Function Scavenger.S_WidgetCompass.RotateCompass // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataRemove(int32_t Index); // Function Scavenger.S_WidgetCompass.OnMapDataRemove // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataAddOrChange(struct FS_MapDisplayData MapData); // Function Scavenger.S_WidgetCompass.OnMapDataAddOrChange // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EventOwningPlayerPawnChanged(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_WidgetCompass.EventOwningPlayerPawnChanged // (Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetContainer
// Size: 0x290 (Inherited: 0x278)
struct US_WidgetContainer : US_BaseWidget {
	char pad_278[0x18]; // 0x278(0x18)

	struct FText GetTitleText(); // Function Scavenger.S_WidgetContainer.GetTitleText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCosmeticSetBadge
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetCosmeticSetBadge : US_WidgetMinimal {
	struct UImage* SetLogo; // 0x4b8(0x08)
};

// Class Scavenger.S_WidgetCosmeticTitle
// Size: 0x520 (Inherited: 0x508)
struct US_WidgetCosmeticTitle : US_WidgetCustomizationBase {
	enum class ES_CosmeticTitleSize TitleSize; // 0x508(0x01)
	char pad_509[0x3]; // 0x509(0x03)
	float TitleWrapLength; // 0x50c(0x04)
	struct US_RichTextBlock* Title; // 0x510(0x08)
	struct UBorder* Backer; // 0x518(0x08)
};

// Class Scavenger.S_WidgetCountdown
// Size: 0x548 (Inherited: 0x4b8)
struct US_WidgetCountdown : US_WidgetMinimal {
	struct FText RichTextKey; // 0x4b8(0x18)
	float TickRate; // 0x4d0(0x04)
	int32_t MaxFractionalDigits; // 0x4d4(0x04)
	bool bHasCircularFill; // 0x4d8(0x01)
	char pad_4D9[0x7]; // 0x4d9(0x07)
	struct UAkAudioEvent* TickAkEvent; // 0x4e0(0x08)
	struct FMulticastInlineDelegate DispatchOnTimerEnded; // 0x4e8(0x10)
	struct FName RichTextWidgetLabel; // 0x4f8(0x08)
	struct FName CircularFillWidgetLabel; // 0x500(0x08)
	struct US_RichTextBlock* m_timerText; // 0x508(0x08)
	struct US_WidgetCircularFill* m_circularFill; // 0x510(0x08)
	char pad_518[0x30]; // 0x518(0x30)

	void StopTimer(); // Function Scavenger.S_WidgetCountdown.StopTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void StartTimer(float timerDuration); // Function Scavenger.S_WidgetCountdown.StartTimer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetItemCard
// Size: 0x548 (Inherited: 0x4b8)
struct US_WidgetItemCard : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnItemChanged; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnBlankItemAdded; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnOnlineItemCardClicked; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnRecipeItemCardClicked; // 0x4e8(0x10)
	struct UDataTable* ItemMetadataTable; // 0x4f8(0x08)
	struct FVector2D WidgetSize; // 0x500(0x08)
	struct FMargin WidgetPadding; // 0x508(0x10)
	struct USizeBox* SizeBox; // 0x518(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x520(0x08)
	struct UBorder* GlowingBorder; // 0x528(0x08)
	struct US_WidgetItemCardDetails* ItemCardDetails; // 0x530(0x08)
	char pad_538[0x10]; // 0x538(0x10)

	void NotifyLockedItemAdded_BP(int32_t availableLevel); // Function Scavenger.S_WidgetItemCard.NotifyLockedItemAdded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemChanged_BP(struct FName OldOnlineItemId, struct FName NewOnlineItemId); // Function Scavenger.S_WidgetItemCard.NotifyItemChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBlankItemAdded_BP(); // Function Scavenger.S_WidgetItemCard.NotifyBlankItemAdded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnlineItemCardHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetItemCard.HandleOnlineItemCardHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnlineItemCardClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetItemCard.HandleOnlineItemCardClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingRecipeCard
// Size: 0x638 (Inherited: 0x548)
struct US_WidgetCraftingRecipeCard : US_WidgetItemCard {
	struct UAkAudioEvent* CraftingStartedAkEvent; // 0x548(0x08)
	struct UAkAudioEvent* CraftingCompletedAkEvent; // 0x550(0x08)
	struct FDataTableRowHandle NoRoomForOutputHandle; // 0x558(0x10)
	struct FDataTableRowHandle LevelNotMetHandle; // 0x568(0x10)
	struct FDataTableRowHandle CraftingQueueFullHandle; // 0x578(0x10)
	float MaxTierRenderOpacity; // 0x588(0x04)
	char pad_58C[0x4]; // 0x58c(0x04)
	struct FDataTableRowHandle MaxTierHandle; // 0x590(0x10)
	struct FDataTableRowHandle WillDropEquippedItemRowHandle; // 0x5a0(0x10)
	struct FDataTableRowHandle PromptToDropEquippedItemRowHandle; // 0x5b0(0x10)
	struct UBorder* RequirementsNotMetContainer; // 0x5c0(0x08)
	struct US_RichTextBlock* RequirementsNotMetRichText; // 0x5c8(0x08)
	struct US_RichTextBlock* DropEquippedItemAndCraftRichTextBlock; // 0x5d0(0x08)
	struct UBorder* MaxTierContainer; // 0x5d8(0x08)
	char pad_5E0[0x20]; // 0x5e0(0x20)
	struct US_RecipeData* m_recipeData; // 0x600(0x08)
	struct TSoftObjectPtr<struct US_RecipeData> m_loadingRecipeData; // 0x608(0x28)
	char pad_630[0x8]; // 0x630(0x08)

	void SetOnlineItemAndIndex(struct FName OnlineItemId, int32_t Index); // Function Scavenger.S_WidgetCraftingRecipeCard.SetOnlineItemAndIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RequirementsMet(); // Function Scavenger.S_WidgetCraftingRecipeCard.RequirementsMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void NotifyPotentialAvailabilityChange_BP(bool RequirementsMet); // Function Scavenger.S_WidgetCraftingRecipeCard.NotifyPotentialAvailabilityChange_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLoadedRecipeDataLoaded(); // Function Scavenger.S_WidgetCraftingRecipeCard.NotifyLoadedRecipeDataLoaded // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleRecipesChanged(struct TArray<struct US_RecipeData*> newRecipes); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleRecipesChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePlayerStateChanged(struct US_StatsComponent* StatsComponent, enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_WidgetCraftingRecipeCard.HandlePlayerStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnRadialWeaponSelected(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnRadialWeaponSelected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnRadialMenuClosed(); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnRadialMenuClosed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnItemUnequipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnItemEquipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryChanged(); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnInventoryChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnEquipmentChanged(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnEquipmentChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnEquipmentAddedOrRemoved(enum class ES_EquipmentSlot SlotType, struct FS_ItemState ItemState); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnEquipmentAddedOrRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCurrentXpChanged(int32_t CurrentXP); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnCurrentXpChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCraftingStarted(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnCraftingStarted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCraftingComplete(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnCraftingComplete // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnChangedPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_WidgetCraftingRecipeCard.HandleOnChangedPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetRecipeIndex(); // Function Scavenger.S_WidgetCraftingRecipeCard.GetRecipeIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetProgressPercentage(); // Function Scavenger.S_WidgetCraftingRecipeCard.GetProgressPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CraftingLevelMet(); // Function Scavenger.S_WidgetCraftingRecipeCard.CraftingLevelMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetItemCardDetails
// Size: 0x580 (Inherited: 0x4b8)
struct US_WidgetItemCardDetails : US_WidgetMinimal {
	struct UDataTable* ItemMetadataTable; // 0x4b8(0x08)
	struct FText ItemTitleRichTextKey; // 0x4c0(0x18)
	struct FText ItemDescriptionRichTextKey; // 0x4d8(0x18)
	struct FText CraftingTimeRichTextKey; // 0x4f0(0x18)
	struct FText ItemTypeRichTextKey; // 0x508(0x18)
	struct USizeBox* ItemDetailsContainer; // 0x520(0x08)
	struct US_RichTextBlock* ItemTitle; // 0x528(0x08)
	struct US_RichTextBlock* ItemDescription; // 0x530(0x08)
	struct UImage* ItemIcon; // 0x538(0x08)
	struct UHorizontalBox* CraftingTimeContainer; // 0x540(0x08)
	struct US_RichTextBlock* CraftingTimeText; // 0x548(0x08)
	struct UImage* RarityTag; // 0x550(0x08)
	struct UBorder* RarityBorder; // 0x558(0x08)
	struct USizeBox* ItemIconSizeBox; // 0x560(0x08)
	char pad_568[0x18]; // 0x568(0x18)

	void NotifyLockedItemAdded_BP(int32_t availableLevel); // Function Scavenger.S_WidgetItemCardDetails.NotifyLockedItemAdded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemChanged_BP(struct FName OldOnlineItemId, struct FName NewOnlineItemId); // Function Scavenger.S_WidgetItemCardDetails.NotifyItemChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBlankItemAdded_BP(); // Function Scavenger.S_WidgetItemCardDetails.NotifyBlankItemAdded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingRecipeCardDetails
// Size: 0x588 (Inherited: 0x580)
struct US_WidgetCraftingRecipeCardDetails : US_WidgetItemCardDetails {
	struct US_RichTextBlock* ItemType; // 0x580(0x08)
};

// Class Scavenger.S_WidgetCraftingNotificationPanel
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetCraftingNotificationPanel : US_WidgetMinimal {
	char pad_4B8[0x18]; // 0x4b8(0x18)

	void NotifyNewCraftingRecipeAvailable(); // Function Scavenger.S_WidgetCraftingNotificationPanel.NotifyNewCraftingRecipeAvailable // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingRequirementsNoLongerMet(); // Function Scavenger.S_WidgetCraftingNotificationPanel.NotifyCraftingRequirementsNoLongerMet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingRequirementsMet(); // Function Scavenger.S_WidgetCraftingNotificationPanel.NotifyCraftingRequirementsMet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingCompleted(); // Function Scavenger.S_WidgetCraftingNotificationPanel.NotifyCraftingCompleted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnLevelUp(int32_t NewLevel); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnLevelUp // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnItemRemoved(struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnItemRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnItemChanged(struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnItemAdded(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnItemAdded // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCraftingStarted(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnCraftingStarted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCraftingCompleted(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingNotificationPanel.HandleOnCraftingCompleted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	bool CanCraftAny(); // Function Scavenger.S_WidgetCraftingNotificationPanel.CanCraftAny // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingInput
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetCraftingInput : US_WidgetMinimal {
	int32_t inputIndex; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct US_RecipeData* m_recipe; // 0x4c0(0x08)

	void SetRecipe(struct US_RecipeData* recipe); // Function Scavenger.S_WidgetCraftingInput.SetRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInputIndex(int32_t inputIndex); // Function Scavenger.S_WidgetCraftingInput.SetInputIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCraftingSlot(enum class ES_CraftingSlot craftingSlot); // Function Scavenger.S_WidgetCraftingInput.SetCraftingSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRecipeDataChanged_BP(); // Function Scavenger.S_WidgetCraftingInput.OnRecipeDataChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	int32_t GetRequiredAmount(); // Function Scavenger.S_WidgetCraftingInput.GetRequiredAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_RecipeData* GetRecipe(); // Function Scavenger.S_WidgetCraftingInput.GetRecipe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct TSoftObjectPtr<struct US_ItemData> GetInputItemHandle(); // Function Scavenger.S_WidgetCraftingInput.GetInputItemHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetInputIndex(); // Function Scavenger.S_WidgetCraftingInput.GetInputIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetCurrentAmount(); // Function Scavenger.S_WidgetCraftingInput.GetCurrentAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_CraftingSlot GetCraftingSlot(); // Function Scavenger.S_WidgetCraftingInput.GetCraftingSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingOutput
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetCraftingOutput : US_WidgetMinimal {
	struct US_RecipeData* m_recipe; // 0x4b8(0x08)

	void SetRecipe(struct US_RecipeData* recipe); // Function Scavenger.S_WidgetCraftingOutput.SetRecipe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRecipeDataChanged_BP(); // Function Scavenger.S_WidgetCraftingOutput.OnRecipeDataChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct US_RecipeData* GetRecipe(); // Function Scavenger.S_WidgetCraftingOutput.GetRecipe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetOutputItemState_BP(struct FS_ItemState outItemState); // Function Scavenger.S_WidgetCraftingOutput.GetOutputItemState_BP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingQueue
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetCraftingQueue : US_WidgetMinimal {
	struct US_WidgetCraftingQueueSlot* CraftingQueueSlot; // 0x4b8(0x08)
	struct UHorizontalBox* CraftingQueue; // 0x4c0(0x08)

	void OnCraftingQueueItemRemovedCallback(int32_t QueueIndex, int32_t RecipeIndex, struct US_RecipeData* RecipeData, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingQueue.OnCraftingQueueItemRemovedCallback // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnCraftingQueueItemAddedCallback(int32_t QueueIndex, int32_t RecipeIndex, struct US_RecipeData* RecipeData, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingQueue.OnCraftingQueueItemAddedCallback // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingQueueSlot
// Size: 0x650 (Inherited: 0x4b8)
struct US_WidgetCraftingQueueSlot : US_WidgetMinimal {
	struct UMaterialInterface* SimpleFillMaterial; // 0x4b8(0x08)
	struct UTexture* EmptySlotIcon; // 0x4c0(0x08)
	struct UImage* CraftingItem; // 0x4c8(0x08)
	struct US_WidgetCountdown* CountdownTimer; // 0x4d0(0x08)
	struct UMaterialInstanceDynamic* m_simpleFillMaterial; // 0x4d8(0x08)
	char pad_4E0[0x170]; // 0x4e0(0x170)

	bool SetItemDetails(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingQueueSlot.SetItemDetails // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveItem(); // Function Scavenger.S_WidgetCraftingQueueSlot.RemoveItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnIconLoaded(); // Function Scavenger.S_WidgetCraftingQueueSlot.OnIconLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCraftingTimeUpdated(int32_t RecipeIndex, float CraftTimeRemaining, float totalCraftTime); // Function Scavenger.S_WidgetCraftingQueueSlot.HandleOnCraftingTimeUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCraftingStarted(int32_t RecipeIndex, struct FS_RecipeMetadata RecipeMetadata); // Function Scavenger.S_WidgetCraftingQueueSlot.HandleOnCraftingStarted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCraftingScreen
// Size: 0x528 (Inherited: 0x4b8)
struct US_WidgetCraftingScreen : US_WidgetMinimal {
	struct US_WidgetItemCard* RecipeCardClass; // 0x4b8(0x08)
	struct US_WidgetCenterFilledLinearPanel* LinearCardPanel; // 0x4c0(0x08)
	struct TArray<struct US_RecipeData*> m_cachedRecipes; // 0x4c8(0x10)
	struct TMap<struct US_RecipeData*, struct US_WidgetCraftingRecipeCard*> m_recipeToCardMap; // 0x4d8(0x50)

	void HandleRecipesChanged(struct TArray<struct US_RecipeData*> newRecipes); // Function Scavenger.S_WidgetCraftingScreen.HandleRecipesChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCurrencyPanel
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetCurrencyPanel : US_WidgetMinimal {
	struct FDataTableRowHandle CurrentHardCurrencyFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle CurrentNanitesFormatHandle; // 0x4c8(0x10)
	struct US_RichTextBlock* CurrentHardCurrency; // 0x4d8(0x08)
	struct US_RichTextBlock* CurrentNanites; // 0x4e0(0x08)
	struct US_RichTextBlock* CurrentTierSkip; // 0x4e8(0x08)
	struct UImage* TierSkipIcon; // 0x4f0(0x08)

	void HandleOnPlayerInventoryAndCurrencyRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetCurrencyPanel.HandleOnPlayerInventoryAndCurrencyRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnLoginSucceed(); // Function Scavenger.S_WidgetCurrencyPanel.HandleOnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCustomizationOptionItem
// Size: 0x638 (Inherited: 0x508)
struct US_WidgetCustomizationOptionItem : US_WidgetCustomizationBase {
	struct FMulticastInlineDelegate OnCustomizationOptionItemClicked; // 0x508(0x10)
	struct FMulticastInlineDelegate OnCustomizationOptionItemHovered; // 0x518(0x10)
	struct FMulticastInlineDelegate OnCustomizationOptionItemUnhovered; // 0x528(0x10)
	bool bOverrideWidth; // 0x538(0x01)
	char pad_539[0x3]; // 0x539(0x03)
	float WidthOverride; // 0x53c(0x04)
	bool bOverrideHeight; // 0x540(0x01)
	char pad_541[0x3]; // 0x541(0x03)
	float HeightOverride; // 0x544(0x04)
	bool bOverrideIconSizeBoxWidth; // 0x548(0x01)
	char pad_549[0x3]; // 0x549(0x03)
	float IconSizeBoxWidthOverride; // 0x54c(0x04)
	bool bOverrideIconSizeBoxHeight; // 0x550(0x01)
	char pad_551[0x3]; // 0x551(0x03)
	float IconSizeBoxHeightOverride; // 0x554(0x04)
	bool bHideItemName; // 0x558(0x01)
	char pad_559[0x3]; // 0x559(0x03)
	int32_t CosmeticTypeIndices[0xb]; // 0x55c(0x2c)
	struct FDataTableRowHandle AvailableItemNameFormatHandle; // 0x588(0x10)
	struct FDataTableRowHandle LockedItemNameFormatHandle; // 0x598(0x10)
	struct FDataTableRowHandle SelectedItemNameFormatHandle; // 0x5a8(0x10)
	struct FDataTableRowHandle EmptyItemNameFormatHandle; // 0x5b8(0x10)
	struct US_WidgetCommonScavengerButton* ItemButton; // 0x5c8(0x08)
	struct UImage* SelectedIcon; // 0x5d0(0x08)
	struct UImage* RarityBar; // 0x5d8(0x08)
	struct US_RichTextBlock* ItemName; // 0x5e0(0x08)
	struct UImage* ItemIcon; // 0x5e8(0x08)
	struct USizeBox* ItemIconSizeBox; // 0x5f0(0x08)
	struct US_UMGWidgetSwitcher* ActiveStateSwitcher; // 0x5f8(0x08)
	struct USizeBox* OptionSizeBox; // 0x600(0x08)
	struct US_UMGWidgetSwitcher* CosmeticTypeSwitcher; // 0x608(0x08)
	struct US_WidgetCosmeticTitle* CosmeticTitle; // 0x610(0x08)
	char pad_618[0x20]; // 0x618(0x20)

	bool IsCosmeticItemCurrentlyEquipped(enum class ES_CosmeticType CosmeticType, struct FName cosmeticItemMetadataId); // Function Scavenger.S_WidgetCustomizationOptionItem.IsCosmeticItemCurrentlyEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleOnUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCustomizationOptionItem.HandleOnUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCustomizationOptionItem.HandleOnHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_WidgetCustomizationOptionItem.HandleOnCosmeticLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetCustomizationOptionItem.HandleOnActiveClicked // (Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetCustomizationCategory
// Size: 0x710 (Inherited: 0x638)
struct US_WidgetCustomizationCategory : US_WidgetCustomizationOptionItem {
	enum class ES_CosmeticType CosmeticCategory; // 0x638(0x01)
	char pad_639[0x7]; // 0x639(0x07)
	struct FDataTableRowHandle CosmeticTypeHandles[0xb]; // 0x640(0xb0)
	struct FDataTableRowHandle CategoryFormatHandle; // 0x6f0(0x10)
	struct US_RichTextBlock* Category; // 0x700(0x08)
	struct US_UMGWidgetSwitcher* EmptyStateSwitcher; // 0x708(0x08)
};

// Class Scavenger.S_WidgetCustomizationOptionInfo
// Size: 0x560 (Inherited: 0x508)
struct US_WidgetCustomizationOptionInfo : US_WidgetCustomizationBase {
	struct FDataTableRowHandle NameFormatHandle; // 0x508(0x10)
	struct FDataTableRowHandle RarityFormatHandle; // 0x518(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x528(0x10)
	struct US_RichTextBlock* Rarity; // 0x538(0x08)
	struct US_RichTextBlock* Description; // 0x540(0x08)
	struct UBorder* RarityBorder; // 0x548(0x08)
	struct US_RichTextBlock* Name; // 0x550(0x08)
	struct US_WidgetCosmeticSetBadge* CosmeticSetBadge; // 0x558(0x08)
};

// Class Scavenger.S_WidgetCustomizationPanel
// Size: 0x508 (Inherited: 0x508)
struct US_WidgetCustomizationPanel : US_WidgetCustomizationBase {
};

// Class Scavenger.S_WidgetMessagePrompt
// Size: 0x680 (Inherited: 0x640)
struct US_WidgetMessagePrompt : US_UMGHUD {
	bool bClearPromptIfReplacedOnNavStack; // 0x640(0x01)
	bool bClearingPromptAutoAccepts; // 0x641(0x01)
	char pad_642[0x6]; // 0x642(0x06)
	struct FMulticastInlineDelegate OnAcceptPrompt; // 0x648(0x10)
	struct FMulticastInlineDelegate OnRejectPrompt; // 0x658(0x10)
	struct US_WidgetCommonScavengerButton* AcceptButton; // 0x668(0x08)
	struct US_WidgetCommonScavengerButton* RejectButton; // 0x670(0x08)
	char pad_678[0x8]; // 0x678(0x08)

	void SetRemoveFromViewportOnDismissal(bool shouldRemove); // Function Scavenger.S_WidgetMessagePrompt.SetRemoveFromViewportOnDismissal // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RejectMessagePrompt(); // Function Scavenger.S_WidgetMessagePrompt.RejectMessagePrompt // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterMessagePromptWithArguments(struct FS_MessagePrompt prompt, struct FS_MessagePromptArguments arguments); // Function Scavenger.S_WidgetMessagePrompt.RegisterMessagePromptWithArguments // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterMessagePrompt(struct FS_MessagePrompt prompt); // Function Scavenger.S_WidgetMessagePrompt.RegisterMessagePrompt // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyRejectMessagePrompt(); // Function Scavenger.S_WidgetMessagePrompt.NotifyRejectMessagePrompt // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRegisterMessagePrompt(struct FS_MessagePrompt prompt, struct FS_MessagePromptArguments arguments); // Function Scavenger.S_WidgetMessagePrompt.NotifyRegisterMessagePrompt // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPreRegisterMessagePrompt(); // Function Scavenger.S_WidgetMessagePrompt.NotifyPreRegisterMessagePrompt // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAcceptMessagePrompt(); // Function Scavenger.S_WidgetMessagePrompt.NotifyAcceptMessagePrompt // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	struct FText FormatMessagePromptBody(struct FText messageBody, struct FS_MessagePromptArguments arguments); // Function Scavenger.S_WidgetMessagePrompt.FormatMessagePromptBody // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void AcceptMessagePrompt(); // Function Scavenger.S_WidgetMessagePrompt.AcceptMessagePrompt // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetDailyLoginBonusPrompt
// Size: 0x690 (Inherited: 0x680)
struct US_WidgetDailyLoginBonusPrompt : US_WidgetMessagePrompt {
	struct US_WidgetMessagePrompt* ClaimFailedMessagePromptClass; // 0x680(0x08)
	struct US_WidgetCommonScavengerButton* ClaimButton; // 0x688(0x08)

	void NotifyDailyLoginBonusClaimSuccessful(); // Function Scavenger.S_WidgetDailyLoginBonusPrompt.NotifyDailyLoginBonusClaimSuccessful // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnClaimDailyOfferRequestSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetDailyLoginBonusPrompt.HandleOnClaimDailyOfferRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnClaimDailyOfferRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetDailyLoginBonusPrompt.HandleOnClaimDailyOfferRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnClaimButtonActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetDailyLoginBonusPrompt.HandleOnClaimButtonActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAcceptClaimRequestFailure(); // Function Scavenger.S_WidgetDailyLoginBonusPrompt.HandleAcceptClaimRequestFailure // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTimedInteraction
// Size: 0x500 (Inherited: 0x4b8)
struct US_WidgetTimedInteraction : US_WidgetMinimal {
	struct UDataTable* TimedInteractionDisplayDataTable; // 0x4b8(0x08)
	float MaxDistance; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct UCurveFloat* ScaleCurve; // 0x4c8(0x08)
	bool UpdatesBasedOnServerTime; // 0x4d0(0x01)
	char pad_4D1[0x27]; // 0x4d1(0x27)
	struct TWeakObjectPtr<struct AActor> m_interactableActor; // 0x4f8(0x08)

	void SetServerEndTime(float ServerEndTime); // Function Scavenger.S_WidgetTimedInteraction.SetServerEndTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaxInteractionTime(float MaxTime); // Function Scavenger.S_WidgetTimedInteraction.SetMaxInteractionTime // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool IsTimedInteractionInUse(); // Function Scavenger.S_WidgetTimedInteraction.IsTimedInteractionInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleOnKeeperInteractionStateChanged(struct AS_InteractableActor* InteractableActor, float ServerEndTime); // Function Scavenger.S_WidgetTimedInteraction.HandleOnKeeperInteractionStateChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetDataUplinkInteraction
// Size: 0x5d8 (Inherited: 0x500)
struct US_WidgetDataUplinkInteraction : US_WidgetTimedInteraction {
	struct FDataTableRowHandle DisplayNameFormat; // 0x500(0x10)
	struct FDataTableRowHandle BandwidthFormat; // 0x510(0x10)
	struct FDataTableRowHandle PointCountFormat; // 0x520(0x10)
	struct FDataTableRowHandle BankedPointCountFormat; // 0x530(0x10)
	struct FDataTableRowHandle TeamUploadedTotalFormat; // 0x540(0x10)
	struct US_RichTextBlock* DisplayNameRichText; // 0x550(0x08)
	struct US_RichTextBlock* BandwidthRichText; // 0x558(0x08)
	struct US_RichTextBlock* PointCountRichText; // 0x560(0x08)
	struct US_WidgetCircularFill* FillImage; // 0x568(0x08)
	struct UVerticalBox* InProgressContainer; // 0x570(0x08)
	struct UVerticalBox* IndividualProgressContainer; // 0x578(0x08)
	struct UWidgetAnimation* UploadComplete; // 0x580(0x08)
	struct US_RichTextBlock* PointsBankedRichText; // 0x588(0x08)
	struct US_RichTextBlock* TeamUploadedTotalRichText; // 0x590(0x08)
	struct UBorder* UploadCompleteContainer; // 0x598(0x08)
	struct US_WidgetResurrectionTokenProgress* ResurrectionTokenProgress; // 0x5a0(0x08)
	char pad_5A8[0x8]; // 0x5a8(0x08)
	struct US_ItemData* m_bankingItemType; // 0x5b0(0x08)
	char pad_5B8[0x8]; // 0x5b8(0x08)
	struct FDelegate m_onUploadCompleteAnim; // 0x5c0(0x10)
	char pad_5D0[0x8]; // 0x5d0(0x08)

	void NotifyResurrectionTokenCountChanged(); // Function Scavenger.S_WidgetDataUplinkInteraction.NotifyResurrectionTokenCountChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEndDataUplink_BP(); // Function Scavenger.S_WidgetDataUplinkInteraction.NotifyEndDataUplink_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleUplinkBandwidthChanged(int32_t Bandwidth); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleUplinkBandwidthChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnUploadCompleteAnimationFinished(); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnUploadCompleteAnimationFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnOnItemDropped(struct FS_ItemState ItemState, struct FS_EventParameterVariant ItemPickup); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnOnItemDropped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemRemoved(struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnInventoryItemRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemChanged(struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnInventoryItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemAdded(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnInventoryItemAdded // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnBankingItemTypeChanged(struct US_ItemData* BankingItemType); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnBankingItemTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAnyTeamStateChanged(); // Function Scavenger.S_WidgetDataUplinkInteraction.HandleOnAnyTeamStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetDetailCarousel
// Size: 0x548 (Inherited: 0x548)
struct US_WidgetDetailCarousel : US_WidgetCarousel {
};

// Class Scavenger.S_WidgetDetailCarouselItem
// Size: 0x4e8 (Inherited: 0x4d0)
struct US_WidgetDetailCarouselItem : US_WidgetCarouselItem {
	struct US_RichTextBlock* DetailsDescription; // 0x4d0(0x08)
	struct US_RichTextBlock* DetailsTitle; // 0x4d8(0x08)
	struct UImage* DetailsImage; // 0x4e0(0x08)
};

// Class Scavenger.S_WidgetEquipmentItem
// Size: 0xb88 (Inherited: 0x850)
struct US_WidgetEquipmentItem : US_WidgetInventoryDragDrop {
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x850(0x08)
	struct US_WidgetEquipmentPanel* m_equipmentPanel; // 0x858(0x08)
	char pad_860[0x328]; // 0x860(0x328)

	void NotifyItemChanged(struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetEquipmentItem.NotifyItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen, struct US_WidgetEquipmentPanel* equipmentPanel, enum class ES_EquipmentSlot equipmentSlotType); // Function Scavenger.S_WidgetEquipmentItem.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetEquipmentPanel
// Size: 0x318 (Inherited: 0x270)
struct US_WidgetEquipmentPanel : UUserWidget {
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x270(0x08)
	struct TMap<enum class ES_EquipmentSlot, struct US_WidgetEquipmentItem*> m_mapOfEquipmentSlotTypeToWidgetEquipmentItem; // 0x278(0x50)
	struct TMap<enum class ES_EquipmentSlot, struct FName> MapOfEquipmentSlotTypeToWidgetEquipmentItemName; // 0x2c8(0x50)

	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen); // Function Scavenger.S_WidgetEquipmentPanel.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetEquippableItem
// Size: 0x880 (Inherited: 0x878)
struct US_WidgetEquippableItem : US_WidgetGenericInventoryScreenItem {
	char pad_878[0x8]; // 0x878(0x08)

	void TrySwapItem(); // Function Scavenger.S_WidgetEquippableItem.TrySwapItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void TryEquipItem(); // Function Scavenger.S_WidgetEquippableItem.TryEquipItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySlotUnselected(); // Function Scavenger.S_WidgetEquippableItem.NotifySlotUnselected // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySlotUnequipped(); // Function Scavenger.S_WidgetEquippableItem.NotifySlotUnequipped // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySlotSelected(); // Function Scavenger.S_WidgetEquippableItem.NotifySlotSelected // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySlotEquipped(struct FS_ItemState NewItemState, struct FS_ItemMetadata newItemMetadata); // Function Scavenger.S_WidgetEquippableItem.NotifySlotEquipped // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySlotEmptied(); // Function Scavenger.S_WidgetEquippableItem.NotifySlotEmptied // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPendingSwapState(bool isSwapPending); // Function Scavenger.S_WidgetEquippableItem.NotifyPendingSwapState // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingStopped(struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetEquippableItem.NotifyCraftingStopped // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingStarted(struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata, int32_t craftingTime); // Function Scavenger.S_WidgetEquippableItem.NotifyCraftingStarted // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool GetIsSlotSelected(); // Function Scavenger.S_WidgetEquippableItem.GetIsSlotSelected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsSlotEmpty(); // Function Scavenger.S_WidgetEquippableItem.GetIsSlotEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_EquipmentSlot GetEquipmentSlot(); // Function Scavenger.S_WidgetEquippableItem.GetEquipmentSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetEquippableItemsPanel
// Size: 0x908 (Inherited: 0x860)
struct US_WidgetEquippableItemsPanel : US_WidgetGenericInventoryScreenPanel {
	struct TMap<enum class ES_EquipmentSlot, struct US_WidgetEquippableItem*> m_mapOfEquipmentSlotTypeToWidgetEquippableItem; // 0x860(0x50)
	char pad_8B0[0x8]; // 0x8b0(0x08)
	struct TMap<enum class ES_EquipmentSlot, struct FName> MapOfEquipmentSlotTypeToWidgetEquippableItemName; // 0x8b8(0x50)
};

// Class Scavenger.S_WidgetEula
// Size: 0x688 (Inherited: 0x680)
struct US_WidgetEula : US_WidgetMessagePrompt {
	struct US_RichTextBlock* EulaBody; // 0x680(0x08)
};

// Class Scavenger.S_WidgetExplorerInfoPanel
// Size: 0x530 (Inherited: 0x4b8)
struct US_WidgetExplorerInfoPanel : US_WidgetMinimal {
	struct FDataTableRowHandle InfoFormatHandle; // 0x4b8(0x10)
	struct US_RichTextBlock* weapon; // 0x4c8(0x08)
	struct US_RichTextBlock* Ability; // 0x4d0(0x08)
	struct UImage* WeaponIcon; // 0x4d8(0x08)
	struct UImage* AbilityIcon; // 0x4e0(0x08)
	struct USizeBox* WeaponSizeBox; // 0x4e8(0x08)
	struct USizeBox* AbilitySizeBox; // 0x4f0(0x08)
	struct UImage* WeaponRarityBar; // 0x4f8(0x08)
	char pad_500[0x30]; // 0x500(0x30)

	void HandleOnCharacterLoadoutRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FName characterClassId, struct FS_CharacterLoadout newLoadout); // Function Scavenger.S_WidgetExplorerInfoPanel.HandleOnCharacterLoadoutRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetExplorerInspection
// Size: 0x930 (Inherited: 0x4b8)
struct US_WidgetExplorerInspection : US_WidgetMinimal {
	SoftClassProperty CosmeticSubScreens[0xb]; // 0x4b8(0x1b8)
	SoftClassProperty ExplorerProgressionOverlay; // 0x670(0x28)
	SoftClassProperty LoadoutSubScreens[0xf]; // 0x698(0x258)
	struct US_UMGLinearPanel* AppearanceCategories; // 0x8f0(0x08)
	struct US_UMGLinearPanel* ExpressionCategories; // 0x8f8(0x08)
	struct UVerticalBox* CosmeticsPanel; // 0x900(0x08)
	struct US_UMGLinearPanel* LoadoutItems; // 0x908(0x08)
	struct US_WidgetLoadoutAbilityInfo* AbilityInfo; // 0x910(0x08)
	char pad_918[0x8]; // 0x918(0x08)
	struct US_WidgetInspectionProgression* m_progressionWidget; // 0x920(0x08)
	char pad_928[0x8]; // 0x928(0x08)

	void HandleProgressionOverlayCreated(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_WidgetExplorerInspection.HandleProgressionOverlayCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutSlotTypeSelected(enum class ES_LoadoutSlotType loadoutSlotType, int32_t LoadoutIndex); // Function Scavenger.S_WidgetExplorerInspection.HandleOnLoadoutSlotTypeSelected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCosmeticTypeSelected(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetExplorerInspection.HandleOnCosmeticTypeSelected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLoadoutSubScreenCreated(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetExplorerInspection.HandleLoadoutSubScreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCosmeticSubScreenCreated(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetExplorerInspection.HandleCosmeticSubScreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetExplorerSelect
// Size: 0x560 (Inherited: 0x4b8)
struct US_WidgetExplorerSelect : US_WidgetMinimal {
	SoftClassProperty CharacterInspectionSubscreen; // 0x4b8(0x28)
	SoftClassProperty StorePrimarySubscreen; // 0x4e0(0x28)
	float UnhoverBufferTime; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct FDataTableRowHandle ExplorerNameFormatHandle; // 0x510(0x10)
	struct US_UMGLinearPanel* ExplorerRoster; // 0x520(0x08)
	struct US_RichTextBlock* Name; // 0x528(0x08)
	struct US_WidgetExplorerInfoPanel* InfoPanel; // 0x530(0x08)
	char pad_538[0x28]; // 0x538(0x28)

	void NotifyCurrentClassIdChanged(struct FName oldClassId, struct FName newClassId); // Function Scavenger.S_WidgetExplorerSelect.NotifyCurrentClassIdChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterChanged(struct AS_PlayerControllerBase* PlayerController, struct US_PlayerClassData* ClassData); // Function Scavenger.S_WidgetExplorerSelect.HandleOnPlayerCharacterChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterCardUnhovered(struct FName ClassId); // Function Scavenger.S_WidgetExplorerSelect.HandleOnCharacterCardUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterCardRightClicked(struct FName ClassId); // Function Scavenger.S_WidgetExplorerSelect.HandleOnCharacterCardRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterCardInactiveClicked(struct FName ClassId); // Function Scavenger.S_WidgetExplorerSelect.HandleOnCharacterCardInactiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterCardHovered(struct FName ClassId); // Function Scavenger.S_WidgetExplorerSelect.HandleOnCharacterCardHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterCardClicked(struct FName ClassId); // Function Scavenger.S_WidgetExplorerSelect.HandleOnCharacterCardClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetFlipbook
// Size: 0x540 (Inherited: 0x4b8)
struct US_WidgetFlipbook : US_WidgetMinimal {
	struct FS_FlipbookBrush FlipbookBrush; // 0x4b8(0x18)
	struct FMulticastInlineDelegate OnFlipbookStarted; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnFlipbookStopped; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnFlipbookPaused; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnFlipbookUnpaused; // 0x500(0x10)
	struct UImage* FlipbookImage; // 0x510(0x08)
	char pad_518[0x28]; // 0x518(0x28)

	void StopFlipbookAnimation(); // Function Scavenger.S_WidgetFlipbook.StopFlipbookAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PlayFlipbookAnimation(int32_t startingFrame); // Function Scavenger.S_WidgetFlipbook.PlayFlipbookAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t PauseFlipbookAnimation(); // Function Scavenger.S_WidgetFlipbook.PauseFlipbookAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	int32_t GetCurrentFrame(); // Function Scavenger.S_WidgetFlipbook.GetCurrentFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetFriendList
// Size: 0x890 (Inherited: 0x4b8)
struct US_WidgetFriendList : US_WidgetMinimal {
	struct US_UMGLinearPanel* FriendsInPartyList; // 0x4b8(0x08)
	struct US_UMGLinearPanel* FriendsNotInPartyList; // 0x4c0(0x08)
	struct US_UMGLinearPanel* RecentPlayersList; // 0x4c8(0x08)
	struct US_UMGLinearPanel* IncomingFriendInvitesList; // 0x4d0(0x08)
	struct US_UMGLinearPanel* OutgoingFriendInvitesList; // 0x4d8(0x08)
	struct US_UMGLinearPanel* IncomingPartyInvitesList; // 0x4e0(0x08)
	struct US_UMGLinearPanel* OutgoingPartyInvitesList; // 0x4e8(0x08)
	struct US_UMGLinearPanel* IncomingPartyJoinRequestsList; // 0x4f0(0x08)
	struct US_UMGLinearPanel* OutgoingPartyJoinRequestsList; // 0x4f8(0x08)
	struct UWidgetSwitcher* TabSwitcher; // 0x500(0x08)
	struct UWidget* FriendsTab; // 0x508(0x08)
	struct UWidget* RecentPlayersTab; // 0x510(0x08)
	struct UWidget* InvitesTab; // 0x518(0x08)
	struct US_WidgetFriendListNavBar* TabNavBar; // 0x520(0x08)
	struct US_WidgetCommonScavengerButton* PlayerSearchButton; // 0x528(0x08)
	SoftClassProperty FriendListEntryClass; // 0x530(0x28)
	SoftClassProperty RecentPlayerListEntryClass; // 0x558(0x28)
	SoftClassProperty IncomingFriendInviteClass; // 0x580(0x28)
	SoftClassProperty OutgoingFriendInviteClass; // 0x5a8(0x28)
	SoftClassProperty IncomingPartyInviteClass; // 0x5d0(0x28)
	SoftClassProperty OutgoingPartyInviteClass; // 0x5f8(0x28)
	SoftClassProperty IncomingPartyJoinRequestClass; // 0x620(0x28)
	SoftClassProperty OutgoingPartyJoinRequestClass; // 0x648(0x28)
	SoftClassProperty PlayerSearchClass; // 0x670(0x28)
	struct US_FriendsManager* m_friendsManager; // 0x698(0x08)
	struct TMap<struct FName, struct US_WidgetFriendListItem*> m_friendsListWidgets; // 0x6a0(0x50)
	struct TMap<struct FName, struct US_WidgetSocialInvite*> m_friendInviteWidgets; // 0x6f0(0x50)
	struct TMap<struct FName, struct US_WidgetPartyInviteIncoming*> m_incomingPartyInviteWidgets; // 0x740(0x50)
	struct TMap<struct FName, struct US_WidgetPartyInviteOutgoing*> m_outgoingPartyInviteWidgets; // 0x790(0x50)
	struct TMap<struct FName, struct US_WidgetPartyJoinRequestIncoming*> m_incomingPartyJoinRequestWidgets; // 0x7e0(0x50)
	struct TMap<struct FName, struct US_WidgetPartyJoinRequestOutgoing*> m_outgoingPartyJoinRequestWidgets; // 0x830(0x50)
	char pad_880[0x10]; // 0x880(0x10)

	void SetTab(enum class ES_FriendListTabs Tab); // Function Scavenger.S_WidgetFriendList.SetTab // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnSentPartyJoinRequestCanceled(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.OnSentPartyJoinRequestCanceled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnSentPartyInviteCanceled(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.OnSentPartyInviteCanceled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnReceivedPartyJoinRequestDismissed(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.OnReceivedPartyJoinRequestDismissed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnReceivedPartyInviteDismissed(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.OnReceivedPartyInviteDismissed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRosterUpdated(); // Function Scavenger.S_WidgetFriendList.HandleRosterUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleReceivedPresenceUpdate(struct FS_PlayerPresenceStatus PresenceStatus); // Function Scavenger.S_WidgetFriendList.HandleReceivedPresenceUpdate // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePartyJoinRequestSent(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.HandlePartyJoinRequestSent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyJoinRequestReceived(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.HandlePartyJoinRequestReceived // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyInviteSent(struct FString PlayerId); // Function Scavenger.S_WidgetFriendList.HandlePartyInviteSent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePartyInviteReceived(struct FString PlayerId, struct FString PartyId, struct FS_LobbyEndpoint lobbyEndpoint, struct FString playerDisplayName); // Function Scavenger.S_WidgetFriendList.HandlePartyInviteReceived // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPartyDetailsChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetFriendList.HandleOnPartyDetailsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnNavbarInteraction(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetFriendList.HandleOnNavbarInteraction // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnConnectionStateChanged(); // Function Scavenger.S_WidgetFriendList.HandleOnConnectionStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleFriendRequestReceived(struct FS_FriendEntry friendEntry); // Function Scavenger.S_WidgetFriendList.HandleFriendRequestReceived // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleDispatchOnPlayerSearchCreated(struct US_WidgetMinimal* NewWidget); // Function Scavenger.S_WidgetFriendList.HandleDispatchOnPlayerSearchCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDispatchOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetFriendList.HandleDispatchOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSocialButtonBase
// Size: 0x660 (Inherited: 0x4b8)
struct US_WidgetSocialButtonBase : US_WidgetMinimal {
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x4b8(0x08)
	struct UMenuAnchor* PromptMenuAnchor; // 0x4c0(0x08)
	struct US_RichTextBlock* DisplayNameTextBlock; // 0x4c8(0x08)
	struct US_RichTextBlock* StatusTextBlock; // 0x4d0(0x08)
	struct US_RichTextBlock* LevelTextBlock; // 0x4d8(0x08)
	struct UWidget* PartyLeaderWidget; // 0x4e0(0x08)
	struct FDataTableRowHandle DisplayNameFormat; // 0x4e8(0x10)
	struct FDataTableRowHandle LevelFormat; // 0x4f8(0x10)
	struct FDataTableRowHandle AvailableStateTextHandle; // 0x508(0x10)
	struct FDataTableRowHandle InAMatchStateTextHandle; // 0x518(0x10)
	struct FDataTableRowHandle InPartyStateTextHandle; // 0x528(0x10)
	struct FDataTableRowHandle InFullPartyStateTextHandle; // 0x538(0x10)
	struct FDataTableRowHandle OfflineStateTextHandle; // 0x548(0x10)
	struct FDataTableRowHandle NotFriendStateTextHandle; // 0x558(0x10)
	struct FDataTableRowHandle FriendRequestOutgoingStateTextHandle; // 0x568(0x10)
	struct FDataTableRowHandle FriendRequestIncomingStateTextHandle; // 0x578(0x10)
	struct FDataTableRowHandle BlockedStateTextHandle; // 0x588(0x10)
	struct US_WidgetSocialPromptMenu* PromptMenuClass; // 0x598(0x08)
	char pad_5A0[0xb8]; // 0x5a0(0xb8)
	struct US_WidgetSocialPromptMenu* m_promptMenu; // 0x658(0x08)

	void OverridePromptMenuAchor(struct UMenuAnchor* newPromptMenuAnchor); // Function Scavenger.S_WidgetSocialButtonBase.OverridePromptMenuAchor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnPromptMenuActionSelected(enum class ES_SocialButtonPromptAction action); // Function Scavenger.S_WidgetSocialButtonBase.OnPromptMenuActionSelected // (Native|Protected) // @ game+0xffff8008e4a10000
	bool IsOnline(); // Function Scavenger.S_WidgetSocialButtonBase.IsOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInLobby(); // Function Scavenger.S_WidgetSocialButtonBase.IsInLobby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsBlocked(); // Function Scavenger.S_WidgetSocialButtonBase.IsBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialButtonBase.HandleUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPromptMenuOpenChanged(bool IsOpen); // Function Scavenger.S_WidgetSocialButtonBase.HandleOnPromptMenuOpenChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerUnblocked(struct FString PlayerId); // Function Scavenger.S_WidgetSocialButtonBase.HandleOnPlayerUnblocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerBlocked(struct FString PlayerId); // Function Scavenger.S_WidgetSocialButtonBase.HandleOnPlayerBlocked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct UUserWidget* HandleOnGetPromptMenuContent(); // Function Scavenger.S_WidgetSocialButtonBase.HandleOnGetPromptMenuContent // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialButtonBase.HandleHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialButtonBase.HandleClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool FitsCrossplayRequirements(); // Function Scavenger.S_WidgetSocialButtonBase.FitsCrossplayRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetFriendListItem
// Size: 0x680 (Inherited: 0x660)
struct US_WidgetFriendListItem : US_WidgetSocialButtonBase {
	struct UWidgetSwitcher* OnlineStatusSwitcher; // 0x660(0x08)
	struct UWidget* OnlineSwitcherSlot; // 0x668(0x08)
	struct UWidget* OfflineSwitcherSlot; // 0x670(0x08)
	char pad_678[0x8]; // 0x678(0x08)
};

// Class Scavenger.S_WidgetNavBar
// Size: 0x580 (Inherited: 0x4b8)
struct US_WidgetNavBar : US_WidgetMinimal {
	int32_t StartingIndex; // 0x4b8(0x04)
	bool bUseDynamicButtonCount; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	int32_t ButtonCount; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct US_WidgetCommonScavengerButton* DynamicButtonClass; // 0x4c8(0x08)
	enum class ES_NavBarType ES_NavBarType; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct FMulticastInlineDelegate OnNavBarButtonActiveClicked; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnNavBarButtonInactiveClicked; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnNavBarButtonActiveRightClicked; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnNavBarButtonInactiveRightClicked; // 0x508(0x10)
	struct FMulticastInlineDelegate OnNavBarIndexChanged; // 0x518(0x10)
	struct FMulticastInlineDelegate OnNavBarButtonsCycled; // 0x528(0x10)
	struct FMulticastInlineDelegate OnSelectedButtonClicked; // 0x538(0x10)
	struct UPanelWidget* NavBarButtons; // 0x548(0x08)
	struct US_UMGCommonKey* CycleLeftKey; // 0x550(0x08)
	struct US_UMGCommonKey* CycleRightKey; // 0x558(0x08)
	struct TArray<struct US_WidgetCommonScavengerButton*> m_navButtons; // 0x560(0x10)
	struct US_WidgetCommonScavengerButton* m_activeButton; // 0x570(0x08)
	char pad_578[0x8]; // 0x578(0x08)

	void UpdateStartingIndex(int32_t Index); // Function Scavenger.S_WidgetNavBar.UpdateStartingIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNavBarLock(bool bIsLocked); // Function Scavenger.S_WidgetNavBar.SetNavBarLock // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIndexActive(int32_t Index, bool IsActive); // Function Scavenger.S_WidgetNavBar.SetIndexActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetButtonInteractionStateAt(int32_t Index, enum class ES_ButtonInteractionState State); // Function Scavenger.S_WidgetNavBar.SetButtonInteractionStateAt // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnNavButtonStateChanged(bool isSelected, struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.OnNavButtonStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyOnSelectedButtonClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetNavBar.NotifyOnSelectedButtonClicked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnInactiveRightClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetNavBar.NotifyOnInactiveRightClicked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnInactiveClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetNavBar.NotifyOnInactiveClicked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnActiveRightClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetNavBar.NotifyOnActiveRightClicked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnActiveClicked(struct US_WidgetCommonScavengerButton* Button, int32_t Index); // Function Scavenger.S_WidgetNavBar.NotifyOnActiveClicked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNavBarIndexChanged(int32_t oldIndex, int32_t NewIndex); // Function Scavenger.S_WidgetNavBar.NotifyNavBarIndexChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnSelectedButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.HandleOnSelectedButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool isGamepad); // Function Scavenger.S_WidgetNavBar.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInactiveRightClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.HandleOnInactiveRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInactiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.HandleOnInactiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveRightClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.HandleOnActiveRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct TArray<struct US_WidgetCommonScavengerButton*> GetNavButtons(); // Function Scavenger.S_WidgetNavBar.GetNavButtons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetNavBarLock(); // Function Scavenger.S_WidgetNavBar.GetNavBarLock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetButtonIndex(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetNavBar.GetButtonIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetActiveButtonIndex(); // Function Scavenger.S_WidgetNavBar.GetActiveButtonIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetCommonScavengerButton* GetActiveButton(); // Function Scavenger.S_WidgetNavBar.GetActiveButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetCommonScavengerButton* ForceIndexSelected(bool isSelected, int32_t Index); // Function Scavenger.S_WidgetNavBar.ForceIndexSelected // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct US_WidgetCommonScavengerButton* CycleNavBarButtons(enum class ES_NavBarCycleDirection Direction, enum class ES_NavBarCycleMode cycleMode); // Function Scavenger.S_WidgetNavBar.CycleNavBarButtons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ChangeInputKeyVisibility(bool IsVisible); // Function Scavenger.S_WidgetNavBar.ChangeInputKeyVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AllocateNavBarButtons(int32_t numberOfButtons); // Function Scavenger.S_WidgetNavBar.AllocateNavBarButtons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetFriendListNavBar
// Size: 0x5b0 (Inherited: 0x580)
struct US_WidgetFriendListNavBar : US_WidgetNavBar {
	struct US_WidgetCommonScavengerButton* FriendsTab; // 0x580(0x08)
	struct US_WidgetCommonScavengerButton* RecentPlayersTab; // 0x588(0x08)
	struct FDataTableRowHandle FriendsFormat; // 0x590(0x10)
	struct FDataTableRowHandle RecentPlayersFormat; // 0x5a0(0x10)
};

// Class Scavenger.S_WidgetGameplayEffectIcon
// Size: 0x898 (Inherited: 0x4b8)
struct US_WidgetGameplayEffectIcon : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnWidgetInitialized; // 0x4b8(0x10)
	struct UImage* Icon; // 0x4c8(0x08)
	char pad_4D0[0x3c8]; // 0x4d0(0x3c8)

	void NotifyInitialized_BP(struct FS_ActiveGameplayEffect ActiveGameplayEffect); // Function Scavenger.S_WidgetGameplayEffectIcon.NotifyInitialized_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void GetGameplayEffectTimeReamining(float OutTimeRemaining); // Function Scavenger.S_WidgetGameplayEffectIcon.GetGameplayEffectTimeReamining // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetGameplayEffectStartTimeAndDuration(float OutStartTime, float OutDuration); // Function Scavenger.S_WidgetGameplayEffectIcon.GetGameplayEffectStartTimeAndDuration // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGameplayEffects
// Size: 0x500 (Inherited: 0x4b8)
struct US_WidgetGameplayEffects : US_WidgetMinimal {
	struct UHorizontalBox* HorizontalBoxForIcons; // 0x4b8(0x08)
	char pad_4C0[0x10]; // 0x4c0(0x10)
	struct US_WidgetGameplayEffectIcon* WidgetGameplayEffectIconClass; // 0x4d0(0x08)
	float SpaceBetweenIcons; // 0x4d8(0x04)
	char pad_4DC[0x14]; // 0x4dc(0x14)
	struct TArray<struct US_WidgetGameplayEffectIcon*> m_widgetGameplayEffectIcons; // 0x4f0(0x10)

	void NotifyGameplayEffectsChanged_BP(struct TArray<struct FS_ActiveGameplayEffect> ActiveGameplayEffects); // Function Scavenger.S_WidgetGameplayEffects.NotifyGameplayEffectsChanged_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGameResolutionSubscreen
// Size: 0x530 (Inherited: 0x508)
struct US_WidgetGameResolutionSubscreen : US_WidgetPhaseSubscreen {
	struct US_WidgetTeamContributionContainer* TeamContributions; // 0x508(0x08)
	struct FS_TeamScoreSnapshot m_teamScoreSnapshot; // 0x510(0x20)

	void ShowTeamContributions(); // Function Scavenger.S_WidgetGameResolutionSubscreen.ShowTeamContributions // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnMatchEndTimerEnded(); // Function Scavenger.S_WidgetGameResolutionSubscreen.HandleOnMatchEndTimerEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetTeamPlacement(); // Function Scavenger.S_WidgetGameResolutionSubscreen.GetTeamPlacement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetExtractedDatapoints(); // Function Scavenger.S_WidgetGameResolutionSubscreen.GetExtractedDatapoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGameScoreboard
// Size: 0x500 (Inherited: 0x4b8)
struct US_WidgetGameScoreboard : US_WidgetMinimal {
	struct US_WidgetGameScoreboardRow* ScoreboardRowClass; // 0x4b8(0x08)
	int32_t EntryCap; // 0x4c0(0x04)
	bool bShouldCapEntries; // 0x4c4(0x01)
	char pad_4C5[0x3]; // 0x4c5(0x03)
	float ScrollSpeedScalingForGamepad; // 0x4c8(0x04)
	int32_t NumberOfRowsNeededForScrolling; // 0x4cc(0x04)
	struct US_UMGLinearPanel* ScoreboardRows; // 0x4d0(0x08)
	struct UScrollBox* ScrollBox; // 0x4d8(0x08)
	char pad_4E0[0x20]; // 0x4e0(0x20)

	void HandleOnTeamCountChanged(int32_t NewCount); // Function Scavenger.S_WidgetGameScoreboard.HandleOnTeamCountChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAnyTeamStateChanged(); // Function Scavenger.S_WidgetGameScoreboard.HandleOnAnyTeamStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnAnyPlayerGodModeChanged(); // Function Scavenger.S_WidgetGameScoreboard.HandleOnAnyPlayerGodModeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLeaderboardScrolling(float inAxisValue); // Function Scavenger.S_WidgetGameScoreboard.HandleLeaderboardScrolling // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGameScoreboardRow
// Size: 0x5b8 (Inherited: 0x4b8)
struct US_WidgetGameScoreboardRow : US_WidgetMinimal {
	int32_t DefaultStateIndex; // 0x4b8(0x04)
	int32_t EliminatedTeamStateIndex; // 0x4bc(0x04)
	bool bHideEliminatedTeamPlacement; // 0x4c0(0x01)
	bool bHideEliminatedTeamScore; // 0x4c1(0x01)
	char pad_4C2[0x6]; // 0x4c2(0x06)
	struct FDataTableRowHandle AlivePlacementFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle EliminatedPlacementFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle ScoreCountHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle LocalPlayerTeamPlacementFormatHandle; // 0x4f8(0x10)
	struct US_RichTextBlock* Placement; // 0x508(0x08)
	struct UHorizontalBox* SquadMembers; // 0x510(0x08)
	struct US_RichTextBlock* ScoreCount; // 0x518(0x08)
	struct US_WidgetCommonProgressBar* HeldPercentageBar; // 0x520(0x08)
	struct US_UMGWidgetSwitcher* StateSwitcher; // 0x528(0x08)
	struct UPanelWidget* PlacementContainer; // 0x530(0x08)
	struct UPanelWidget* ScoreCountContainer; // 0x538(0x08)
	struct UWidgetAnimation* ScoreboardRecapFadeIn; // 0x540(0x08)
	struct UWidgetAnimation* ScoreboardRecapFadeOut; // 0x548(0x08)
	struct UWidgetAnimation* ScoreboardRecapFadeInAndShift; // 0x550(0x08)
	struct UImage* LocalPlayerBadge; // 0x558(0x08)
	char pad_560[0x58]; // 0x560(0x58)
};

// Class Scavenger.S_WidgetGameScoreboardEntry
// Size: 0x578 (Inherited: 0x4b8)
struct US_WidgetGameScoreboardEntry : US_WidgetMinimal {
	int32_t DefaultStateIndex; // 0x4b8(0x04)
	int32_t EliminatedStateIndex; // 0x4bc(0x04)
	struct FDataTableRowHandle AliveDisplayNameFormatHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle EliminatedDisplayNameFormatHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle GodModeDisplayNameFormatHandle; // 0x4e0(0x10)
	struct US_RichTextBlock* DisplayName; // 0x4f0(0x08)
	struct US_UMGWidgetSwitcher* StateSwitcher; // 0x4f8(0x08)
	char pad_500[0x78]; // 0x500(0x78)
};

// Class Scavenger.S_WidgetGenericSettingsModifier
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_WidgetGenericSettingsModifier : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnGenericOptionChanged; // 0x4b8(0x10)
	struct FDataTableRowHandle m_currentConfigRow; // 0x4c8(0x10)

	void SetSettingsModifierData(struct FDataTableRowHandle row); // Function Scavenger.S_WidgetGenericSettingsModifier.SetSettingsModifierData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyToggleSettingConfigSet(struct FS_ToggleSettingConfig Config); // Function Scavenger.S_WidgetGenericSettingsModifier.NotifyToggleSettingConfigSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySliderSettingConfigSet(struct FS_SliderSettingConfig Config); // Function Scavenger.S_WidgetGenericSettingsModifier.NotifySliderSettingConfigSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyMultiOptionSettingConfigSet(struct FS_MultiOptionSettingConfig Config); // Function Scavenger.S_WidgetGenericSettingsModifier.NotifyMultiOptionSettingConfigSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyGenericOptionChanged(); // Function Scavenger.S_WidgetGenericSettingsModifier.NotifyGenericOptionChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMultiOptionModifier
// Size: 0x568 (Inherited: 0x4d8)
struct US_WidgetMultiOptionModifier : US_WidgetGenericSettingsModifier {
	struct FMulticastInlineDelegate OnMultiOptionChanged; // 0x4d8(0x10)
	struct US_RichTextBlock* Option; // 0x4e8(0x08)
	struct US_WidgetNavBar* NavBar; // 0x4f0(0x08)
	struct FDataTableRowHandle OptionFormatHandle; // 0x4f8(0x10)
	char pad_508[0x8]; // 0x508(0x08)
	struct FS_MultiOptionSettingConfig m_multiOptionConfig; // 0x510(0x58)

	void SetOptionIndex(int32_t OptionIndex); // Function Scavenger.S_WidgetMultiOptionModifier.SetOptionIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverrideMultiOptionOptions(struct TArray<struct FText> newOptions); // Function Scavenger.S_WidgetMultiOptionModifier.OverrideMultiOptionOptions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyOptionIndexChanged(int32_t NewIndex); // Function Scavenger.S_WidgetMultiOptionModifier.NotifyOptionIndexChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool GetOptions(struct TArray<struct FText> outOptions); // Function Scavenger.S_WidgetMultiOptionModifier.GetOptions // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetOptionIndex(); // Function Scavenger.S_WidgetMultiOptionModifier.GetOptionIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CycleOption(enum class ES_CycleDirection Direction); // Function Scavenger.S_WidgetMultiOptionModifier.CycleOption // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSliderModifier
// Size: 0x5b0 (Inherited: 0x4d8)
struct US_WidgetSliderModifier : US_WidgetGenericSettingsModifier {
	struct FMulticastInlineDelegate OnSliderValueChanged; // 0x4d8(0x10)
	struct US_RichTextBlock* Value; // 0x4e8(0x08)
	struct US_UMGProgressBar* Bar; // 0x4f0(0x08)
	struct USlider* Slider; // 0x4f8(0x08)
	struct FDataTableRowHandle OptionFormatHandle; // 0x500(0x10)
	char pad_510[0x8]; // 0x510(0x08)
	struct FS_SliderSettingConfig m_sliderConfig; // 0x518(0x98)

	void SetSliderValue(float sliderValue); // Function Scavenger.S_WidgetSliderModifier.SetSliderValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OverrideRange(struct FFloatRange newRange); // Function Scavenger.S_WidgetSliderModifier.OverrideRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySliderValueChanged(float NewSliderValue); // Function Scavenger.S_WidgetSliderModifier.NotifySliderValueChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnValueChanged(float sliderValue); // Function Scavenger.S_WidgetSliderModifier.HandleOnValueChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetSliderValueMappedToDisplayRange(); // Function Scavenger.S_WidgetSliderModifier.GetSliderValueMappedToDisplayRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetRawSliderValue(); // Function Scavenger.S_WidgetSliderModifier.GetRawSliderValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetNormalizedSliderValue(); // Function Scavenger.S_WidgetSliderModifier.GetNormalizedSliderValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetToggleModifier
// Size: 0x518 (Inherited: 0x4d8)
struct US_WidgetToggleModifier : US_WidgetGenericSettingsModifier {
	struct FMulticastInlineDelegate OnToggleStateChanged; // 0x4d8(0x10)
	struct US_RichTextBlock* ActiveOption; // 0x4e8(0x08)
	struct US_RichTextBlock* InactiveOption; // 0x4f0(0x08)
	struct US_WidgetCommonScavengerButton* toggle; // 0x4f8(0x08)
	struct FDataTableRowHandle OptionFormatHandle; // 0x500(0x10)
	char pad_510[0x8]; // 0x510(0x08)

	void SetToggleState(bool toggleState); // Function Scavenger.S_WidgetToggleModifier.SetToggleState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyToggleStateChanged(bool NewToggleState); // Function Scavenger.S_WidgetToggleModifier.NotifyToggleStateChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetToggleModifier.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GetToggleState(); // Function Scavenger.S_WidgetToggleModifier.GetToggleState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGenericSettingsPanel
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetGenericSettingsPanel : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnSettingsRowHovered; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnSettingsRowUnhovered; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnDispatchOptionChanged; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnDispatchOptionRequiresApply; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnDispatchSettingsSaved; // 0x4f8(0x10)

	void SetUserInputSettings(struct FS_UserInputSettings NewSettings, bool bAndSave); // Function Scavenger.S_WidgetGenericSettingsPanel.SetUserInputSettings // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void SetUserGameSettings(struct FS_UserGameSettings NewSettings, bool bAndSave); // Function Scavenger.S_WidgetGenericSettingsPanel.SetUserGameSettings // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void SetUserAudioSettings(struct FS_UserAudioSettings NewSettings, bool bAndSave); // Function Scavenger.S_WidgetGenericSettingsPanel.SetUserAudioSettings // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void SetUserAccessibilitySettings(struct FS_UserAccessibilitySettings NewSettings, bool bAndSave); // Function Scavenger.S_WidgetGenericSettingsPanel.SetUserAccessibilitySettings // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void ReceiveSwitcherFocus_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.ReceiveSwitcherFocus_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void ReceiveSwitcherFocus(); // Function Scavenger.S_WidgetGenericSettingsPanel.ReceiveSwitcherFocus // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnDispatchOptionRequiresApply_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.OnDispatchOptionRequiresApply_BP // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnDispatchOptionChanged_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.OnDispatchOptionChanged_BP // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnDispatchOnSettingsSaved_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.OnDispatchOnSettingsSaved_BP // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnDispatchLeave_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.OnDispatchLeave_BP // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnDispatchHover_BP(struct FText Name, struct FText DescriptionText); // Function Scavenger.S_WidgetGenericSettingsPanel.OnDispatchHover_BP // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LostSwitcherFocus_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.LostSwitcherFocus_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void LostSwitcherFocus(); // Function Scavenger.S_WidgetGenericSettingsPanel.LostSwitcherFocus // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSettingsMenuOpened_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSettingsMenuOpened_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleSettingsMenuOpened(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSettingsMenuOpened // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSettingsChanged_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSettingsChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleSettingsChanged(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSettingsChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSaveSettings_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSaveSettings_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleSaveSettings(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleSaveSettings // (Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleResetRequest_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleResetRequest_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleResetRequest(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleResetRequest // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleApplyRequest_BP(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleApplyRequest_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleApplyRequest(); // Function Scavenger.S_WidgetGenericSettingsPanel.HandleApplyRequest // (Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_UserInputSettings GetCurrentUserInputSettings(); // Function Scavenger.S_WidgetGenericSettingsPanel.GetCurrentUserInputSettings // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_UserGameSettings GetCurrentUserGameSettings(); // Function Scavenger.S_WidgetGenericSettingsPanel.GetCurrentUserGameSettings // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_UserAudioSettings GetCurrentUserAudioSettings(); // Function Scavenger.S_WidgetGenericSettingsPanel.GetCurrentUserAudioSettings // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_UserAccessibilitySettings GetCurrentUserAccessibilitySettings(); // Function Scavenger.S_WidgetGenericSettingsPanel.GetCurrentUserAccessibilitySettings // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGenericSettingsSlot
// Size: 0x558 (Inherited: 0x4b8)
struct US_WidgetGenericSettingsSlot : US_WidgetMinimal {
	struct FDataTableRowHandle SettingsConfigRow; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnSettingsHover; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnSettingsUnhovered; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnBroadcastOptionChanged; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnMultiOptionModifierChanged; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnSliderModifierChanged; // 0x508(0x10)
	struct FMulticastInlineDelegate OnToggleStateChanged; // 0x518(0x10)
	struct US_WidgetGenericSettingsModifier* SettingsModifier; // 0x528(0x08)
	struct US_RichTextBlock* OptionDisplayName; // 0x530(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x538(0x08)
	struct FDataTableRowHandle DisplayNameFormatHandle; // 0x540(0x10)
	char pad_550[0x8]; // 0x550(0x08)

	void SetSettingsModifierData(struct FDataTableRowHandle row); // Function Scavenger.S_WidgetGenericSettingsSlot.SetSettingsModifierData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyRowUnhovered(); // Function Scavenger.S_WidgetGenericSettingsSlot.NotifyRowUnhovered // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRowHovered(); // Function Scavenger.S_WidgetGenericSettingsSlot.NotifyRowHovered // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnOptionButtonClicked(struct US_WidgetCommonScavengerButton* clickedButton); // Function Scavenger.S_WidgetGenericSettingsSlot.HandleOnOptionButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnGenericOptionChanged(struct US_WidgetGenericSettingsModifier* SettingsModifierChanged); // Function Scavenger.S_WidgetGenericSettingsSlot.HandleOnGenericOptionChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct FDataTableRowHandle GetDefaultSettingsModifierData(); // Function Scavenger.S_WidgetGenericSettingsSlot.GetDefaultSettingsModifierData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void DeactivateSettingSlot(struct UWidget* BoundWidget); // Function Scavenger.S_WidgetGenericSettingsSlot.DeactivateSettingSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGlobalQueueButton
// Size: 0x5b8 (Inherited: 0x4b8)
struct US_WidgetGlobalQueueButton : US_WidgetMinimal {
	struct FString QueueId; // 0x4b8(0x10)
	struct FText LocalizedRegionName; // 0x4c8(0x18)
	struct FDataTableRowHandle TimeToMatchHandle; // 0x4e0(0x10)
	char pad_4F0[0xc8]; // 0x4f0(0xc8)

	bool ShouldBeVisible(); // Function Scavenger.S_WidgetGlobalQueueButton.ShouldBeVisible // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void SetQueueId(struct FString QueueId); // Function Scavenger.S_WidgetGlobalQueueButton.SetQueueId // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FString GetQueueDebugPlatformName(); // Function Scavenger.S_WidgetGlobalQueueButton.GetQueueDebugPlatformName // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetQueueDebugName(); // Function Scavenger.S_WidgetGlobalQueueButton.GetQueueDebugName // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetQueueDebugIsProductionQueue(); // Function Scavenger.S_WidgetGlobalQueueButton.GetQueueDebugIsProductionQueue // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetQueueDebugGameMode(); // Function Scavenger.S_WidgetGlobalQueueButton.GetQueueDebugGameMode // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPingMsAndStatus(int32_t pingTimeMs, enum class ES_LobbyEndpointPingStatus PingStatus); // Function Scavenger.S_WidgetGlobalQueueButton.GetPingMsAndStatus // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetEstimatedMatchTime(struct FText outEstimatedTimeToMatch); // Function Scavenger.S_WidgetGlobalQueueButton.GetEstimatedMatchTime // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_LobbyQueueCompatibility GetCompatibility(); // Function Scavenger.S_WidgetGlobalQueueButton.GetCompatibility // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGutter
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetGutter : US_WidgetMinimal {
	struct UCurveFloat* OuterCurve; // 0x4b8(0x08)
	struct UCurveFloat* InwardCurve; // 0x4c0(0x08)
	float GutterWidth; // 0x4c8(0x04)
	enum class ES_GutterShape GutterShape; // 0x4cc(0x01)
	bool SnapBottomGutterToTop; // 0x4cd(0x01)
	bool IsSoftGutter; // 0x4ce(0x01)
	char pad_4CF[0x1]; // 0x4cf(0x01)
	struct TArray<struct US_WidgetGutter*> m_subGutters; // 0x4d0(0x10)
	struct UCanvasPanel* m_canvasPanel; // 0x4e0(0x08)
	char pad_4E8[0x30]; // 0x4e8(0x30)

	float GetAngleFromCenter(struct FVector2D Position); // Function Scavenger.S_WidgetGutter.GetAngleFromCenter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D ClampToBounds(struct FVector2D Position, bool shouldForceInGutter); // Function Scavenger.S_WidgetGutter.ClampToBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetHitMarker
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetHitMarker : US_WidgetMinimal {
	struct FName ArmorColorInterfaceId; // 0x4b8(0x08)
	struct FName DefaultColorInterfaceId; // 0x4c0(0x08)
	struct FName KilledColorInterfaceId; // 0x4c8(0x08)
	struct UImage* ShieldIcon; // 0x4d0(0x08)
	struct UBorder* HitMarkerOverlay; // 0x4d8(0x08)
	struct UWidgetAnimation* FadeAnimation; // 0x4e0(0x08)
	struct UWidgetAnimation* KillAnimation; // 0x4e8(0x08)
	struct UWidgetAnimation* ShieldBreakAnimation; // 0x4f0(0x08)
	char pad_4F8[0x20]; // 0x4f8(0x20)

	void HandleAnimationStarted(); // Function Scavenger.S_WidgetHitMarker.HandleAnimationStarted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAnimationFinished(); // Function Scavenger.S_WidgetHitMarker.HandleAnimationFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetHotbarItem
// Size: 0x5a0 (Inherited: 0x4b8)
struct US_WidgetHotbarItem : US_WidgetMinimal {
	struct FLinearColor FullSlotColor; // 0x4b8(0x10)
	struct FLinearColor EmptySlotColor; // 0x4c8(0x10)
	struct US_UMGCommonKey* ActionKey; // 0x4d8(0x08)
	struct US_WidgetQuantityCounter* QuantityCounter; // 0x4e0(0x08)
	struct UImage* Icon; // 0x4e8(0x08)
	struct UImage* RarityBar; // 0x4f0(0x08)
	struct USizeBox* ItemSizeBox; // 0x4f8(0x08)
	struct UImage* BackerRarity; // 0x500(0x08)
	struct UImage* BackerBorder; // 0x508(0x08)
	struct UOverlay* ItemData; // 0x510(0x08)
	struct UImage* EmptySlotIcon; // 0x518(0x08)
	struct UImage* BackerImage; // 0x520(0x08)
	char pad_528[0x78]; // 0x528(0x78)

	void ShowItem(struct FS_ItemMetadata MetaData); // Function Scavenger.S_WidgetHotbarItem.ShowItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ShowEmptySlot(bool bHideWholeWidget); // Function Scavenger.S_WidgetHotbarItem.ShowEmptySlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetInputType(bool isUsingGamepad); // Function Scavenger.S_WidgetHotbarItem.SetInputType // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
	void SetEquipmentSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetHotbarItem.SetEquipmentSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifySelectionStateChanged(bool isSelected); // Function Scavenger.S_WidgetHotbarItem.NotifySelectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemChanged(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetHotbarItem.NotifyItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetHotbarItem.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEquipmentSlotChanged(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetHotbarItem.NotifyEquipmentSlotChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingTimeUpdated(int32_t RemainingTime); // Function Scavenger.S_WidgetHotbarItem.NotifyCraftingTimeUpdated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingForSlotStarted(struct FS_ItemState ItemState, int32_t craftingTime); // Function Scavenger.S_WidgetHotbarItem.NotifyCraftingForSlotStarted // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCraftingForSlotCompleted(); // Function Scavenger.S_WidgetHotbarItem.NotifyCraftingForSlotCompleted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnQuickItemSlotChanged(enum class ES_EquipmentSlot NewSlot); // Function Scavenger.S_WidgetHotbarItem.HandleOnQuickItemSlotChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct FS_ItemState GetItemState(); // Function Scavenger.S_WidgetHotbarItem.GetItemState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_EquipmentSlot GetEquipmentSlot(); // Function Scavenger.S_WidgetHotbarItem.GetEquipmentSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetHotbar
// Size: 0x538 (Inherited: 0x4b8)
struct US_WidgetHotbar : US_WidgetMinimal {
	struct US_WidgetHotbarItem* EquippedWeaponSlotHotbarItem; // 0x4b8(0x08)
	struct US_WidgetHotbarItem* UnequippedWeaponSlotHotbarItem; // 0x4c0(0x08)
	struct US_WidgetHotbarItem* ThrowableSlotHotbarItem; // 0x4c8(0x08)
	struct US_WidgetHotbarItem* QuickItemSlotHotbarItem; // 0x4d0(0x08)
	char pad_4D8[0x60]; // 0x4d8(0x60)

	void NotifySelectedWeaponSlotChanged(enum class ES_WeaponSlot lastWeaponSlot, enum class ES_WeaponSlot currentWeaponSlot); // Function Scavenger.S_WidgetHotbar.NotifySelectedWeaponSlotChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemChanged(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState ItemState); // Function Scavenger.S_WidgetHotbar.NotifyItemChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(); // Function Scavenger.S_WidgetHotbar.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleWeaponSlotChanged(enum class ES_WeaponSlot previousWeaponSlot, enum class ES_WeaponSlot currentWeaponSlot); // Function Scavenger.S_WidgetHotbar.HandleWeaponSlotChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSetPawn(struct APawn* oldPawn, struct APawn* NewPawn); // Function Scavenger.S_WidgetHotbar.HandleSetPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandlePossessPawn(struct APawn* Pawn); // Function Scavenger.S_WidgetHotbar.HandlePossessPawn // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetHotbar.HandleEquipmentItemUnequipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetHotbar.HandleEquipmentItemEquipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemChanged(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetHotbar.HandleEquipmentItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	struct FS_ItemState GetItemState(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetHotbar.GetItemState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_EquipmentSlot GetEquipmentSlotFromWeaponSlot(enum class ES_WeaponSlot weaponSlot); // Function Scavenger.S_WidgetHotbar.GetEquipmentSlotFromWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetHudScoreboardRow
// Size: 0x5c0 (Inherited: 0x5b8)
struct US_WidgetHudScoreboardRow : US_WidgetGameScoreboardRow {
	struct UPanelWidget* DatapointContainer; // 0x5b8(0x08)
};

// Class Scavenger.S_WidgetIdentityScreen
// Size: 0x680 (Inherited: 0x4b8)
struct US_WidgetIdentityScreen : US_WidgetMinimal {
	SoftClassProperty CosmeticSubScreens[0xb]; // 0x4b8(0x1b8)
	struct UPanelWidget* CosmeticCategories; // 0x670(0x08)
	char pad_678[0x8]; // 0x678(0x08)

	void HandleOnCosmeticTypeSelected(enum class ES_CosmeticType CosmeticType); // Function Scavenger.S_WidgetIdentityScreen.HandleOnCosmeticTypeSelected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCosmeticSubScreenCreated(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetIdentityScreen.HandleCosmeticSubScreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInitialNameSettingsSlot
// Size: 0x578 (Inherited: 0x558)
struct US_WidgetInitialNameSettingsSlot : US_WidgetGenericSettingsSlot {
	struct UEditableTextBox* NameTextBox; // 0x558(0x08)
	int32_t MaximumCharacters; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct FString ValidCharacters; // 0x568(0x10)

	void SetCurrentTextEntry(struct FText currentText); // Function Scavenger.S_WidgetInitialNameSettingsSlot.SetCurrentTextEntry // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SanitizeTextEntry(struct FText currentText, struct FText outSanitizedText); // Function Scavenger.S_WidgetInitialNameSettingsSlot.SanitizeTextEntry // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FText GetCurrentTextEntry(); // Function Scavenger.S_WidgetInitialNameSettingsSlot.GetCurrentTextEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInitialSettings
// Size: 0x550 (Inherited: 0x508)
struct US_WidgetInitialSettings : US_WidgetGenericSettingsPanel {
	struct FMulticastInlineDelegate OnInitialSettingsCreated; // 0x508(0x10)
	struct US_WidgetMessagePrompt* ErrorMessageClass; // 0x518(0x08)
	struct US_WidgetInitialNameSettingsSlot* DisplayNameSlot; // 0x520(0x08)
	struct US_WidgetCommonScavengerButton* SubmitButton; // 0x528(0x08)
	char pad_530[0x20]; // 0x530(0x20)

	void HandleSubmitButtonActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetInitialSettings.HandleSubmitButtonActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnDisplayNameChangeSuccess(struct UPlayer* Player, enum class ES_OnlineResult OnlineResultType, struct FString Message); // Function Scavenger.S_WidgetInitialSettings.HandleOnDisplayNameChangeSuccess // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnDisplayNameChangeFail(struct UPlayer* Player, enum class ES_OnlineResult OnlineResultType, struct FString Message); // Function Scavenger.S_WidgetInitialSettings.HandleOnDisplayNameChangeFail // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInspectionProgression
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetInspectionProgression : US_WidgetMinimal {
	struct FDataTableRowHandle NameFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle LevelFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle RemainingXpFormatHandle; // 0x4d8(0x10)
	struct UImage* Portrait; // 0x4e8(0x08)
	struct US_WidgetCommonProgressBar* XPBar; // 0x4f0(0x08)
	struct US_RichTextBlock* Level; // 0x4f8(0x08)
	struct US_RichTextBlock* Name; // 0x500(0x08)
	struct US_RichTextBlock* XpProgress; // 0x508(0x08)
	struct US_RichTextBlock* NextLevel; // 0x510(0x08)

	void InitProgression(); // Function Scavenger.S_WidgetInspectionProgression.InitProgression // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnCharacterLevelUpdated(struct FName CharacterId, int32_t NewLevel); // Function Scavenger.S_WidgetInspectionProgression.HandleOnCharacterLevelUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInteract
// Size: 0x648 (Inherited: 0x4b8)
struct US_WidgetInteract : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct AS_PlayerController* OwningPlayer; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)
	struct UMaterialInstanceDynamic* BackgroundDynamicMaterial; // 0x4d0(0x08)
	struct UMaterialInstanceDynamic* ItemRarityGradientDynamicMaterial; // 0x4d8(0x08)
	struct UTexture* ItemIconTexture; // 0x4e0(0x08)
	struct UMaterial* BackgroundMaterial; // 0x4e8(0x08)
	struct UMaterialInstance* InteractPromptGradientMaterial; // 0x4f0(0x08)
	struct FText NameStyle; // 0x4f8(0x18)
	struct FText TypeStyle; // 0x510(0x18)
	struct UMaterialInterface* NonItemInteractItemBorderGradient; // 0x528(0x08)
	struct UBorder* BackgroundBorder; // 0x530(0x08)
	struct UImage* Icon; // 0x538(0x08)
	struct US_RichTextBlock* InteractButtonLabel; // 0x540(0x08)
	struct UBorder* ItemBorder; // 0x548(0x08)
	struct US_RichTextBlock* ItemNameRichText; // 0x550(0x08)
	struct US_RichTextBlock* ItemTypeRichText; // 0x558(0x08)
	struct UVerticalBox* ItemVerticalBox; // 0x560(0x08)
	struct USizeBox* PingAction; // 0x568(0x08)
	struct US_RichTextBlock* PingButtonLabel; // 0x570(0x08)
	struct US_UMGCommonKey* PingKey; // 0x578(0x08)
	struct USizeBox* PrimaryAction; // 0x580(0x08)
	struct US_WidgetCircularFill* PrimaryFill; // 0x588(0x08)
	struct US_UMGCommonKey* PrimaryKey; // 0x590(0x08)
	struct UBorder* RarityBorder; // 0x598(0x08)
	struct US_RichTextBlock* ScrapButtonLabel; // 0x5a0(0x08)
	struct USizeBox* SecondaryAction; // 0x5a8(0x08)
	struct US_WidgetCircularFill* SecondaryFill; // 0x5b0(0x08)
	struct US_UMGCommonKey* SecondaryKey; // 0x5b8(0x08)
	struct UImage* AmmoIcon; // 0x5c0(0x08)
	struct USizeBox* IconSizeBox; // 0x5c8(0x08)
	struct UTexture2D* AmmoIcons[0xa]; // 0x5d0(0x50)
	enum class ES_ItemType m_itemType; // 0x620(0x01)
	char pad_621[0x27]; // 0x621(0x27)

	void HandleWeaponSlotChanged(enum class ES_WeaponSlot previousWeaponSlot, enum class ES_WeaponSlot currentWeaponSlot); // Function Scavenger.S_WidgetInteract.HandleWeaponSlotChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleQuickItemSlotChanged(enum class ES_EquipmentSlot selectedQuickItemSlot); // Function Scavenger.S_WidgetInteract.HandleQuickItemSlotChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnInteractStop(enum class ES_Interaction interactionType, bool isTimedInteraction, struct AActor* Actor, struct UPrimitiveComponent* Component, int32_t instanceIndex); // Function Scavenger.S_WidgetInteract.HandleOnInteractStop // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnInteractionStateChanged(); // Function Scavenger.S_WidgetInteract.HandleOnInteractionStateChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnInteractionProgressChanged(float ProgressPercentage); // Function Scavenger.S_WidgetInteract.HandleOnInteractionProgressChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool usingGamepad); // Function Scavenger.S_WidgetInteract.HandleOnInputTypeChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleItemStateChanged(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetInteract.HandleItemStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleInventoryChanged(); // Function Scavenger.S_WidgetInteract.HandleInventoryChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInteract.HandleEquipmentItemUnequipped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInteract.HandleEquipmentItemEquipped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemChanged(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInteract.HandleEquipmentItemChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleADSUpdated(bool IsADSOn); // Function Scavenger.S_WidgetInteract.HandleADSUpdated // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInteractableIcon
// Size: 0x540 (Inherited: 0x4b8)
struct US_WidgetInteractableIcon : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct UImage* Image; // 0x4c0(0x08)
	struct UImage* NoPickupImage; // 0x4c8(0x08)
	float IconFadeSpeed; // 0x4d0(0x04)
	char pad_4D4[0xc]; // 0x4d4(0x0c)
	struct UCurveFloat* m_iconOpacityCurve; // 0x4e0(0x08)
	struct UCurveFloat* m_iconSizeCurve; // 0x4e8(0x08)
	char pad_4F0[0x50]; // 0x4f0(0x50)

	void SetWorldLocation(struct FVector InWorldLocation); // Function Scavenger.S_WidgetInteractableIcon.SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNoPickupMaterialEnabled(bool bInIsEnabled); // Function Scavenger.S_WidgetInteractableIcon.SetNoPickupMaterialEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNoPickupMaterial(struct UMaterialInterface* Material); // Function Scavenger.S_WidgetInteractableIcon.SetNoPickupMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaterialScale(float Scale); // Function Scavenger.S_WidgetInteractableIcon.SetMaterialScale // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaterialPosition(struct FVector2D Position); // Function Scavenger.S_WidgetInteractableIcon.SetMaterialPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMaterialOpacity(float Opacity); // Function Scavenger.S_WidgetInteractableIcon.SetMaterialOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIconScale(struct FVector2D IconScale); // Function Scavenger.S_WidgetInteractableIcon.SetIconScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIconMaterial(struct UMaterialInterface* Material); // Function Scavenger.S_WidgetInteractableIcon.SetIconMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDistanceToSizeCurve(struct UCurveFloat* fallOffCurve); // Function Scavenger.S_WidgetInteractableIcon.SetDistanceToSizeCurve // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDistanceToOpacityCurve(struct UCurveFloat* fallOffCurve); // Function Scavenger.S_WidgetInteractableIcon.SetDistanceToOpacityCurve // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FadeOutIcon(float FadeOutDuration); // Function Scavenger.S_WidgetInteractableIcon.FadeOutIcon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FadeInIcon(float FadeInDuration); // Function Scavenger.S_WidgetInteractableIcon.FadeInIcon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventory
// Size: 0x278 (Inherited: 0x278)
struct US_WidgetInventory : US_BaseWidget {
};

// Class Scavenger.S_DragDropOperation
// Size: 0xa0 (Inherited: 0x98)
struct US_DragDropOperation : UDragDropOperation {
	char pad_98[0x8]; // 0x98(0x08)

	void HandleEnded(struct UDragDropOperation* DragDropOperation); // Function Scavenger.S_DragDropOperation.HandleEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCompleted(struct UDragDropOperation* DragDropOperation); // Function Scavenger.S_DragDropOperation.HandleCompleted // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetAutoInventoryDragDrop
// Size: 0x860 (Inherited: 0x850)
struct US_WidgetAutoInventoryDragDrop : US_WidgetInventoryDragDrop {
	struct FName InventoryScreenMenuPageName; // 0x850(0x08)
	char pad_858[0x8]; // 0x858(0x08)

	void HandleMenuPageChanged(struct FName newPageName); // Function Scavenger.S_WidgetAutoInventoryDragDrop.HandleMenuPageChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleMenuOpened(); // Function Scavenger.S_WidgetAutoInventoryDragDrop.HandleMenuOpened // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleMenuClosed(); // Function Scavenger.S_WidgetAutoInventoryDragDrop.HandleMenuClosed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool CanAcceptDrop_BP(enum class ES_InventoryScreenArea SourceType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetAutoInventoryDragDrop.CanAcceptDrop_BP // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryDragVisual
// Size: 0x510 (Inherited: 0x4b8)
struct US_WidgetInventoryDragVisual : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct FS_ItemState m_itemState; // 0x4c0(0x40)
	char pad_500[0x10]; // 0x500(0x10)

	void NotifyTargetChanged(enum class ES_InventoryScreenArea targetAreaType, int32_t TargetId); // Function Scavenger.S_WidgetInventoryDragVisual.NotifyTargetChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySourceInvalidated(); // Function Scavenger.S_WidgetInventoryDragVisual.NotifySourceInvalidated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(enum class ES_InventoryScreenArea sourceAreaType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryDragVisual.NotifyInitialized // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryCategoryHeader
// Size: 0x4e0 (Inherited: 0x4b8)
struct US_WidgetInventoryCategoryHeader : US_WidgetMinimal {
	struct US_WidgetInventoryPanel* m_inventoryPanel; // 0x4b8(0x08)
	struct US_RichTextBlock* CategoryHeaderRichText; // 0x4c0(0x08)
	struct FText CategoryHeaderRichTextStyle; // 0x4c8(0x18)

	void NotifyInitialized(struct US_WidgetInventoryPanel* Panel, struct FText Label); // Function Scavenger.S_WidgetInventoryCategoryHeader.NotifyInitialized // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryCategoryLinearPanel
// Size: 0x560 (Inherited: 0x4b8)
struct US_WidgetInventoryCategoryLinearPanel : US_WidgetMinimal {
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x4b8(0x08)
	struct US_WidgetInventoryPanel* m_inventoryPanel; // 0x4c0(0x08)
	struct US_UMGLinearPanel* m_linearPanel; // 0x4c8(0x08)
	char pad_4D0[0x8]; // 0x4d0(0x08)
	struct US_WidgetInventoryCategoryHeader* m_categoryHeader; // 0x4d8(0x08)
	struct TMap<int32_t, struct US_UMGLinearPanelSlot*> m_mapOfIndexToInventoryItemSlot; // 0x4e0(0x50)
	struct TArray<struct US_WidgetMinimal*> m_emptySlotWidgets; // 0x530(0x10)
	char pad_540[0x8]; // 0x540(0x08)
	struct FName LinearPanelName; // 0x548(0x08)
	struct US_WidgetMinimal* EmptySlotClass; // 0x550(0x08)
	struct US_WidgetInventoryItem* InventoryItemClass; // 0x558(0x08)

	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen, struct US_WidgetInventoryPanel* inventoryPanel, enum class ES_InventoryScreenArea screenAreaType, struct US_WidgetInventoryCategoryHeader* categoryHeader); // Function Scavenger.S_WidgetInventoryCategoryLinearPanel.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryPanel
// Size: 0xa68 (Inherited: 0x850)
struct US_WidgetInventoryPanel : US_WidgetInventoryDragDrop {
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x850(0x08)
	struct UScrollBox* m_panelScrollBox; // 0x858(0x08)
	struct UVerticalBox* m_panelVerticalBox; // 0x860(0x08)
	struct TArray<struct US_WidgetInventoryCategoryHeader*> m_categoryHeaders; // 0x868(0x10)
	struct TArray<struct US_WidgetInventoryCategoryLinearPanel*> m_categoryLinearPanels; // 0x878(0x10)
	struct TMap<int32_t, struct US_WidgetInventoryCategoryLinearPanel*> m_mapOfItemIndexToCategoryLinearPanel; // 0x888(0x50)
	char pad_8D8[0x18]; // 0x8d8(0x18)
	struct FText CategoryLabels[0xe]; // 0x8f0(0x150)
	struct FName TitleTextBlockName; // 0xa40(0x08)
	struct FName PanelScrollBoxName; // 0xa48(0x08)
	struct FName PanelVerticalBoxName; // 0xa50(0x08)
	struct US_WidgetInventoryCategoryHeader* PanelCategoryHeaderClass; // 0xa58(0x08)
	struct US_WidgetInventoryCategoryLinearPanel* PanelCategoryLinearPanelClass; // 0xa60(0x08)

	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen, enum class ES_InventoryScreenArea sourceAreaType); // Function Scavenger.S_WidgetInventoryPanel.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetBackgroundPanel
// Size: 0x850 (Inherited: 0x850)
struct US_WidgetBackgroundPanel : US_WidgetInventoryDragDrop {

	bool CanAcceptDrop_BP(enum class ES_InventoryScreenArea SourceType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetBackgroundPanel.CanAcceptDrop_BP // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetGenericInventoryScreenPanelContainer
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetGenericInventoryScreenPanelContainer : US_WidgetMinimal {
	struct UNamedSlot* InventoryContent; // 0x4b8(0x08)
};

// Class Scavenger.S_WidgetInventoryScreen
// Size: 0x5b8 (Inherited: 0x4b8)
struct US_WidgetInventoryScreen : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnDragStarted; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnDragStopped; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnTooltipClosed; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnTooltipOpening; // 0x4e8(0x10)
	char pad_4F8[0x10]; // 0x4f8(0x10)
	struct US_WidgetInventoryPanel* m_myInventoryPanel; // 0x508(0x08)
	struct US_WidgetQuickItemsPanel* m_quickItemsPanel; // 0x510(0x08)
	struct US_WidgetWeaponsPanel* m_weaponsPanel; // 0x518(0x08)
	struct US_WidgetAmmoPanel* m_ammoPanel; // 0x520(0x08)
	struct US_WidgetResourcesPanel* m_resourcesPanel; // 0x528(0x08)
	struct US_WidgetBackgroundPanel* m_backgroundPanel; // 0x530(0x08)
	char pad_538[0x20]; // 0x538(0x20)
	struct FName MyInventoryPanelName; // 0x558(0x08)
	struct FName EquipmentPanelName; // 0x560(0x08)
	struct FName CurrenciesPanelName; // 0x568(0x08)
	struct US_WidgetGenericInventoryScreenPanelContainer* QuickItemsContainer; // 0x570(0x08)
	struct US_WidgetGenericInventoryScreenPanelContainer* WeaponsContainer; // 0x578(0x08)
	struct US_WidgetGenericInventoryScreenPanelContainer* AmmoContainer; // 0x580(0x08)
	struct US_WidgetGenericInventoryScreenPanelContainer* ResourcesContainer; // 0x588(0x08)
	struct US_WidgetInventoryTooltip* FocusNavigationTooltip; // 0x590(0x08)
	struct FName BackgroundPanelName; // 0x598(0x08)
	struct TArray<struct US_WidgetGenericInventoryScreenItem*> m_listOfEquippableItems; // 0x5a0(0x10)
	char pad_5B0[0x8]; // 0x5b0(0x08)

	void NotifyTooltipOpening_BP(struct US_WidgetInventoryDragDrop* OwningWidget, struct US_WidgetInventoryTooltip* Tooltip); // Function Scavenger.S_WidgetInventoryScreen.NotifyTooltipOpening_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTooltipClosed_BP(struct US_WidgetInventoryDragDrop* OwningWidget, struct US_WidgetInventoryTooltip* Tooltip); // Function Scavenger.S_WidgetInventoryScreen.NotifyTooltipClosed_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragStopped_BP(struct US_WidgetInventoryDragDrop* SourceWidget, struct US_WidgetInventoryDragVisual* dragVisual); // Function Scavenger.S_WidgetInventoryScreen.NotifyDragStopped_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDragStarted_BP(struct US_WidgetInventoryDragDrop* SourceWidget, struct US_WidgetInventoryDragVisual* dragVisual); // Function Scavenger.S_WidgetInventoryScreen.NotifyDragStarted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleUIActionReleased(enum class ES_UIAction ActionType); // Function Scavenger.S_WidgetInventoryScreen.HandleUIActionReleased // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleUIActionPressed(enum class ES_UIAction ActionType); // Function Scavenger.S_WidgetInventoryScreen.HandleUIActionPressed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleInventoryItemRemoved(int32_t SlotIndex, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleInventoryItemRemoved // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleInventoryItemChanged(int32_t SlotIndex, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleInventoryItemChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleInventoryItemAdded(int32_t SlotIndex, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleInventoryItemAdded // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemUnequipped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleEquipmentItemUnequipped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemEquipped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleEquipmentItemEquipped // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleEquipmentItemChanged(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryScreen.HandleEquipmentItemChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	bool CanUnequipItem(enum class ES_InventoryScreenArea sourceArea, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryScreen.CanUnequipItem // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanEquipItemWithDetails(enum class ES_InventoryScreenArea sourceArea, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata, enum class ES_ResultOfEquipping outResultOfEquipping, enum class ES_EquipmentSlot outEquipmentSlot, int32_t TargetId); // Function Scavenger.S_WidgetInventoryScreen.CanEquipItemWithDetails // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanEquipItem(enum class ES_InventoryScreenArea sourceArea, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata, int32_t TargetId); // Function Scavenger.S_WidgetInventoryScreen.CanEquipItem // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanDropItem(enum class ES_InventoryScreenArea sourceArea, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryScreen.CanDropItem // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryStateHeader
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetInventoryStateHeader : US_WidgetMinimal {
	int32_t InventoryStateIndex[0x8]; // 0x4b8(0x20)
	struct FDataTableRowHandle RestrictionFormatHandle; // 0x4d8(0x10)
	struct US_UMGWidgetSwitcher* InventoryStateSwitcher; // 0x4e8(0x08)
	struct US_RichTextBlock* Restriction; // 0x4f0(0x08)
};

// Class Scavenger.S_WidgetInventoryToastItem
// Size: 0x5d8 (Inherited: 0x4b8)
struct US_WidgetInventoryToastItem : US_WidgetMinimal {
	struct UTexture2D* ActionIcons[0x4]; // 0x4b8(0x20)
	struct FLinearColor ActionTints[0x4]; // 0x4d8(0x40)
	struct FDataTableRowHandle MessageFormatHandles[0x2]; // 0x518(0x20)
	struct UImage* ActionIcon; // 0x538(0x08)
	struct US_RichTextBlock* Message; // 0x540(0x08)
	struct UImage* Icon; // 0x548(0x08)
	struct USizeBox* IconSizeBox; // 0x550(0x08)
	struct UBorder* RarityBacker; // 0x558(0x08)
	struct UPanelWidget* ActionPanel; // 0x560(0x08)
	struct UBorder* MessageTintBorder; // 0x568(0x08)
	struct UImage* RarityStrip; // 0x570(0x08)
	struct FS_InventoryToastItem m_toastItem; // 0x578(0x50)
	char pad_5C8[0x10]; // 0x5c8(0x10)

	void NotifyToastItemCleared(); // Function Scavenger.S_WidgetInventoryToastItem.NotifyToastItemCleared // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNewToastItemShown(struct FS_InventoryToastItem toastItem); // Function Scavenger.S_WidgetInventoryToastItem.NotifyNewToastItemShown // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetInventoryToastPanel
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetInventoryToastPanel : US_WidgetMinimal {
	int32_t MaxToastItems; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	SoftClassProperty ToastItemClass; // 0x4c0(0x28)
	struct UVerticalBox* Panel; // 0x4e8(0x08)
	struct TArray<struct FS_InventoryToastItem> m_activeToastItems; // 0x4f0(0x10)
	char pad_500[0x8]; // 0x500(0x08)

	void NotifyNewToastItemShown(struct FS_InventoryToastItem toastItem); // Function Scavenger.S_WidgetInventoryToastPanel.NotifyNewToastItemShown // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemRemoved(struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnInventoryItemRemoved // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemChanged(struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnInventoryItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInventoryItemAdded(struct FS_ItemState ItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnInventoryItemAdded // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnEquipmentItemUnequipped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnEquipmentItemUnequipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnEquipmentItemEquipped(enum class ES_EquipmentSlot SlotType, struct FS_ItemState ItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnEquipmentItemEquipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnEquipmentItemChanged(enum class ES_EquipmentSlot SlotType, struct FS_ItemState OldItemState, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetInventoryToastPanel.HandleOnEquipmentItemChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTooltip
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetTooltip : US_WidgetMinimal {
};

// Class Scavenger.S_WidgetInventoryTooltip
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetInventoryTooltip : US_WidgetTooltip {
	struct US_WidgetInventoryScreen* m_inventoryScreen; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)
	struct FS_ItemState m_itemState; // 0x4c8(0x40)
	struct US_WidgetInventoryDragDrop* m_owningWidget; // 0x508(0x08)
	char pad_510[0x8]; // 0x510(0x08)

	void NotifyUIActionReleased(enum class ES_UIAction ActionType); // Function Scavenger.S_WidgetInventoryTooltip.NotifyUIActionReleased // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyUIActionPressed(enum class ES_UIAction ActionType); // Function Scavenger.S_WidgetInventoryTooltip.NotifyUIActionPressed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySwapAvailability(bool isSwapAvailable); // Function Scavenger.S_WidgetInventoryTooltip.NotifySwapAvailability // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySourceInvalidated(); // Function Scavenger.S_WidgetInventoryTooltip.NotifySourceInvalidated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySourceChanged(enum class ES_InventoryScreenArea sourceAreaType, int32_t sourceId, struct FS_ItemState ItemState, struct FS_ItemMetadata itemMetadata); // Function Scavenger.S_WidgetInventoryTooltip.NotifySourceChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyScrapProgressChanged(float percentComplete); // Function Scavenger.S_WidgetInventoryTooltip.NotifyScrapProgressChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnOpening(bool IsValid); // Function Scavenger.S_WidgetInventoryTooltip.NotifyOnOpening // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnClosed(); // Function Scavenger.S_WidgetInventoryTooltip.NotifyOnClosed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInventoryScreenChanged(struct US_WidgetInventoryScreen* inventoryScreen); // Function Scavenger.S_WidgetInventoryTooltip.NotifyInventoryScreenChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(struct US_WidgetInventoryScreen* inventoryScreen, struct US_WidgetInventoryDragDrop* OwningWidget); // Function Scavenger.S_WidgetInventoryTooltip.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyDropProgressChanged(float percentComplete); // Function Scavenger.S_WidgetInventoryTooltip.NotifyDropProgressChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetItemDragVisual
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetItemDragVisual : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct US_ItemData* m_itemData; // 0x4c0(0x08)
	struct US_RichTextBlock* ItemCountRichText; // 0x4c8(0x08)
	struct UImage* ItemIcon; // 0x4d0(0x08)
	struct UBorder* BackgroundBorder; // 0x4d8(0x08)
	struct FText ItemCountRichTextLabel; // 0x4e0(0x18)

	struct US_ItemData* GetItemData(); // Function Scavenger.S_WidgetItemDragVisual.GetItemData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetItemCount(); // Function Scavenger.S_WidgetItemDragVisual.GetItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLandingPage
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetLandingPage : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
};

// Class Scavenger.S_WidgetLinearPanel
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetLinearPanel : US_WidgetMinimal {
	struct US_UMGLinearPanel* LinearPanel; // 0x4b8(0x08)
};

// Class Scavenger.S_WidgetLoadoutAbilityInfo
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetLoadoutAbilityInfo : US_WidgetMinimal {
	struct FDataTableRowHandle NameFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x4c8(0x10)
	struct US_RichTextBlock* Ability; // 0x4d8(0x08)
	struct US_RichTextBlock* Description; // 0x4e0(0x08)
	struct UImage* AbilityIcon; // 0x4e8(0x08)
	struct USizeBox* AbilitySizeBox; // 0x4f0(0x08)
	char pad_4F8[0x10]; // 0x4f8(0x10)
};

// Class Scavenger.S_WidgetLoadoutOptionItem
// Size: 0x5c0 (Inherited: 0x4b8)
struct US_WidgetLoadoutOptionItem : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnLoadoutOptionItemClicked; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnLoadoutOptionItemHovered; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnLoadoutOptionItemRightClicked; // 0x4d8(0x10)
	bool bOverrideWidth; // 0x4e8(0x01)
	char pad_4E9[0x3]; // 0x4e9(0x03)
	float WidthOverride; // 0x4ec(0x04)
	bool bOverrideHeight; // 0x4f0(0x01)
	char pad_4F1[0x3]; // 0x4f1(0x03)
	float HeightOverride; // 0x4f4(0x04)
	bool bHideRarityBar; // 0x4f8(0x01)
	char pad_4F9[0x3]; // 0x4f9(0x03)
	int32_t LoadoutStateIndex[0x3]; // 0x4fc(0x0c)
	struct FDataTableRowHandle NameFormatHandle; // 0x508(0x10)
	struct FDataTableRowHandle TypeFormatHandle; // 0x518(0x10)
	struct FDataTableRowHandle EmptyItemNameFormatHandle; // 0x528(0x10)
	struct US_RichTextBlock* Name; // 0x538(0x08)
	struct US_RichTextBlock* Type; // 0x540(0x08)
	struct UImage* ItemIcon; // 0x548(0x08)
	struct UImage* RarityBar; // 0x550(0x08)
	struct US_UMGLinearPanel* DamageTypes; // 0x558(0x08)
	struct US_UMGWidgetSwitcher* LoadoutStateSwitcher; // 0x560(0x08)
	struct USizeBox* ItemSizeBox; // 0x568(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x570(0x08)
	struct USizeBox* OptionSizeBox; // 0x578(0x08)
	struct US_UMGWidgetSwitcher* ActiveStateSwitcher; // 0x580(0x08)
	struct US_WidgetRestrictionStateSwitcher* RestrictionStateSwitcher; // 0x588(0x08)
	char pad_590[0x30]; // 0x590(0x30)

	void HandleOnUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLoadoutOptionItem.HandleOnUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLoadoutOptionItem.HandleOnHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterLoadoutChanged(struct AS_PlayerControllerBase* Controller); // Function Scavenger.S_WidgetLoadoutOptionItem.HandleOnCharacterLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveRightClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLoadoutOptionItem.HandleOnActiveRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLoadoutOptionItem.HandleOnActiveClicked // (Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLoadoutCategory
// Size: 0x5d8 (Inherited: 0x5c0)
struct US_WidgetLoadoutCategory : US_WidgetLoadoutOptionItem {
	struct FMulticastInlineDelegate OnLoadoutCategoryTileClicked; // 0x5c0(0x10)
	enum class ES_LoadoutSlotType loadoutSlotType; // 0x5d0(0x01)
	bool bUseLoadoutSlotIndex; // 0x5d1(0x01)
	char pad_5D2[0x2]; // 0x5d2(0x02)
	int32_t LoadoutSlotIndex; // 0x5d4(0x04)
};

// Class Scavenger.S_WidgetLoadoutOptionInfo
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetLoadoutOptionInfo : US_WidgetMinimal {
	float NameWrapWidth; // 0x4b8(0x04)
	bool bHideRarityString; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	struct FDataTableRowHandle NameFormatHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle RarityFormatHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x4e0(0x10)
	struct US_RichTextBlock* Name; // 0x4f0(0x08)
	struct US_RichTextBlock* Type; // 0x4f8(0x08)
	struct UBorder* RarityBorder; // 0x500(0x08)
	struct US_RichTextBlock* Description; // 0x508(0x08)
	struct US_WidgetCosmeticSetBadge* CosmeticSetBadge; // 0x510(0x08)
};

// Class Scavenger.S_WidgetLoadoutOptionScreen
// Size: 0x530 (Inherited: 0x4b8)
struct US_WidgetLoadoutOptionScreen : US_WidgetMinimal {
	struct US_WidgetLoadoutOptionInfo* OptionInfo; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)
	struct TArray<struct FS_OnlineItemMetadata> m_filteredItems; // 0x4c8(0x10)
	struct FS_CharacterLoadout m_currentLoadout; // 0x4d8(0x50)
	char pad_528[0x8]; // 0x528(0x08)

	void NotifyPlayersLoadoutWasChanged(); // Function Scavenger.S_WidgetLoadoutOptionScreen.NotifyPlayersLoadoutWasChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetLoadoutOptionScreen.HandleOnPlayerInventoryRefreshed // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutOptionItemHovered(struct FName ItemId); // Function Scavenger.S_WidgetLoadoutOptionScreen.HandleOnLoadoutOptionItemHovered // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutOptionItemClicked(struct FName ItemId); // Function Scavenger.S_WidgetLoadoutOptionScreen.HandleOnLoadoutOptionItemClicked // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnCharacterLoadoutChanged(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_WidgetLoadoutOptionScreen.HandleOnCharacterLoadoutChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyEventCountdown
// Size: 0x570 (Inherited: 0x4b8)
struct US_WidgetLobbyEventCountdown : US_WidgetMinimal {
	enum class ES_LobbyEventTimerMode Mode; // 0x4b8(0x01)
	char pad_4B9[0x7]; // 0x4b9(0x07)
	struct FDataTableRowHandle EventLiveHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle EventFullHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle HeaderHandle; // 0x4e0(0x10)
	struct FDataTableRowHandle TimerFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle PartFormatHandle; // 0x500(0x10)
	struct UOverlay* EventStatusOverlay; // 0x510(0x08)
	struct US_RichTextBlock* EventStatus; // 0x518(0x08)
	struct UOverlay* CountdownOverlay; // 0x520(0x08)
	struct US_RichTextBlock* Header; // 0x528(0x08)
	struct US_RichTextBlock* Timer; // 0x530(0x08)
	struct US_RichTextBlock* Days; // 0x538(0x08)
	struct US_RichTextBlock* Hours; // 0x540(0x08)
	struct US_RichTextBlock* Minutes; // 0x548(0x08)
	struct US_RichTextBlock* Seconds; // 0x550(0x08)
	char pad_558[0x18]; // 0x558(0x18)

	void UpdateStatusText(bool eventIsFull); // Function Scavenger.S_WidgetLobbyEventCountdown.UpdateStatusText // (Final|Native|Private|Const) // @ game+0xffff8008e4a10000
	void UpdateCountdownText(struct FTimespan remaining); // Function Scavenger.S_WidgetLobbyEventCountdown.UpdateCountdownText // (Final|Native|Private|HasDefaults|Const) // @ game+0xffff8008e4a10000
	void HandleScheduleUpdated(struct US_OnlineSocialHubScheduler* scheduler); // Function Scavenger.S_WidgetLobbyEventCountdown.HandleScheduleUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyGameMode
// Size: 0x518 (Inherited: 0x4b8)
struct US_WidgetLobbyGameMode : US_WidgetMinimal {
	struct FDataTableRowHandle GameModeHandle; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnSelected; // 0x4c8(0x10)
	struct US_RichTextBlock* GameModeHeader; // 0x4d8(0x08)
	struct US_RichTextBlock* Brief; // 0x4e0(0x08)
	struct US_RichTextBlock* Description; // 0x4e8(0x08)
	struct UImage* Icon; // 0x4f0(0x08)
	struct UImage* BackgroundSmall; // 0x4f8(0x08)
	struct UImage* BackgroundLarge; // 0x500(0x08)
	struct US_WidgetLobbyEventCountdown* CountdownTimer; // 0x508(0x08)
	struct US_WidgetCommonScavengerButton* SelectButton; // 0x510(0x08)

	void HandleSelected(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLobbyGameMode.HandleSelected // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyGameModeOptions
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetLobbyGameModeOptions : US_WidgetMinimal {
	struct UPanelWidget* ModesPanel; // 0x4b8(0x08)
	struct FMulticastInlineDelegate OnSelected; // 0x4c0(0x10)

	void HandleModeSelected(struct FDataTableRowHandle GameModeHandle); // Function Scavenger.S_WidgetLobbyGameModeOptions.HandleModeSelected // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void Close(); // Function Scavenger.S_WidgetLobbyGameModeOptions.Close // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyGameModeSelector
// Size: 0x528 (Inherited: 0x4b8)
struct US_WidgetLobbyGameModeSelector : US_WidgetMinimal {
	struct FDataTableRowHandle DefaultGameModeHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle DefaultEventGameModeHandle; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnGameModeSet; // 0x4d8(0x10)
	struct US_RichTextBlock* GameModeHeader; // 0x4e8(0x08)
	struct UImage* Icon; // 0x4f0(0x08)
	struct UImage* BackgroundSmall; // 0x4f8(0x08)
	struct UImage* BackgroundLarge; // 0x500(0x08)
	struct US_WidgetCommonScavengerButton* GameModeButton; // 0x508(0x08)
	struct US_RichTextBlock* ChangeGameModeText; // 0x510(0x08)
	char pad_518[0x10]; // 0x518(0x10)

	void UpdateSchedulingState(struct US_OnlineSocialHubScheduler* scheduler); // Function Scavenger.S_WidgetLobbyGameModeSelector.UpdateSchedulingState // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SetGameMode(struct FDataTableRowHandle GameModeHandle); // Function Scavenger.S_WidgetLobbyGameModeSelector.SetGameMode // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SaveAndSetGameMode(struct FDataTableRowHandle GameModeHandle); // Function Scavenger.S_WidgetLobbyGameModeSelector.SaveAndSetGameMode // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOptionsWidgetCreated(struct US_WidgetMinimal* AddedWidget); // Function Scavenger.S_WidgetLobbyGameModeSelector.HandleOptionsWidgetCreated // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPartyPlayerStateChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetLobbyGameModeSelector.HandleOnPartyPlayerStateChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnConnectionStateChanged(); // Function Scavenger.S_WidgetLobbyGameModeSelector.HandleOnConnectionStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool GetSelectedGameMode(struct FS_GameModeMetadata MetaData); // Function Scavenger.S_WidgetLobbyGameModeSelector.GetSelectedGameMode // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyNameplate
// Size: 0x638 (Inherited: 0x4b8)
struct US_WidgetLobbyNameplate : US_WidgetMinimal {
	struct FDataTableRowHandle AccountLevelFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle PlayerNameFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle ExplorerLevelFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle ExplorerNameFormatHandle; // 0x4e8(0x10)
	struct UImage* PartyLeaderIcon; // 0x4f8(0x08)
	struct US_RichTextBlock* AccountLevel; // 0x500(0x08)
	struct US_RichTextBlock* PlayerName; // 0x508(0x08)
	struct US_WidgetSocialNameplate* SocialNameplateButton; // 0x510(0x08)
	struct US_WidgetCosmeticTitle* CosmeticTitle; // 0x518(0x08)
	struct US_WidgetVoiceActivityButton* VoiceActivityButton; // 0x520(0x08)
	struct FS_LobbyPlayer m_currentLobbyPlayer; // 0x528(0x108)
	struct US_FriendsManager* m_friendsManager; // 0x630(0x08)

	void HandleOnFriendsRosterUpdated(); // Function Scavenger.S_WidgetLobbyNameplate.HandleOnFriendsRosterUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetLobbyPage
// Size: 0x540 (Inherited: 0x4b8)
struct US_WidgetLobbyPage : US_WidgetMinimal {
	SoftClassProperty BasicChallengeListWidgetClass; // 0x4b8(0x28)
	SoftClassProperty ChallengesCarouselWidgetClass; // 0x4e0(0x28)
	struct UHorizontalBox* ChallengeWidgetContainer; // 0x508(0x08)
	struct US_WidgetCarouselBase* LobbyCarousel; // 0x510(0x08)
	struct US_WidgetCarouselBase* MetaLeaderboardCarousel; // 0x518(0x08)
	struct US_WidgetCommonScavengerButton* MatchResultsButton; // 0x520(0x08)
	struct US_WidgetCarouselBase* m_focusedCarousel; // 0x528(0x08)
	struct US_WidgetChallengeList* m_challengeListWidget; // 0x530(0x08)
	struct US_WidgetChallengeCarousel* m_challengeCarousel; // 0x538(0x08)

	void OnChallengeClassLoaded(); // Function Scavenger.S_WidgetLobbyPage.OnChallengeClassLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnReleaseCycleInput(struct US_WidgetCarouselBase* Carousel); // Function Scavenger.S_WidgetLobbyPage.HandleOnReleaseCycleInput // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPostMatchPhasesEnded(); // Function Scavenger.S_WidgetLobbyPage.HandleOnPostMatchPhasesEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnMatchResultsButtonDispatchOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetLobbyPage.HandleOnMatchResultsButtonDispatchOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnConsumeCycleInput(struct US_WidgetCarouselBase* Carousel); // Function Scavenger.S_WidgetLobbyPage.HandleOnConsumeCycleInput // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMainMenuNavBar
// Size: 0x580 (Inherited: 0x580)
struct US_WidgetMainMenuNavBar : US_WidgetNavBar {

	int32_t RemoveButton(struct US_WidgetCommonScavengerButton* buttonToRemove); // Function Scavenger.S_WidgetMainMenuNavBar.RemoveButton // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMap
// Size: 0xb78 (Inherited: 0x4b8)
struct US_WidgetMap : US_WidgetMinimal {
	struct US_WidgetMapIcon* MapIconWidgetClasses[0x9]; // 0x4b8(0x48)
	struct US_WidgetMapIcon* KRADLEnemyIconClasses[0xb]; // 0x500(0x58)
	struct TSet<enum class ES_MapIconUse> NoIconWidgetIconTypes; // 0x558(0x50)
	bool bRenderStormsInMaterial; // 0x5a8(0x01)
	char pad_5A9[0x3]; // 0x5a9(0x03)
	float GutterWidthPercentage; // 0x5ac(0x04)
	struct UCanvasPanel* MapCanvasPanel; // 0x5b0(0x08)
	float PanningSpeed; // 0x5b8(0x04)
	enum class EEasingFunc PanningEasingFunction; // 0x5bc(0x01)
	char pad_5BD[0x3]; // 0x5bd(0x03)
	float PanningCurveExponent; // 0x5c0(0x04)
	float MousePanningMultiplier; // 0x5c4(0x04)
	float ZoomSpeed; // 0x5c8(0x04)
	enum class EEasingFunc ZoomEasingFunction; // 0x5cc(0x01)
	char pad_5CD[0x3]; // 0x5cd(0x03)
	float ZoomCurveExponent; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)
	struct UTexture2D* CollapsingStormNoiseTexture; // 0x5d8(0x08)
	struct UTexture2D* RoamingStormNoiseTexture; // 0x5e0(0x08)
	struct UTexture2D* StormPatternTexture; // 0x5e8(0x08)
	struct FLinearColor CollapsingStormPatternColor; // 0x5f0(0x10)
	struct FLinearColor RoamingStormPatternColor; // 0x600(0x10)
	struct FLinearColor CollapsingRegionPatternColor; // 0x610(0x10)
	struct FLinearColor CollapsingStormNoiseColor; // 0x620(0x10)
	struct FLinearColor CollapsingStormBaseColor; // 0x630(0x10)
	struct FLinearColor RoamingStormBaseColor; // 0x640(0x10)
	struct FLinearColor ScannerBaseColor; // 0x650(0x10)
	struct FLinearColor RoamingStormNoiseColor; // 0x660(0x10)
	struct FLinearColor NextCollapsingStormBorderColor; // 0x670(0x10)
	struct FLinearColor RoamingStormBorderColor; // 0x680(0x10)
	struct FLinearColor LineToSafetyColor; // 0x690(0x10)
	struct FLinearColor PlayerHotzoneFillColor; // 0x6a0(0x10)
	struct FLinearColor PlayerHotzoneOutlineColor; // 0x6b0(0x10)
	float PlayerHotzoneOutlineThickness; // 0x6c0(0x04)
	float ScannerOutlineSize; // 0x6c4(0x04)
	float PatternScale; // 0x6c8(0x04)
	float WindPatternSteps; // 0x6cc(0x04)
	float WindScale; // 0x6d0(0x04)
	float WindPatternTotalFrames; // 0x6d4(0x04)
	float WindPatternFramesOffset; // 0x6d8(0x04)
	float WindPatternPercentFramesForFadeOut; // 0x6dc(0x04)
	float WindPatternPercentFramesForLoop; // 0x6e0(0x04)
	float WindScrollingSpeed; // 0x6e4(0x04)
	float RoamingStormOutlineSize; // 0x6e8(0x04)
	float CollapsingStormOutlineSize; // 0x6ec(0x04)
	float NextCollapsingStormOutlineSize; // 0x6f0(0x04)
	int32_t InitialZoomLevelIndex; // 0x6f4(0x04)
	float GlobalMinimapIconScale; // 0x6f8(0x04)
	float MinimapIconScale[0x9]; // 0x6fc(0x24)
	float GamepadAxisThreshold; // 0x720(0x04)
	float GamepadZoomSpeed; // 0x724(0x04)
	enum class ES_MapMode MapMode; // 0x728(0x01)
	char pad_729[0x3]; // 0x729(0x03)
	float TeammateIconScale; // 0x72c(0x04)
	float PingMouseMoveThreshold; // 0x730(0x04)
	float MouseMoveThreshold; // 0x734(0x04)
	char pad_738[0x8]; // 0x738(0x08)
	struct UVerticalBox* LeftBar; // 0x740(0x08)
	struct UHorizontalBox* UpperBar; // 0x748(0x08)
	struct UVerticalBox* LeftBar_Editor; // 0x750(0x08)
	struct UHorizontalBox* UpperBar_Editor; // 0x758(0x08)
	struct FBox2D MapIconBounds; // 0x760(0x14)
	bool CapIconsToBounds; // 0x774(0x01)
	char pad_775[0x3]; // 0x775(0x03)
	struct TArray<float> ZoomLevels; // 0x778(0x10)
	struct TArray<float> IconZoomLevelScale; // 0x788(0x10)
	int32_t EncounterLabelZoomLevel; // 0x798(0x04)
	bool bEnableDynamicMinimapZoom; // 0x79c(0x01)
	char pad_79D[0x3]; // 0x79d(0x03)
	int32_t EncounterZoomLevel; // 0x7a0(0x04)
	int32_t VehicleZoomLevel; // 0x7a4(0x04)
	int32_t DefaultZoomLevel; // 0x7a8(0x04)
	char pad_7AC[0x4]; // 0x7ac(0x04)
	struct US_WidgetMapIcon* LargeLabelIconWidgetClass; // 0x7b0(0x08)
	struct UImage* RadarScanImage; // 0x7b8(0x08)
	struct UImage* EditorGridOverlay; // 0x7c0(0x08)
	struct FVector2D MinimapGutterScale; // 0x7c8(0x08)
	float GamepadTranslationScale; // 0x7d0(0x04)
	float GamepadTranslationMinThreshold; // 0x7d4(0x04)
	struct FVector2D ZoomIconSizes[0x9]; // 0x7d8(0x48)
	struct FVector2D IconSizeScale; // 0x820(0x08)
	char AllowPlayerControlledZoom : 1; // 0x828(0x01)
	char pad_828_1 : 7; // 0x828(0x01)
	char pad_829[0x7]; // 0x829(0x07)
	struct URetainerBox* RetainerBox; // 0x830(0x08)
	struct UCanvasPanel* MinimapCanvasPanel; // 0x838(0x08)
	struct UCanvasPanel* IconPanelClip; // 0x840(0x08)
	struct UCanvasPanel* IconPanelNoClip; // 0x848(0x08)
	struct UCanvasPanel* MinimapGutterCanvas; // 0x850(0x08)
	struct TMap<int32_t, int32_t> m_mapIconIdToSlotID; // 0x858(0x50)
	struct TMap<struct US_WidgetMapIcon*, struct FS_MapIconFreeSlotsArray> m_mapIconWidgetFreeSlots; // 0x8a8(0x50)
	struct TArray<struct US_WidgetMapIcon*> m_mapIconWidgets; // 0x8f8(0x10)
	struct TSet<struct US_WidgetMapIcon*> m_iconsToUpdate; // 0x908(0x50)
	struct UCanvasPanel* MapContainer; // 0x958(0x08)
	struct UWidget* m_mapLayers[0x6]; // 0x960(0x30)
	struct UCanvasPanel* CoreCanvas; // 0x990(0x08)
	struct UInvalidationBox* ClippingInvalidationBox; // 0x998(0x08)
	char pad_9A0[0x8]; // 0x9a0(0x08)
	struct FVector2D m_cachedMapSize; // 0x9a8(0x08)
	char pad_9B0[0x8]; // 0x9b0(0x08)
	struct FVector2D m_lastOrigin; // 0x9b8(0x08)
	struct FVector2D m_focusOrigin; // 0x9c0(0x08)
	struct FVector2D m_currentOrigin; // 0x9c8(0x08)
	struct FVector2D m_lastMouseOffset; // 0x9d0(0x08)
	struct FVector2D m_cachedAbsoluteCenter; // 0x9d8(0x08)
	char pad_9E0[0xa0]; // 0x9e0(0xa0)
	struct UTexture2DDynamic* m_mapStormDataTex; // 0xa80(0x08)
	struct UTexture2DDynamic* m_globalMapDataTex; // 0xa88(0x08)
	struct UTexture2DDynamic* m_kradlMapDataTex; // 0xa90(0x08)
	struct UTexture2DDynamic* m_kradlBlipOffsetTexture; // 0xa98(0x08)
	char pad_AA0[0xd8]; // 0xaa0(0xd8)

	void ZoomMapInstant(float zoomAmount); // Function Scavenger.S_WidgetMap.ZoomMapInstant // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ZoomMap(float zoomAmount); // Function Scavenger.S_WidgetMap.ZoomMap // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateZoom(float DeltaTime); // Function Scavenger.S_WidgetMap.UpdateZoom // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void UpdatePanning(float DeltaTime); // Function Scavenger.S_WidgetMap.UpdatePanning // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void ToggleEditorMapCoords_BP(int32_t cheatValue); // Function Scavenger.S_WidgetMap.ToggleEditorMapCoords_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetMapIconOpacity(int32_t iconID, float Opacity); // Function Scavenger.S_WidgetMap.SetMapIconOpacity // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapIconFadeOut(int32_t ID, float fadeOutTime, float Delay); // Function Scavenger.S_WidgetMap.SetMapIconFadeOut // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	float ProjectWorldRadiusToMaskSize(float WorldRadius); // Function Scavenger.S_WidgetMap.ProjectWorldRadiusToMaskSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void PanMapInstant(struct FVector2D NewPosition); // Function Scavenger.S_WidgetMap.PanMapInstant // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PanMap(struct FVector2D NewPosition); // Function Scavenger.S_WidgetMap.PanMap // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnVehicleExited(struct USC_Seat* Seat); // Function Scavenger.S_WidgetMap.OnVehicleExited // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnVehicleEntered(struct USC_Seat* Seat); // Function Scavenger.S_WidgetMap.OnVehicleEntered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnMapRadarEnd(int32_t RadarID); // Function Scavenger.S_WidgetMap.OnMapRadarEnd // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapRadarBegin(struct FS_KRADLRadarSettings radarSettings, struct FS_KRADLRadarClientData clientRadarData); // Function Scavenger.S_WidgetMap.OnMapRadarBegin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataTransformChange(struct FS_MapDisplayData MapData); // Function Scavenger.S_WidgetMap.OnMapDataTransformChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataRemove(int32_t Index); // Function Scavenger.S_WidgetMap.OnMapDataRemove // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataLocationChange(struct FS_MapDisplayData MapData); // Function Scavenger.S_WidgetMap.OnMapDataLocationChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataDirectionChange(struct FS_MapDisplayData MapData); // Function Scavenger.S_WidgetMap.OnMapDataDirectionChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataChange(struct FS_MapDisplayData MapData); // Function Scavenger.S_WidgetMap.OnMapDataChange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnMapDataAdd(struct FS_MapDisplayData mapIconInfo); // Function Scavenger.S_WidgetMap.OnMapDataAdd // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnLocationExited(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_WidgetMap.OnLocationExited // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnLocationEntered(struct FS_NamedLocationMetadata LocationData); // Function Scavenger.S_WidgetMap.OnLocationEntered // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void OnInputTypeChanged(bool bUsingGamepad); // Function Scavenger.S_WidgetMap.OnInputTypeChanged // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnGameplayMenuOpened(); // Function Scavenger.S_WidgetMap.OnGameplayMenuOpened // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnGameplayMenuClosed(); // Function Scavenger.S_WidgetMap.OnGameplayMenuClosed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleSetMapOverheadCamera(struct AS_OverheadMapCamera* overheadMapCamera); // Function Scavenger.S_WidgetMap.HandleSetMapOverheadCamera // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct AS_OverheadMapCamera* GetOverheadMapCamera(); // Function Scavenger.S_WidgetMap.GetOverheadMapCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetMapImageSize(); // Function Scavenger.S_WidgetMap.GetMapImageSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void FocusOnOwningPlayer(); // Function Scavenger.S_WidgetMap.FocusOnOwningPlayer // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMapIcon
// Size: 0x6e8 (Inherited: 0x4b8)
struct US_WidgetMapIcon : US_WidgetMinimal {
	bool bIsPingable; // 0x4b8(0x01)
	bool bOverrideTransformSetInMaterial; // 0x4b9(0x01)
	char pad_4BA[0x6]; // 0x4ba(0x06)
	struct FText RichTextTag; // 0x4c0(0x18)
	struct FText MinimapRichTextTag; // 0x4d8(0x18)
	struct FText EncounterTextTag; // 0x4f0(0x18)
	struct US_RichTextBlock* richTextLabel; // 0x508(0x08)
	struct US_RichTextBlock* EncounterTextLabel; // 0x510(0x08)
	struct FVector2D UImageSizeOffsets[0x2]; // 0x518(0x10)
	struct UImage* UImages[0x2]; // 0x528(0x10)
	struct UImage* IMG_PlayerIcon; // 0x538(0x08)
	struct UImage* IMG_ContextualPingIcon; // 0x540(0x08)
	struct USizeBox* IconSizeBox; // 0x548(0x08)
	struct USizeBox* ZoomIconSizeBox; // 0x550(0x08)
	struct USizeBox* LabelSizeBox; // 0x558(0x08)
	struct UImage* ZoomIcon; // 0x560(0x08)
	struct USizeBox* ContextualIconScaleBox; // 0x568(0x08)
	struct UMaterialInterface* DefaultIconMaterial; // 0x570(0x08)
	struct UMaterialInterface* retainedMaterial; // 0x578(0x08)
	struct TMap<struct FName, struct UWidgetAnimation*> Animations; // 0x580(0x50)
	float ZoomLevel; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)
	struct FS_MapDisplayData CachedMapData; // 0x5d8(0x78)
	struct UCanvasPanel* CanvasPanel; // 0x650(0x08)
	struct URetainerBox* RetainerBox; // 0x658(0x08)
	char pad_660[0x8]; // 0x660(0x08)
	struct USoundBase* MapPingSound; // 0x668(0x08)
	char pad_670[0x58]; // 0x670(0x58)
	struct FS_PingItemHandle m_pingItemHandle; // 0x6c8(0x04)
	char pad_6CC[0x1c]; // 0x6cc(0x1c)

	bool UpdateRotation(float DeltaTime); // Function Scavenger.S_WidgetMapIcon.UpdateRotation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool UpdatePosition(float DeltaTime); // Function Scavenger.S_WidgetMapIcon.UpdatePosition // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool UpdateOpacity(float DeltaTime); // Function Scavenger.S_WidgetMapIcon.UpdateOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateFromMapData(struct FS_MapDisplayData MapData, enum class ES_MapMode MapMode); // Function Scavenger.S_WidgetMapIcon.UpdateFromMapData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetZoom(float ZoomLevel); // Function Scavenger.S_WidgetMapIcon.SetZoom // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUpIcon(bool bIsNewIcon); // Function Scavenger.S_WidgetMapIcon.SetUpIcon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSizeScalar(float Scalar); // Function Scavenger.S_WidgetMapIcon.SetSizeScalar // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSize(struct FVector2D Size); // Function Scavenger.S_WidgetMapIcon.SetSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRotation(float Rotation); // Function Scavenger.S_WidgetMapIcon.SetRotation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPosition(struct FVector2D Position); // Function Scavenger.S_WidgetMapIcon.SetPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOpacityFade(float Opacity, float Time, float DelayTime); // Function Scavenger.S_WidgetMapIcon.SetOpacityFade // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOffset(struct FVector2D Offset); // Function Scavenger.S_WidgetMapIcon.SetOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetMapMode(enum class ES_MapMode MapMode); // Function Scavenger.S_WidgetMapIcon.SetMapMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetKradlBlipDataTexture(struct UTexture2DDynamic* kradlBlipDataTex); // Function Scavenger.S_WidgetMapIcon.SetKradlBlipDataTexture // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsHidden(bool inIsHidden); // Function Scavenger.S_WidgetMapIcon.SetIsHidden // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetGlobalMapDataTexture(struct UTexture2DDynamic* globalMapDataTex); // Function Scavenger.S_WidgetMapIcon.SetGlobalMapDataTexture // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEnemyInfoDataIndex(int32_t enemyInfoDataIndex); // Function Scavenger.S_WidgetMapIcon.SetEnemyInfoDataIndex // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActualRotation(float Rotation); // Function Scavenger.S_WidgetMapIcon.SetActualRotation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetActualPosition(struct FVector2D Position); // Function Scavenger.S_WidgetMapIcon.SetActualPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnZoomStateChanged(enum class ESlateVisibility slateVisibility); // Function Scavenger.S_WidgetMapIcon.OnZoomStateChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnExitGutter(); // Function Scavenger.S_WidgetMapIcon.OnExitGutter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnEnterGutter(); // Function Scavenger.S_WidgetMapIcon.OnEnterGutter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool GetIsHidden(); // Function Scavenger.S_WidgetMapIcon.GetIsHidden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetEnemyInfoDataIndex(); // Function Scavenger.S_WidgetMapIcon.GetEnemyInfoDataIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStatusPanel
// Size: 0x538 (Inherited: 0x4b8)
struct US_WidgetStatusPanel : US_WidgetMinimal {
	struct FDataTableRowHandle ConnectingStatusHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle SearchingStatusHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle LaunchingStatusHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle SearchingTimerFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle LaunchingTimerFormatHandle; // 0x4f8(0x10)
	struct US_RichTextBlock* Status; // 0x508(0x08)
	struct US_RichTextBlock* StatusMessage; // 0x510(0x08)
	struct US_RichTextBlock* Timer; // 0x518(0x08)
	struct US_WidgetCommonScavengerButton* CancelButton; // 0x520(0x08)
	struct UBorder* TimerContainer; // 0x528(0x08)
	struct UImage* SearchingSpinner; // 0x530(0x08)

	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStatusPanel.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMatchmaking
// Size: 0x9e8 (Inherited: 0x538)
struct US_WidgetMatchmaking : US_WidgetStatusPanel {
	char pad_538[0x8]; // 0x538(0x08)
	struct TArray<struct FS_LobbyQueue> QueueList; // 0x540(0x10)
	float QueueRefreshTimerInterval; // 0x550(0x04)
	float BoostedQueueRefreshTimerInterval; // 0x554(0x04)
	int32_t AutostartUpdateIncrement; // 0x558(0x04)
	int32_t MaxReconnectAttemptsBeforeError; // 0x55c(0x04)
	struct FMulticastInlineDelegate OnConnected; // 0x560(0x10)
	struct FMulticastInlineDelegate OnDisconnectWithError; // 0x570(0x10)
	struct FMulticastInlineDelegate OnMatchmakingHeartbeat; // 0x580(0x10)
	struct FMulticastInlineDelegate OnConnectionStateChanged; // 0x590(0x10)
	struct FMulticastInlineDelegate OnQueueJoined; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnQueueListUpdated; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnQueueLeft; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnPartyJoined; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnPartyJoinFailed; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnPartyInviteReceived; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnPartyInviteSent; // 0x600(0x10)
	struct FMulticastInlineDelegate OnSentPartyInviteCanceled; // 0x610(0x10)
	struct FMulticastInlineDelegate OnReceivedPartyInviteDismissed; // 0x620(0x10)
	struct FMulticastInlineDelegate OnPartyJoinRequestReceived; // 0x630(0x10)
	struct FMulticastInlineDelegate OnPartyJoinRequestSent; // 0x640(0x10)
	struct FMulticastInlineDelegate OnSentPartyJoinRequestCanceled; // 0x650(0x10)
	struct FMulticastInlineDelegate OnReceivedPartyJoinRequestDismissed; // 0x660(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerJoinedMyParty; // 0x670(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerLeftMyParty; // 0x680(0x10)
	struct FMulticastInlineDelegate OnLeftOtherPlayersParty; // 0x690(0x10)
	struct FMulticastInlineDelegate OnJoinedOtherPlayersParty; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnPartyPlayerStateChanged; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnCurrentQueueDeleted; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnCurrentRegionDeleted; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnDraftingPeriodStarted; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnDraftingTeamStateUpdated; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnPlayerDraftStarted; // 0x700(0x10)
	struct FMulticastInlineDelegate OnMyPlayerDraftCharacterLockedIn; // 0x710(0x10)
	struct FMulticastInlineDelegate OnMatchStartCountdownUpdated; // 0x720(0x10)
	struct FMulticastInlineDelegate OnConnectToServerReceived; // 0x730(0x10)
	struct FString CurrentRegionUri; // 0x740(0x10)
	struct UDataTable* RegionNamesDataTable; // 0x750(0x08)
	struct US_UMGCommonKey* CancelQueueIcon; // 0x758(0x08)
	char pad_760[0x248]; // 0x760(0x248)
	struct TArray<struct FS_PendingPartyInvite> m_pendingPartyInvites; // 0x9a8(0x10)
	struct TArray<struct FString> m_outgoingPartyInvites; // 0x9b8(0x10)
	struct TArray<struct FString> m_pendingJoinPartyRequests; // 0x9c8(0x10)
	struct TArray<struct FString> m_outgoingJoinPartyRequests; // 0x9d8(0x10)

	bool UpdatePlayerDetails(); // Function Scavenger.S_WidgetMatchmaking.UpdatePlayerDetails // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void UpdateInputTypeDisplay(bool bIsGamepadInput); // Function Scavenger.S_WidgetMatchmaking.UpdateInputTypeDisplay // (Final|Native|Private) // @ game+0xffff8008e4a10000
	bool TryLeaveQueueOrParty(); // Function Scavenger.S_WidgetMatchmaking.TryLeaveQueueOrParty // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TryLeaveCurrentQueue(); // Function Scavenger.S_WidgetMatchmaking.TryLeaveCurrentQueue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool TravelToServer(); // Function Scavenger.S_WidgetMatchmaking.TravelToServer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetShouldStayConnected(bool shouldConnect); // Function Scavenger.S_WidgetMatchmaking.SetShouldStayConnected // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetSelectedQueue(struct FString selectedQueue); // Function Scavenger.S_WidgetMatchmaking.SetSelectedQueue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPreferredGameMode(enum class ES_GameMode preferredGameMode); // Function Scavenger.S_WidgetMatchmaking.SetPreferredGameMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SetMyPlayerLockedIn(bool isLockedIn); // Function Scavenger.S_WidgetMatchmaking.SetMyPlayerLockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool SendPartyInvite(struct FString PlayerId); // Function Scavenger.S_WidgetMatchmaking.SendPartyInvite // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void S_MatchmakingQueueEvent__DelegateSignature(struct FString QueueName); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingQueueEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingPlayerIdEvent__DelegateSignature(struct FString targetPlayerId); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingPlayerIdEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingPlayerEvent__DelegateSignature(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void S_MatchmakingPlayerDraftingEvent__DelegateSignature(struct FString draftingPlayerId); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingPlayerDraftingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingPartyInviteEvent__DelegateSignature(struct FString PlayerId, struct FString PartyId, struct FS_LobbyEndpoint lobbyEndpoint, struct FString playerDisplayName); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingPartyInviteEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void S_MatchmakingPartyEvent__DelegateSignature(struct FS_LobbyParty party); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingPartyEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void S_MatchmakingEvent__DelegateSignature(); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingErrorEvent__DelegateSignature(struct FString ErrorDetails); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingErrorEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingDraftingTeamStateEvent__DelegateSignature(struct FS_LobbyTeamState TeamState); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingDraftingTeamStateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void S_MatchmakingDraftingEvent__DelegateSignature(struct FS_LobbyStartDraft startDraftMessage); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingDraftingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void S_MatchmakingCountdownEvent__DelegateSignature(float expectedStartTime); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingCountdownEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xffff8008e4a10000
	void S_MatchmakingConnectToServerEvent__DelegateSignature(struct FS_LobbyConnectToServer connectToServer); // DelegateFunction Scavenger.S_WidgetMatchmaking.S_MatchmakingConnectToServerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xffff8008e4a10000
	void RefreshQueueList(); // Function Scavenger.S_WidgetMatchmaking.RefreshQueueList // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool QueueShouldBeVisibleToPlayer(struct FString QueueId); // Function Scavenger.S_WidgetMatchmaking.QueueShouldBeVisibleToPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void OnGameSettingsChanged(struct FS_UserGameSettings OldSettings, struct FS_UserGameSettings NewSettings); // Function Scavenger.S_WidgetMatchmaking.OnGameSettingsChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	bool LeaveCurrentParty(); // Function Scavenger.S_WidgetMatchmaking.LeaveCurrentParty // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool JoinQueue(); // Function Scavenger.S_WidgetMatchmaking.JoinQueue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	enum class ES_LobbyQueueCompatibility IsQueueCompatibleWithMyClient(struct FS_LobbyQueue queue); // Function Scavenger.S_WidgetMatchmaking.IsQueueCompatibleWithMyClient // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsLocalPlayer(struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetMatchmaking.IsLocalPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsInQueueingState(); // Function Scavenger.S_WidgetMatchmaking.IsInQueueingState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsDevQueue(struct FString QueueId); // Function Scavenger.S_WidgetMatchmaking.IsDevQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool IsConnectedToLobby(); // Function Scavenger.S_WidgetMatchmaking.IsConnectedToLobby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool InDraftingPeriod(); // Function Scavenger.S_WidgetMatchmaking.InDraftingPeriod // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool HaveQueueList(); // Function Scavenger.S_WidgetMatchmaking.HaveQueueList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleSelectedLobbyEndpointRemoved(struct FS_LobbyEndpoint newEndpoint, int32_t newEndpointIndex); // Function Scavenger.S_WidgetMatchmaking.HandleSelectedLobbyEndpointRemoved // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSelectedLobbyEndpointChanged(struct FS_LobbyEndpoint newEndpoint, int32_t newEndpointIndex); // Function Scavenger.S_WidgetMatchmaking.HandleSelectedLobbyEndpointChanged // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandlePartyRehydrationRequestReceived(struct FString PartyId, enum class ES_RehydratePartyJoinAction joinAction); // Function Scavenger.S_WidgetMatchmaking.HandlePartyRehydrationRequestReceived // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleLobbyEndpointsChanged(bool myEndpointChanged); // Function Scavenger.S_WidgetMatchmaking.HandleLobbyEndpointsChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct TArray<struct FS_LobbyPlayer> GetPartyMembers(bool includeMe); // Function Scavenger.S_WidgetMatchmaking.GetPartyMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetPartyLeader(struct FS_LobbyPlayer outPartyLeader); // Function Scavenger.S_WidgetMatchmaking.GetPartyLeader // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FText GetLocalizedQueueRegionName(struct FString QueueId); // Function Scavenger.S_WidgetMatchmaking.GetLocalizedQueueRegionName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FString GetDebugCurrentQueueName(); // Function Scavenger.S_WidgetMatchmaking.GetDebugCurrentQueueName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetCurrentQueue(); // Function Scavenger.S_WidgetMatchmaking.GetCurrentQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_LobbyConnectionState GetCurrentConnectionState(); // Function Scavenger.S_WidgetMatchmaking.GetCurrentConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetAutostartEstimatedTimeRemaining(); // Function Scavenger.S_WidgetMatchmaking.GetAutostartEstimatedTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FText GenerateLocalizedRegionName(struct FString clusterName, struct FString specificRegionId); // Function Scavenger.S_WidgetMatchmaking.GenerateLocalizedRegionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanShowQueueDebugData(); // Function Scavenger.S_WidgetMatchmaking.CanShowQueueDebugData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanLeaveCurrentQueue(); // Function Scavenger.S_WidgetMatchmaking.CanLeaveCurrentQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool CanLeaveCurrentParty(); // Function Scavenger.S_WidgetMatchmaking.CanLeaveCurrentParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool AmIPartyLeader(); // Function Scavenger.S_WidgetMatchmaking.AmIPartyLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool AcceptPartyInvite(struct FString PartyId, struct FString invitingPlayerId, struct FString lobbyUri); // Function Scavenger.S_WidgetMatchmaking.AcceptPartyInvite // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMessageFeedLine
// Size: 0x4e8 (Inherited: 0x4b8)
struct US_WidgetMessageFeedLine : US_WidgetMinimal {
	struct FDataTableRowHandle MessageFeedFormatHandle; // 0x4b8(0x10)
	struct URichTextBlock* MessageFeedLine; // 0x4c8(0x08)
	char pad_4D0[0x18]; // 0x4d0(0x18)
};

// Class Scavenger.S_WidgetMessengerVoiceIcon
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetMessengerVoiceIcon : US_WidgetMinimal {

	void OnVoiceStateChanged(bool VoiceEnabled); // Function Scavenger.S_WidgetMessengerVoiceIcon.OnVoiceStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMetaLeaderboardEntry
// Size: 0x520 (Inherited: 0x4b8)
struct US_WidgetMetaLeaderboardEntry : US_WidgetMinimal {
	struct FDataTableRowHandle NameFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle ValueFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle PlacementFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle OwningPlayerNameFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle OwningPlayerPlacementFormatHandle; // 0x4f8(0x10)
	struct US_RichTextBlock* Name; // 0x508(0x08)
	struct US_RichTextBlock* Value; // 0x510(0x08)
	struct US_RichTextBlock* Placement; // 0x518(0x08)
};

// Class Scavenger.S_WidgetMetaLeaderboard
// Size: 0x618 (Inherited: 0x4b8)
struct US_WidgetMetaLeaderboard : US_WidgetCarouselItemBase {
	int32_t MaxLeaderboardEntries; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	SoftClassProperty LeaderboardEntryClass; // 0x4c0(0x28)
	struct FSlateBrush SpacerBrush; // 0x4e8(0x88)
	struct FDataTableRowHandle MetadataHandle; // 0x570(0x10)
	struct FDataTableRowHandle CurrentStatFormatHandle; // 0x580(0x10)
	struct UVerticalBox* LeaderboardEntries; // 0x590(0x08)
	struct US_RichTextBlock* CurrentStat; // 0x598(0x08)
	struct FS_OnlineLeaderboardDefinition m_leaderboardDefinition; // 0x5a0(0x28)
	struct TMap<struct FString, struct TWeakObjectPtr<struct US_WidgetMetaLeaderboardEntry>> m_pendingDisplayNamePlayerIdsToLeaderboardEntryWidget; // 0x5c8(0x50)

	void HandleOnRefreshLeaderboardRequest(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetMetaLeaderboard.HandleOnRefreshLeaderboardRequest // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnDisplayNameCached(struct FString PlayerId, struct FString DisplayName); // Function Scavenger.S_WidgetMetaLeaderboard.HandleOnDisplayNameCached // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetMetaLeaderboardCarousel
// Size: 0x548 (Inherited: 0x510)
struct US_WidgetMetaLeaderboardCarousel : US_WidgetCarouselBase {
	SoftClassProperty LeaderboardClass; // 0x510(0x28)
	struct TArray<struct FS_OnlineLeaderboardDefinition> m_leaderboardDefinitions; // 0x538(0x10)

	void HandleOnSocialManagerConnected(); // Function Scavenger.S_WidgetMetaLeaderboardCarousel.HandleOnSocialManagerConnected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLoginSucceed(); // Function Scavenger.S_WidgetMetaLeaderboardCarousel.HandleOnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetNewExplorersPrompt
// Size: 0x6a0 (Inherited: 0x680)
struct US_WidgetNewExplorersPrompt : US_WidgetMessagePrompt {
	struct FName InfoPanel01ClassID; // 0x680(0x08)
	struct FName InfoPanel02ClassID; // 0x688(0x08)
	struct US_WidgetExplorerInfoPanel* InfoPanel01; // 0x690(0x08)
	struct US_WidgetExplorerInfoPanel* InfoPanel02; // 0x698(0x08)
};

// Class Scavenger.S_WidgetNewItemNotification
// Size: 0x528 (Inherited: 0x4b8)
struct US_WidgetNewItemNotification : US_WidgetNotificationCenterItem {
	struct FDataTableRowHandle NotificationMessageFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle TypeFormatHandle; // 0x4c8(0x10)
	struct US_RichTextBlock* NotificationMessage; // 0x4d8(0x08)
	struct UImage* RarityStrip; // 0x4e0(0x08)
	struct UBorder* RarityGradient; // 0x4e8(0x08)
	struct UImage* ItemIcon; // 0x4f0(0x08)
	struct UWidgetAnimation* NotificationExpiredAnimation; // 0x4f8(0x08)
	struct UWidgetAnimation* NotificationInitializedAnimation; // 0x500(0x08)
	struct US_RichTextBlock* Type; // 0x508(0x08)
	struct USizeBox* SizeBox; // 0x510(0x08)
	char pad_518[0x10]; // 0x518(0x10)

	void NotifyNewItemNotificationInitialized(struct FS_OnlinePlayerInventoryItemDelta itemDelta); // Function Scavenger.S_WidgetNewItemNotification.NotifyNewItemNotificationInitialized // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleNotificationExpiredAnimationFinished(); // Function Scavenger.S_WidgetNewItemNotification.HandleNotificationExpiredAnimationFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetObjective
// Size: 0x530 (Inherited: 0x4b8)
struct US_WidgetObjective : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct US_WidgetObjectives* m_parent; // 0x4c0(0x08)
	struct UPanelWidget* m_goalPanelWidget; // 0x4c8(0x08)
	struct TMap<int32_t, struct US_WidgetObjectiveGoal*> m_mapOfGoalIdToGoalWidget; // 0x4d0(0x50)
	struct US_WidgetObjectiveGoal* GoalWidgetClass; // 0x520(0x08)
	struct FName GoalPanelName; // 0x528(0x08)

	void NotifyTick_BP(float deltaTimeInSeconds); // Function Scavenger.S_WidgetObjective.NotifyTick_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveUpdated_BP(struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjective.NotifyObjectiveUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalDeleted_BP(int32_t goalId); // Function Scavenger.S_WidgetObjective.NotifyObjectiveGoalDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjective.NotifyObjectiveGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjective.NotifyObjectiveAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChildChanged_BP(int32_t goalId); // Function Scavenger.S_WidgetObjective.NotifyChildChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleObjectiveUpdated(int32_t objectiveId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjective.HandleObjectiveUpdated // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleObjectiveGoalDeleted(int32_t objectiveId, int32_t goalId); // Function Scavenger.S_WidgetObjective.HandleObjectiveGoalDeleted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleObjectiveGoalAdded(int32_t objectiveId, struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjective.HandleObjectiveGoalAdded // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetObjectiveGoal
// Size: 0x530 (Inherited: 0x4b8)
struct US_WidgetObjectiveGoal : US_WidgetMinimal {
	struct US_WidgetObjective* m_parent; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)
	struct UPanelWidget* m_subGoalPanelWidget; // 0x4c8(0x08)
	struct TMap<int32_t, struct US_WidgetObjectiveSubGoal*> m_mapOfSubGoalIdToSubGoalWidget; // 0x4d0(0x50)
	struct US_WidgetObjectiveSubGoal* SubGoalWidgetClass; // 0x520(0x08)
	struct FName SubGoalPanelName; // 0x528(0x08)

	void NotifyTick_BP(float deltaTimeInSeconds); // Function Scavenger.S_WidgetObjectiveGoal.NotifyTick_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalDeleted_BP(int32_t subGoalId); // Function Scavenger.S_WidgetObjectiveGoal.NotifyObjectiveSubGoalDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectiveGoal.NotifyObjectiveSubGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalUpdated_BP(struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjectiveGoal.NotifyObjectiveGoalUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveGoalAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectiveGoal.NotifyObjectiveGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChildChanged_BP(int32_t subGoalId); // Function Scavenger.S_WidgetObjectiveGoal.NotifyChildChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleObjectiveSubGoalDeleted(int32_t goalId, int32_t subGoalId); // Function Scavenger.S_WidgetObjectiveGoal.HandleObjectiveSubGoalDeleted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleObjectiveSubGoalAdded(int32_t goalId, struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectiveGoal.HandleObjectiveSubGoalAdded // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleObjectiveGoalUpdated(int32_t objectiveId, int32_t goalId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjectiveGoal.HandleObjectiveGoalUpdated // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetObjectives
// Size: 0x520 (Inherited: 0x4b8)
struct US_WidgetObjectives : US_WidgetMinimal {
	struct UPanelWidget* m_objectivePanelWidget; // 0x4b8(0x08)
	struct TMap<int32_t, struct US_WidgetObjective*> m_mapOfObjectiveIdToObjectiveWidget; // 0x4c0(0x50)
	struct US_WidgetObjective* ObjectiveWidgetClass; // 0x510(0x08)
	struct FName ObjectivePanelName; // 0x518(0x08)

	void NotifyObjectiveDeleted_BP(int32_t objectiveId); // Function Scavenger.S_WidgetObjectives.NotifyObjectiveDeleted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectives.NotifyObjectiveAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChildChanged_BP(int32_t objectiveId); // Function Scavenger.S_WidgetObjectives.NotifyChildChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleObjectiveDeleted(int32_t objectiveId); // Function Scavenger.S_WidgetObjectives.HandleObjectiveDeleted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleObjectiveAdded(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectives.HandleObjectiveAdded // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetObjectiveSubGoal
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetObjectiveSubGoal : US_WidgetMinimal {
	struct US_WidgetObjectiveGoal* m_parent; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void NotifyTick_BP(float deltaTimeInSeconds); // Function Scavenger.S_WidgetObjectiveSubGoal.NotifyTick_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalUpdated_BP(struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjectiveSubGoal.NotifyObjectiveSubGoalUpdated_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyObjectiveSubGoalAdded_BP(struct FS_PlayerObjectiveBase baseState); // Function Scavenger.S_WidgetObjectiveSubGoal.NotifyObjectiveSubGoalAdded_BP // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleObjectiveSubGoalUpdated(int32_t goalId, int32_t subGoalId, struct FS_PlayerObjectiveDelta updatedState); // Function Scavenger.S_WidgetObjectiveSubGoal.HandleObjectiveSubGoalUpdated // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetOnlineRewardGrants
// Size: 0x6b0 (Inherited: 0x508)
struct US_WidgetOnlineRewardGrants : US_WidgetPhaseSubscreen {
	struct TMap<enum class ES_OnlineItemMetadataType, SoftClassProperty> MetadataRewardContainers; // 0x508(0x50)
	struct TMap<enum class ES_CosmeticType, SoftClassProperty> CosmeticRewardContainers; // 0x558(0x50)
	SoftClassProperty NonMetadataRewardContainer; // 0x5a8(0x28)
	float RewardGrantDelay; // 0x5d0(0x04)
	float MaxWidthBeforeBleed; // 0x5d4(0x04)
	struct TMap<enum class ES_RewardGrantContext, struct FDataTableRowHandle> RewardGrantTypeMetadataHandles; // 0x5d8(0x50)
	struct UDataTable* MetadataTable; // 0x628(0x08)
	struct US_UMGLinearPanel* RewardsPanel; // 0x630(0x08)
	struct UScrollBox* RewardsScrollBox; // 0x638(0x08)
	struct US_RichTextBlock* GrantHeader; // 0x640(0x08)
	struct US_RichTextBlock* GrantDescription; // 0x648(0x08)
	struct US_WidgetCommonScavengerButton* ContinueButton; // 0x650(0x08)
	struct TArray<struct FS_OnlineRewardGrant> m_playerRewards; // 0x658(0x10)
	char pad_668[0x18]; // 0x668(0x18)
	struct TArray<struct US_WidgetRewardItem*> m_rewardWidgets; // 0x680(0x10)
	char pad_690[0x20]; // 0x690(0x20)

	void NotifyNewRewardGrantShown(); // Function Scavenger.S_WidgetOnlineRewardGrants.NotifyNewRewardGrantShown // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetOnlineStoreOfferBase
// Size: 0x558 (Inherited: 0x4b8)
struct US_WidgetOnlineStoreOfferBase : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnOfferHovered; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnOfferUnhovered; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnActiveOfferClicked; // 0x4d8(0x10)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct FDataTableRowHandle OfferNameFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle OfferSubtitleFormatHandle; // 0x500(0x10)
	struct FString OfferImageUrlAffix; // 0x510(0x10)
	struct USizeBox* EncompassingSizeBox; // 0x520(0x08)
	struct UImage* OfferImage; // 0x528(0x08)
	struct US_RichTextBlock* OfferName; // 0x530(0x08)
	struct US_RichTextBlock* OfferSubtitle; // 0x538(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x540(0x08)
	struct US_RichTextBlock* LimitedTimeOfferTimer; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)

	void SetOfferId(struct FName newOfferId); // Function Scavenger.S_WidgetOnlineStoreOfferBase.SetOfferId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyOfferUnhovered(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetOnlineStoreOfferBase.NotifyOfferUnhovered // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOfferIdSet(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetOnlineStoreOfferBase.NotifyOfferIdSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOfferHovered(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetOnlineStoreOfferBase.NotifyOfferHovered // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActiveOfferClicked(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetOnlineStoreOfferBase.NotifyActiveOfferClicked // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnOfferUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetOnlineStoreOfferBase.HandleOnOfferUnhovered // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnOfferImageDownloaded(enum class ES_OnlineResult Result, struct UTexture2DDynamic* Texture); // Function Scavenger.S_WidgetOnlineStoreOfferBase.HandleOnOfferImageDownloaded // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnOfferHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetOnlineStoreOfferBase.HandleOnOfferHovered // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnActiveOfferClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetOnlineStoreOfferBase.HandleOnActiveOfferClicked // (Native|Protected) // @ game+0xffff8008e4a10000
	struct FName GetOfferId(); // Function Scavenger.S_WidgetOnlineStoreOfferBase.GetOfferId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPartyTrayMember
// Size: 0x600 (Inherited: 0x4b8)
struct US_WidgetPartyTrayMember : US_WidgetMinimal {
	struct UImage* Emblem; // 0x4b8(0x08)
	struct USizeBox* EmblemSizeBox; // 0x4c0(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x4c8(0x08)
	struct US_UMGWidgetSwitcher* ActiveStateSwitcher; // 0x4d0(0x08)
	struct UImage* PartyLeaderIcon; // 0x4d8(0x08)
	struct US_WidgetVoiceActivityButton* VoiceActivityButton; // 0x4e0(0x08)
	char pad_4E8[0x10]; // 0x4e8(0x10)
	struct FS_LobbyPlayer m_currentLobbyPlayer; // 0x4f8(0x108)

	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPartyTrayMember.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStorefront
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetStorefront : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnRequestStoreOfferDetailsScreen; // 0x4b8(0x10)
	struct US_WidgetStoreLayoutGrid* StorefrontOfferGrid; // 0x4c8(0x08)
	char pad_4D0[0x28]; // 0x4d0(0x28)

	void NotifyStoreOfferUnhovered(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetStorefront.NotifyStoreOfferUnhovered // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStoreOfferHovered(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetStorefront.NotifyStoreOfferHovered // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActiveStoreOfferClicked(struct FS_OnlineStoreOfferDefinition offerDefinition); // Function Scavenger.S_WidgetStorefront.NotifyActiveStoreOfferClicked // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnStoreOfferUnhovered(struct FName OfferId); // Function Scavenger.S_WidgetStorefront.HandleOnStoreOfferUnhovered // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnStoreOfferHovered(struct FName OfferId); // Function Scavenger.S_WidgetStorefront.HandleOnStoreOfferHovered // (Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnActiveOfferClicked(struct FName OfferId); // Function Scavenger.S_WidgetStorefront.HandleOnActiveOfferClicked // (Native|Protected) // @ game+0xffff8008e4a10000
	void GetSortedStorefrontOfferIds(struct TArray<struct FName> outIds); // Function Scavenger.S_WidgetStorefront.GetSortedStorefrontOfferIds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlatformStorefront
// Size: 0x4f8 (Inherited: 0x4f8)
struct US_WidgetPlatformStorefront : US_WidgetStorefront {
};

// Class Scavenger.S_WidgetPlayerCoreStatsBar
// Size: 0x4f0 (Inherited: 0x4c8)
struct US_WidgetPlayerCoreStatsBar : US_PingableWidget {
	struct US_WidgetCommonProgressBar* PlayerStatTankBar; // 0x4c8(0x08)
	struct UTextBlock* DebugHealthText; // 0x4d0(0x08)
	int32_t BackgroundLayerIndex; // 0x4d8(0x04)
	int32_t ColdLayerIndex; // 0x4dc(0x04)
	int32_t HealthRegenLayerIndex; // 0x4e0(0x04)
	int32_t HealthLayerIndex; // 0x4e4(0x04)
	char pad_4E8[0x8]; // 0x4e8(0x08)

	void UpdateRezTimer_BP(float TimeInSeconds); // Function Scavenger.S_WidgetPlayerCoreStatsBar.UpdateRezTimer_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetResurrected_BP(); // Function Scavenger.S_WidgetPlayerCoreStatsBar.SetResurrected_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetDowned_BP(bool bIsDowned); // Function Scavenger.S_WidgetPlayerCoreStatsBar.SetDowned_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void SetDead_BP(); // Function Scavenger.S_WidgetPlayerCoreStatsBar.SetDead_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void OnResurrect_BP(); // Function Scavenger.S_WidgetPlayerCoreStatsBar.OnResurrect_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatStartedIncreasing_BP(float oldStat, float newStat); // Function Scavenger.S_WidgetPlayerCoreStatsBar.NotifyStatStartedIncreasing_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatStartedDecreasing_BP(float oldStat, float newStat); // Function Scavenger.S_WidgetPlayerCoreStatsBar.NotifyStatStartedDecreasing_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerReporting
// Size: 0x740 (Inherited: 0x680)
struct US_WidgetPlayerReporting : US_WidgetMessagePrompt {
	struct UComboBoxString* PlayerSelect; // 0x680(0x08)
	struct UComboBoxString* ReportReason; // 0x688(0x08)
	char pad_690[0xb0]; // 0x690(0xb0)

	void ReportPlayer(struct FString PlayerName, enum class ES_PlayerReportReason Reason); // Function Scavenger.S_WidgetPlayerReporting.ReportPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnSelectionChangedReason(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Scavenger.S_WidgetPlayerReporting.HandleOnSelectionChangedReason // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnSelectionChangedPlayer(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Scavenger.S_WidgetPlayerReporting.HandleOnSelectionChangedPlayer // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnOpening(); // Function Scavenger.S_WidgetPlayerReporting.HandleOnOpening // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveContinueButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPlayerReporting.HandleOnActiveContinueButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveCancelButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPlayerReporting.HandleOnActiveCancelButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	enum class ES_PlayerReportReason GetEnumFromReasonString(struct FString reasonString); // Function Scavenger.S_WidgetPlayerReporting.GetEnumFromReasonString // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerSearch
// Size: 0x650 (Inherited: 0x4b8)
struct US_WidgetPlayerSearch : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct FText SecretShowAllKey; // 0x4c0(0x18)
	struct FDataTableRowHandle NoResultsFoundTextHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle ErrorTextHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle ResultsFoundTextHandle; // 0x4f8(0x10)
	int32_t SearchPageIndex; // 0x508(0x04)
	int32_t ResultsPageIndex; // 0x50c(0x04)
	float FailedSearchWaitTime; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct US_UMGHUDMainMenu* MainMenuHUDClass; // 0x518(0x08)
	struct UEditableText* SearchBox; // 0x520(0x08)
	struct UImage* BusyImage; // 0x528(0x08)
	struct US_RichTextBlock* ErrorMessageRichTextBlock; // 0x530(0x08)
	struct UUniformGridPanel* SearchItemGrid; // 0x538(0x08)
	struct US_WidgetCommonScavengerButton* NextPageButton; // 0x540(0x08)
	struct US_WidgetCommonScavengerButton* PreviousPageButton; // 0x548(0x08)
	struct UWidgetSwitcher* StateSwitcher; // 0x550(0x08)
	struct US_RichTextBlock* ResultsRichTextBlock; // 0x558(0x08)
	struct US_WidgetCommonScavengerButton* SubmitButton; // 0x560(0x08)
	char pad_568[0xe8]; // 0x568(0xe8)

	void OnlinePlayerListReceivedCrossRegion(struct TArray<struct FS_PlayerPresenceStatus> searchResults, struct FString searchId); // Function Scavenger.S_WidgetPlayerSearch.OnlinePlayerListReceivedCrossRegion // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnlinePlayerListReceived(struct FS_LobbyOnlinePlayers onlinePlayers); // Function Scavenger.S_WidgetPlayerSearch.OnlinePlayerListReceived // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void LobbyPartyStateReceived(struct FS_LobbyPartyState lobbyPartyState); // Function Scavenger.S_WidgetPlayerSearch.LobbyPartyStateReceived // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void InitializePlayerSearch(); // Function Scavenger.S_WidgetPlayerSearch.InitializePlayerSearch // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSubmitOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPlayerSearch.HandleSubmitOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleSearchFailure(); // Function Scavenger.S_WidgetPlayerSearch.HandleSearchFailure // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleReceivedPresenceUpdate(struct FS_PlayerPresenceStatus PresenceStatus); // Function Scavenger.S_WidgetPlayerSearch.HandleReceivedPresenceUpdate // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandlePrevPageOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPlayerSearch.HandlePrevPageOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTextCommitted(struct FText Text, enum class ETextCommit CommitMethod); // Function Scavenger.S_WidgetPlayerSearch.HandleOnTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnTextChanged(struct FText Text); // Function Scavenger.S_WidgetPlayerSearch.HandleOnTextChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleNextPageOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetPlayerSearch.HandleNextPageOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleFriendsRosterUpdated(); // Function Scavenger.S_WidgetPlayerSearch.HandleFriendsRosterUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct TArray<struct US_WidgetPlayerSearchItem*> GetActiveSearchItems(); // Function Scavenger.S_WidgetPlayerSearch.GetActiveSearchItems // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerSearchItem
// Size: 0x700 (Inherited: 0x660)
struct US_WidgetPlayerSearchItem : US_WidgetSocialButtonBase {
	int32_t ActiveSwitcherIndex; // 0x660(0x04)
	int32_t InactiveSwitcherIndex; // 0x664(0x04)
	struct UWidgetSwitcher* StateSwitcher; // 0x668(0x08)
	char pad_670[0x90]; // 0x670(0x90)

	void SetToInactiveState(); // Function Scavenger.S_WidgetPlayerSearchItem.SetToInactiveState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetToActiveState(); // Function Scavenger.S_WidgetPlayerSearchItem.SetToActiveState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyInactiveStateSet(); // Function Scavenger.S_WidgetPlayerSearchItem.NotifyInactiveStateSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyActiveStateSet(); // Function Scavenger.S_WidgetPlayerSearchItem.NotifyActiveStateSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsButtonActive(); // Function Scavenger.S_WidgetPlayerSearchItem.IsButtonActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetActiveState(); // Function Scavenger.S_WidgetPlayerSearchItem.GetActiveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerStaminaAndHungerBar
// Size: 0x508 (Inherited: 0x4b8)
struct US_WidgetPlayerStaminaAndHungerBar : US_WidgetMinimal {
	float ChangeDetectionTimeoutInSeconds; // 0x4b8(0x04)
	float StaminaCriticalPercentageThreshold; // 0x4bc(0x04)
	float StaminaLowPercentageThreshold; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct US_WidgetCommonProgressBar* StaminaAndHungerProgressBar; // 0x4c8(0x08)
	struct FName HungerLayerName; // 0x4d0(0x08)
	struct FName HungerRecoveryLayerName; // 0x4d8(0x08)
	struct FName StaminaLayerName; // 0x4e0(0x08)
	char pad_4E8[0x20]; // 0x4e8(0x20)

	void StaminaThresholdEvent_BP(enum class ES_StaminaThresholdEvent staminaThesholdEventType, float StaminaPercentage); // Function Scavenger.S_WidgetPlayerStaminaAndHungerBar.StaminaThresholdEvent_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void StaminaChangeEvent_BP(enum class ES_StaminaChangeEvent staminaChangeEventType, float StaminaPercentage); // Function Scavenger.S_WidgetPlayerStaminaAndHungerBar.StaminaChangeEvent_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnSimpleStatChange(enum class ES_StatType StatType, float OldValue, float Delta, float NewValue); // Function Scavenger.S_WidgetPlayerStaminaAndHungerBar.HandleOnSimpleStatChange // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerStatus
// Size: 0x990 (Inherited: 0x860)
struct US_WidgetPlayerStatus : US_WidgetAutoInventoryDragDrop {
	struct USizeBox* BodySizeBoxContainer; // 0x860(0x08)
	struct USizeBox* PlayerPortraitSizeBox; // 0x868(0x08)
	struct US_PingableWidget* WBP_ShelterStatus; // 0x870(0x08)
	struct US_RichTextBlock* RichTextPlayerName; // 0x878(0x08)
	struct UImage* ImagePlayerPortrait; // 0x880(0x08)
	struct UBorder* BorderPlayerColor; // 0x888(0x08)
	struct US_WidgetPlayerCoreStatsBar* CorePlayerStatsBar; // 0x890(0x08)
	struct US_WidgetPlayerStaminaAndHungerBar* StaminaAndHungerBar; // 0x898(0x08)
	struct US_WidgetPlayerSurvivalStatBarTray* SurvivalStatBarTray; // 0x8a0(0x08)
	struct US_WidgetSpeechBubble* WBP_SpeechBubble; // 0x8a8(0x08)
	struct US_WidgetCommonProgressBar* ShieldBar; // 0x8b0(0x08)
	struct USizeBox* ShieldBarSizeBox; // 0x8b8(0x08)
	struct US_RichTextBlock* HeldPoints; // 0x8c0(0x08)
	struct UImage* MarkedPlayerIcon; // 0x8c8(0x08)
	struct US_WidgetResurrectionTokenPanel* ResurrectionTokenPanel; // 0x8d0(0x08)
	struct TArray<struct FName> TeamColorIDs; // 0x8d8(0x10)
	float ShieldSizeBoxMax; // 0x8e8(0x04)
	char pad_8EC[0x4]; // 0x8ec(0x04)
	struct FDataTableRowHandle HeldPointHandle; // 0x8f0(0x10)
	struct FDataTableRowHandle PlayerNameHandle; // 0x900(0x10)
	float DisplayNameWidth; // 0x910(0x04)
	char pad_914[0x4]; // 0x914(0x04)
	struct FString TrimmedDisplayNameSuffix; // 0x918(0x10)
	char pad_928[0x68]; // 0x928(0x68)

	void NotifyTemperaturePercentageChanged_BP(float TemperaturePercentage); // Function Scavenger.S_WidgetPlayerStatus.NotifyTemperaturePercentageChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyTeammateInfoIndexSet_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyTeammateInfoIndexSet_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStateChanged_BP(enum class ES_StatsState OldState, enum class ES_StatsState NewState); // Function Scavenger.S_WidgetPlayerStatus.NotifyStateChanged_BP // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyShieldBreak_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyShieldBreak_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRespawnTimestampChanged_BP(float rezTimestamp); // Function Scavenger.S_WidgetPlayerStatus.NotifyRespawnTimestampChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnShieldRegenStart_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyOnShieldRegenStart_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnShieldRegenEnd_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyOnShieldRegenEnd_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnShieldRebootEnd_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyOnShieldRebootEnd_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnShieldDamaged_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyOnShieldDamaged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOnShieldAdded_BP(); // Function Scavenger.S_WidgetPlayerStatus.NotifyOnShieldAdded_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyHealthPercentageChanged_BP(float HealthPercentage); // Function Scavenger.S_WidgetPlayerStatus.NotifyHealthPercentageChanged_BP // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleTeammateInfoUpdated(int32_t TeammateInfoIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_WidgetPlayerStatus.HandleTeammateInfoUpdated // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnShieldRegenStart(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetPlayerStatus.HandleOnShieldRegenStart // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnShieldRegenEnd(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetPlayerStatus.HandleOnShieldRegenEnd // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnShieldRebootEnd(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetPlayerStatus.HandleOnShieldRebootEnd // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnShieldDamaged(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetPlayerStatus.HandleOnShieldDamaged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnShieldBreak(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetPlayerStatus.HandleOnShieldBreak // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerMarkedStateChanged(bool bPlayerIsMarked); // Function Scavenger.S_WidgetPlayerStatus.HandleOnPlayerMarkedStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	float GetTimeUntilRespawn(); // Function Scavenger.S_WidgetPlayerStatus.GetTimeUntilRespawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetIsOwningPlayer(); // Function Scavenger.S_WidgetPlayerStatus.GetIsOwningPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FString GetAccountId(); // Function Scavenger.S_WidgetPlayerStatus.GetAccountId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerSurvivalStatBar
// Size: 0x628 (Inherited: 0x4b8)
struct US_WidgetPlayerSurvivalStatBar : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnShowWarningChanged; // 0x4b8(0x10)
	enum class ES_StatType StatType; // 0x4c8(0x01)
	char pad_4C9[0x3]; // 0x4c9(0x03)
	float LowStatThreshold; // 0x4cc(0x04)
	bool Override_UseAttributeAsThreshold; // 0x4d0(0x01)
	char pad_4D1[0x3]; // 0x4d1(0x03)
	struct FName AttributeThresholdOverride; // 0x4d4(0x08)
	struct FName AttributeMaxOverride; // 0x4dc(0x08)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct US_WidgetCommonProgressBar* WBP_CommonProgressBar; // 0x4e8(0x08)
	struct US_RichTextBlock* RichTextStatNumber; // 0x4f0(0x08)
	struct US_RichTextBlock* RichTextStatIcon; // 0x4f8(0x08)
	struct FText NormalRichTextStyle; // 0x500(0x18)
	struct FText WarningRichTextStyle; // 0x518(0x18)
	struct FText NormalIconStyle; // 0x530(0x18)
	struct FText WarningIconStyle; // 0x548(0x18)
	bool Override_HasHandle; // 0x560(0x01)
	char pad_561[0x7]; // 0x561(0x07)
	struct FS_ProgressBarHandleData HandleOverrideData; // 0x568(0x98)
	struct FLinearColor NormalFillColor; // 0x600(0x10)
	struct FLinearColor WarningFillColor; // 0x610(0x10)
	char pad_620[0x8]; // 0x620(0x08)

	void SetStatText(int32_t StatValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.SetStatText // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHandleValue(float handleValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.SetHandleValue // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void Reset(); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyStatStartedIncreasing_BP(); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.NotifyStatStartedIncreasing_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatReachedZero_BP(); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.NotifyStatReachedZero_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStatNoLongerZero_BP(); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.NotifyStatNoLongerZero_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyAttributeThresholdOverrideChanged_BP(float NewValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.NotifyAttributeThresholdOverrideChanged_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleStatChange(float newStat); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.HandleStatChange // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOverrideThresholdAttributeChanged(float OldValue, float NewValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.HandleOverrideThresholdAttributeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterSet(struct AS_PlayerCharacter* NewCharacter); // Function Scavenger.S_WidgetPlayerSurvivalStatBar.HandleOnPlayerCharacterSet // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPlayerSurvivalStatBarTray
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetPlayerSurvivalStatBarTray : US_WidgetMinimal {
	struct US_WidgetPlayerSurvivalStatBar* PlayerSurvivalStatBar_Cold; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void SetDead(); // Function Scavenger.S_WidgetPlayerSurvivalStatBarTray.SetDead // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleTemperatureMaxAttributeChanged(float OldValue, float NewValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBarTray.HandleTemperatureMaxAttributeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDangerThresholdAttributeChanged(float OldValue, float NewValue); // Function Scavenger.S_WidgetPlayerSurvivalStatBarTray.HandleDangerThresholdAttributeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleColdStatChanged(float coldStrength); // Function Scavenger.S_WidgetPlayerSurvivalStatBarTray.HandleColdStatChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPostMatchStatRow
// Size: 0x538 (Inherited: 0x4b8)
struct US_WidgetPostMatchStatRow : US_WidgetMinimal {
	struct FDataTableRowHandle StatFormatHandle[0x2]; // 0x4b8(0x20)
	struct FDataTableRowHandle AmountFormatHandle[0x2]; // 0x4d8(0x20)
	struct FDataTableRowHandle RewardFormatHandle[0x2]; // 0x4f8(0x20)
	struct US_RichTextBlock* Stat; // 0x518(0x08)
	struct US_RichTextBlock* Amount; // 0x520(0x08)
	struct US_RichTextBlock* Reward; // 0x528(0x08)
	struct US_UMGWidgetSwitcher* StateSwitcher; // 0x530(0x08)
};

// Class Scavenger.S_WidgetPresentationHUD
// Size: 0x640 (Inherited: 0x640)
struct US_WidgetPresentationHUD : US_UMGHUD {

	void NotifyPresentationStarted_BP(); // Function Scavenger.S_WidgetPresentationHUD.NotifyPresentationStarted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPresentationEnded_BP(); // Function Scavenger.S_WidgetPresentationHUD.NotifyPresentationEnded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void EndPresentation(); // Function Scavenger.S_WidgetPresentationHUD.EndPresentation // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginPresentation(); // Function Scavenger.S_WidgetPresentationHUD.BeginPresentation // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetDeathHUD
// Size: 0x640 (Inherited: 0x640)
struct US_WidgetDeathHUD : US_WidgetPresentationHUD {
};

// Class Scavenger.S_WidgetGameEndHUD
// Size: 0x650 (Inherited: 0x640)
struct US_WidgetGameEndHUD : US_WidgetPresentationHUD {
	int32_t SecondsUntilMatchEnd; // 0x640(0x04)
	int32_t SecondsUntilTimeout; // 0x644(0x04)
	char pad_648[0x8]; // 0x648(0x08)

	void NotifyGameEndPresentationStarted(int32_t TeamPlacement, int32_t collectedDatapoints); // Function Scavenger.S_WidgetGameEndHUD.NotifyGameEndPresentationStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void BeginGameEndPresentation(int32_t TeamPlacement, int32_t collectedDatapoints); // Function Scavenger.S_WidgetGameEndHUD.BeginGameEndPresentation // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetProjectRequirement
// Size: 0x538 (Inherited: 0x4b8)
struct US_WidgetProjectRequirement : US_WidgetMinimal {
	struct TSoftObjectPtr<struct UTexture2D> TimeIcon; // 0x4b8(0x28)
	struct FDataTableRowHandle TimeHandle; // 0x4e0(0x10)
	struct FDataTableRowHandle ResourceNameFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle ResourceAmountFormatHandle; // 0x500(0x10)
	struct FDataTableRowHandle InsufficientFundsFormatHandle; // 0x510(0x10)
	struct UImage* ResourceIcon; // 0x520(0x08)
	struct US_RichTextBlock* Resource; // 0x528(0x08)
	struct US_RichTextBlock* ResourceAmount; // 0x530(0x08)

	void NotifyRequirementSet(bool hasSufficientFunds); // Function Scavenger.S_WidgetProjectRequirement.NotifyRequirementSet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetProjectDefinitionPanel
// Size: 0x668 (Inherited: 0x4b8)
struct US_WidgetProjectDefinitionPanel : US_WidgetMinimal {
	struct FDataTableRowHandle ResearchTimeFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle TimeMaxDaysFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle TimeMaxHoursFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle TimeMaxMinutesFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle TimeMaxSecondsFormatHandle; // 0x4f8(0x10)
	struct FDataTableRowHandle RestrictionFormatHandle; // 0x508(0x10)
	struct US_RichTextBlock* ResearchTime; // 0x518(0x08)
	struct UVerticalBox* ComponentRequirements; // 0x520(0x08)
	struct UVerticalBox* MaterialRequirements; // 0x528(0x08)
	struct UVerticalBox* ComponentRequirementList; // 0x530(0x08)
	struct UVerticalBox* MaterialRequirementList; // 0x538(0x08)
	struct US_WidgetInventoryStateHeader* InventoryStateHeader; // 0x540(0x08)
	struct FS_OnlineResearchProjectDefinition m_researchProjectDefinition; // 0x548(0x80)
	char pad_5C8[0x8]; // 0x5c8(0x08)
	struct FS_OnlineItemMetadata m_onlineItemMetadata; // 0x5d0(0x88)
	struct TArray<struct US_WidgetProjectRequirement*> m_activeReqs; // 0x658(0x10)

	void NotifyResearchProjectDefinitionSet(struct FS_OnlineResearchProjectDefinition researchProjectDefinition, struct FName ResearchProjectId); // Function Scavenger.S_WidgetProjectDefinitionPanel.NotifyResearchProjectDefinitionSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryAndCurrencyRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetProjectDefinitionPanel.HandleOnPlayerInventoryAndCurrencyRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetQuickItemItem
// Size: 0x880 (Inherited: 0x880)
struct US_WidgetQuickItemItem : US_WidgetEquippableItem {

	void NotifyFilledSlotPinged(); // Function Scavenger.S_WidgetQuickItemItem.NotifyFilledSlotPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEmptySlotPinged(); // Function Scavenger.S_WidgetQuickItemItem.NotifyEmptySlotPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetQuickItemsPanel
// Size: 0x908 (Inherited: 0x908)
struct US_WidgetQuickItemsPanel : US_WidgetEquippableItemsPanel {

	void HandleQuickItemSlotChanged(enum class ES_EquipmentSlot quickItemSlot); // Function Scavenger.S_WidgetQuickItemsPanel.HandleQuickItemSlotChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRadialItemBase
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetRadialItemBase : US_WidgetMinimal {

	void ReceiveFocus(); // Function Scavenger.S_WidgetRadialItemBase.ReceiveFocus // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyReceivedFocus(); // Function Scavenger.S_WidgetRadialItemBase.NotifyReceivedFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyLostFocus(); // Function Scavenger.S_WidgetRadialItemBase.NotifyLostFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemConfirmed(); // Function Scavenger.S_WidgetRadialItemBase.NotifyItemConfirmed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyItemActivated(); // Function Scavenger.S_WidgetRadialItemBase.NotifyItemActivated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void LoseFocus(); // Function Scavenger.S_WidgetRadialItemBase.LoseFocus // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ConfirmItem(); // Function Scavenger.S_WidgetRadialItemBase.ConfirmItem // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ActivateItem(); // Function Scavenger.S_WidgetRadialItemBase.ActivateItem // (Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRadialEmoteItem
// Size: 0x4c8 (Inherited: 0x4b8)
struct US_WidgetRadialEmoteItem : US_WidgetRadialItemBase {
	struct UImage* EmoteItemIcon; // 0x4b8(0x08)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void NotifyEmoteItemReceivedFocus(); // Function Scavenger.S_WidgetRadialEmoteItem.NotifyEmoteItemReceivedFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEmoteItemLostFocus(); // Function Scavenger.S_WidgetRadialEmoteItem.NotifyEmoteItemLostFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEmoteItemConfirmed(); // Function Scavenger.S_WidgetRadialEmoteItem.NotifyEmoteItemConfirmed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEmoteItemActivated(); // Function Scavenger.S_WidgetRadialEmoteItem.NotifyEmoteItemActivated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRadialEquippedItem
// Size: 0x520 (Inherited: 0x4b8)
struct US_WidgetRadialEquippedItem : US_WidgetRadialItemBase {
	struct US_WidgetQuantityCounter* QuantityCounter; // 0x4b8(0x08)
	struct UImage* ItemIcon; // 0x4c0(0x08)
	struct UTexture2D* EmptyItemIcon; // 0x4c8(0x08)
	char pad_4D0[0x50]; // 0x4d0(0x50)

	void NotifyItemUnequipped(); // Function Scavenger.S_WidgetRadialEquippedItem.NotifyItemUnequipped // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInitialized(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetRadialEquippedItem.NotifyInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitializeWithEquipmentSlot(enum class ES_EquipmentSlot EquipmentSlot); // Function Scavenger.S_WidgetRadialEquippedItem.InitializeWithEquipmentSlot // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool HasValidItem(); // Function Scavenger.S_WidgetRadialEquippedItem.HasValidItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleItemUnequipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState OldItemState); // Function Scavenger.S_WidgetRadialEquippedItem.HandleItemUnequipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleItemEquipped(enum class ES_EquipmentSlot EquipmentSlot, struct FS_ItemState NewItemState); // Function Scavenger.S_WidgetRadialEquippedItem.HandleItemEquipped // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	struct FS_ItemState GetItemState(); // Function Scavenger.S_WidgetRadialEquippedItem.GetItemState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRadialPanel
// Size: 0x558 (Inherited: 0x4b8)
struct US_WidgetRadialPanel : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnRadialPanelSelectionChanged; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnRadialPanelSelectionIndexChanged; // 0x4c8(0x10)
	int32_t CurrentItemIndex; // 0x4d8(0x04)
	float CurrentItemRadians; // 0x4dc(0x04)
	float InnerRadiusInPixels; // 0x4e0(0x04)
	float OuterRadiusInPixels; // 0x4e4(0x04)
	float ItemSizeInPixels; // 0x4e8(0x04)
	float AxisInterpolationChangePerSecond; // 0x4ec(0x04)
	struct UCanvasPanel* container; // 0x4f0(0x08)
	struct UImage* SelectionCursor; // 0x4f8(0x08)
	struct US_RichTextBlock* SelectedItemNameRichTextBlock; // 0x500(0x08)
	struct US_RichTextBlock* SelectedItemDescriptionRichTextBlock; // 0x508(0x08)
	struct US_UMGCommonKey* DropKey; // 0x510(0x08)
	struct US_UMGCommonKey* CancelKey; // 0x518(0x08)
	struct TArray<struct FS_RadialPanelItemSelectionInfo> m_addedItems; // 0x520(0x10)
	char pad_530[0x28]; // 0x530(0x28)

	void SetSelectedItemName(struct FDataTableRowHandle formatHandle, struct FDataTableRowHandle TextHandle); // Function Scavenger.S_WidgetRadialPanel.SetSelectedItemName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSelectedItemDescription(struct FDataTableRowHandle formatHandle, struct FDataTableRowHandle TextHandle); // Function Scavenger.S_WidgetRadialPanel.SetSelectedItemDescription // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool RemoveItemFromRadialPanel(struct UWidget* itemToRemove); // Function Scavenger.S_WidgetRadialPanel.RemoveItemFromRadialPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveAllItemsFromRadialPanel(); // Function Scavenger.S_WidgetRadialPanel.RemoveAllItemsFromRadialPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyNumberOfItemsChanged(int32_t numberOfItems); // Function Scavenger.S_WidgetRadialPanel.NotifyNumberOfItemsChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInputAngleChanged(float Angle); // Function Scavenger.S_WidgetRadialPanel.NotifyInputAngleChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCurrentSelectionIndexChanged(int32_t oldSelectionIndex, int32_t newSelectionIndex); // Function Scavenger.S_WidgetRadialPanel.NotifyCurrentSelectionIndexChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCurrentSelectionChanged(int32_t OldSelection, int32_t NewSelection); // Function Scavenger.S_WidgetRadialPanel.NotifyCurrentSelectionChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InvalidateSelection(); // Function Scavenger.S_WidgetRadialPanel.InvalidateSelection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleUIAxis(enum class ES_UIAxis AxisType, float Value); // Function Scavenger.S_WidgetRadialPanel.HandleUIAxis // (Final|Native|Public) // @ game+0xffff8008e4a10000
	int32_t GetItemCount(); // Function Scavenger.S_WidgetRadialPanel.GetItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct US_WidgetRadialItemBase* GetCurrentSelectionOfType(struct US_WidgetRadialItemBase* selectionClass); // Function Scavenger.S_WidgetRadialPanel.GetCurrentSelectionOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	int32_t GetCurrentItemSelection(); // Function Scavenger.S_WidgetRadialPanel.GetCurrentItemSelection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ConfirmSelection(); // Function Scavenger.S_WidgetRadialPanel.ConfirmSelection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool AddItemToRadialPanel(struct UWidget* newItem, int32_t itemSelectionIdentifier); // Function Scavenger.S_WidgetRadialPanel.AddItemToRadialPanel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ActivateSelection(); // Function Scavenger.S_WidgetRadialPanel.ActivateSelection // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRadialPingItem
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetRadialPingItem : US_WidgetRadialItemBase {
	struct UImage* PingItemIcon; // 0x4b8(0x08)
	struct US_PingConfig* PingConfig; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	void NotifyRadialPingItemInitialized(enum class ES_InGameRadialMenuSlot pingItemSlot, enum class ES_PingInfoType PingType); // Function Scavenger.S_WidgetRadialPingItem.NotifyRadialPingItemInitialized // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingItemReceivedFocus(); // Function Scavenger.S_WidgetRadialPingItem.NotifyPingItemReceivedFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingItemLostFocus(); // Function Scavenger.S_WidgetRadialPingItem.NotifyPingItemLostFocus // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingItemConfirmed(); // Function Scavenger.S_WidgetRadialPingItem.NotifyPingItemConfirmed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPingItemActivated(); // Function Scavenger.S_WidgetRadialPingItem.NotifyPingItemActivated // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitializeRadialPingItem(enum class ES_InGameRadialMenuSlot pingItemSlot, enum class ES_PingInfoType PingType); // Function Scavenger.S_WidgetRadialPingItem.InitializeRadialPingItem // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRecentPlayerListItem
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetRecentPlayerListItem : US_WidgetSocialButtonBase {
};

// Class Scavenger.S_WidgetTieredItemsRow
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetTieredItemsRow : US_WidgetMinimal {
	struct FName TierRestrictionId; // 0x4b8(0x08)
	int32_t MaxOptions; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct US_WidgetMinimal* OptionItemClass; // 0x4c8(0x08)
	struct US_UMGLinearPanel* RowOptionItems; // 0x4d0(0x08)
	struct US_WidgetRestrictionStateSwitcher* RestrictionStateSwitcher; // 0x4d8(0x08)
	struct TArray<struct FS_OnlineItemMetadata> m_tierFilteredMetadata; // 0x4e0(0x10)
};

// Class Scavenger.S_WidgetTieredLoadoutRow
// Size: 0x520 (Inherited: 0x4f0)
struct US_WidgetTieredLoadoutRow : US_WidgetTieredItemsRow {
	struct FMulticastInlineDelegate OnLoadoutOptionHovered; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnLoadoutOptionClicked; // 0x500(0x10)
	struct FMulticastInlineDelegate OnLoadoutOptionRightClicked; // 0x510(0x10)

	void HandleOnLoadoutOptionItemRightClicked(struct FName ItemId); // Function Scavenger.S_WidgetTieredLoadoutRow.HandleOnLoadoutOptionItemRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutOptionItemHovered(struct FName ItemId); // Function Scavenger.S_WidgetTieredLoadoutRow.HandleOnLoadoutOptionItemHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutOptionItemClicked(struct FName ItemId); // Function Scavenger.S_WidgetTieredLoadoutRow.HandleOnLoadoutOptionItemClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRecipeLoadoutRow
// Size: 0x520 (Inherited: 0x520)
struct US_WidgetRecipeLoadoutRow : US_WidgetTieredLoadoutRow {
};

// Class Scavenger.S_WidgetRecipeLoadoutScreen
// Size: 0x760 (Inherited: 0x530)
struct US_WidgetRecipeLoadoutScreen : US_WidgetLoadoutOptionScreen {
	SoftClassProperty CosmeticSubScreens[0xb]; // 0x530(0x1b8)
	struct US_WidgetRecipeLoadoutRow* LoadoutOptions; // 0x6e8(0x08)
	struct FS_FilteredResearchOptions m_currentRecipeOptions; // 0x6f0(0x60)
	char pad_750[0x10]; // 0x750(0x10)

	void HandleOptionItemClassLoaded(); // Function Scavenger.S_WidgetRecipeLoadoutScreen.HandleOptionItemClassLoaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnLoadoutOptionItemRightClicked(struct FName ItemId); // Function Scavenger.S_WidgetRecipeLoadoutScreen.HandleOnLoadoutOptionItemRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCosmeticSubScreenCreated(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetRecipeLoadoutScreen.HandleCosmeticSubScreenCreated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetScrollingTieredItemsRow
// Size: 0x510 (Inherited: 0x4f0)
struct US_WidgetScrollingTieredItemsRow : US_WidgetTieredItemsRow {
	int32_t NumberOfOptionsPerPage; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct UScrollBox* ScrollBox; // 0x4f8(0x08)
	struct US_WidgetNavBar* NavBar; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)

	void HandleOnNavBarIndexChanged(struct US_WidgetCommonScavengerButton* Button, int32_t NewIndex); // Function Scavenger.S_WidgetScrollingTieredItemsRow.HandleOnNavBarIndexChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct US_WidgetCommonScavengerButton* CycleNavBarButtons(enum class ES_NavBarCycleDirection Direction, enum class ES_NavBarCycleMode cycleMode); // Function Scavenger.S_WidgetScrollingTieredItemsRow.CycleNavBarButtons // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetScrollingTieredResearchRow
// Size: 0x530 (Inherited: 0x510)
struct US_WidgetScrollingTieredResearchRow : US_WidgetScrollingTieredItemsRow {
	struct FMulticastInlineDelegate OnResearchOptionOptionItemHovered; // 0x510(0x10)
	struct FMulticastInlineDelegate OnResearchOptionOptionItemClicked; // 0x520(0x10)

	void HandleOnResearchOptionItemHovered(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetScrollingTieredResearchRow.HandleOnResearchOptionItemHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnResearchOptionItemClicked(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetScrollingTieredResearchRow.HandleOnResearchOptionItemClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRecipeResearchRow
// Size: 0x530 (Inherited: 0x530)
struct US_WidgetRecipeResearchRow : US_WidgetScrollingTieredResearchRow {
};

// Class Scavenger.S_WidgetRecipeTooltip
// Size: 0x610 (Inherited: 0x4b8)
struct US_WidgetRecipeTooltip : US_WidgetMinimal {
	char pad_4B8[0x158]; // 0x4b8(0x158)

	void SetRecipeId(struct FName RecipeId); // Function Scavenger.S_WidgetRecipeTooltip.SetRecipeId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FS_RecipeMetadata GetRecipeMetadata(); // Function Scavenger.S_WidgetRecipeTooltip.GetRecipeMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchButtonRoot
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetResearchButtonRoot : US_WidgetMinimal {
};

// Class Scavenger.S_WidgetResearchStation
// Size: 0x7c8 (Inherited: 0x4b8)
struct US_WidgetResearchStation : US_WidgetResearchButtonRoot {
	struct FMulticastInlineDelegate OnResearchStationHovered; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnResearchStationClicked; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnCompleteResearchStationProjectRequestSuccess; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnCompleteResearchStationProjectRequestFailure; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnStartResearchStationProjectRequestSuccess; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnStartResearchStationProjectRequestFailure; // 0x508(0x10)
	struct FMulticastInlineDelegate OnCancelResearchStationProjectRequestSuccess; // 0x518(0x10)
	struct FMulticastInlineDelegate OnCancelResearchStationProjectRequestFailure; // 0x528(0x10)
	struct FMulticastInlineDelegate OnHurryResearchStationProjectRequestSuccess; // 0x538(0x10)
	struct FMulticastInlineDelegate OnHurryResearchStationProjectRequestFailure; // 0x548(0x10)
	struct FMulticastInlineDelegate OnInactiveResearchStationClicked; // 0x558(0x10)
	struct UMaterialInterface* ProgressBarMaterial; // 0x568(0x08)
	struct FName ProgressScalarName; // 0x570(0x08)
	struct FName CancelConfirmationId; // 0x578(0x08)
	struct US_WidgetMessagePrompt* CancelConfirmationWidget; // 0x580(0x08)
	int32_t ResearchStationStatusIndices[0x4]; // 0x588(0x10)
	struct FText AcceptConfirmationText; // 0x598(0x18)
	struct FText RejectConfirmationText; // 0x5b0(0x18)
	struct FString ItemNameArgument; // 0x5c8(0x10)
	struct FName HurryConfirmationId; // 0x5d8(0x08)
	struct US_WidgetMessagePrompt* HurryConfirmationWidget; // 0x5e0(0x08)
	struct FName HurryUnavailablId; // 0x5e8(0x08)
	struct US_WidgetMessagePrompt* HurryUnavailableWidget; // 0x5f0(0x08)
	enum class ES_ResearchStationId StationId; // 0x5f8(0x01)
	char pad_5F9[0x7]; // 0x5f9(0x07)
	struct FDataTableRowHandle RestrictionFormatHandle; // 0x600(0x10)
	struct FDataTableRowHandle StationNameFormatHandle; // 0x610(0x10)
	struct FDataTableRowHandle ItemNameFormatHandle; // 0x620(0x10)
	struct FDataTableRowHandle ResearchTimeFormatHandle; // 0x630(0x10)
	struct FDataTableRowHandle TimeMaxDaysFormatHandle; // 0x640(0x10)
	struct FDataTableRowHandle TimeMaxHoursFormatHandle; // 0x650(0x10)
	struct FDataTableRowHandle TimeMaxMinutesFormatHandle; // 0x660(0x10)
	struct FDataTableRowHandle TimeMaxSecondsFormatHandle; // 0x670(0x10)
	struct FDataTableRowHandle AssignTextHandle; // 0x680(0x10)
	struct FDataTableRowHandle CancelTextHandle; // 0x690(0x10)
	struct FDataTableRowHandle ReplaceTextHandle; // 0x6a0(0x10)
	struct FDataTableRowHandle ClaimTextHandle; // 0x6b0(0x10)
	struct FDataTableRowHandle ActionTextFormatHandle; // 0x6c0(0x10)
	struct FDataTableRowHandle HurryTextFormatHandle; // 0x6d0(0x10)
	struct US_WidgetCommonScavengerButton* ResearchStationButton; // 0x6e0(0x08)
	struct UWidgetSwitcher* StationStatusSwitcher; // 0x6e8(0x08)
	struct UImage* ItemIcon; // 0x6f0(0x08)
	struct UImage* RarityBar; // 0x6f8(0x08)
	struct UWidgetSwitcher* ProgressSwitcher; // 0x700(0x08)
	struct US_RichTextBlock* Restriction; // 0x708(0x08)
	struct US_RichTextBlock* StationName; // 0x710(0x08)
	struct US_RichTextBlock* ItemName; // 0x718(0x08)
	struct UImage* Progress; // 0x720(0x08)
	struct US_RichTextBlock* ProgressTimer; // 0x728(0x08)
	struct UOverlay* ActionPanel; // 0x730(0x08)
	struct US_RichTextBlock* ActionText; // 0x738(0x08)
	struct UWidget* HurryPanel; // 0x740(0x08)
	struct US_WidgetCommonScavengerButton* HurryButton; // 0x748(0x08)
	struct US_RichTextBlock* HurryText; // 0x750(0x08)
	struct USizeBox* ItemSizeBox; // 0x758(0x08)
	char pad_760[0x30]; // 0x760(0x30)
	struct US_WidgetMessagePrompt* m_currentMessagePrompt; // 0x790(0x08)
	char pad_798[0x30]; // 0x798(0x30)

	void NotifyStationProjectIsComplete(struct FS_OnlineResearchProjectState projectState); // Function Scavenger.S_WidgetResearchStation.NotifyStationProjectIsComplete // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchStation.NotifyStationProjectClaimFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimed(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.NotifyStationProjectClaimed // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProgressUpdated(struct FS_OnlineResearchProjectState projectState, float completionPercentage); // Function Scavenger.S_WidgetResearchStation.NotifyStationProgressUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationIsOwned(struct FString ResearchStationId); // Function Scavenger.S_WidgetResearchStation.NotifyStationIsOwned // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationIsLocked(); // Function Scavenger.S_WidgetResearchStation.NotifyStationIsLocked // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationIsAvailable(); // Function Scavenger.S_WidgetResearchStation.NotifyStationIsAvailable // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationAssignmentRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.NotifyStationAssignmentRequestSuccess // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationAssignmentRequestFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchStation.NotifyStationAssignmentRequestFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyHurryProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.NotifyHurryProjectRequestSuccess // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyHurryProjectRequestFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchStation.NotifyHurryProjectRequestFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCancelProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.NotifyCancelProjectRequestSuccess // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCancelProjectRequestFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchStation.NotifyCancelProjectRequestFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnStartResearchProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.HandleOnStartResearchProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnStartResearchProjectRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetResearchStation.HandleOnStartResearchProjectRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerResearchProjectsRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchStation.HandleOnPlayerResearchProjectsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInactiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchStation.HandleOnInactiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHurryResearchProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.HandleOnHurryResearchProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnHurryResearchProjectRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetResearchStation.HandleOnHurryResearchProjectRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHurryButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchStation.HandleOnHurryButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCompleteResearchProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.HandleOnCompleteResearchProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCancelResearchProjectRequestSuccessWithReplacement(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.HandleOnCancelResearchProjectRequestSuccessWithReplacement // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCancelResearchProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchStation.HandleOnCancelResearchProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnCancelResearchProjectRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetResearchStation.HandleOnCancelResearchProjectRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchStation.HandleOnActiveUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchStation.HandleOnActiveHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchStation.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleHurryConfirmationRejected(); // Function Scavenger.S_WidgetResearchStation.HandleHurryConfirmationRejected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleHurryConfirmationAccepted(); // Function Scavenger.S_WidgetResearchStation.HandleHurryConfirmationAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelConfirmationRejected(); // Function Scavenger.S_WidgetResearchStation.HandleCancelConfirmationRejected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelConfirmationAccepted(); // Function Scavenger.S_WidgetResearchStation.HandleCancelConfirmationAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelAndReplaceConfirmationAccepted(); // Function Scavenger.S_WidgetResearchStation.HandleCancelAndReplaceConfirmationAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearch
// Size: 0x670 (Inherited: 0x4b8)
struct US_WidgetResearch : US_WidgetMinimal {
	SoftClassProperty SubScreenData[0xa]; // 0x4b8(0x190)
	struct US_UMGLinearPanel* ResearchStationPanel; // 0x648(0x08)
	struct UGridPanel* ResearchCategoryTiles; // 0x650(0x08)
	char pad_658[0x18]; // 0x658(0x18)

	void NotifySubScreenSummoned(enum class ES_OnlineResearchProjectType CategoryType); // Function Scavenger.S_WidgetResearch.NotifySubScreenSummoned // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleSoftWidgetAddedToNavStack(struct US_WidgetMinimal* Widget); // Function Scavenger.S_WidgetResearch.HandleSoftWidgetAddedToNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnResearchCategoryTileClicked(enum class ES_OnlineResearchProjectType CategoryType); // Function Scavenger.S_WidgetResearch.HandleOnResearchCategoryTileClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerResearchProjectsRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearch.HandleOnPlayerResearchProjectsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearch.HandleOnPlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCurrencyRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearch.HandleOnPlayerCurrencyRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnInactiveResearchStationClicked(); // Function Scavenger.S_WidgetResearch.HandleOnInactiveResearchStationClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void EnterResearchCategorySubscreen(enum class ES_OnlineResearchProjectType CategoryType); // Function Scavenger.S_WidgetResearch.EnterResearchCategorySubscreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchCategoryTile
// Size: 0x5b8 (Inherited: 0x4b8)
struct US_WidgetResearchCategoryTile : US_WidgetResearchButtonRoot {
	struct FMulticastInlineDelegate OnResearchCategoryTileClicked; // 0x4b8(0x10)
	enum class ES_OnlineResearchProjectType Category; // 0x4c8(0x01)
	char pad_4C9[0x1f]; // 0x4c9(0x1f)
	struct FDataTableRowHandle CategoryNameFormatHandle; // 0x4e8(0x10)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x4f8(0x08)
	struct UImage* Icon; // 0x500(0x08)
	struct US_RichTextBlock* CategoryTitle; // 0x508(0x08)
	struct USizeBox* IconSizeBox; // 0x510(0x08)
	struct FDataTableRowHandle ProjectTypeDisplayableMetadata[0xa]; // 0x518(0xa0)

	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchCategoryTile.HandleOnPlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnButtonOverlayActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchCategoryTile.HandleOnButtonOverlayActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchSalvageTile
// Size: 0x5d0 (Inherited: 0x5b8)
struct US_WidgetResearchSalvageTile : US_WidgetResearchCategoryTile {
	struct FDataTableRowHandle SalvageItemCountHandle; // 0x5b8(0x10)
	struct US_RichTextBlock* salvageCount; // 0x5c8(0x08)

	void UpdateHeldSalvageCount(); // Function Scavenger.S_WidgetResearchSalvageTile.UpdateHeldSalvageCount // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyShouldShowAttentionState(int32_t salvageCount); // Function Scavenger.S_WidgetResearchSalvageTile.NotifyShouldShowAttentionState // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyShouldRemoveAttentionState(); // Function Scavenger.S_WidgetResearchSalvageTile.NotifyShouldRemoveAttentionState // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchOptionItem
// Size: 0x5d8 (Inherited: 0x4b8)
struct US_WidgetResearchOptionItem : US_WidgetResearchButtonRoot {
	struct FMulticastInlineDelegate OnResearchOptionOptionItemHovered; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnResearchOptionOptionItemClicked; // 0x4c8(0x10)
	bool bUseItemCount; // 0x4d8(0x01)
	char pad_4D9[0x3]; // 0x4d9(0x03)
	int32_t InventoryStateIndex[0x8]; // 0x4dc(0x20)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct US_WidgetResearchQuantitySelector* QuantitySelectionWidget; // 0x500(0x08)
	struct FDataTableRowHandle ItemNameFormatHandle; // 0x508(0x10)
	struct FDataTableRowHandle ResourceCountFormatHandle; // 0x518(0x10)
	struct FDataTableRowHandle RestrictionFormatHandle; // 0x528(0x10)
	struct UImage* ItemIcon; // 0x538(0x08)
	struct US_RichTextBlock* ItemName; // 0x540(0x08)
	struct UImage* RarityBar; // 0x548(0x08)
	struct US_WidgetCommonScavengerButton* ItemButton; // 0x550(0x08)
	struct UWidgetSwitcher* ValidStateSwitcher; // 0x558(0x08)
	struct US_RichTextBlock* ItemCount; // 0x560(0x08)
	struct UWidgetSwitcher* InventoryStateSwitcher; // 0x568(0x08)
	struct UBorder* ItemCountBacker; // 0x570(0x08)
	struct UImage* AvailableIcon; // 0x578(0x08)
	struct UHorizontalBox* TrackedIcons; // 0x580(0x08)
	struct USizeBox* ItemSizeBox; // 0x588(0x08)
	struct US_WidgetRestrictionStateSwitcher* RestrictionStateSwitcher; // 0x590(0x08)
	struct UImage* RarityBloom; // 0x598(0x08)
	struct US_RichTextBlock* Restriction; // 0x5a0(0x08)
	char pad_5A8[0x30]; // 0x5a8(0x30)

	void NotifyValidResearchOptionItemSetWithInsufficientFunds(struct FS_OnlineItemMetadata MetaData); // Function Scavenger.S_WidgetResearchOptionItem.NotifyValidResearchOptionItemSetWithInsufficientFunds // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyValidResearchOptionItemSet(struct FS_OnlineItemMetadata MetaData); // Function Scavenger.S_WidgetResearchOptionItem.NotifyValidResearchOptionItemSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchOptionItem.NotifyStationProjectClaimFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimed(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchOptionItem.NotifyStationProjectClaimed // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyRestrictedResearchOptionItemSet(struct FS_OnlineItemMetadata MetaData); // Function Scavenger.S_WidgetResearchOptionItem.NotifyRestrictedResearchOptionItemSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResearchOptionInventoryStateChanged(enum class ES_OnlineItemResearchState OldState, enum class ES_OnlineItemResearchState NewState, bool meetsProjectRequirements); // Function Scavenger.S_WidgetResearchOptionItem.NotifyResearchOptionInventoryStateChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOwnedResearchOptionItemSet(struct FS_OnlineItemMetadata MetaData); // Function Scavenger.S_WidgetResearchOptionItem.NotifyOwnedResearchOptionItemSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyInactiveResearchOptionItemSet(); // Function Scavenger.S_WidgetResearchOptionItem.NotifyInactiveResearchOptionItemSet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTrackedResearchProjectsChanged(struct TArray<struct FS_TrackedResearchProject> TrackedResearchProjects); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnTrackedResearchProjectsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnRightClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnRightClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerResearchProjectsRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnPlayerResearchProjectsRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnPlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCurrencyRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnPlayerCurrencyRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOnlineServiceManagerRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnOnlineServiceManagerRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCompleteResearchProjectRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnCompleteResearchProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchOptionItem.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResearchOptionInfo
// Size: 0x580 (Inherited: 0x4b8)
struct US_WidgetResearchOptionInfo : US_WidgetMinimal {
	int32_t RestrictionStateIndex[0x8]; // 0x4b8(0x20)
	float NameWrapWidth; // 0x4d8(0x04)
	float DescriptionWrapWidth; // 0x4dc(0x04)
	bool bHideRarityString; // 0x4e0(0x01)
	char pad_4E1[0x7]; // 0x4e1(0x07)
	struct FDataTableRowHandle OptionNameFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle TypeFormatHandle; // 0x4f8(0x10)
	struct FDataTableRowHandle RarityFormatHandle; // 0x508(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x518(0x10)
	struct FDataTableRowHandle RestrictionFormatHandle; // 0x528(0x10)
	struct US_RichTextBlock* OptionName; // 0x538(0x08)
	struct US_RichTextBlock* Type; // 0x540(0x08)
	struct US_RichTextBlock* Rarity; // 0x548(0x08)
	struct US_RichTextBlock* Description; // 0x550(0x08)
	struct UBorder* RarityBorder; // 0x558(0x08)
	struct UWidgetSwitcher* InventoryStateSwitcher; // 0x560(0x08)
	struct UWidgetSwitcher* DescriptionSwitcher; // 0x568(0x08)
	struct US_RichTextBlock* Restriction; // 0x570(0x08)
	char pad_578[0x8]; // 0x578(0x08)
};

// Class Scavenger.S_WidgetResearchQuantitySelector
// Size: 0x548 (Inherited: 0x4b8)
struct US_WidgetResearchQuantitySelector : US_WidgetMinimal {
	struct US_WidgetStationSelector* StationSelectionWidget; // 0x4b8(0x08)
	struct FDataTableRowHandle QuantityFormatHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle ResearchLocalizedTextHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle DisassembleLocalizedTextHandle; // 0x4e0(0x10)
	struct US_WidgetProjectDefinitionPanel* ResearchDefinitionPanel; // 0x4f0(0x08)
	struct US_WidgetCommonScavengerButton* IncreaseQuantity; // 0x4f8(0x08)
	struct US_WidgetCommonScavengerButton* DecreaseQuantity; // 0x500(0x08)
	struct US_RichTextBlock* CurrentQuantity; // 0x508(0x08)
	struct US_WidgetCommonScavengerButton* ActionButton; // 0x510(0x08)
	struct US_WidgetResearchOptionInfo* ResearchOptionInfo; // 0x518(0x08)
	struct US_UMGWidgetSwitcher* StateSwitcher; // 0x520(0x08)
	char pad_528[0x20]; // 0x528(0x20)

	void SetCurrentQuantityToMin(); // Function Scavenger.S_WidgetResearchQuantitySelector.SetCurrentQuantityToMin // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetCurrentQuantityToMax(); // Function Scavenger.S_WidgetResearchQuantitySelector.SetCurrentQuantityToMax // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetResearchQuantitySelector.NotifyStationProjectClaimFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationProjectClaimed(); // Function Scavenger.S_WidgetResearchQuantitySelector.NotifyStationProjectClaimed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnRequestSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetResearchQuantitySelector.HandleOnRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnAssembleItemRequestSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetResearchQuantitySelector.HandleOnAssembleItemRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleIncreaseQuantityClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchQuantitySelector.HandleIncreaseQuantityClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDecreaseQuantityClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchQuantitySelector.HandleDecreaseQuantityClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleActionButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetResearchQuantitySelector.HandleActionButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTieredResearchRow
// Size: 0x510 (Inherited: 0x4f0)
struct US_WidgetTieredResearchRow : US_WidgetTieredItemsRow {
	struct FMulticastInlineDelegate OnResearchOptionOptionItemHovered; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnResearchOptionOptionItemClicked; // 0x500(0x10)

	void HandleOnResearchOptionItemHovered(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetTieredResearchRow.HandleOnResearchOptionItemHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnResearchOptionItemClicked(struct FName ItemId, struct FName ResearchProjectId); // Function Scavenger.S_WidgetTieredResearchRow.HandleOnResearchOptionItemClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResourceResearchRow
// Size: 0x510 (Inherited: 0x510)
struct US_WidgetResourceResearchRow : US_WidgetTieredResearchRow {
};

// Class Scavenger.S_WidgetResourceResearchScreen
// Size: 0x700 (Inherited: 0x688)
struct US_WidgetResourceResearchScreen : US_WidgetResearchOptionScreen {
	struct US_WidgetNavBar* ResourcesNavBar; // 0x688(0x08)
	struct US_UMGLinearPanel* ResourceRows; // 0x690(0x08)
	int32_t ResourceTypeIndex[0x2]; // 0x698(0x08)
	struct FS_FilteredResearchOptions m_currentAssemblyOptions; // 0x6a0(0x60)

	void NotifyCurrentResourceTypeChanged(enum class ES_OnlineResourceType currentResourceType); // Function Scavenger.S_WidgetResourceResearchScreen.NotifyCurrentResourceTypeChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnNavBarIndexChanged(struct US_WidgetCommonScavengerButton* Button, int32_t NewIndex); // Function Scavenger.S_WidgetResourceResearchScreen.HandleOnNavBarIndexChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CycleCurrentResourceType(int32_t currentPageIndex); // Function Scavenger.S_WidgetResourceResearchScreen.CycleCurrentResourceType // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResourceItem
// Size: 0xba0 (Inherited: 0xba0)
struct US_WidgetResourceItem : US_WidgetInventoryItem {

	void NotifyPinged(); // Function Scavenger.S_WidgetResourceItem.NotifyPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResourcesPanel
// Size: 0x900 (Inherited: 0x900)
struct US_WidgetResourcesPanel : US_WidgetInventoryItemsPanel {
};

// Class Scavenger.S_WidgetRespawnBar
// Size: 0x560 (Inherited: 0x4b8)
struct US_WidgetRespawnBar : US_WidgetMinimal {
	struct FLinearColor RecloneAvailableColor; // 0x4b8(0x10)
	struct FLinearColor SquadEliminatedColor; // 0x4c8(0x10)
	struct FLinearColor SidelinedColor; // 0x4d8(0x10)
	struct FDataTableRowHandle RecloningHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle TeamEliminatedHandle; // 0x4f8(0x10)
	struct FDataTableRowHandle SidelinedHandle; // 0x508(0x10)
	struct FDataTableRowHandle GameTimeRemainingHandle; // 0x518(0x10)
	struct US_RichTextBlock* RecloningRichTextBlock; // 0x528(0x08)
	struct US_RichTextBlock* GameTimeRemainingRichTextBlock; // 0x530(0x08)
	struct UBorder* StatusBorder; // 0x538(0x08)
	struct UImage* DivLineImage; // 0x540(0x08)
	struct US_WidgetResurrectionMessaging* ResurrectionMessaging; // 0x548(0x08)
	char pad_550[0x10]; // 0x550(0x10)

	void NotifyTimerRatio_BP(float timeLeftRatio); // Function Scavenger.S_WidgetRespawnBar.NotifyTimerRatio_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRestrictionStateSwitcher
// Size: 0x4e8 (Inherited: 0x4b8)
struct US_WidgetRestrictionStateSwitcher : US_WidgetMinimal {
	int32_t UnrestrictedStateIndex; // 0x4b8(0x04)
	int32_t HiddenStateIndex; // 0x4bc(0x04)
	int32_t DescriptionStateIndex; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct FDataTableRowHandle RestrictionDescriptionFormatHandle; // 0x4c8(0x10)
	struct US_UMGWidgetSwitcher* RestrictionStateSwitcher; // 0x4d8(0x08)
	struct US_RichTextBlock* RestrictionDescription; // 0x4e0(0x08)
};

// Class Scavenger.S_WidgetResurrectionMessaging
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetResurrectionMessaging : US_WidgetMinimal {
	struct FDataTableRowHandle ResurrectionTokenMessageHandles[0x2]; // 0x4b8(0x20)
	struct US_UMGWidgetSwitcher* ResurrectionTokenSwitcher; // 0x4d8(0x08)
	struct US_RichTextBlock* RemainingData; // 0x4e0(0x08)
	struct US_RichTextBlock* ResurrectionTokenAvailable; // 0x4e8(0x08)

	void HandleOnAnyTeamStateChanged(); // Function Scavenger.S_WidgetResurrectionMessaging.HandleOnAnyTeamStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResurrectionToken
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetResurrectionToken : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void NotifyResurrectionTokenDeactivated(); // Function Scavenger.S_WidgetResurrectionToken.NotifyResurrectionTokenDeactivated // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectionTokenActivated(); // Function Scavenger.S_WidgetResurrectionToken.NotifyResurrectionTokenActivated // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetResurrectionTokenPanel
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetResurrectionTokenPanel : US_WidgetMinimal {
	struct US_WidgetResurrectionToken* TokenClass; // 0x4b8(0x08)
	struct US_UMGLinearPanel* TokenContainer; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)
};

// Class Scavenger.S_WidgetResurrectionTokenProgress
// Size: 0x4e8 (Inherited: 0x4b8)
struct US_WidgetResurrectionTokenProgress : US_WidgetMinimal {
	struct FDataTableRowHandle ProgressHandle; // 0x4b8(0x10)
	struct US_RichTextBlock* ProgressText; // 0x4c8(0x08)
	struct FS_OnlineGameTuningValues m_cachedGameTuningValues; // 0x4d0(0x14)
	char pad_4E4[0x4]; // 0x4e4(0x04)

	void NotifyResurrectionTokenProgressChanged(int32_t remainingDataCount); // Function Scavenger.S_WidgetResurrectionTokenProgress.NotifyResurrectionTokenProgressChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyResurrectionTokenCountChanged(); // Function Scavenger.S_WidgetResurrectionTokenProgress.NotifyResurrectionTokenCountChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetRewardItem
// Size: 0x558 (Inherited: 0x4b8)
struct US_WidgetRewardItem : US_WidgetMinimal {
	struct FVector2D RewardWidgetSize; // 0x4b8(0x08)
	struct FMargin RewardItemImagePadding; // 0x4c0(0x10)
	int32_t DefaultWidgetIndex; // 0x4d0(0x04)
	int32_t TitleWidgetIndex; // 0x4d4(0x04)
	struct FDataTableRowHandle MetadataFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle TypeFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle CurrencyFormatHandle; // 0x4f8(0x10)
	struct UImage* RewardItem; // 0x508(0x08)
	struct US_RichTextBlock* Name; // 0x510(0x08)
	struct US_RichTextBlock* Type; // 0x518(0x08)
	struct UImage* RarityBar; // 0x520(0x08)
	struct USizeBox* RewardItemSizeBox; // 0x528(0x08)
	struct UBorder* RarityBorder; // 0x530(0x08)
	struct USizeBox* RewardSizeBox; // 0x538(0x08)
	struct US_UMGWidgetSwitcher* RewardTypeSwitcher; // 0x540(0x08)
	char pad_548[0x10]; // 0x548(0x10)
};

// Class Scavenger.S_WidgetSalvage
// Size: 0x638 (Inherited: 0x4b8)
struct US_WidgetSalvage : US_WidgetMinimal {
	int32_t MaxResultNumber; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct US_WidgetSalvageResultItem* SalvageResultClass; // 0x4c0(0x08)
	int32_t SalvageStatusIndices[0x4]; // 0x4c8(0x10)
	struct FDataTableRowHandle SalvageSubjectHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle SalvageClassHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle SalvageNameHandle; // 0x4f8(0x10)
	struct FDataTableRowHandle OpeningSalvageHandle; // 0x508(0x10)
	struct FDataTableRowHandle DeconstructActionHandle; // 0x518(0x10)
	struct FDataTableRowHandle CollectActionHandle; // 0x528(0x10)
	struct US_UMGWidgetSwitcher* DeconstructSwitcher; // 0x538(0x08)
	struct US_UMGLinearPanel* ResourceResults; // 0x540(0x08)
	struct US_RichTextBlock* SalvageSubject; // 0x548(0x08)
	struct US_RichTextBlock* SalvageClass; // 0x550(0x08)
	struct UImage* SalvageIconThumbnail; // 0x558(0x08)
	struct US_RichTextBlock* SalvageName; // 0x560(0x08)
	struct US_RichTextBlock* OpeningSalvageCount; // 0x568(0x08)
	struct UWidgetSwitcher* SalvageInfoSwitcher; // 0x570(0x08)
	struct US_WidgetCommonScavengerButton* SalvageActionButton; // 0x578(0x08)
	char pad_580[0xb0]; // 0x580(0xb0)
	struct AS_SalvageReceiver* m_salvageReceiver; // 0x630(0x08)

	void NotifyValidSalvageItemAvailable(struct FS_SalvageItemMetadata salvageItemMetadata); // Function Scavenger.S_WidgetSalvage.NotifyValidSalvageItemAvailable // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySalvageBreakdownRequestMade(struct FS_OnlineInventoryItem requestedItem); // Function Scavenger.S_WidgetSalvage.NotifySalvageBreakdownRequestMade // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerInventoryChanged(int32_t pendingSalvageItems); // Function Scavenger.S_WidgetSalvage.NotifyPlayerInventoryChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNoSalvageItemAvailable(); // Function Scavenger.S_WidgetSalvage.NotifyNoSalvageItemAvailable // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyNewSalvageItemShown(); // Function Scavenger.S_WidgetSalvage.NotifyNewSalvageItemShown // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBreakdownStarted(); // Function Scavenger.S_WidgetSalvage.NotifyBreakdownStarted // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBreakdownFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetSalvage.NotifyBreakdownFailed // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyBreakdownEnded(struct FS_OnlinePlayerInventoryDelta inventoryDelta); // Function Scavenger.S_WidgetSalvage.NotifyBreakdownEnded // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool IsBreakdownInProgress(); // Function Scavenger.S_WidgetSalvage.IsBreakdownInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void InitializeSalvageScreen(); // Function Scavenger.S_WidgetSalvage.InitializeSalvageScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnSalvageStateChanged(enum class ES_SalvageState newSalvageState); // Function Scavenger.S_WidgetSalvage.HandleOnSalvageStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnSalvageActionButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSalvage.HandleOnSalvageActionButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerInventoryRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetSalvage.HandleOnPlayerInventoryRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnBreakdownSalvageItemRequestSuccess(struct FS_OnlinePlayerInventoryDelta Reward); // Function Scavenger.S_WidgetSalvage.HandleOnBreakdownSalvageItemRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnActiveWidgetChanged(struct UWidget* LastWidget, struct UWidget* NewWidget, int32_t NewWidgetIndex); // Function Scavenger.S_WidgetSalvage.HandleOnActiveWidgetChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetAvailableSalvageItems(); // Function Scavenger.S_WidgetSalvage.GetAvailableSalvageItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ForceEndSalvageBreakdown(); // Function Scavenger.S_WidgetSalvage.ForceEndSalvageBreakdown // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSalvageResultItem
// Size: 0x560 (Inherited: 0x4b8)
struct US_WidgetSalvageResultItem : US_WidgetMinimal {
	int32_t MaterialIndex; // 0x4b8(0x04)
	int32_t ComponentIndex; // 0x4bc(0x04)
	float RevealDelay; // 0x4c0(0x04)
	float CardRevealPlaybackSpeed; // 0x4c4(0x04)
	struct FDataTableRowHandle ResourceNameHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle ResourceAmountHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle RarityFormat; // 0x4e8(0x10)
	struct US_RichTextBlock* ResourceType; // 0x4f8(0x08)
	struct US_RichTextBlock* ResourceName; // 0x500(0x08)
	struct US_RichTextBlock* ResourceAmount; // 0x508(0x08)
	struct UBorder* ResourceTypeBorder; // 0x510(0x08)
	struct UWidgetSwitcher* ResourceSwitcher; // 0x518(0x08)
	struct UImage* MaterialRarity; // 0x520(0x08)
	struct UImage* MaterialIcon; // 0x528(0x08)
	struct UImage* ComponentRarity; // 0x530(0x08)
	struct UImage* ComponentIcon; // 0x538(0x08)
	struct UImage* RarityBar; // 0x540(0x08)
	struct UWidgetAnimation* CardReveal; // 0x548(0x08)
	struct UOverlay* CardData; // 0x550(0x08)
	struct FTimerHandle m_revealHandle; // 0x558(0x08)

	void RevealTimerEnded(); // Function Scavenger.S_WidgetSalvageResultItem.RevealTimerEnded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifySalvageResultItemSet(struct FS_OnlineItemMetadata itemMetadata, int32_t ItemCount, int32_t resultIndex); // Function Scavenger.S_WidgetSalvageResultItem.NotifySalvageResultItemSet // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySalvageBreakdownStarted(); // Function Scavenger.S_WidgetSalvageResultItem.NotifySalvageBreakdownStarted // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetScoreboardRecapSubscreen
// Size: 0x710 (Inherited: 0x508)
struct US_WidgetScoreboardRecapSubscreen : US_WidgetPhaseSubscreen {
	float RowAnimationDelay; // 0x508(0x04)
	float PreTakeoffScoreboardHoldTime; // 0x50c(0x04)
	float PlacementDisplayDelay; // 0x510(0x04)
	float PostTakeoffScoreboardHoldTime; // 0x514(0x04)
	struct FDataTableRowHandle VictoryFormatHandle; // 0x518(0x10)
	struct FDataTableRowHandle PlacedFormatHandle; // 0x528(0x10)
	struct US_WidgetGameScoreboard* Scoreboard; // 0x538(0x08)
	struct UTextBlock* Placement; // 0x540(0x08)
	struct UWidgetAnimation* PlacementReveal; // 0x548(0x08)
	struct UWidgetAnimation* VictoryReveal; // 0x550(0x08)
	struct FS_MatchRecord m_matchRecord; // 0x558(0x180)
	struct FTimerHandle m_stepTimer; // 0x6d8(0x08)
	char pad_6E0[0x8]; // 0x6e0(0x08)
	struct TArray<struct UWidget*> m_scoreboardRows; // 0x6e8(0x10)
	char pad_6F8[0x8]; // 0x6f8(0x08)
	struct FTimerHandle m_rowAnimationTimer; // 0x700(0x08)
	char pad_708[0x8]; // 0x708(0x08)
};

// Class Scavenger.S_WidgetScreenInput
// Size: 0x8198 (Inherited: 0x8188)
struct US_WidgetScreenInput : US_WidgetCommonScavengerButton {
	struct US_UMGCommonKey* InputAction; // 0x8188(0x08)
	char pad_8190[0x8]; // 0x8190(0x08)

	void HandleOnInputTypeChanged(bool isGamepad); // Function Scavenger.S_WidgetScreenInput.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetScreenInput.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetScreenInputDisplay
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_WidgetScreenInputDisplay : US_WidgetMinimal {
	struct US_WidgetScreenInput* ScreenInputButton; // 0x4b8(0x08)
	struct US_UMGLinearPanel* GlobalInputs; // 0x4c0(0x08)
	struct US_UMGLinearPanel* ScreenSpecificInputs; // 0x4c8(0x08)
	struct UImage* Divider; // 0x4d0(0x08)

	void HandleOnScreenInputChanged(struct TArray<struct FS_NavigationInputData> enabledInputs); // Function Scavenger.S_WidgetScreenInputDisplay.HandleOnScreenInputChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsBattlePass
// Size: 0x500 (Inherited: 0x4b8)
struct US_WidgetSeasonsBattlePass : US_WidgetMinimal {
	struct UImage* BattlePassLogo; // 0x4b8(0x08)
	struct US_RichTextBlock* BattlePassTitle; // 0x4c0(0x08)
	struct US_RichTextBlock* BattlePassDescription; // 0x4c8(0x08)
	struct FDataTableRowHandle BattlePassTitleFormatHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle BattlePassDescriptionFormatHandle; // 0x4e0(0x10)
	char pad_4F0[0x10]; // 0x4f0(0x10)
};

// Class Scavenger.S_WidgetSeasonsBattlePassBuy
// Size: 0x528 (Inherited: 0x4b8)
struct US_WidgetSeasonsBattlePassBuy : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct US_RichTextBlock* BattlePassTitle; // 0x4c8(0x08)
	struct US_RichTextBlock* BattlePassDescription; // 0x4d0(0x08)
	struct US_RichTextBlock* BattlePassPrice; // 0x4d8(0x08)
	struct US_WidgetCommonScavengerButton* BattlePassBuyButton; // 0x4e0(0x08)
	struct UWidgetAnimation* HoverAnimation; // 0x4e8(0x08)
	struct FDataTableRowHandle BattlePassTitleFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle BattlePassDescriptionFormatHandle; // 0x500(0x10)
	struct FDataTableRowHandle BattlePassPriceFormatHandle; // 0x510(0x10)
	char pad_520[0x8]; // 0x520(0x08)

	void HandleOnBattlePassBuyButtonUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsBattlePassBuy.HandleOnBattlePassBuyButtonUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnBattlePassBuyButtonHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsBattlePassBuy.HandleOnBattlePassBuyButtonHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnBattlePassBuyButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsBattlePassBuy.HandleOnBattlePassBuyButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsCarousel
// Size: 0x610 (Inherited: 0x510)
struct US_WidgetSeasonsCarousel : US_WidgetScrollingTieredItemsRow {
	struct FMulticastInlineDelegate OnSkipByTierChipsClicked; // 0x510(0x10)
	struct FMulticastInlineDelegate OnCarouselItemHovered; // 0x520(0x10)
	struct US_WidgetSeasonsTierContainer* TierContainerWidgetClass; // 0x530(0x08)
	struct US_WidgetMessagePrompt* ConfirmationMessagePromptClass; // 0x538(0x08)
	SoftClassProperty StorePrimarySubscreen; // 0x540(0x28)
	struct TMap<enum class ES_ItemRarity, struct TSoftObjectPtr<struct UTexture2D>> RarityBackgrounds; // 0x568(0x50)
	struct US_WidgetSeasonsProgress* SeasonProgress; // 0x5b8(0x08)
	float StackCollisionHoveredWidth; // 0x5c0(0x04)
	char pad_5C4[0x4]; // 0x5c4(0x04)
	struct US_WidgetSeasonsTierContainer* m_currentHoveredContainer; // 0x5c8(0x08)
	char pad_5D0[0x40]; // 0x5d0(0x40)

	void OnTierSkipPromptConfirmed(); // Function Scavenger.S_WidgetSeasonsCarousel.OnTierSkipPromptConfirmed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnTierSkipPromptCanceled(); // Function Scavenger.S_WidgetSeasonsCarousel.OnTierSkipPromptCanceled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTierSkipOfferRequestSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetSeasonsCarousel.HandleOnTierSkipOfferRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnContainerHovered(struct US_WidgetSeasonsTierContainer* container); // Function Scavenger.S_WidgetSeasonsCarousel.HandleOnContainerHovered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleOnContainerClicked(struct US_WidgetSeasonsTierContainer* container); // Function Scavenger.S_WidgetSeasonsCarousel.HandleOnContainerClicked // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void FocusOnCurrentTier(); // Function Scavenger.S_WidgetSeasonsCarousel.FocusOnCurrentTier // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void AdjustCarouselActiveTier(); // Function Scavenger.S_WidgetSeasonsCarousel.AdjustCarouselActiveTier // (Final|Native|Public) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsDescription
// Size: 0x570 (Inherited: 0x4b8)
struct US_WidgetSeasonsDescription : US_WidgetMinimal {
	struct US_RichTextBlock* SeasonTitle; // 0x4b8(0x08)
	struct US_RichTextBlock* SeasonSubTitle; // 0x4c0(0x08)
	struct US_RichTextBlock* CountdownDays; // 0x4c8(0x08)
	struct US_RichTextBlock* CountdownHours; // 0x4d0(0x08)
	struct US_RichTextBlock* CountdownMinutes; // 0x4d8(0x08)
	struct US_RichTextBlock* CountdownSeconds; // 0x4e0(0x08)
	struct US_RichTextBlock* CountdownDescription; // 0x4e8(0x08)
	struct US_RichTextBlock* SeasonNumber; // 0x4f0(0x08)
	struct UImage* SeasonImage; // 0x4f8(0x08)
	struct FDataTableRowHandle SeasonTitleFormatHandle; // 0x500(0x10)
	struct FDataTableRowHandle SeasonSubTitleFormatHandle; // 0x510(0x10)
	struct FDataTableRowHandle CountdownFormatHandle; // 0x520(0x10)
	struct FDataTableRowHandle CountdownDescriptionFormatHandle; // 0x530(0x10)
	struct FDataTableRowHandle CountdownHintFormatHandle; // 0x540(0x10)
	struct FDataTableRowHandle SeasonNumberFormatHandle; // 0x550(0x10)
	char pad_560[0x10]; // 0x560(0x10)
};

// Class Scavenger.S_WidgetSeasonsGetBattlePass
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetSeasonsGetBattlePass : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnGetBattlePassButtonClicked; // 0x4b8(0x10)
	struct US_WidgetCommonScavengerButton* BattlePassButton; // 0x4c8(0x08)
	struct US_RichTextBlock* BattlePassDescription; // 0x4d0(0x08)
	struct FDataTableRowHandle BattlePassButtonFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle BattlePassDescriptionFormatHandle; // 0x4e8(0x10)

	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsGetBattlePass.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsItemDetailsPanel
// Size: 0x520 (Inherited: 0x4b8)
struct US_WidgetSeasonsItemDetailsPanel : US_WidgetMinimal {
	struct US_RichTextBlock* ItemName; // 0x4b8(0x08)
	struct US_RichTextBlock* ItemRarity; // 0x4c0(0x08)
	struct US_RichTextBlock* ItemSubtitle; // 0x4c8(0x08)
	struct US_RichTextBlock* ItemDescription; // 0x4d0(0x08)
	struct UBorder* ItemRarityBorder; // 0x4d8(0x08)
	struct FDataTableRowHandle ItemNameFormatHandle; // 0x4e0(0x10)
	struct FDataTableRowHandle ItemRarityFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle ItemSubtitleFormatHandle; // 0x500(0x10)
	struct FDataTableRowHandle ItemDescriptionFormatHandle; // 0x510(0x10)

	void SetItemSubtitle(struct FText Subtitle); // Function Scavenger.S_WidgetSeasonsItemDetailsPanel.SetItemSubtitle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemRarity(struct FText rarityText, enum class ES_ItemRarity rarityType); // Function Scavenger.S_WidgetSeasonsItemDetailsPanel.SetItemRarity // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemName(struct FText Name); // Function Scavenger.S_WidgetSeasonsItemDetailsPanel.SetItemName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetItemDescription(struct FText Description); // Function Scavenger.S_WidgetSeasonsItemDetailsPanel.SetItemDescription // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsMainScreen
// Size: 0x5c8 (Inherited: 0x4b8)
struct US_WidgetSeasonsMainScreen : US_WidgetMinimal {
	struct US_WidgetSeasonsGetBattlePass* ClickedButtonBattlePass; // 0x4b8(0x08)
	struct US_WidgetSeasonsDescription* SeasonsDescription; // 0x4c0(0x08)
	struct US_WidgetSeasonsCarousel* SeasonsCarousel; // 0x4c8(0x08)
	struct US_WidgetSeasonsBattlePass* BattlePassDescription; // 0x4d0(0x08)
	struct US_WidgetSeasonsBattlePassBuy* BattlePassBuy; // 0x4d8(0x08)
	struct US_WidgetSeasonsBattlePassBuy* BattlePassBuyBundle; // 0x4e0(0x08)
	struct US_WidgetStoreOfferPurchaseOverlay* BattlePassPurchaseOverlay; // 0x4e8(0x08)
	struct UWidgetSwitcher* SeasonsSwitcher; // 0x4f0(0x08)
	struct US_WidgetSeasonsItemDetailsPanel* SeasonsItemDetailsPanel; // 0x4f8(0x08)
	struct UImage* RarityBackgroundImage; // 0x500(0x08)
	struct UImage* TierPreview; // 0x508(0x08)
	struct UImage* BattlePassRarityBackground; // 0x510(0x08)
	struct UImage* BattlePassPreview; // 0x518(0x08)
	struct US_WidgetMessagePrompt* ErrorSeasonsPluginMessagePromptClass; // 0x520(0x08)
	struct US_WidgetMessagePrompt* ConfirmationMessagePromptClass; // 0x528(0x08)
	SoftClassProperty StorePrimarySubscreen; // 0x530(0x28)
	struct TMap<enum class ES_ItemRarity, struct TSoftObjectPtr<struct UTexture2D>> RarityBackgrounds; // 0x558(0x50)
	char pad_5A8[0x20]; // 0x5a8(0x20)

	void OnTransitionToShopConfirmed(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnTransitionToShopConfirmed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnTransitionToShopCanceled(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnTransitionToShopCanceled // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnErrorInSeasonsPlugin(enum class ES_SeasonsResult errorType); // Function Scavenger.S_WidgetSeasonsMainScreen.OnErrorInSeasonsPlugin // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnClickedBattlePass(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnClickedBattlePass // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnClickedBack(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnClickedBack // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnBattlePassPurchaseOverlayDismissed(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnBattlePassPurchaseOverlayDismissed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void OnBattlePassBuy(struct FName battlePassId); // Function Scavenger.S_WidgetSeasonsMainScreen.OnBattlePassBuy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void OnBattlePassAlreadyOwnedDismissed(); // Function Scavenger.S_WidgetSeasonsMainScreen.OnBattlePassAlreadyOwnedDismissed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void InitializeItemDetailsPanel(struct FName entitlementId); // Function Scavenger.S_WidgetSeasonsMainScreen.InitializeItemDetailsPanel // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnCarouselItemHovered(struct FName entitlementId); // Function Scavenger.S_WidgetSeasonsMainScreen.HandleOnCarouselItemHovered // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleMenuInputPressed(enum class ES_GameInputActionType ActionType); // Function Scavenger.S_WidgetSeasonsMainScreen.HandleMenuInputPressed // (Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsNavBarButton
// Size: 0x8188 (Inherited: 0x8188)
struct US_WidgetSeasonsNavBarButton : US_WidgetCommonScavengerButton {
};

// Class Scavenger.S_WidgetSeasonsProgress
// Size: 0x4e8 (Inherited: 0x4b8)
struct US_WidgetSeasonsProgress : US_WidgetMinimal {
	struct US_RichTextBlock* tierNumber; // 0x4b8(0x08)
	struct US_RichTextBlock* SeasonPoints; // 0x4c0(0x08)
	struct FDataTableRowHandle TierNumberFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle SeasonPointsFormatHandle; // 0x4d8(0x10)

	void SetTierNumber(int32_t tierNumber); // Function Scavenger.S_WidgetSeasonsProgress.SetTierNumber // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSeasonPoints(int32_t SeasonPoints, int32_t seasonPointsPerTier); // Function Scavenger.S_WidgetSeasonsProgress.SetSeasonPoints // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsPurchasePopup
// Size: 0x4d8 (Inherited: 0x4b8)
struct US_WidgetSeasonsPurchasePopup : US_WidgetMinimal {
	struct US_RichTextBlock* Header; // 0x4b8(0x08)
	struct US_RichTextBlock* Description; // 0x4c0(0x08)
	struct US_RichTextBlock* SeasonName; // 0x4c8(0x08)
	struct UImage* SeasonImage; // 0x4d0(0x08)

	void SetSeasonName(struct FText ItemDescription); // Function Scavenger.S_WidgetSeasonsPurchasePopup.SetSeasonName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetSeasonImage(struct TSoftObjectPtr<struct UTexture2D> SeasonImage, bool useTextureSize); // Function Scavenger.S_WidgetSeasonsPurchasePopup.SetSeasonImage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHeader(struct FText ItemName); // Function Scavenger.S_WidgetSeasonsPurchasePopup.SetHeader // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDescription(struct FText ItemSubtitle); // Function Scavenger.S_WidgetSeasonsPurchasePopup.SetDescription // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSeasonsTierContainer
// Size: 0x610 (Inherited: 0x4b8)
struct US_WidgetSeasonsTierContainer : US_WidgetMinimal {
	char pad_4B8[0x30]; // 0x4b8(0x30)
	float AnimationSpeed; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct US_WidgetCommonScavengerButton* ContainerButton; // 0x4f0(0x08)
	struct UImage* BattlePassLogo; // 0x4f8(0x08)
	struct UImage* StatusIcon; // 0x500(0x08)
	struct UImage* TierReward; // 0x508(0x08)
	struct UImage* FooterFader; // 0x510(0x08)
	struct UImage* Background; // 0x518(0x08)
	struct UImage* FrameOutline; // 0x520(0x08)
	struct UImage* LockIcon; // 0x528(0x08)
	struct UImage* TierBadge; // 0x530(0x08)
	struct UImage* TierSkipIcon; // 0x538(0x08)
	struct UTexture2D* BadgeLight; // 0x540(0x08)
	struct UOverlay* Header; // 0x548(0x08)
	struct UOverlay* Footer; // 0x550(0x08)
	struct US_RichTextBlock* FooterText; // 0x558(0x08)
	struct US_RichTextBlock* TierLevel; // 0x560(0x08)
	struct US_RichTextBlock* SkipAmount; // 0x568(0x08)
	struct US_UMGProgressBar* TierProgress; // 0x570(0x08)
	struct UWidgetAnimation* ButtonOnHoverAnimation; // 0x578(0x08)
	struct US_UMGContentArea* TierContentArea; // 0x580(0x08)
	struct USizeBox* BackgroundSizeBox; // 0x588(0x08)
	struct FDataTableRowHandle SeasonTierLevelHandleLight; // 0x590(0x10)
	struct FDataTableRowHandle SeasonTierLevelHandleDark; // 0x5a0(0x10)
	struct FDataTableRowHandle TierInstantFormatHandle; // 0x5b0(0x10)
	struct FDataTableRowHandle TierClaimReadyFormatHandle; // 0x5c0(0x10)
	struct FDataTableRowHandle TierClaimFormatHandle; // 0x5d0(0x10)
	struct FDataTableRowHandle TierSkipFormatHandle; // 0x5e0(0x10)
	char pad_5F0[0x20]; // 0x5f0(0x20)

	void SetUnhoveredState(); // Function Scavenger.S_WidgetSeasonsTierContainer.SetUnhoveredState // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void SetTierRewardState(enum class ES_TierRewardState tierState); // Function Scavenger.S_WidgetSeasonsTierContainer.SetTierRewardState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTierRewardCost(enum class ES_TierType tierType); // Function Scavenger.S_WidgetSeasonsTierContainer.SetTierRewardCost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTierProgress(float Progress); // Function Scavenger.S_WidgetSeasonsTierContainer.SetTierProgress // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTierLevel(int32_t Level); // Function Scavenger.S_WidgetSeasonsTierContainer.SetTierLevel // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetTierContentAreaWidth(float Width); // Function Scavenger.S_WidgetSeasonsTierContainer.SetTierContentAreaWidth // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetStatusIcon(struct TSoftObjectPtr<struct UTexture2D> Texture); // Function Scavenger.S_WidgetSeasonsTierContainer.SetStatusIcon // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRewardImage(struct TSoftObjectPtr<struct UTexture2D> Texture); // Function Scavenger.S_WidgetSeasonsTierContainer.SetRewardImage // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRarityColors(struct FS_TonedInterfaceColors tonedColors, struct TSoftObjectPtr<struct UTexture2D> rarityBackground); // Function Scavenger.S_WidgetSeasonsTierContainer.SetRarityColors // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHoveredState(); // Function Scavenger.S_WidgetSeasonsTierContainer.SetHoveredState // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void HandleOnUnhovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsTierContainer.HandleOnUnhovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsTierContainer.HandleOnHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSeasonsTierContainer.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	enum class ES_TierRewardState GetTierRewardState(); // Function Scavenger.S_WidgetSeasonsTierContainer.GetTierRewardState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_TierType GetTierRewardCost(); // Function Scavenger.S_WidgetSeasonsTierContainer.GetTierRewardCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetTierLevel(); // Function Scavenger.S_WidgetSeasonsTierContainer.GetTierLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FVector2D GetTierContentAreaSize(); // Function Scavenger.S_WidgetSeasonsTierContainer.GetTierContentAreaSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetShelterState
// Size: 0x550 (Inherited: 0x4c8)
struct US_WidgetShelterState : US_PingableWidget {
	struct UTexture2D* ShelterTextures[0x5]; // 0x4c8(0x28)
	struct UTexture2D* ShelterBackerTextures[0x5]; // 0x4f0(0x28)
	struct UTexture2D* NoShelterTexture; // 0x518(0x08)
	struct UTexture2D* NoShelterBackerTexture; // 0x520(0x08)
	struct UMaterialInterface* ShelterIconMaterial; // 0x528(0x08)
	struct UImage* ShelterIcon; // 0x530(0x08)
	char pad_538[0x10]; // 0x538(0x10)
	struct UMaterialInstanceDynamic* m_shelterIconMaterial; // 0x548(0x08)

	void NotifyPlayerIsNowSheltered(); // Function Scavenger.S_WidgetShelterState.NotifyPlayerIsNowSheltered // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPlayerIsNoLongerSheltered(enum class ES_ShelterType ShelterState); // Function Scavenger.S_WidgetShelterState.NotifyPlayerIsNoLongerSheltered // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnStormCategoryChanged(enum class ES_StormCategory StormCategory); // Function Scavenger.S_WidgetShelterState.HandleOnStormCategoryChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnShelterStateChanged(enum class ES_ShelterType newShelterState); // Function Scavenger.S_WidgetShelterState.HandleOnShelterStateChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnResurrectedBy(struct FS_EventParameterControllerVariant resurrectingController); // Function Scavenger.S_WidgetShelterState.HandleOnResurrectedBy // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerCharacterSet(struct AS_PlayerCharacter* newPlayerCharacter); // Function Scavenger.S_WidgetShelterState.HandleOnPlayerCharacterSet // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSocial
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetSocial : US_WidgetMinimal {
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct US_WidgetFriendList* FriendList; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	void SetWidgetScreen(enum class ES_FriendListTabs friendListTab); // Function Scavenger.S_WidgetSocial.SetWidgetScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSocialInvite
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetSocialInvite : US_WidgetSocialButtonBase {
};

// Class Scavenger.S_WidgetSocialInviteIncoming
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetSocialInviteIncoming : US_WidgetSocialInvite {

	void OnActiveHovered(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialInviteIncoming.OnActiveHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPartyInviteIncoming
// Size: 0x6d8 (Inherited: 0x660)
struct US_WidgetPartyInviteIncoming : US_WidgetSocialInviteIncoming {
	struct UWidget* PartyFullOverlay; // 0x660(0x08)
	struct FS_PendingPartyInvite m_partyInvite; // 0x668(0x70)

	struct FS_LobbyEndpoint GetLobbyEndpoint(); // Function Scavenger.S_WidgetPartyInviteIncoming.GetLobbyEndpoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPartyInviteOutgoing
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetPartyInviteOutgoing : US_WidgetSocialInvite {
};

// Class Scavenger.S_WidgetPartyJoinRequestIncoming
// Size: 0x670 (Inherited: 0x660)
struct US_WidgetPartyJoinRequestIncoming : US_WidgetSocialInviteIncoming {
	struct UWidget* PartyFullOverlay; // 0x660(0x08)
	char pad_668[0x8]; // 0x668(0x08)

	void OnPartyChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetPartyJoinRequestIncoming.OnPartyChanged // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetPartyJoinRequestOutgoing
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetPartyJoinRequestOutgoing : US_WidgetSocialInvite {
};

// Class Scavenger.S_WidgetFriendInviteIncoming
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetFriendInviteIncoming : US_WidgetSocialInviteIncoming {
};

// Class Scavenger.S_WidgetFriendInviteOutgoing
// Size: 0x660 (Inherited: 0x660)
struct US_WidgetFriendInviteOutgoing : US_WidgetSocialInvite {
};

// Class Scavenger.S_WidgetSocialNameHeader
// Size: 0x578 (Inherited: 0x4b8)
struct US_WidgetSocialNameHeader : US_WidgetMinimal {
	struct FDataTableRowHandle PlayerNameFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle PlayerNameAndIdFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle PlayerRankFormatHandle; // 0x4d8(0x10)
	struct US_RichTextBlock* PlayerName; // 0x4e8(0x08)
	struct US_RichTextBlock* PlayerRank; // 0x4f0(0x08)
	struct US_WidgetCosmeticTitle* CosmeticTitle; // 0x4f8(0x08)
	char pad_500[0x78]; // 0x500(0x78)

	void HandleOnUserGameSettingsChanged(struct FS_UserGameSettings OldSettings, struct FS_UserGameSettings NewSettings); // Function Scavenger.S_WidgetSocialNameHeader.HandleOnUserGameSettingsChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnLoginSucceed(); // Function Scavenger.S_WidgetSocialNameHeader.HandleOnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCosmeticLoadoutChanged(struct AS_PlayerControllerBase* PlayerController); // Function Scavenger.S_WidgetSocialNameHeader.HandleOnCosmeticLoadoutChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnCharacterLevelUpdated(struct FName CharacterId, int32_t NewLevel); // Function Scavenger.S_WidgetSocialNameHeader.HandleOnCharacterLevelUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSocialNameplate
// Size: 0x668 (Inherited: 0x660)
struct US_WidgetSocialNameplate : US_WidgetSocialButtonBase {
	char pad_660[0x8]; // 0x660(0x08)
};

// Class Scavenger.S_WidgetSocialNotification
// Size: 0x600 (Inherited: 0x4b8)
struct US_WidgetSocialNotification : US_WidgetNotificationCenterItem {
	int32_t NotificationTypeIndices[0xc]; // 0x4b8(0x30)
	struct FDataTableRowHandle DisplayNameFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle NotificationDescriptionFormatHandles[0xc]; // 0x4f8(0xc0)
	struct US_RichTextBlock* PlayerNameTextBlock; // 0x5b8(0x08)
	struct US_RichTextBlock* DescriptionTextBlock; // 0x5c0(0x08)
	struct US_WidgetCommonScavengerButton* ButtonOverlay; // 0x5c8(0x08)
	struct US_UMGWidgetSwitcher* NotificationTypeSwitcher; // 0x5d0(0x08)
	struct UWidgetAnimation* AppearNotificationAnimation; // 0x5d8(0x08)
	struct UWidgetAnimation* DisappearNotificationAnimation; // 0x5e0(0x08)
	struct FS_SocialNotification m_notificationDetails; // 0x5e8(0x14)
	char pad_5FC[0x4]; // 0x5fc(0x04)

	void HandleDisappearNotificationAnimationFinished(); // Function Scavenger.S_WidgetSocialNotification.HandleDisappearNotificationAnimationFinished // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialNotification.HandleClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	struct FS_SocialNotification GetNotificationDetails(); // Function Scavenger.S_WidgetSocialNotification.GetNotificationDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSocialPartyTray
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetSocialPartyTray : US_WidgetMinimal {
	struct FDataTableRowHandle OnlineFriendCountFormatHandle; // 0x4b8(0x10)
	struct US_RichTextBlock* OnlineFriendCount; // 0x4c8(0x08)
	struct US_WidgetCommonScavengerButton* SocialButton; // 0x4d0(0x08)
	struct US_UMGCommonKey* SocialGamepadInput; // 0x4d8(0x08)
	struct UPanelWidget* PartyMembers; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)

	void TryClickSocialButton(); // Function Scavenger.S_WidgetSocialPartyTray.TryClickSocialButton // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnRosterUpdated(); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnRosterUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPartyPlayerStateChanged(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnPartyPlayerStateChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerLeftMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnOtherPlayerLeftMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOtherPlayerJoinedMyParty(struct FS_LobbyParty party, struct FS_LobbyPlayer Player); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnOtherPlayerJoinedMyParty // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnLoginSucceed(); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnLoginSucceed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool isUsingGamepad); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPartyTray.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SocialPromptMenuListener
// Size: 0x28 (Inherited: 0x28)
struct US_SocialPromptMenuListener : UInterface {
};

// Class Scavenger.S_WidgetSocialPromptMenu
// Size: 0x660 (Inherited: 0x4b8)
struct US_WidgetSocialPromptMenu : US_WidgetMinimal {
	struct FMulticastInlineDelegate OnPromptMenuActionSelected; // 0x4b8(0x10)
	struct US_WidgetCommonScavengerButton* InviteToPartyButton; // 0x4c8(0x08)
	struct US_WidgetCommonScavengerButton* LeavePartyButton; // 0x4d0(0x08)
	struct US_WidgetCommonScavengerButton* AcceptPartyInviteButton; // 0x4d8(0x08)
	struct US_WidgetCommonScavengerButton* RejectPartyInviteButton; // 0x4e0(0x08)
	struct US_WidgetCommonScavengerButton* CancelPartyInviteButton; // 0x4e8(0x08)
	struct US_WidgetCommonScavengerButton* JoinPartyButton; // 0x4f0(0x08)
	struct US_WidgetCommonScavengerButton* AcceptPartyJoinRequestButton; // 0x4f8(0x08)
	struct US_WidgetCommonScavengerButton* RejectPartyJoinRequestButton; // 0x500(0x08)
	struct US_WidgetCommonScavengerButton* CancelPartyJoinRequestButton; // 0x508(0x08)
	struct US_WidgetCommonScavengerButton* KickFromPartyButton; // 0x510(0x08)
	struct US_WidgetCommonScavengerButton* AddFriendButton; // 0x518(0x08)
	struct US_WidgetCommonScavengerButton* AcceptFriendInviteButton; // 0x520(0x08)
	struct US_WidgetCommonScavengerButton* RejectFriendInviteButton; // 0x528(0x08)
	struct US_WidgetCommonScavengerButton* CancelFriendInviteButton; // 0x530(0x08)
	struct US_WidgetCommonScavengerButton* RemoveFriendButton; // 0x538(0x08)
	struct US_WidgetCommonScavengerButton* AddToFavoritesButton; // 0x540(0x08)
	struct US_WidgetCommonScavengerButton* AddFriendFavoriteButton; // 0x548(0x08)
	struct US_WidgetCommonScavengerButton* ViewStatsButton; // 0x550(0x08)
	struct US_WidgetCommonScavengerButton* ViewGamercardButton; // 0x558(0x08)
	struct US_WidgetCommonScavengerButton* ReportPlayerButton; // 0x560(0x08)
	struct US_WidgetCommonScavengerButton* BlockPlayerButton; // 0x568(0x08)
	struct US_WidgetCommonScavengerButton* UnblockPlayerButton; // 0x570(0x08)
	struct US_WidgetMessagePrompt* ConfirmWidgetClass; // 0x578(0x08)
	struct US_WidgetPlayerReporting* ReportMenuClass; // 0x580(0x08)
	struct FString AcceptTextId; // 0x588(0x10)
	struct FString RejectTextId; // 0x598(0x10)
	struct FName LeavePartyConfirmationId; // 0x5a8(0x08)
	struct FName RemoveFriendConfirmationId; // 0x5b0(0x08)
	struct FName KickPlayerConfirmationId; // 0x5b8(0x08)
	struct FName BlockPlayerConfirmationId; // 0x5c0(0x08)
	struct FName UnblockPlayerConfirmationId; // 0x5c8(0x08)
	char pad_5D0[0x20]; // 0x5d0(0x20)
	struct FS_PendingPartyInvite m_pendingPartyInvite; // 0x5f0(0x70)

	void HandleUnblockPlayerClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleUnblockPlayerClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleReportPlayerClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleReportPlayerClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRemoveFriendClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleRemoveFriendClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRejectPartyJoinRequestClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleRejectPartyJoinRequestClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRejectPartyInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleRejectPartyInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleRejectFriendInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleRejectFriendInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleLeavePartyClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleLeavePartyClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleKickFromPartyClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleKickFromPartyClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleJoinPartyClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleJoinPartyClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleInviteToPartyClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleInviteToPartyClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleConfirmWindowRejected(); // Function Scavenger.S_WidgetSocialPromptMenu.HandleConfirmWindowRejected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleConfirmWindowAccepted(); // Function Scavenger.S_WidgetSocialPromptMenu.HandleConfirmWindowAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelPartyJoinRequestClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleCancelPartyJoinRequestClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelPartyInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleCancelPartyInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleCancelFriendInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleCancelFriendInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleBlockPlayerClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleBlockPlayerClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAddFriendClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleAddFriendClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAcceptPartyJoinRequestClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleAcceptPartyJoinRequestClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAcceptPartyInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleAcceptPartyInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleAcceptFriendInviteClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSocialPromptMenu.HandleAcceptFriendInviteClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSpectatorHUD
// Size: 0x7d0 (Inherited: 0x6e0)
struct US_WidgetSpectatorHUD : US_UMGHUDSession {
	struct FLinearColor RecloneAvailableColor; // 0x6e0(0x10)
	struct FLinearColor SquadEliminatedColor; // 0x6f0(0x10)
	struct FDataTableRowHandle RecloningHandle; // 0x700(0x10)
	struct FDataTableRowHandle TeamEliminatedHandle; // 0x710(0x10)
	struct FDataTableRowHandle GameTimeRemainingHandle; // 0x720(0x10)
	struct FDataTableRowHandle PointsLostHandle; // 0x730(0x10)
	struct FDataTableRowHandle SelfInitiatedLeavingMatchHandle; // 0x740(0x10)
	struct FDataTableRowHandle OtherInitiatedLeavingMatchHandle; // 0x750(0x10)
	struct US_UMGCommonKey* PrevPlayerKey; // 0x760(0x08)
	struct US_UMGCommonKey* NextPlayerKey; // 0x768(0x08)
	struct UWidget* LeaveSessionBox; // 0x770(0x08)
	struct URichTextBlock* LeaveSessionText; // 0x778(0x08)
	struct UWidget* MenuBox; // 0x780(0x08)
	struct US_UMGCommonKey* MenuKey; // 0x788(0x08)
	struct UWidget* LeavePartyButton; // 0x790(0x08)
	struct UWidget* CancelButton; // 0x798(0x08)
	struct US_WidgetWeaponSight* m_currentSight; // 0x7a0(0x08)
	char pad_7A8[0x28]; // 0x7a8(0x28)

	void UpdateInputType(bool bUsingGamepad); // Function Scavenger.S_WidgetSpectatorHUD.UpdateInputType // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void SetPlayerLeftParty(); // Function Scavenger.S_WidgetSpectatorHUD.SetPlayerLeftParty // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveCurrentReticleAndSight(); // Function Scavenger.S_WidgetSpectatorHUD.RemoveCurrentReticleAndSight // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void PartyLeaveMatchRequested(float exitTimestamp, struct FString initiatingPlayerDisplayName, bool initiatedBySelf); // Function Scavenger.S_WidgetSpectatorHUD.PartyLeaveMatchRequested // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void NotifyTimerRatio_BP(float timeLeftRatio); // Function Scavenger.S_WidgetSpectatorHUD.NotifyTimerRatio_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySpectatingStarted_BP(); // Function Scavenger.S_WidgetSpectatorHUD.NotifySpectatingStarted_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifySpectatingEnded_BP(); // Function Scavenger.S_WidgetSpectatorHUD.NotifySpectatingEnded_BP // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void EndSpectating(); // Function Scavenger.S_WidgetSpectatorHUD.EndSpectating // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void BeginSpectating(); // Function Scavenger.S_WidgetSpectatorHUD.BeginSpectating // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void AddReticleAndSightToHud(struct AS_WeaponBase* weapon); // Function Scavenger.S_WidgetSpectatorHUD.AddReticleAndSightToHud // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSpeechBubble
// Size: 0x510 (Inherited: 0x4b8)
struct US_WidgetSpeechBubble : US_WidgetMinimal {
	bool bIsDead; // 0x4b8(0x01)
	char pad_4B9[0x57]; // 0x4b9(0x57)

	void SetResurrected(); // Function Scavenger.S_WidgetSpeechBubble.SetResurrected // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDead(); // Function Scavenger.S_WidgetSpeechBubble.SetDead // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RemoveStatusIcon_BP(enum class ES_StatType StatType); // Function Scavenger.S_WidgetSpeechBubble.RemoveStatusIcon_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleShowWarningChanged(bool bShouldShowWarning, enum class ES_StatType StatType); // Function Scavenger.S_WidgetSpeechBubble.HandleShowWarningChanged // (Final|Native|Public) // @ game+0xffff8008e4a10000
	void ClearIcons_BP(); // Function Scavenger.S_WidgetSpeechBubble.ClearIcons_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void AddStatusIcon_BP(enum class ES_StatType StatType); // Function Scavenger.S_WidgetSpeechBubble.AddStatusIcon_BP // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSquadMenuMember
// Size: 0x5a8 (Inherited: 0x4b8)
struct US_WidgetSquadMenuMember : US_WidgetMinimal {
	float NotTalkingOpacity; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TSoftObjectPtr<struct UTexture2D> MutedSpeakerIcon; // 0x4c0(0x28)
	struct TSoftObjectPtr<struct UTexture2D> DefaultSpeakerIcon; // 0x4e8(0x28)
	struct FDataTableRowHandle PlayerNameFormatHandle; // 0x510(0x10)
	struct FDataTableRowHandle MuteHandle; // 0x520(0x10)
	struct FDataTableRowHandle UnmuteHandle; // 0x530(0x10)
	struct UWidgetSwitcher* ActiveStateSwitcher; // 0x540(0x08)
	struct US_RichTextBlock* PlayerName; // 0x548(0x08)
	struct UImage* SpeakerIcon; // 0x550(0x08)
	struct UImage* SquadIndexColor; // 0x558(0x08)
	struct UWidgetSwitcher* CurrentPlayerSwitcher; // 0x560(0x08)
	struct US_WidgetCommonScavengerButton* MuteButton; // 0x568(0x08)
	struct UImage* PlayerIcon; // 0x570(0x08)
	char pad_578[0x30]; // 0x578(0x30)

	void HandleOnSelfMuteUpdated(bool IsMuted); // Function Scavenger.S_WidgetSquadMenuMember.HandleOnSelfMuteUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerTalkingUpdated(struct FString ChannelName, struct FString PlayerId, bool IsTalking); // Function Scavenger.S_WidgetSquadMenuMember.HandleOnPlayerTalkingUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerRemoved(struct FString ChannelName, struct FString PlayerId); // Function Scavenger.S_WidgetSquadMenuMember.HandleOnPlayerRemoved // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerMuteUpdated(struct FString ChannelName, struct FString PlayerId, bool IsMuted); // Function Scavenger.S_WidgetSquadMenuMember.HandleOnPlayerMuteUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerAdded(struct FString ChannelName, struct FString PlayerId); // Function Scavenger.S_WidgetSquadMenuMember.HandleOnPlayerAdded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleDispatchOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetSquadMenuMember.HandleDispatchOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetSquadMenu
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetSquadMenu : US_WidgetMinimal {
	struct US_UMGLinearPanel* SquadPanel; // 0x4b8(0x08)

	void UpdateTeammateStates(); // Function Scavenger.S_WidgetSquadMenu.UpdateTeammateStates // (Final|Native|Public|BlueprintCallable|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStationSelector
// Size: 0x5e0 (Inherited: 0x4b8)
struct US_WidgetStationSelector : US_WidgetMinimal {
	float SelectorOffset; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct FDataTableRowHandle ResearchNameFormatHandle; // 0x4c0(0x10)
	struct FDataTableRowHandle ResearchCategoryFormatHandle; // 0x4d0(0x10)
	struct FDataTableRowHandle ResearchTypeFormatHandle; // 0x4e0(0x10)
	struct FDataTableRowHandle ResearchRarityFormatHandle; // 0x4f0(0x10)
	struct FDataTableRowHandle ResearchTimeFormatHandle; // 0x500(0x10)
	struct FDataTableRowHandle CommonRarityHandle; // 0x510(0x10)
	struct FDataTableRowHandle UncommonRarityHandle; // 0x520(0x10)
	struct FDataTableRowHandle RareRarityHandle; // 0x530(0x10)
	struct FDataTableRowHandle EpicRarityHandle; // 0x540(0x10)
	struct FDataTableRowHandle LegendaryRarityHandle; // 0x550(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x560(0x10)
	struct US_UMGLinearPanel* ResearchStationPanel; // 0x570(0x08)
	struct US_RichTextBlock* ResearchName; // 0x578(0x08)
	struct US_RichTextBlock* ResearchCategory; // 0x580(0x08)
	struct US_RichTextBlock* ResearchType; // 0x588(0x08)
	struct US_RichTextBlock* ResearchTime; // 0x590(0x08)
	struct US_RichTextBlock* StationHeader; // 0x598(0x08)
	struct UImage* ItemStandin; // 0x5a0(0x08)
	struct UOverlay* SelectionShifter; // 0x5a8(0x08)
	struct UBorder* RarityBorder; // 0x5b0(0x08)
	struct US_RichTextBlock* Description; // 0x5b8(0x08)
	char pad_5C0[0x20]; // 0x5c0(0x20)

	void NotifyStationAssignmentRequestSuccess(struct FS_OnlinePlayerInventoryDelta outputItem); // Function Scavenger.S_WidgetStationSelector.NotifyStationAssignmentRequestSuccess // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationAssignmentRequestMade(struct FName pendingResearchProjectId, struct FString ResearchStationId); // Function Scavenger.S_WidgetStationSelector.NotifyStationAssignmentRequestMade // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyStationAssignmentRequestFailed(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetStationSelector.NotifyStationAssignmentRequestFailed // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnStartResearchStationProjectRequestSuccess(struct FString ResearchStationId, struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetStationSelector.HandleOnStartResearchStationProjectRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnStartResearchStationProjectRequestFailure(struct FString ResearchStationId, enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetStationSelector.HandleOnStartResearchStationProjectRequestFailure // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnResearchStationHovered(struct FString ResearchStationId); // Function Scavenger.S_WidgetStationSelector.HandleOnResearchStationHovered // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStationUpgradeResearchRow
// Size: 0x510 (Inherited: 0x510)
struct US_WidgetStationUpgradeResearchRow : US_WidgetTieredResearchRow {
};

// Class Scavenger.S_WidgetStationUpgradeResearch
// Size: 0x6f0 (Inherited: 0x688)
struct US_WidgetStationUpgradeResearch : US_WidgetResearchOptionScreen {
	struct US_WidgetStationUpgradeResearchRow* ResearchOptions; // 0x688(0x08)
	struct FS_FilteredResearchOptions m_currentStationUpgradeOptions; // 0x690(0x60)
};

// Class Scavenger.S_WidgetStoreScreen
// Size: 0x570 (Inherited: 0x4b8)
struct US_WidgetStoreScreen : US_WidgetMinimal {
	struct FDataTableRowHandle StoreCategoryHeaderFormatHandle; // 0x4b8(0x10)
	struct US_WidgetStorefrontNavbar* StorefrontNavbar; // 0x4c8(0x08)
	struct US_RichTextBlock* categoryHeader; // 0x4d0(0x08)
	struct US_WidgetCommonScavengerButton* BuyChipsButton; // 0x4d8(0x08)
	struct UOverlay* BuyChipsButtonOverlay; // 0x4e0(0x08)
	struct UWidgetSwitcher* StorefrontSwitcher; // 0x4e8(0x08)
	struct UWidgetSwitcher* PreviewSwitcher; // 0x4f0(0x08)
	int32_t OfferDetailsIndex; // 0x4f8(0x04)
	int32_t StorefrontsIndex; // 0x4fc(0x04)
	struct TMap<struct FString, struct US_WidgetStorefront*> LayoutIDsToWidgetClass; // 0x500(0x50)
	char pad_550[0x20]; // 0x550(0x20)

	void OnStorefrontRequested(struct US_WidgetCommonScavengerButton* Button, int32_t navigationIndex); // Function Scavenger.S_WidgetStoreScreen.OnStorefrontRequested // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void HandleWidgetRemovedFromNavStack(struct US_WidgetMinimal* RemovedWidget, struct US_WidgetMinimal* NewTopWidget); // Function Scavenger.S_WidgetStoreScreen.HandleWidgetRemovedFromNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleWidgetAddedToNavStack(struct US_WidgetMinimal* NewWidget); // Function Scavenger.S_WidgetStoreScreen.HandleWidgetAddedToNavStack // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleTakeFocusFromStorefront(enum class EUINavigation navType); // Function Scavenger.S_WidgetStoreScreen.HandleTakeFocusFromStorefront // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleReturnFocusToStorefront(enum class EUINavigation navType); // Function Scavenger.S_WidgetStoreScreen.HandleReturnFocusToStorefront // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnStoreOfferDetailScreenRequested(struct FName OfferId, int32_t offerFlags, struct FName storefrontId); // Function Scavenger.S_WidgetStoreScreen.HandleOnStoreOfferDetailScreenRequested // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnStorefrontsScreenRequested(); // Function Scavenger.S_WidgetStoreScreen.HandleOnStorefrontsScreenRequested // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnlineStoreDataRefreshed(); // Function Scavenger.S_WidgetStoreScreen.HandleOnlineStoreDataRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStoreCurrencyBar
// Size: 0x550 (Inherited: 0x4b8)
struct US_WidgetStoreCurrencyBar : US_WidgetMinimal {
	struct FDataTableRowHandle SufficientCurrencyHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle InsufficientCurrencyHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle PlatformCurrencyHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle NoCostOfferTextHandle; // 0x4e8(0x10)
	struct UWidgetSwitcher* CurrencyDisplaySwitcher; // 0x4f8(0x08)
	struct US_RichTextBlock* CurrencyCost; // 0x500(0x08)
	struct US_RichTextBlock* DiscountCurrencyCost; // 0x508(0x08)
	struct US_RichTextBlock* ItemOwned; // 0x510(0x08)
	struct UImage* CurrencyIcon; // 0x518(0x08)
	int32_t CurrencyCostIndex; // 0x520(0x04)
	int32_t DiscountCurrencyCostIndex; // 0x524(0x04)
	int32_t ItemOwnedIndex; // 0x528(0x04)
	char pad_52C[0x24]; // 0x52c(0x24)

	void SetPlatformCost(struct FString userCurrencyCode, int64_t currentPrice); // Function Scavenger.S_WidgetStoreCurrencyBar.SetPlatformCost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetNonPlatformCurrencyCost(int64_t CurrencyCost); // Function Scavenger.S_WidgetStoreCurrencyBar.SetNonPlatformCurrencyCost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPlayerCurrencyCountSet(bool playerHasEnoughCurrency, int64_t currentCost, int64_t newPlayerCurrencyCount); // Function Scavenger.S_WidgetStoreCurrencyBar.NotifyPlayerCurrencyCountSet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyCurrencyCostSet(int64_t Cost); // Function Scavenger.S_WidgetStoreCurrencyBar.NotifyCurrencyCostSet // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	bool DoesPlayerHaveEnoughCurrency(); // Function Scavenger.S_WidgetStoreCurrencyBar.DoesPlayerHaveEnoughCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStorefrontNavbar
// Size: 0x590 (Inherited: 0x580)
struct US_WidgetStorefrontNavbar : US_WidgetNavBar {
	char pad_580[0x10]; // 0x580(0x10)
};

// Class Scavenger.S_WidgetStorefrontWithPreview
// Size: 0x560 (Inherited: 0x4f8)
struct US_WidgetStorefrontWithPreview : US_WidgetStorefront {
	struct FDataTableRowHandle OfferPreviewNameFormatHandle; // 0x4f8(0x10)
	struct FDataTableRowHandle OfferPreviewSubtitleFormatHandle; // 0x508(0x10)
	struct US_RichTextBlock* OfferPreviewName; // 0x518(0x08)
	struct US_RichTextBlock* OfferPreviewSubtitle; // 0x520(0x08)
	struct UImage* OfferPreviewImage; // 0x528(0x08)
	struct FString OfferPreviewImageUrlSuffix; // 0x530(0x10)
	struct FVector2D LoadingBrushSize; // 0x540(0x08)
	char pad_548[0x18]; // 0x548(0x18)

	void HandleOnOfferPreviewImageDownloaded(enum class ES_OnlineResult Result, struct UTexture2DDynamic* Texture); // Function Scavenger.S_WidgetStorefrontWithPreview.HandleOnOfferPreviewImageDownloaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void DisplayPreview(struct FName OfferId); // Function Scavenger.S_WidgetStorefrontWithPreview.DisplayPreview // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void DisplayFirstOfferAsPreview(); // Function Scavenger.S_WidgetStorefrontWithPreview.DisplayFirstOfferAsPreview // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStoreLayoutGrid
// Size: 0x4d0 (Inherited: 0x4b8)
struct US_WidgetStoreLayoutGrid : US_WidgetMinimal {
	struct FVector2D MinimumDesiredOfferSize; // 0x4b8(0x08)
	float OverridePaddingBetweenTiles; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct UGridPanel* StoreLayoutGrid; // 0x4c8(0x08)
};

// Class Scavenger.S_WidgetStoreOffer
// Size: 0x5c8 (Inherited: 0x558)
struct US_WidgetStoreOffer : US_WidgetOnlineStoreOfferBase {
	struct FMulticastInlineDelegate OnStoreOfferPreviewImageDownloaded; // 0x558(0x10)
	int32_t offerFlags; // 0x568(0x04)
	char pad_56C[0x4]; // 0x56c(0x04)
	struct FText LimitedTimeOfferLabel; // 0x570(0x18)
	struct FDataTableRowHandle LimitedTimeOfferFormatHandle; // 0x588(0x10)
	struct FString OfferPreviewImageUrlSuffix; // 0x598(0x10)
	struct US_WidgetStoreCurrencyBar* CurrencyBar; // 0x5a8(0x08)
	struct UImage* HotBadge; // 0x5b0(0x08)
	struct UWidgetSwitcher* AvailabilitySwitcher; // 0x5b8(0x08)
	struct FName XPBoostItemClass; // 0x5c0(0x08)

	void HandleOnPlayerStateRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetStoreOffer.HandleOnPlayerStateRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOfferPreviewImageDownloaded(enum class ES_OnlineResult Result, struct UTexture2DDynamic* Texture); // Function Scavenger.S_WidgetStoreOffer.HandleOnOfferPreviewImageDownloaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStoreOfferPurchaseOverlay
// Size: 0x778 (Inherited: 0x680)
struct US_WidgetStoreOfferPurchaseOverlay : US_WidgetMessagePrompt {
	struct FDataTableRowHandle PurchaseNameFormatHandle; // 0x680(0x10)
	struct FDataTableRowHandle ChipsPriceFormatHandle; // 0x690(0x10)
	struct FDataTableRowHandle RMTPriceFormatHandle; // 0x6a0(0x10)
	struct FDataTableRowHandle SuccessfullyPurchasedFormatHandle; // 0x6b0(0x10)
	struct FDataTableRowHandle NoCostOfferTextHandle; // 0x6c0(0x10)
	struct US_RichTextBlock* PurchaseName; // 0x6d0(0x08)
	struct US_UMGWidgetSwitcher* PurchaseStateSwitcher; // 0x6d8(0x08)
	struct US_RichTextBlock* PurchasePrice; // 0x6e0(0x08)
	struct US_RichTextBlock* SuccessfullyPurchased; // 0x6e8(0x08)
	struct US_WidgetCommonScavengerButton* ContinueButton; // 0x6f0(0x08)
	struct US_WidgetCommonScavengerButton* PurchaseButton; // 0x6f8(0x08)
	struct UImage* CurrencyIcon; // 0x700(0x08)
	int32_t PurchaseItemIndex; // 0x708(0x04)
	int32_t PurchaseSuccessfulIndex; // 0x70c(0x04)
	struct FName OnlineResultMessageIDs[0x9]; // 0x710(0x48)
	struct US_WidgetMessagePrompt* ErrorMessagePromptClass; // 0x758(0x08)
	char pad_760[0x10]; // 0x760(0x10)
	struct US_WidgetMessagePrompt* m_currentErrorMessagePrompt; // 0x770(0x08)

	void ShowOverlay(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.ShowOverlay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRMTPurchasePrice(struct FString userCurrencyCode, int64_t currentPrice); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.SetRMTPurchasePrice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPurchaseOfferId(struct FName OfferId); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.SetPurchaseOfferId // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPurchaseName(struct FText nameText); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.SetPurchaseName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetChipsPurchasePrice(int64_t offerCost); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.SetChipsPurchasePrice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RequestShowOverlay(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.RequestShowOverlay // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void RequestHideOverlay(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.RequestHideOverlay // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPurchaseOfferRequestSuccess(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyPurchaseOfferRequestSuccess // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPurchaseOfferRequestFailure(enum class ES_OnlineResult Error); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyPurchaseOfferRequestFailure // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPurchaseButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyPurchaseButtonClicked // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOverlayShown(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyOverlayShown // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyOverlayHidden(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyOverlayHidden // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyContinueButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.NotifyContinueButtonClicked // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HideOverlay(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HideOverlay // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleOnPurchaseOfferRequestSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnPurchaseOfferRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPurchaseOfferRequestComplete(enum class ES_OnlineResult Result); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnPurchaseOfferRequestComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlatformPurchaseComplete(enum class ES_OnlineResult purchaseResult, struct FString FailureReason, struct FString sdaOfferId, struct FString PlatformTransactionId); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnPlatformPurchaseComplete // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnClientSyncPlatformPurchaseSuccess(struct FS_OnlinePlayerInventoryDelta Delta); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnClientSyncPlatformPurchaseSuccess // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnClientSyncPlatformPurchaseFailure(enum class ES_OnlineResult onlineResult); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnClientSyncPlatformPurchaseFailure // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActivePurchaseButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnActivePurchaseButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveContinueButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleOnActiveContinueButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleErrorMessageAccepted(); // Function Scavenger.S_WidgetStoreOfferPurchaseOverlay.HandleErrorMessageAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStoreOfferPreviewInfo
// Size: 0x540 (Inherited: 0x4b8)
struct US_WidgetStoreOfferPreviewInfo : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct FDataTableRowHandle OfferNameFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle OfferRarityFormatHandle; // 0x4d8(0x10)
	struct FDataTableRowHandle OfferSubtitleFormatHandle; // 0x4e8(0x10)
	struct FDataTableRowHandle OfferDescriptionFormatHandle; // 0x4f8(0x10)
	struct US_RichTextBlock* OfferName; // 0x508(0x08)
	struct US_RichTextBlock* OfferRarity; // 0x510(0x08)
	struct US_RichTextBlock* OfferSubtitle; // 0x518(0x08)
	struct US_RichTextBlock* OfferDescription; // 0x520(0x08)
	struct UBorder* OfferRarityBorder; // 0x528(0x08)
	struct US_WidgetCommonScavengerButton* PurchaseButton; // 0x530(0x08)
	struct US_WidgetStoreCurrencyBar* CurrencyBar; // 0x538(0x08)

	void SetOfferSubtitle(struct FText subtitleText); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferSubtitle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOfferRMTPrice(struct FString userCurrencyCode, int64_t currentPrice); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferRMTPrice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOfferRarity(struct FText rarityText, enum class ES_ItemRarity rarityType); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferRarity // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOfferName(struct FText nameText); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferName // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOfferDescription(struct FText DescriptionText); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferDescription // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetOfferChipPrice(int64_t offerCost); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetOfferChipPrice // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetIsOfferOwned(bool isOfferOwned); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.SetIsOfferOwned // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void NotifyPurchaseButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.NotifyPurchaseButtonClicked // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyPreviewBecameTopOfNavStack(); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.NotifyPreviewBecameTopOfNavStack // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnActivePurchaseButtonClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetStoreOfferPreviewInfo.HandleOnActivePurchaseButtonClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStoreOfferPreview
// Size: 0x570 (Inherited: 0x4b8)
struct US_WidgetStoreOfferPreview : US_WidgetMinimal {
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct FDataTableRowHandle ScreenPathFormatHandle; // 0x4c8(0x10)
	struct US_RichTextBlock* ScreenPath; // 0x4d8(0x08)
	struct US_WidgetStoreOfferPreviewInfo* OfferInfo; // 0x4e0(0x08)
	struct US_WidgetStoreOfferPurchaseOverlay* PurchasePromptOverlay; // 0x4e8(0x08)
	struct UImage* OfferImage; // 0x4f0(0x08)
	struct FString OfferImageUrlSuffix; // 0x4f8(0x10)
	struct FName PurchaseRequestResultMessageIDs[0x4]; // 0x508(0x20)
	struct US_WidgetMessagePrompt* ErrorMessagePromptClass; // 0x528(0x08)
	struct FString RestrictionDescKey; // 0x530(0x10)
	char pad_540[0x28]; // 0x540(0x28)
	struct US_WidgetMessagePrompt* m_currentMessagePrompt; // 0x568(0x08)

	void NotifyShowScreen(); // Function Scavenger.S_WidgetStoreOfferPreview.NotifyShowScreen // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void InitializePreview(struct FName newOfferId, int32_t newOfferFlags, struct FName storefrontId); // Function Scavenger.S_WidgetStoreOfferPreview.InitializePreview // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandlePurchasePromptDismissed(); // Function Scavenger.S_WidgetStoreOfferPreview.HandlePurchasePromptDismissed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnStoreDataRefreshed(); // Function Scavenger.S_WidgetStoreOfferPreview.HandleOnStoreDataRefreshed // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnRequestPurchaseMessagePrompt(enum class ES_PurchaseRequestResult purchaseRequestResult); // Function Scavenger.S_WidgetStoreOfferPreview.HandleOnRequestPurchaseMessagePrompt // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnPlayerStateRefreshed(struct AS_PlayerControllerBase* PlayerController, struct FS_OnlineServiceManagerPlayerState PlayerState); // Function Scavenger.S_WidgetStoreOfferPreview.HandleOnPlayerStateRefreshed // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnOfferImageDownloaded(enum class ES_OnlineResult Result, struct UTexture2DDynamic* Texture); // Function Scavenger.S_WidgetStoreOfferPreview.HandleOnOfferImageDownloaded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleErrorMessageAccepted(); // Function Scavenger.S_WidgetStoreOfferPreview.HandleErrorMessageAccepted // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetStormWarning
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetStormWarning : US_WidgetMinimal {
	struct FDataTableRowHandle StormTextFormat; // 0x4b8(0x10)
	struct FDataTableRowHandle CollapsingStormText; // 0x4c8(0x10)
	struct FDataTableRowHandle RoamingStormText; // 0x4d8(0x10)
	struct US_RichTextBlock* StormMessage; // 0x4e8(0x08)
};

// Class Scavenger.S_WidgetStreamerControls
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_WidgetStreamerControls : US_WidgetMinimal {
	struct AS_StreamerMenu* m_menu; // 0x4b8(0x08)

	void NotifyCurrentEntries(struct TArray<struct FS_StreamerMenuEntry> Entries); // Function Scavenger.S_WidgetStreamerControls.NotifyCurrentEntries // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleVisibilityChanged(bool IsVisible); // Function Scavenger.S_WidgetStreamerControls.HandleVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleMenuEntriesChanged(); // Function Scavenger.S_WidgetStreamerControls.HandleMenuEntriesChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_SubtitleEntry
// Size: 0x4c0 (Inherited: 0x4b8)
struct US_SubtitleEntry : US_WidgetMinimal {
	struct US_RichTextBlock* TextBlock; // 0x4b8(0x08)
};

// Class Scavenger.S_WidgetSubtitles
// Size: 0x558 (Inherited: 0x4b8)
struct US_WidgetSubtitles : US_WidgetMinimal {
	struct UVerticalBox* Lines; // 0x4b8(0x08)
	struct US_SubtitleEntry* EntryWidgetClass; // 0x4c0(0x08)
	struct FDataTableRowHandle LineFormatRowHandles[0x3]; // 0x4c8(0x30)
	struct TMap<int32_t, struct US_SubtitleEntry*> m_EntriesByPlayId; // 0x4f8(0x50)
	struct US_SubtitleSystem* m_SubtitleSystem; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)

	void OnSubtitleMarkerStart(struct FString subtitleTextId, int32_t playId, int64_t ObjId); // Function Scavenger.S_WidgetSubtitles.OnSubtitleMarkerStart // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnSubtitleMarkerEnd(int32_t playId); // Function Scavenger.S_WidgetSubtitles.OnSubtitleMarkerEnd // (Final|Native|Protected) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTalentHeader
// Size: 0x658 (Inherited: 0x4b8)
struct US_WidgetTalentHeader : US_WidgetMinimal {
	struct FDataTableRowHandle TalentTypeMetadata[0xf]; // 0x4b8(0xf0)
	struct FDataTableRowHandle TraitMetadata[0x9]; // 0x5a8(0x90)
	struct FDataTableRowHandle HeaderFormatHandle; // 0x638(0x10)
	struct UImage* Icon; // 0x648(0x08)
	struct US_RichTextBlock* Header; // 0x650(0x08)
};

// Class Scavenger.S_WidgetTalentLoadoutOptionInfo
// Size: 0x528 (Inherited: 0x518)
struct US_WidgetTalentLoadoutOptionInfo : US_WidgetLoadoutOptionInfo {
	struct US_WidgetTalentResearchOptionInfoStatBlock* TraitGroupStatBlock; // 0x518(0x08)
	struct US_WidgetTalentResearchOptionInfoStatBlock* TalentTypeStatBlock; // 0x520(0x08)
};

// Class Scavenger.S_WidgetTalentLoadoutRow
// Size: 0x528 (Inherited: 0x520)
struct US_WidgetTalentLoadoutRow : US_WidgetTieredLoadoutRow {
	enum class ES_TraitGroupType TraitGroupType; // 0x520(0x01)
	char pad_521[0x7]; // 0x521(0x07)
};

// Class Scavenger.S_WidgetTalentLoadoutScreen
// Size: 0x5f8 (Inherited: 0x530)
struct US_WidgetTalentLoadoutScreen : US_WidgetLoadoutOptionScreen {
	struct US_UMGLinearPanel* ColumnHeaders; // 0x530(0x08)
	struct US_UMGLinearPanel* RowHeaders; // 0x538(0x08)
	struct US_UMGLinearPanel* TalentRows; // 0x540(0x08)
	struct FS_TalentOptions m_currentTalentOptions; // 0x548(0xb0)
};

// Class Scavenger.S_WidgetTalentResearchRow
// Size: 0x518 (Inherited: 0x510)
struct US_WidgetTalentResearchRow : US_WidgetTieredResearchRow {
	enum class ES_TraitGroupType TraitGroupType; // 0x510(0x01)
	char pad_511[0x7]; // 0x511(0x07)
};

// Class Scavenger.S_WidgetTalentResearchScreen
// Size: 0x7d0 (Inherited: 0x708)
struct US_WidgetTalentResearchScreen : US_WidgetClassItemResearchScreen {
	struct US_UMGLinearPanel* ColumnHeaders; // 0x708(0x08)
	struct US_UMGLinearPanel* RowHeaders; // 0x710(0x08)
	struct US_UMGLinearPanel* TalentRows; // 0x718(0x08)
	struct FS_TalentOptions m_currentTalentOptions; // 0x720(0xb0)
};

// Class Scavenger.S_WidgetTalentResearchOptionInfoStatBlock
// Size: 0x670 (Inherited: 0x4b8)
struct US_WidgetTalentResearchOptionInfoStatBlock : US_WidgetMinimal {
	struct FDataTableRowHandle TalentTypeMetadata[0xf]; // 0x4b8(0xf0)
	struct FDataTableRowHandle TraitMetadata[0x9]; // 0x5a8(0x90)
	struct FDataTableRowHandle TitleFormatHandle; // 0x638(0x10)
	struct FDataTableRowHandle DescriptionFormatHandle; // 0x648(0x10)
	struct UImage* Image; // 0x658(0x08)
	struct US_RichTextBlock* Title; // 0x660(0x08)
	struct US_RichTextBlock* Description; // 0x668(0x08)
};

// Class Scavenger.S_WidgetTalentResearchOptionInfo
// Size: 0x590 (Inherited: 0x580)
struct US_WidgetTalentResearchOptionInfo : US_WidgetResearchOptionInfo {
	struct US_WidgetTalentResearchOptionInfoStatBlock* TraitGroupStatBlock; // 0x580(0x08)
	struct US_WidgetTalentResearchOptionInfoStatBlock* TalentTypeStatBlock; // 0x588(0x08)
};

// Class Scavenger.S_WidgetTeamContributionContainer
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetTeamContributionContainer : US_WidgetMinimal {
	float RowDelay; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct UVerticalBox* Contributions; // 0x4c0(0x08)
	char pad_4C8[0x10]; // 0x4c8(0x10)
	struct FS_TeamScoreSnapshot m_teamScoreSnapshot; // 0x4d8(0x20)
};

// Class Scavenger.S_WidgetTeamContributionRow
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetTeamContributionRow : US_WidgetMinimal {
	struct FDataTableRowHandle ExtractedFormatHandle; // 0x4b8(0x10)
	struct FDataTableRowHandle DiedFormatHandle; // 0x4c8(0x10)
	struct FDataTableRowHandle DiedAndBankedFormatHandle; // 0x4d8(0x10)
	struct US_RichTextBlock* Contribution; // 0x4e8(0x08)
};

// Class Scavenger.S_WidgetTeamStatusTray
// Size: 0x4f0 (Inherited: 0x4b8)
struct US_WidgetTeamStatusTray : US_WidgetMinimal {
	struct UVerticalBox* PlayerStatusVerticalBox; // 0x4b8(0x08)
	struct UVerticalBox* StatusVerticalBox_Teammates; // 0x4c0(0x08)
	struct US_WidgetPlayerStatus* PlayerStatusWidgetClass; // 0x4c8(0x08)
	struct FVector2D OwningPlayerWidgetSize; // 0x4d0(0x08)
	struct FVector2D OwningPlayerPortraitSize; // 0x4d8(0x08)
	struct TArray<struct US_WidgetPlayerStatus*> m_playerStatusWidgets; // 0x4e0(0x10)

	void HandleTeammateInfoDeleted(int32_t TeammateInfoIndex); // Function Scavenger.S_WidgetTeamStatusTray.HandleTeammateInfoDeleted // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleTeammateInfoAddedOrChanged(int32_t TeammateInfoIndex, struct FS_TeammateInfo TeammateInfo); // Function Scavenger.S_WidgetTeamStatusTray.HandleTeammateInfoAddedOrChanged // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTextChatLine
// Size: 0x4f8 (Inherited: 0x4b8)
struct US_WidgetTextChatLine : US_WidgetMinimal {
	struct FName ChatRoomInterfaceColors[0x6]; // 0x4b8(0x30)
	struct US_RichTextBlock* ChatLineRichTextBlock; // 0x4e8(0x08)
	struct UBorder* ChatLineBorder; // 0x4f0(0x08)
};

// Class Scavenger.S_WidgetTextChatLineContainer
// Size: 0x620 (Inherited: 0x4b8)
struct US_WidgetTextChatLineContainer : US_WidgetMinimal {
	struct US_WidgetTextChatLine* TextChatLineClass; // 0x4b8(0x08)
	struct TMap<enum class ES_TextChatMessageTarget, struct FDataTableRowHandle> ChatMessageFormatHandles; // 0x4c0(0x50)
	struct FDataTableRowHandle CurrentRoomFormatHandle; // 0x510(0x10)
	struct TMap<enum class ES_TextChatMessageTarget, struct FDataTableRowHandle> RoomNameHandles; // 0x520(0x50)
	struct FName ChatRoomInterfaceColors[0x6]; // 0x570(0x30)
	struct UScrollBox* ScrollBox; // 0x5a0(0x08)
	struct UEditableText* TextEntryLine; // 0x5a8(0x08)
	struct US_RichTextBlock* CurrentRoomName; // 0x5b0(0x08)
	struct UHorizontalBox* TextEntryBox; // 0x5b8(0x08)
	struct UBorder* TextEntryBorder; // 0x5c0(0x08)
	struct UBorder* CurrentRoomBorder; // 0x5c8(0x08)
	struct UCurveFloat* MessageAgeOpacityCurve; // 0x5d0(0x08)
	struct UCurveFloat* ChatAgeOpacityCurve; // 0x5d8(0x08)
	char pad_5E0[0x40]; // 0x5e0(0x40)

	void NotifyChatFocusChanged(bool isInFocus); // Function Scavenger.S_WidgetTextChatLineContainer.NotifyChatFocusChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyChatContainerOpacityChanged(float Opacity); // Function Scavenger.S_WidgetTextChatLineContainer.NotifyChatContainerOpacityChanged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void HandleOnTextCommitted(struct FText Text, enum class ETextCommit CommitMethod); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnTextChatRoomJoined(enum class ES_TextChatMessageTarget roomType); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatRoomJoined // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTextChatRoomExited(enum class ES_TextChatMessageTarget roomType); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatRoomExited // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTextChatMessageReceived(struct FS_ReceivedTextChatMessage Message); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatMessageReceived // (Final|Native|Private|HasOutParms) // @ game+0xffff8008e4a10000
	void HandleOnTextChatMenuSummoned(); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatMenuSummoned // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTextChatDisconnected(enum class ES_SocialDisconnectReason disconnectReason, struct FString ErrorDetails); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatDisconnected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnTextChatConnected(); // Function Scavenger.S_WidgetTextChatLineContainer.HandleOnTextChatConnected // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void CycleTextChatRooms(); // Function Scavenger.S_WidgetTextChatLineContainer.CycleTextChatRooms // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTextCacheData
// Size: 0x90 (Inherited: 0x30)
struct US_WidgetTextCacheData : UDataAsset {
	struct FString DefaultCharactersToCache; // 0x30(0x10)
	struct TMap<struct FName, struct FString> CultureToAddedCharacters; // 0x40(0x50)
};

// Class Scavenger.S_WidgetTextFormatCache
// Size: 0x548 (Inherited: 0x4b8)
struct US_WidgetTextFormatCache : US_WidgetMinimal {
	struct US_RichTextBlock* RichTextBlock; // 0x4b8(0x08)
	struct TArray<struct UDataTable*> RichTextTables; // 0x4c0(0x10)
	struct US_WidgetTextCacheData* WidgetTextCacheData; // 0x4d0(0x08)
	char pad_4D8[0x70]; // 0x4d8(0x70)
};

// Class Scavenger.S_WidgetThreatIndicator
// Size: 0x4e0 (Inherited: 0x4b8)
struct US_WidgetThreatIndicator : US_WidgetMinimal {
	struct FLinearColor AlertedColor; // 0x4b8(0x10)
	struct FLinearColor AggroColor; // 0x4c8(0x10)
	char pad_4D8[0x8]; // 0x4d8(0x08)

	void SetThreatLevelFillAmount(float Value); // Function Scavenger.S_WidgetThreatIndicator.SetThreatLevelFillAmount // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetThreatLevel(enum class ES_ThreatLevel Level); // Function Scavenger.S_WidgetThreatIndicator.SetThreatLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetThreatLevelFillAmount(); // Function Scavenger.S_WidgetThreatIndicator.GetThreatLevelFillAmount // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	enum class ES_ThreatLevel GetThreatLevel(); // Function Scavenger.S_WidgetThreatIndicator.GetThreatLevel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTimedInteractionPanel
// Size: 0x528 (Inherited: 0x500)
struct US_WidgetTimedInteractionPanel : US_WidgetTimedInteraction {
	struct FDataTableRowHandle InteractionTextFormat; // 0x500(0x10)
	struct US_RichTextBlock* InteractionTimerRichText; // 0x510(0x08)
	struct US_WidgetCommonProgressBar* InteractionProgress; // 0x518(0x08)
	struct UWidgetAnimation* AdsFadeAnim; // 0x520(0x08)

	void HandleOnAdsUpdated(bool isInAds); // Function Scavenger.S_WidgetTimedInteractionPanel.HandleOnAdsUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetTimedInteractionNavMarker
// Size: 0x560 (Inherited: 0x500)
struct US_WidgetTimedInteractionNavMarker : US_WidgetTimedInteraction {
	struct FDataTableRowHandle DisplayNameFormat; // 0x500(0x10)
	struct FDataTableRowHandle TimerFormat; // 0x510(0x10)
	struct FDataTableRowHandle DistanceFormat; // 0x520(0x10)
	struct UMaterialInterface* FillMaterial; // 0x530(0x08)
	struct US_RichTextBlock* DisplayNameRichText; // 0x538(0x08)
	struct US_RichTextBlock* InteractionTimerRichText; // 0x540(0x08)
	struct UImage* FillImage; // 0x548(0x08)
	struct US_RichTextBlock* DistanceRichText; // 0x550(0x08)
	struct UMaterialInstanceDynamic* m_fillMaterial; // 0x558(0x08)
};

// Class Scavenger.S_WidgetVehicleTray
// Size: 0x848 (Inherited: 0x4b8)
struct US_WidgetVehicleTray : US_WidgetMinimal {
	float LowHealthThreshold; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct FProgressBarStyle LowHealthStyle; // 0x4c0(0x1a0)
	struct FProgressBarStyle DefaultHealthStyle; // 0x660(0x1a0)
	struct US_WidgetCommonProgressBar* VehicleHealthBar; // 0x800(0x08)
	struct US_WidgetCircularFill* ExitVehicleFill; // 0x808(0x08)
	struct US_UMGCommonKey* ExitVehicleKey; // 0x810(0x08)
	char pad_818[0x8]; // 0x818(0x08)
	struct AS_VehiclePawn* m_currentVehicle; // 0x820(0x08)
	struct US_StatsComponent* m_statComponent; // 0x828(0x08)
	struct TArray<struct USC_Seat*> m_vehicleSeats; // 0x830(0x10)
	char pad_840[0x8]; // 0x840(0x08)

	void VehicleExited(); // Function Scavenger.S_WidgetVehicleTray.VehicleExited // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void VehicleEntered(struct AS_VehiclePawn* Vehicle); // Function Scavenger.S_WidgetVehicleTray.VehicleEntered // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleSimpleStatChanged(enum class ES_StatType StatType, float OldStatValue, float StatValueChange, float NewStatValue); // Function Scavenger.S_WidgetVehicleTray.HandleSimpleStatChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnInputTypeChanged(bool usingGamepad); // Function Scavenger.S_WidgetVehicleTray.HandleOnInputTypeChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleExitVehicleInteractionProgressChanged(float NewValue); // Function Scavenger.S_WidgetVehicleTray.HandleExitVehicleInteractionProgressChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
	int32_t GetVehicleMaxHealth(); // Function Scavenger.S_WidgetVehicleTray.GetVehicleMaxHealth // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetVehicleCurrentHealth(); // Function Scavenger.S_WidgetVehicleTray.GetVehicleCurrentHealth // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_PlayerState* GetOccupantPlayerState(int32_t seatIndex); // Function Scavenger.S_WidgetVehicleTray.GetOccupantPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void GetOccupantDisplayName(int32_t seatIndex, struct FText OutText, bool OutTextFound); // Function Scavenger.S_WidgetVehicleTray.GetOccupantDisplayName // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetHealthPercentage(); // Function Scavenger.S_WidgetVehicleTray.GetHealthPercentage // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct AS_VehiclePawn* GetCurrentVehicle(); // Function Scavenger.S_WidgetVehicleTray.GetCurrentVehicle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetVideoSettingsPanel
// Size: 0x608 (Inherited: 0x508)
struct US_WidgetVideoSettingsPanel : US_WidgetGenericSettingsPanel {
	struct TMap<struct FName, struct US_WidgetGenericSettingsModifier*> Modifiers; // 0x508(0x50)
	char pad_558[0x8]; // 0x558(0x08)
	struct US_WidgetMessagePrompt* MessagePromptType; // 0x560(0x08)
	struct FText AcceptConfirmationText; // 0x568(0x18)
	struct FText RejectConfirmationText; // 0x580(0x18)
	char pad_598[0x8]; // 0x598(0x08)
	struct TArray<struct FIntPoint> SupportedResolutions; // 0x5a0(0x10)
	char pad_5B0[0x10]; // 0x5b0(0x10)
	struct TArray<struct FIntPoint> SupportedWindowedResolutions; // 0x5c0(0x10)
	char pad_5D0[0x20]; // 0x5d0(0x20)
	struct US_WidgetMessagePrompt* ResolutionConfirmationMessagePromptType; // 0x5f0(0x08)
	char pad_5F8[0x10]; // 0x5f8(0x10)

	void ResetQualityToAuto(); // Function Scavenger.S_WidgetVideoSettingsPanel.ResetQualityToAuto // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void RegisterModifier(struct FName InName, struct US_WidgetGenericSettingsModifier* InModifier); // Function Scavenger.S_WidgetVideoSettingsPanel.RegisterModifier // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void OnRHISettingRejected(); // Function Scavenger.S_WidgetVideoSettingsPanel.OnRHISettingRejected // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnRHISettingAccepted(); // Function Scavenger.S_WidgetVideoSettingsPanel.OnRHISettingAccepted // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnResolutionConfirmationPromptConfirmed(); // Function Scavenger.S_WidgetVideoSettingsPanel.OnResolutionConfirmationPromptConfirmed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void OnResolutionConfirmationPromptCanceled(); // Function Scavenger.S_WidgetVideoSettingsPanel.OnResolutionConfirmationPromptCanceled // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	bool IsWritingToModifiers(); // Function Scavenger.S_WidgetVideoSettingsPanel.IsWritingToModifiers // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void HandleVideoSettingChanged(struct FName InModifierName); // Function Scavenger.S_WidgetVideoSettingsPanel.HandleVideoSettingChanged // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleRevertSettings(); // Function Scavenger.S_WidgetVideoSettingsPanel.HandleRevertSettings // (Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void HandleResetSettings(); // Function Scavenger.S_WidgetVideoSettingsPanel.HandleResetSettings // (Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
	void FillWidgetValuesFromSettings(); // Function Scavenger.S_WidgetVideoSettingsPanel.FillWidgetValuesFromSettings // (Final|Native|Protected|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetVoiceActivityButton
// Size: 0x81c8 (Inherited: 0x8188)
struct US_WidgetVoiceActivityButton : US_WidgetCommonScavengerButton {
	float TalkingOpacity; // 0x8188(0x04)
	float NotTalkingOpacity; // 0x818c(0x04)
	struct UTexture2D* MutedIcon; // 0x8190(0x08)
	struct UTexture2D* TalkingIcon; // 0x8198(0x08)
	struct UTexture2D* NotTalkingIcon; // 0x81a0(0x08)
	struct UImage* SpeakerIcon; // 0x81a8(0x08)
	struct FString m_currentPlayerId; // 0x81b0(0x10)
	char pad_81C0[0x8]; // 0x81c0(0x08)

	void HandleOnSelfMuteUpdated(bool bIsMuted); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnSelfMuteUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerTalkingUpdated(struct FString ChannelName, struct FString PlayerId, bool bIsTalking); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnPlayerTalkingUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerRemoved(struct FString ChannelName, struct FString PlayerId); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnPlayerRemoved // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerMuteUpdated(struct FString ChannelName, struct FString PlayerId, bool bIsMuted); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnPlayerMuteUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnPlayerAdded(struct FString ChannelName, struct FString PlayerId); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnPlayerAdded // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void HandleOnActiveClicked(struct US_WidgetCommonScavengerButton* Button); // Function Scavenger.S_WidgetVoiceActivityButton.HandleOnActiveClicked // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetWaypoint
// Size: 0x5c0 (Inherited: 0x5a8)
struct US_WidgetWaypoint : US_HUDPingItem {
	struct FVector IconOffset; // 0x5a8(0x0c)
	int32_t DistanceThreshold; // 0x5b4(0x04)
	float FadeInterpSpeed; // 0x5b8(0x04)
	bool bIsFadeOutEnabled; // 0x5bc(0x01)
	char pad_5BD[0x3]; // 0x5bd(0x03)

	void SetWaypointLocation(struct FVector Location); // Function Scavenger.S_WidgetWaypoint.SetWaypointLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetFadeOutEnabled(bool bInIsFadeOutEnabled); // Function Scavenger.S_WidgetWaypoint.SetFadeOutEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	struct FVector GetWaypointLocationWithOffset(); // Function Scavenger.S_WidgetWaypoint.GetWaypointLocationWithOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct FVector GetWaypointLocation(); // Function Scavenger.S_WidgetWaypoint.GetWaypointLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetWeaponSight
// Size: 0x4b8 (Inherited: 0x4b8)
struct US_WidgetWeaponSight : US_WidgetMinimal {

	void HandleADSUpdated(bool isInAds); // Function Scavenger.S_WidgetWeaponSight.HandleADSUpdated // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetWeaponItem
// Size: 0x880 (Inherited: 0x880)
struct US_WidgetWeaponItem : US_WidgetEquippableItem {

	void NotifyFilledSlotPinged(); // Function Scavenger.S_WidgetWeaponItem.NotifyFilledSlotPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
	void NotifyEmptySlotPinged(); // Function Scavenger.S_WidgetWeaponItem.NotifyEmptySlotPinged // (Event|Public|BlueprintEvent) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WidgetWeaponsPanel
// Size: 0x908 (Inherited: 0x908)
struct US_WidgetWeaponsPanel : US_WidgetEquippableItemsPanel {

	void HandleWeaponSlotSelectionChanged(enum class ES_WeaponSlot previousWeaponSlot, enum class ES_WeaponSlot currentWeaponSlot); // Function Scavenger.S_WidgetWeaponsPanel.HandleWeaponSlotSelectionChanged // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WindTurbineActor
// Size: 0x2a0 (Inherited: 0x298)
struct AS_WindTurbineActor : AStaticMeshActor {
	struct US_WindTurbineComponent* WindTurbineComponent; // 0x298(0x08)

	struct US_WindTurbineComponent* GetWindTurbineComponent(); // Function Scavenger.S_WindTurbineActor.GetWindTurbineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WindTurbineComponent
// Size: 0x1c0 (Inherited: 0xb0)
struct US_WindTurbineComponent : UActorComponent {
	struct USceneComponent* Target; // 0xb0(0x08)
	char bTeleportPhysicsState : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float Speed; // 0xbc(0x04)
	char bUseWindSpeedCurve : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FRuntimeFloatCurve WindSpeedCurve; // 0xc8(0x88)
	struct FVector ForwardAxis; // 0x150(0x0c)
	char pad_15C[0x24]; // 0x15c(0x24)
	float MassScale; // 0x180(0x04)
	char pad_184[0x3c]; // 0x184(0x3c)

	void WindUpdate(); // Function Scavenger.S_WindTurbineComponent.WindUpdate // (Final|Native|Private) // @ game+0xffff8008e4a10000
	void TimeOfDayTick(float DeltaTime); // Function Scavenger.S_WindTurbineComponent.TimeOfDayTick // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetForwardAxis(struct FVector Axis); // Function Scavenger.S_WindTurbineComponent.SetForwardAxis // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetMass(); // Function Scavenger.S_WindTurbineComponent.GetMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetCircumference(); // Function Scavenger.S_WindTurbineComponent.GetCircumference // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void CalculateTargetProperties(); // Function Scavenger.S_WindTurbineComponent.CalculateTargetProperties // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.S_WorldComposer
// Size: 0x28 (Inherited: 0x28)
struct US_WorldComposer : UBlueprintFunctionLibrary {

	bool IsLocationVisible(struct UObject* contextObject, struct FVector Location, float Radius); // Function Scavenger.S_WorldComposer.IsLocationVisible // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool IsLocationLoaded(struct UObject* contextObject, struct FVector Location, float Radius); // Function Scavenger.S_WorldComposer.IsLocationLoaded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	bool HasWorldComposition(struct UObject* contextObject); // Function Scavenger.S_WorldComposer.HasWorldComposition // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
	struct TArray<struct FString> GetLevelsContainingLocation(struct UObject* contextObject, struct FVector Location, float Radius); // Function Scavenger.S_WorldComposer.GetLevelsContainingLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SAN_UseItem
// Size: 0x48 (Inherited: 0x40)
struct USAN_UseItem : US_AnimNotifyBase {
	enum class ES_UseItemNotify NotifyType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Scavenger.SAN_MeleeEvent
// Size: 0xa8 (Inherited: 0x48)
struct USAN_MeleeEvent : USAN_AttackEvent {
	struct FFloatInterval PitchInterval; // 0x48(0x08)
	float MinAngle; // 0x50(0x04)
	float MaxAngle; // 0x54(0x04)
	float ForwardDistance; // 0x58(0x04)
	float AIForwardDistanceScalar; // 0x5c(0x04)
	float HalfHeight; // 0x60(0x04)
	struct FVector StartingOffset; // 0x64(0x0c)
	float DamageMultiplierOnNONCharacter; // 0x70(0x04)
	float DamageMultiplier; // 0x74(0x04)
	struct FVector MeleeDirectionOverride; // 0x78(0x0c)
	bool IgnorePitch; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	struct UAnimMontage* RecoilMontage; // 0x88(0x08)
	enum class ES_TriggerType OverrideTriggerSettings; // 0x90(0x01)
	bool UsePushBackForce; // 0x91(0x01)
	char pad_92[0x2]; // 0x92(0x02)
	float PushBackForceGround; // 0x94(0x04)
	float PushBackTimeGround; // 0x98(0x04)
	float PushBackForceAir; // 0x9c(0x04)
	float PushBackTimeAir; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Scavenger.SAN_ReadyEvent
// Size: 0x48 (Inherited: 0x40)
struct USAN_ReadyEvent : USAN_WeaponEvent {
	enum class ES_AnimReadyEvent EventType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float SocketBlendTime; // 0x44(0x04)
};

// Class Scavenger.SAN_ReloadEvent
// Size: 0x58 (Inherited: 0x40)
struct USAN_ReloadEvent : USAN_WeaponEvent {
	enum class ES_AnimReloadEventType ReloadEventType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct UAnimMontage* NextCharacterMontage; // 0x48(0x08)
	struct UAnimMontage* NextWeaponMontage; // 0x50(0x08)
};

// Class Scavenger.SAN_StowEvent
// Size: 0x48 (Inherited: 0x40)
struct USAN_StowEvent : USAN_WeaponEvent {
	enum class ES_AnimStowEvent EventType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float SocketBlendTime; // 0x44(0x04)
};

// Class Scavenger.SAN_WindupFullMarker
// Size: 0x40 (Inherited: 0x40)
struct USAN_WindupFullMarker : USAN_WeaponEvent {
};

// Class Scavenger.SANS_HideWeapon
// Size: 0x30 (Inherited: 0x30)
struct USANS_HideWeapon : US_AnimNotifyStateBase {
};

// Class Scavenger.SANS_LockActions
// Size: 0x48 (Inherited: 0x30)
struct USANS_LockActions : US_AnimNotifyStateBase {
	bool bLockAllActions; // 0x30(0x01)
	bool bInterruptAllActiveActions; // 0x31(0x01)
	bool bCancelAllQueuedActions; // 0x32(0x01)
	char pad_33[0x5]; // 0x33(0x05)
	struct TArray<struct FS_ActionLockInstruction> ActionsToLock; // 0x38(0x10)
};

// Class Scavenger.SANS_LockRotation
// Size: 0x30 (Inherited: 0x30)
struct USANS_LockRotation : US_AnimNotifyStateBase {
};

// Class Scavenger.SANS_MeleeParticleTrail
// Size: 0x30 (Inherited: 0x30)
struct USANS_MeleeParticleTrail : US_AnimNotifyStateBase {
};

// Class Scavenger.SC_CollisionDamageReciver
// Size: 0xd8 (Inherited: 0xb0)
struct USC_CollisionDamageReciver : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UCurveFloat* DamageCurve; // 0xb8(0x08)
	struct UCurveFloat* FallDamageCurve; // 0xc0(0x08)
	bool FrendlyDamage; // 0xc8(0x01)
	bool NeutralDamage; // 0xc9(0x01)
	bool HostileDamage; // 0xca(0x01)
	char pad_CB[0x1]; // 0xcb(0x01)
	float MinSpeedForCollisionDamage; // 0xcc(0x04)
	float ClampedCollisionDamageResetTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void OnComponentHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function Scavenger.SC_CollisionDamageReciver.OnComponentHitCallback // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0xffff8008e4a10000
	void OnCharacterLanded(struct FHitResult Hit); // Function Scavenger.SC_CollisionDamageReciver.OnCharacterLanded // (Final|Native|Protected|HasOutParms) // @ game+0xffff8008e4a10000
	float CalculateCollisionDamage(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit, float collisionSpeed, float collisionDamage); // Function Scavenger.SC_CollisionDamageReciver.CalculateCollisionDamage // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
	float CalculateCharacterFallDamage(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit, float collisionSpeed, float collisionDamage); // Function Scavenger.SC_CollisionDamageReciver.CalculateCharacterFallDamage // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SC_PhysicsActionBase
// Size: 0x148 (Inherited: 0xb0)
struct USC_PhysicsActionBase : UActorComponent {
	char pad_B0[0x90]; // 0xb0(0x90)
	float blendFactor; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)

	void SetBodyComponent(struct UPrimitiveComponent* Body); // Function Scavenger.SC_PhysicsActionBase.SetBodyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBlendFactor(float blendFactor); // Function Scavenger.SC_PhysicsActionBase.SetBlendFactor // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SC_PIDSpringArm
// Size: 0x2b0 (Inherited: 0x280)
struct USC_PIDSpringArm : USpringArmComponent {
	float ProportionalFactor; // 0x280(0x04)
	float IntegralFactor; // 0x284(0x04)
	float DerivativeFactor; // 0x288(0x04)
	char pad_28C[0x24]; // 0x28c(0x24)
};

// Class Scavenger.SC_PrimitiveNetCode
// Size: 0x140 (Inherited: 0xb0)
struct USC_PrimitiveNetCode : UActorComponent {
	struct FPrimitiveState m_repState; // 0xb0(0x50)
	char pad_100[0x18]; // 0x100(0x18)
	enum class ES_PrimitiveNetCode NetCodeMode; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float LinearMinErrorForCorrection; // 0x11c(0x04)
	float LinearMinErrorForSmoothing; // 0x120(0x04)
	float LinearSmoothForce; // 0x124(0x04)
	float AngularMinErrorForCorrection; // 0x128(0x04)
	float AngularMinErrorForSmoothing; // 0x12c(0x04)
	float AngularSmoothForce; // 0x130(0x04)
	float TeleportationInterpSpeed; // 0x134(0x04)
	char pad_138[0x8]; // 0x138(0x08)

	void OnRep_State(); // Function Scavenger.SC_PrimitiveNetCode.OnRep_State // (Final|Native|Private) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SC_SeatEntryPoint
// Size: 0x480 (Inherited: 0x470)
struct USC_SeatEntryPoint : USphereComponent {
	char pad_470[0x8]; // 0x470(0x08)
	struct FName SeatComponentName; // 0x478(0x08)
};

// Class Scavenger.SC_Seat
// Size: 0x2f0 (Inherited: 0x200)
struct USC_Seat : USceneComponent {
	struct TWeakObjectPtr<struct APawn> m_seatedPawn; // 0x1f8(0x08)
	char pad_208[0x10]; // 0x208(0x10)
	struct FMulticastInlineDelegate OnEnter; // 0x218(0x10)
	struct FMulticastInlineDelegate OnExit; // 0x228(0x10)
	float ExitVehicleInteractionTime; // 0x238(0x04)
	struct FVector ExitPointOffset; // 0x23c(0x0c)
	float TerrainFitDistance; // 0x248(0x04)
	float ExitFudgeDistanceAboveTerrain; // 0x24c(0x04)
	float CameraRotationClamp; // 0x250(0x04)
	bool bHideCharacter; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)
	struct FS_InteractableData InteractableDataEnter; // 0x258(0x90)
	enum class ES_SeatType SeatType; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	int32_t seatIndex; // 0x2ec(0x04)

	void OnSeatedPawnDestroyed(struct AActor* DestroyedActor); // Function Scavenger.SC_Seat.OnSeatedPawnDestroyed // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	void NotifyReplicatedSeatedPawn(); // Function Scavenger.SC_Seat.NotifyReplicatedSeatedPawn // (Final|Native|Protected) // @ game+0xffff8008e4a10000
	enum class ES_SeatType GetType(); // Function Scavenger.SC_Seat.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	int32_t GetSeatIndex(); // Function Scavenger.SC_Seat.GetSeatIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct APawn* GetSeatedPawn(); // Function Scavenger.SC_Seat.GetSeatedPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ExitSeat(bool forceExit); // Function Scavenger.SC_Seat.ExitSeat // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void EnterSeat(struct AController* Controller); // Function Scavenger.SC_Seat.EnterSeat // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SC_SkeletalMeshComponent
// Size: 0xf70 (Inherited: 0xee0)
struct USC_SkeletalMeshComponent : USkeletalMeshComponent {
	enum class ES_SkeletalMeshTickCondition TickCondition; // 0xee0(0x01)
	char pad_EE1[0x7]; // 0xee1(0x07)
	struct TMap<struct FName, struct FS_AimAssistSphereConfig> BoneNameToAimAssistSphereConfig; // 0xee8(0x50)
	bool ShouldCreatePhysicsStateOnDedicatedServer; // 0xf38(0x01)
	bool bAlwaysRenderStatic; // 0xf39(0x01)
	char pad_F3A[0x6]; // 0xf3a(0x06)
	struct TArray<float> lodAnimSkipScreenRadiusDistanceThresholds; // 0xf40(0x10)
	float LodAnimSkipScale; // 0xf50(0x04)
	float GravityScale; // 0xf54(0x04)
	char pad_F58[0x18]; // 0xf58(0x18)
};

// Class Scavenger.SC_SnowRacerMovement
// Size: 0x318 (Inherited: 0x148)
struct USC_SnowRacerMovement : USC_PhysicsActionBase {
	struct FS_SecondaryState SecondaryState; // 0x148(0x38)
	struct FS_PrimaryState m_primaryState; // 0x180(0x30)
	char pad_1B0[0x48]; // 0x1b0(0x48)
	struct TArray<struct FS_HoverSpring> HoverSprings; // 0x1f8(0x10)
	float HoverForceMultiplier; // 0x208(0x04)
	float HoverSpringStrengthMultiplier; // 0x20c(0x04)
	float HoverSpringDampingMultiplier; // 0x210(0x04)
	float VerticalThrusterForce; // 0x214(0x04)
	float DeltaSpringHeightFromBoost; // 0x218(0x04)
	float SpringStrengthMultiFromBoost; // 0x21c(0x04)
	float SpringDampingMultiFromBoost; // 0x220(0x04)
	char pad_224[0x4]; // 0x224(0x04)
	struct TArray<struct FS_FrictionPoint> FrictionPoints; // 0x228(0x10)
	float PitchDamping; // 0x238(0x04)
	float RollDamping; // 0x23c(0x04)
	float YawDamping; // 0x240(0x04)
	float ForwardDamping; // 0x244(0x04)
	float UpDamping; // 0x248(0x04)
	float SideDamping; // 0x24c(0x04)
	struct UCurveFloat* EngineTorque; // 0x250(0x08)
	float EngineChokeSpeed; // 0x258(0x04)
	float ReverseEngineChokeSpeed; // 0x25c(0x04)
	float BoostEngineChokeSpeed; // 0x260(0x04)
	float EngineTorqueMultiplier; // 0x264(0x04)
	float EngineFwdOffset; // 0x268(0x04)
	float InAirMulti; // 0x26c(0x04)
	float EnginePitchFadeOutStart; // 0x270(0x04)
	float EnginePitchFadeOutRange; // 0x274(0x04)
	struct UCurveFloat* BoostMultiCurve; // 0x278(0x08)
	bool BoostActivateOnlyOnButtonPress; // 0x280(0x01)
	bool BoostOnlyDuringForwardVelocity; // 0x281(0x01)
	bool RestrictBoostTo2D; // 0x282(0x01)
	bool bLimitedBoost; // 0x283(0x01)
	float MaxBoostFuel; // 0x284(0x04)
	float MinBoostFuelToActivate; // 0x288(0x04)
	float MinBoostTime; // 0x28c(0x04)
	float BoostActivationCost; // 0x290(0x04)
	float BoostCostPerSecond; // 0x294(0x04)
	float DelayBeforeBoostCost; // 0x298(0x04)
	float BoostRecoveryDelay; // 0x29c(0x04)
	float BoostRecoveryRate; // 0x2a0(0x04)
	float StrafeSpeed; // 0x2a4(0x04)
	float StrafeStrength; // 0x2a8(0x04)
	float StrafeFadeOutSpeed; // 0x2ac(0x04)
	float StrafeFadeOutRange; // 0x2b0(0x04)
	bool bCameraRelativeStrafe; // 0x2b4(0x01)
	enum class ES_SteeringMode SteeringMode; // 0x2b5(0x01)
	char pad_2B6[0x2]; // 0x2b6(0x02)
	float HybridSteeringStartFadeSpeed; // 0x2b8(0x04)
	float HybridSteeringFadeSpeedRange; // 0x2bc(0x04)
	float BoostSteeringMulti; // 0x2c0(0x04)
	bool HybridSteeringNoGhostSteeringInAir; // 0x2c4(0x01)
	bool HybridSteeringNoGhostSteeringWithThrottle; // 0x2c5(0x01)
	bool SteeringFrictionWithNoThrottle; // 0x2c6(0x01)
	char pad_2C7[0x1]; // 0x2c7(0x01)
	float SteerClampAngleAtLowSpeed; // 0x2c8(0x04)
	float SteerClampAngleAtMaxSpeed; // 0x2cc(0x04)
	float SpeedForMaxSteerClamp; // 0x2d0(0x04)
	float ReverseSteerMulti; // 0x2d4(0x04)
	float WarthogSteeringMulti; // 0x2d8(0x04)
	float SpeedToThrottle; // 0x2dc(0x04)
	struct UCurveFloat* WarthogSteerAngleCurve; // 0x2e0(0x08)
	bool RestrictWarthogSteeringTo2D; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	float GhostSteerSmoothTime; // 0x2ec(0x04)
	float GhostMaxSteerSpeed; // 0x2f0(0x04)
	float GhostSteeringDamping; // 0x2f4(0x04)
	float GhostSteeringMulti; // 0x2f8(0x04)
	float PitchAutoBalanceStrength; // 0x2fc(0x04)
	float PitchAutoBalanceDamping; // 0x300(0x04)
	float RollAutoBalanceStrength; // 0x304(0x04)
	float RollAutoBalanceDamping; // 0x308(0x04)
	float InAirPitchForce; // 0x30c(0x04)
	float InAirRollForce; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)

	void SetWarthogSteeringMulti(float multi); // Function Scavenger.SC_SnowRacerMovement.SetWarthogSteeringMulti // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetVerticalThrottle(float Val); // Function Scavenger.SC_SnowRacerMovement.SetVerticalThrottle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetUserInputEnabled(bool Val); // Function Scavenger.SC_SnowRacerMovement.SetUserInputEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetThrottle(float Val); // Function Scavenger.SC_SnowRacerMovement.SetThrottle // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetStrafe(float Val); // Function Scavenger.SC_SnowRacerMovement.SetStrafe // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetRollInput(float Val); // Function Scavenger.SC_SnowRacerMovement.SetRollInput // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetPitchInput(float Val); // Function Scavenger.SC_SnowRacerMovement.SetPitchInput // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetParkingMode(bool Val); // Function Scavenger.SC_SnowRacerMovement.SetParkingMode // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetHoverForceMultiplier(float Val); // Function Scavenger.SC_SnowRacerMovement.SetHoverForceMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetGhostSteeringMulti(float multi); // Function Scavenger.SC_SnowRacerMovement.SetGhostSteeringMulti // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEngineTorqueMultiplier(float multi); // Function Scavenger.SC_SnowRacerMovement.SetEngineTorqueMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetEngineChokeSpeed(float chokeSpeed); // Function Scavenger.SC_SnowRacerMovement.SetEngineChokeSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetDesiredHeading(struct FRotator rot); // Function Scavenger.SC_SnowRacerMovement.SetDesiredHeading // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBoostEngineChokeSpeed(float chokeSpeed); // Function Scavenger.SC_SnowRacerMovement.SetBoostEngineChokeSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SetBoost(float Val); // Function Scavenger.SC_SnowRacerMovement.SetBoost // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SendInputToServer(struct FS_SnowRacerInputState Input); // Function Scavenger.SC_SnowRacerMovement.SendInputToServer // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	float GetWarthogSteeringMulti(); // Function Scavenger.SC_SnowRacerMovement.GetWarthogSteeringMulti // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetVerticalThrusterActive(); // Function Scavenger.SC_SnowRacerMovement.GetVerticalThrusterActive // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	bool GetUserInputEnabled(); // Function Scavenger.SC_SnowRacerMovement.GetUserInputEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetParkingMode(); // Function Scavenger.SC_SnowRacerMovement.GetParkingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	struct FS_SnowRacerInputState GetInputState(); // Function Scavenger.SC_SnowRacerMovement.GetInputState // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	float GetHoverForceMultiplier(); // Function Scavenger.SC_SnowRacerMovement.GetHoverForceMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetGhostSteeringMulti(); // Function Scavenger.SC_SnowRacerMovement.GetGhostSteeringMulti // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetEngineTorqueMultiplier(); // Function Scavenger.SC_SnowRacerMovement.GetEngineTorqueMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetEngineChokeSpeed(); // Function Scavenger.SC_SnowRacerMovement.GetEngineChokeSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBoostTank(); // Function Scavenger.SC_SnowRacerMovement.GetBoostTank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	float GetBoostEngineChokeSpeed(); // Function Scavenger.SC_SnowRacerMovement.GetBoostEngineChokeSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetBoostCanActivate(); // Function Scavenger.SC_SnowRacerMovement.GetBoostCanActivate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	bool GetBoostActive(); // Function Scavenger.SC_SnowRacerMovement.GetBoostActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xffff8008e4a10000
	void ClearInput(); // Function Scavenger.SC_SnowRacerMovement.ClearInput // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

// Class Scavenger.SmoothSync
// Size: 0x3b0 (Inherited: 0xb0)
struct USmoothSync : UActorComponent {
	char pad_B0[0x58]; // 0xb0(0x58)
	bool ClientAuthoritativeMovement; // 0x108(0x01)
	bool ZeroVelociitesOnTooFarExtrapolation; // 0x109(0x01)
	char pad_10A[0x36]; // 0x10a(0x36)
	float interpolationBackTime; // 0x140(0x04)
	enum class ExtrapolationMode ExtrapolationMode; // 0x144(0x01)
	bool useExtrapolationTimeLimit; // 0x145(0x01)
	char pad_146[0x2]; // 0x146(0x02)
	float extrapolationTimeLimit; // 0x148(0x04)
	bool useExtrapolationDistanceLimit; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	float extrapolationDistanceLimit; // 0x150(0x04)
	float sendPositionThreshold; // 0x154(0x04)
	float sendRotationThreshold; // 0x158(0x04)
	float sendScaleThreshold; // 0x15c(0x04)
	float sendVelocityThreshold; // 0x160(0x04)
	float sendAngularVelocityThreshold; // 0x164(0x04)
	float receivedPositionThreshold; // 0x168(0x04)
	float receivedRotationThreshold; // 0x16c(0x04)
	float positionSnapThreshold; // 0x170(0x04)
	float rotationSnapThreshold; // 0x174(0x04)
	float scaleSnapThreshold; // 0x178(0x04)
	float timeSmoothing; // 0x17c(0x04)
	float positionLerpSpeed; // 0x180(0x04)
	float rotationLerpSpeed; // 0x184(0x04)
	float scaleLerpSpeed; // 0x188(0x04)
	enum class SyncMode syncPosition; // 0x18c(0x01)
	enum class SyncMode syncRotation; // 0x18d(0x01)
	enum class SyncMode syncScale; // 0x18e(0x01)
	enum class SyncMode syncVelocity; // 0x18f(0x01)
	enum class SyncMode syncAngularVelocity; // 0x190(0x01)
	bool syncMovementMode; // 0x191(0x01)
	bool isPositionCompressed; // 0x192(0x01)
	bool isRotationCompressed; // 0x193(0x01)
	bool isScaleCompressed; // 0x194(0x01)
	bool isVelocityCompressed; // 0x195(0x01)
	bool isAngularVelocityCompressed; // 0x196(0x01)
	char pad_197[0x1]; // 0x197(0x01)
	float sendRate; // 0x198(0x04)
	bool isUsingOriginRebasing; // 0x19c(0x01)
	bool alwaysSendOrigin; // 0x19d(0x01)
	bool syncOwnershipChange; // 0x19e(0x01)
	char pad_19F[0x99]; // 0x19f(0x99)
	struct USceneComponent* realComponentToSync; // 0x238(0x08)
	char pad_240[0x18]; // 0x240(0x18)
	float InterpolationTime; // 0x258(0x04)
	char pad_25C[0x134]; // 0x25c(0x134)
	float atRestPositionThreshold; // 0x390(0x04)
	float atRestRotationThreshold; // 0x394(0x04)
	char pad_398[0x18]; // 0x398(0x18)

	void teleport(); // Function Scavenger.SmoothSync.teleport // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void SmoothSyncTeleportServerToClients(struct FVector Position, struct FVector Rotation, struct FVector Scale, float tempOwnerTime); // Function Scavenger.SmoothSync.SmoothSyncTeleportServerToClients // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void SmoothSyncTeleportClientToServer(struct FVector Position, struct FVector Rotation, struct FVector Scale, float tempOwnerTime); // Function Scavenger.SmoothSync.SmoothSyncTeleportClientToServer // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0xffff8008e4a10000
	void SmoothSyncEnableServerToClients(bool Enable); // Function Scavenger.SmoothSync.SmoothSyncEnableServerToClients // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void SmoothSyncEnableClientToServer(bool Enable); // Function Scavenger.SmoothSync.SmoothSyncEnableClientToServer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void setSceneComponentToSync(struct USceneComponent* theComponent); // Function Scavenger.SmoothSync.setSceneComponentToSync // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ServerSendsTransformToEveryone(struct TArray<char> Value); // Function Scavenger.SmoothSync.ServerSendsTransformToEveryone // (Net|Native|Event|NetMulticast|Public|NetValidate) // @ game+0xffff8008e4a10000
	void forceStateSendNextFrame(); // Function Scavenger.SmoothSync.forceStateSendNextFrame // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void enableSmoothSync(bool Enable); // Function Scavenger.SmoothSync.enableSmoothSync // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
	void ClientSendsTransformToServer(struct TArray<char> Value); // Function Scavenger.SmoothSync.ClientSendsTransformToServer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0xffff8008e4a10000
	void clearBuffer(); // Function Scavenger.SmoothSync.clearBuffer // (Final|Native|Public|BlueprintCallable) // @ game+0xffff8008e4a10000
};

